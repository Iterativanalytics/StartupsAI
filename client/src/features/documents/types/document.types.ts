import React from 'react';

// Base document types
export type DocumentType = 
  | 'business-plan' 
  | 'proposal' 
  | 'pitch-deck' 
  | 'application' 
  | 'contract' 
  | 'report' 
  | 'infographic'
  | 'other';

export type DocumentStatus = 
  | 'draft' 
  | 'review' 
  | 'approved' 
  | 'published' 
  | 'archived' 
  | 'deleted';

export type DocumentVisibility = 
  | 'private' 
  | 'team' 
  | 'organization' 
  | 'public';

export type DocumentComplexity = 
  | 'low' 
  | 'medium' 
  | 'high';

export type CreationMethod = 
  | 'upload' 
  | 'manual' 
  | 'ai-generated' 
  | 'hybrid';

// Base document interface
export interface BaseDocument {
  id: string;
  type: DocumentType;
  title: string;
  description?: string;
  content: DocumentContent;
  metadata: DocumentMetadata;
  version: DocumentVersion;
  permissions: DocumentPermissions;
  collaboration: CollaborationState;
  ai: AIState;
  workflow?: WorkflowState;
  createdAt: Date;
  updatedAt: Date;
  createdBy: string;
  lastModifiedBy: string;
}

// Document content (flexible structure)
export interface DocumentContent {
  format: 'json' | 'markdown' | 'html' | 'structured';
  data: any; // Type-specific content
  sections?: DocumentSection[];
  attachments?: Attachment[];
}

export interface DocumentSection {
  id: string;
  title: string;
  content: string;
  order: number;
  required: boolean;
  aiGenerated?: boolean;
  wordCount?: number;
  lastModified?: Date;
}

export interface Attachment {
  id: string;
  name: string;
  type: string;
  size: number;
  url: string;
  uploadedAt: Date;
  uploadedBy: string;
}

// Document metadata
export interface DocumentMetadata {
  category: string;
  tags: string[];
  status: DocumentStatus;
  visibility: DocumentVisibility;
  language: string;
  wordCount: number;
  pageCount: number;
  readingTime: number;
  complexity: DocumentComplexity;
  industry?: string;
  creationMethod: CreationMethod;
  sourceFile?: UploadedFile;
  customFields?: Record<string, any>;
}

export interface UploadedFile {
  originalName: string;
  mimeType: string;
  size: number;
  uploadedAt: Date;
  extractedContent?: boolean;
}

// Version control
export interface DocumentVersion {
  current: string;
  history: VersionHistory[];
  branches?: VersionBranch[];
  locked: boolean;
  lockedBy?: string;
  lockedAt?: Date;
}

export interface VersionHistory {
  version: string;
  timestamp: Date;
  author: string;
  changes: ChangeSet[];
  message?: string;
  snapshot: any;
}

export interface VersionBranch {
  name: string;
  baseVersion: string;
  createdAt: Date;
  createdBy: string;
  merged?: boolean;
  mergedAt?: Date;
  mergedBy?: string;
}

export interface ChangeSet {
  type: 'add' | 'modify' | 'delete';
  path: string;
  oldValue?: any;
  newValue?: any;
  description?: string;
}

// Permissions
export interface DocumentPermissions {
  owner: string;
  editors: string[];
  viewers: string[];
  commenters: string[];
  public: boolean;
  shareLink?: string;
  expiresAt?: Date;
}

// Collaboration state
export interface CollaborationState {
  activeUsers: ActiveUser[];
  comments: Comment[];
  suggestions: Suggestion[];
  mentions: Mention[];
  lastActivity: Date;
}

export interface ActiveUser {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  cursor?: CursorPosition;
  lastSeen: Date;
  permissions: string[];
}

export interface CursorPosition {
  sectionId: string;
  offset: number;
  timestamp: Date;
}

export interface Comment {
  id: string;
  content: string;
  author: string;
  timestamp: Date;
  sectionId?: string;
  resolved: boolean;
  resolvedBy?: string;
  resolvedAt?: Date;
  replies: CommentReply[];
}

export interface CommentReply {
  id: string;
  content: string;
  author: string;
  timestamp: Date;
}

export interface Suggestion {
  id: string;
  type: 'insert' | 'delete' | 'replace';
  content: string;
  author: string;
  timestamp: Date;
  sectionId: string;
  accepted: boolean;
  acceptedBy?: string;
  acceptedAt?: Date;
}

export interface Mention {
  id: string;
  userId: string;
  content: string;
  timestamp: Date;
  read: boolean;
}

// AI state
export interface AIState {
  analyzed: boolean;
  lastAnalyzed?: Date;
  overallScore: number;
  qualityScore: number;
  completenessScore: number;
  readabilityScore: number;
  insights: AIInsight[];
  suggestions: AISuggestion[];
  autoGenerated: boolean;
  aiAssisted: boolean;
  confidence: number;
  generationPrompt?: string;
  aiSections?: string[];
}

export interface AIInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'opportunity' | 'compliance' | 'quality';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  confidence: number;
  category: string;
  sectionId?: string;
  timestamp: Date;
}

export interface AISuggestion {
  id: string;
  type: 'content' | 'structure' | 'style' | 'compliance';
  title: string;
  description: string;
  content: string;
  sectionId?: string;
  priority: 'low' | 'medium' | 'high';
  accepted: boolean;
  acceptedBy?: string;
  acceptedAt?: Date;
  timestamp: Date;
}

// Workflow state
export interface WorkflowState {
  id: string;
  name: string;
  currentStep: string;
  steps: WorkflowStep[];
  status: 'pending' | 'in-progress' | 'completed' | 'cancelled';
  startedAt: Date;
  completedAt?: Date;
}

export interface WorkflowStep {
  id: string;
  name: string;
  type: 'review' | 'approval' | 'signature' | 'notification' | 'ai-analysis';
  assignee: string;
  dueDate: Date;
  completed: boolean;
  completedAt?: Date;
  comments: string[];
  attachments: string[];
  aiInsights?: AIInsight[];
  status: 'pending' | 'in-progress' | 'completed' | 'overdue';
  priority: 'low' | 'medium' | 'high';
}

// Document type definitions
export interface DocumentTypeDefinition {
  type: DocumentType;
  name: string;
  description: string;
  icon: React.ComponentType;
  schema: JSONSchema;
  factory: (data: Partial<BaseDocument>) => BaseDocument;
  validator: (document: BaseDocument) => ValidationResult;
  renderer: React.ComponentType<DocumentRendererProps>;
  editor: React.ComponentType<DocumentEditorProps>;
  templates: DocumentTemplate[];
  aiConfig: AIConfiguration;
  workflowTemplates: WorkflowTemplate[];
  subtypes?: Record<string, DocumentSubtypeDefinition>;
}

export interface DocumentSubtypeDefinition {
  name: string;
  description: string;
  schema: JSONSchema;
  templates: DocumentTemplate[];
  automation: AutomationConfig;
}

export interface JSONSchema {
  type: string;
  properties: Record<string, any>;
  required?: string[];
  additionalProperties?: boolean;
}

export interface ValidationResult {
  valid: boolean;
  errors: string[];
  warnings: string[];
}

export interface DocumentTemplate {
  id: string;
  name: string;
  description: string;
  type: DocumentType;
  subtype?: string;
  content: DocumentContent;
  metadata: Partial<DocumentMetadata>;
  aiConfig?: AIConfiguration;
  workflowTemplate?: string;
  isPublic: boolean;
  createdBy: string;
  createdAt: Date;
  usageCount: number;
  rating: number;
}

export interface AIConfiguration {
  enabled: boolean;
  autoAnalyze: boolean;
  autoSuggest: boolean;
  qualityThreshold: number;
  customPrompts?: Record<string, string>;
  analysisDepth: 'basic' | 'standard' | 'comprehensive';
}

export interface WorkflowTemplate {
  id: string;
  name: string;
  description: string;
  steps: WorkflowStepTemplate[];
  isPublic: boolean;
  createdBy: string;
  createdAt: Date;
}

export interface WorkflowStepTemplate {
  id: string;
  name: string;
  type: 'review' | 'approval' | 'signature' | 'notification' | 'ai-analysis';
  assigneeRole: string;
  dueDateOffset: number; // days from start
  required: boolean;
  parallel: boolean;
  conditions?: WorkflowCondition[];
}

export interface WorkflowCondition {
  field: string;
  operator: 'equals' | 'not_equals' | 'contains' | 'greater_than' | 'less_than';
  value: any;
}

export interface AutomationConfig {
  enabled: boolean;
  autoGenerate: boolean;
  autoAnalyze: boolean;
  autoSuggest: boolean;
  templates: string[];
  rules: AutomationRule[];
}

export interface AutomationRule {
  id: string;
  name: string;
  condition: string;
  action: string;
  enabled: boolean;
}

// Component props
export interface DocumentRendererProps {
  document: BaseDocument;
  mode?: 'view' | 'edit' | 'preview';
  onUpdate?: (updates: Partial<BaseDocument>) => void;
  onComment?: (comment: Comment) => void;
  onSuggest?: (suggestion: Suggestion) => void;
}

export interface DocumentEditorProps {
  document: BaseDocument;
  onSave: (document: BaseDocument) => void;
  onCancel: () => void;
  readOnly?: boolean;
  showAI?: boolean;
  showCollaboration?: boolean;
}

// Search and filtering
export interface DocumentSearchQuery {
  text?: string;
  type?: DocumentType;
  category?: string;
  tags?: string[];
  status?: DocumentStatus;
  createdBy?: string;
  dateRange?: { start: Date; end: Date };
  aiGenerated?: boolean;
  limit?: number;
  offset?: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

export interface DocumentSearchResult {
  documents: BaseDocument[];
  total: number;
  facets: SearchFacets;
  suggestions: string[];
}

export interface SearchFacets {
  types: Record<DocumentType, number>;
  categories: Record<string, number>;
  tags: Record<string, number>;
  statuses: Record<DocumentStatus, number>;
  dateRanges: Record<string, number>;
}

// Analytics
export interface DocumentAnalytics {
  views: number;
  edits: number;
  collaborators: number;
  comments: number;
  suggestions: number;
  lastActivity: Date;
  aiScore: number;
  completionRate: number;
  timeSpent: number;
  shareCount: number;
  downloadCount: number;
}

// Events
export interface DocumentEvent {
  id: string;
  type: 'created' | 'updated' | 'deleted' | 'shared' | 'commented' | 'suggested' | 'approved' | 'rejected';
  documentId: string;
  userId: string;
  timestamp: Date;
  data: any;
}

// Export all types
export * from './ai.types';
export * from './collaboration.types';
export * from './workflow.types';
