import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { 
  Bot, 
  Zap, 
  Target, 
  CheckCircle, 
  Clock, 
  AlertCircle, 
  TrendingUp, 
  FileText, 
  Sparkles, 
  Wand2, 
  Brain, 
  ArrowRight, 
  Copy, 
  Download, 
  Share2, 
  Eye, 
  Edit, 
  Trash2, 
  Plus, 
  Search, 
  Filter, 
  Calendar, 
  Users, 
  DollarSign, 
  Award, 
  Star, 
  BarChart3, 
  MessageSquare, 
  RefreshCw, 
  Settings, 
  ExternalLink,
  ChevronDown,
  ChevronRight,
  Folder,
  Globe,
  Lock,
  Unlock
} from 'lucide-react';

interface RFPOpportunity {
  id: string;
  title: string;
  organization: string;
  description: string;
  deadline: string;
  budget: string;
  category: string;
  matchScore: number;
  status: 'open' | 'in-progress' | 'submitted' | 'won' | 'lost';
  requirements: string[];
  keywords: string[];
  aiInsights: AIInsight[];
  autoGenerated: boolean;
  lastUpdated: string;
}

interface AIInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'opportunity' | 'compliance';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  confidence: number;
}

interface RFPResponse {
  id: string;
  rfpId: string;
  title: string;
  status: 'draft' | 'review' | 'submitted' | 'under-review' | 'accepted' | 'rejected';
  completionScore: number;
  sections: ResponseSection[];
  aiGenerated: boolean;
  lastModified: string;
  collaborators: string[];
}

interface ResponseSection {
  id: string;
  title: string;
  content: string;
  aiGenerated: boolean;
  qualityScore: number;
  suggestions: string[];
  required: boolean;
  wordCount: number;
  lastModified: string;
}

// Mock data
const mockRFPOpportunities: RFPOpportunity[] = [
  {
    id: '1',
    title: 'Digital Transformation Initiative',
    organization: 'TechCorp Solutions',
    description: 'Seeking innovative solutions for digital transformation across multiple business units',
    deadline: '2024-02-15',
    budget: '$500,000 - $1,000,000',
    category: 'Technology',
    matchScore: 94,
    status: 'open',
    requirements: [
      'Minimum 5 years experience in digital transformation',
      'Proven track record with enterprise clients',
      'Certified in relevant technologies'
    ],
    keywords: ['digital transformation', 'enterprise', 'cloud', 'automation'],
    aiInsights: [
      {
        id: '1',
        type: 'opportunity',
        title: 'High Match Score',
        description: 'Your company profile matches 94% of the requirements',
        priority: 'high',
        actionable: true,
        confidence: 95
      },
      {
        id: '2',
        type: 'suggestion',
        title: 'Emphasize AI Integration',
        description: 'Highlight your AI capabilities as this is a key requirement',
        priority: 'medium',
        actionable: true,
        confidence: 87
      }
    ],
    autoGenerated: true,
    lastUpdated: '2024-01-15'
  },
  {
    id: '2',
    title: 'Sustainability Consulting Services',
    organization: 'GreenFuture Inc',
    description: 'Comprehensive sustainability consulting for manufacturing operations',
    deadline: '2024-01-30',
    budget: '$200,000 - $400,000',
    category: 'Sustainability',
    matchScore: 78,
    status: 'in-progress',
    requirements: [
      'Environmental consulting experience',
      'Manufacturing sector knowledge',
      'Sustainability certifications'
    ],
    keywords: ['sustainability', 'manufacturing', 'environmental', 'consulting'],
    aiInsights: [
      {
        id: '3',
        type: 'warning',
        title: 'Tight Deadline',
        description: 'Only 15 days remaining - prioritize this opportunity',
        priority: 'high',
        actionable: true,
        confidence: 100
      }
    ],
    autoGenerated: false,
    lastUpdated: '2024-01-10'
  }
];

const mockRFPResponses: RFPResponse[] = [
  {
    id: '1',
    rfpId: '1',
    title: 'Digital Transformation Response',
    status: 'draft',
    completionScore: 65,
    sections: [
      {
        id: '1',
        title: 'Executive Summary',
        content: 'Our company brings 8+ years of experience in digital transformation...',
        aiGenerated: true,
        qualityScore: 88,
        suggestions: ['Add specific metrics', 'Include client testimonials'],
        required: true,
        wordCount: 250,
        lastModified: '2024-01-15'
      },
      {
        id: '2',
        title: 'Technical Approach',
        content: 'We propose a phased approach to digital transformation...',
        aiGenerated: false,
        qualityScore: 72,
        suggestions: ['Provide more technical details', 'Include architecture diagrams'],
        required: true,
        wordCount: 500,
        lastModified: '2024-01-14'
      }
    ],
    aiGenerated: true,
    lastModified: '2024-01-15',
    collaborators: ['John Doe', 'Jane Smith']
  }
];

export default function RFPAutomation() {
  const [selectedTab, setSelectedTab] = useState('opportunities');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [showAIInsights, setShowAIInsights] = useState(true);
  const [isCreateRFPDialogOpen, setIsCreateRFPDialogOpen] = useState(false);
  const [isAutoGenerateDialogOpen, setIsAutoGenerateDialogOpen] = useState(false);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'bg-green-100 text-green-800';
      case 'in-progress': return 'bg-yellow-100 text-yellow-800';
      case 'submitted': return 'bg-blue-100 text-blue-800';
      case 'won': return 'bg-purple-100 text-purple-800';
      case 'lost': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const filteredOpportunities = mockRFPOpportunities.filter(opp => {
    const matchesSearch = opp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         opp.organization.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         opp.keywords.some(keyword => keyword.toLowerCase().includes(searchQuery.toLowerCase()));
    const matchesCategory = selectedCategory === 'all' || opp.category === selectedCategory;
    const matchesStatus = selectedStatus === 'all' || opp.status === selectedStatus;
    return matchesSearch && matchesCategory && matchesStatus;
  });

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
            RFP Automation ðŸ¤–
          </h2>
          <p className="text-gray-600">
            AI-powered RFP discovery, analysis, and response generation
          </p>
        </div>
        <div className="flex gap-2">
          <Button onClick={() => setIsAutoGenerateDialogOpen(true)} variant="outline">
            <Wand2 className="h-4 w-4 mr-2" />
            Auto-Generate Response
          </Button>
          <Button onClick={() => setIsCreateRFPDialogOpen(true)}>
            <Plus className="h-4 w-4 mr-2" />
            Create RFP
          </Button>
        </div>
      </div>

      {/* AI Insights Toggle */}
      <div className="flex items-center gap-4">
        <div className="flex items-center space-x-2">
          <input
            type="checkbox"
            id="ai-insights"
            checked={showAIInsights}
            onChange={(e) => setShowAIInsights(e.target.checked)}
            className="rounded"
          />
          <Label htmlFor="ai-insights" className="flex items-center gap-2">
            <Brain className="h-4 w-4" />
            Show AI Insights
          </Label>
        </div>
        {showAIInsights && (
          <Badge variant="secondary" className="bg-purple-100 text-purple-800">
            <Sparkles className="h-3 w-3 mr-1" />
            AI Enhanced
          </Badge>
        )}
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col lg:flex-row gap-4">
        <div className="flex-1">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
            <Input
              placeholder="Search RFPs, organizations, or keywords..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
        <div className="flex gap-2">
          <Select value={selectedCategory} onValueChange={setSelectedCategory}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Category" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Categories</SelectItem>
              <SelectItem value="Technology">Technology</SelectItem>
              <SelectItem value="Sustainability">Sustainability</SelectItem>
              <SelectItem value="Healthcare">Healthcare</SelectItem>
              <SelectItem value="Education">Education</SelectItem>
            </SelectContent>
          </Select>
          <Select value={selectedStatus} onValueChange={setSelectedStatus}>
            <SelectTrigger className="w-32">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="open">Open</SelectItem>
              <SelectItem value="in-progress">In Progress</SelectItem>
              <SelectItem value="submitted">Submitted</SelectItem>
              <SelectItem value="won">Won</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="opportunities">RFP Opportunities</TabsTrigger>
          <TabsTrigger value="responses">My Responses</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        {/* RFP Opportunities Tab */}
        <TabsContent value="opportunities" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredOpportunities.map((opportunity) => (
              <Card key={opportunity.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{opportunity.title}</CardTitle>
                      <CardDescription className="text-sm text-gray-600">
                        {opportunity.organization}
                      </CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(opportunity.status)}>
                        {opportunity.status}
                      </Badge>
                      {opportunity.autoGenerated && (
                        <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                          <Bot className="h-3 w-3 mr-1" />
                          AI Found
                        </Badge>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-gray-600">{opportunity.description}</p>
                  
                  {/* Match Score */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Match Score</span>
                      <span className="text-sm text-gray-600">{opportunity.matchScore}%</span>
                    </div>
                    <Progress value={opportunity.matchScore} className="h-2" />
                  </div>

                  {/* Key Info */}
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-gray-400" />
                      <span>Due: {opportunity.deadline}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <DollarSign className="h-4 w-4 text-gray-400" />
                      <span>{opportunity.budget}</span>
                    </div>
                  </div>

                  {/* AI Insights */}
                  {showAIInsights && opportunity.aiInsights.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-700">AI Insights</h4>
                      {opportunity.aiInsights.slice(0, 2).map((insight) => (
                        <div key={insight.id} className={`p-2 rounded-lg border ${
                          insight.type === 'opportunity' ? 'bg-green-50 border-green-200' :
                          insight.type === 'warning' ? 'bg-red-50 border-red-200' :
                          'bg-yellow-50 border-yellow-200'
                        }`}>
                          <div className="flex items-start gap-2">
                            {insight.type === 'opportunity' ? (
                              <TrendingUp className="h-4 w-4 text-green-600 mt-0.5" />
                            ) : insight.type === 'warning' ? (
                              <AlertCircle className="h-4 w-4 text-red-600 mt-0.5" />
                            ) : (
                              <Target className="h-4 w-4 text-yellow-600 mt-0.5" />
                            )}
                            <div className="flex-1">
                              <p className="text-sm font-medium">{insight.title}</p>
                              <p className="text-xs text-gray-600">{insight.description}</p>
                            </div>
                            <Badge className={getPriorityColor(insight.priority)}>
                              {insight.priority}
                            </Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Keywords */}
                  <div className="flex flex-wrap gap-1">
                    {opportunity.keywords.slice(0, 4).map((keyword) => (
                      <Badge key={keyword} variant="secondary" className="text-xs">
                        {keyword}
                      </Badge>
                    ))}
                    {opportunity.keywords.length > 4 && (
                      <Badge variant="secondary" className="text-xs">
                        +{opportunity.keywords.length - 4}
                      </Badge>
                    )}
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button size="sm" className="flex-1">
                      <Eye className="h-4 w-4 mr-2" />
                      View Details
                    </Button>
                    <Button size="sm" variant="outline">
                      <Zap className="h-4 w-4 mr-2" />
                      Auto-Respond
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* My Responses Tab */}
        <TabsContent value="responses" className="space-y-4">
          <div className="grid grid-cols-1 gap-6">
            {mockRFPResponses.map((response) => (
              <Card key={response.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{response.title}</CardTitle>
                      <CardDescription>
                        RFP: {mockRFPOpportunities.find(opp => opp.id === response.rfpId)?.title}
                      </CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(response.status)}>
                        {response.status}
                      </Badge>
                      {response.aiGenerated && (
                        <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                          <Bot className="h-3 w-3 mr-1" />
                          AI Generated
                        </Badge>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Completion Score */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Completion Score</span>
                      <span className="text-sm text-gray-600">{response.completionScore}%</span>
                    </div>
                    <Progress value={response.completionScore} className="h-2" />
                  </div>

                  {/* Sections */}
                  <div className="space-y-3">
                    <h4 className="text-sm font-medium text-gray-700">Response Sections</h4>
                    {response.sections.map((section) => (
                      <div key={section.id} className="p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <h5 className="text-sm font-medium">{section.title}</h5>
                          <div className="flex items-center gap-2">
                            {section.aiGenerated && (
                              <Badge variant="secondary" className="bg-purple-100 text-purple-800 text-xs">
                                <Bot className="h-3 w-3 mr-1" />
                                AI
                              </Badge>
                            )}
                            <span className="text-xs text-gray-500">{section.qualityScore}% quality</span>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                          {section.content}
                        </p>
                        <div className="flex items-center justify-between text-xs text-gray-500">
                          <span>{section.wordCount} words</span>
                          <span>Modified {section.lastModified}</span>
                        </div>
                        {section.suggestions.length > 0 && (
                          <div className="mt-2">
                            <p className="text-xs font-medium text-gray-700 mb-1">AI Suggestions:</p>
                            <ul className="text-xs text-gray-600 space-y-1">
                              {section.suggestions.map((suggestion, index) => (
                                <li key={index} className="flex items-start gap-1">
                                  <span className="text-blue-500">â€¢</span>
                                  <span>{suggestion}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>

                  {/* Collaborators */}
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-gray-400" />
                    <span className="text-sm text-gray-600">
                      {response.collaborators.length} collaborator{response.collaborators.length !== 1 ? 's' : ''}
                    </span>
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button size="sm" className="flex-1">
                      <Edit className="h-4 w-4 mr-2" />
                      Continue Editing
                    </Button>
                    <Button size="sm" variant="outline">
                      <Download className="h-4 w-4 mr-2" />
                      Export
                    </Button>
                    <Button size="sm" variant="outline">
                      <Share2 className="h-4 w-4 mr-2" />
                      Share
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Analytics Tab */}
        <TabsContent value="analytics" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Response Success Rate</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-green-600">73%</div>
                <p className="text-sm text-gray-600">+12% from last quarter</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">AI Time Saved</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-blue-600">45h</div>
                <p className="text-sm text-gray-600">This month</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Active RFPs</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-600">12</div>
                <p className="text-sm text-gray-600">In progress</p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Create RFP Dialog */}
      <Dialog open={isCreateRFPDialogOpen} onOpenChange={setIsCreateRFPDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Create New RFP</DialogTitle>
            <DialogDescription>
              Set up a new RFP opportunity with AI assistance
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="title">RFP Title</Label>
                <Input id="title" placeholder="Enter RFP title" />
              </div>
              <div>
                <Label htmlFor="organization">Organization</Label>
                <Input id="organization" placeholder="Organization name" />
              </div>
            </div>
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea id="description" placeholder="Describe the RFP requirements" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="deadline">Deadline</Label>
                <Input id="deadline" type="date" />
              </div>
              <div>
                <Label htmlFor="budget">Budget Range</Label>
                <Input id="budget" placeholder="$0 - $0" />
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="ai-assistance" />
              <Label htmlFor="ai-assistance">Enable AI assistance for response generation</Label>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Auto-Generate Response Dialog */}
      <Dialog open={isAutoGenerateDialogOpen} onOpenChange={setIsAutoGenerateDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Auto-Generate RFP Response</DialogTitle>
            <DialogDescription>
              Let AI analyze the RFP and generate a comprehensive response
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="rfp-url">RFP URL or Document</Label>
              <Input id="rfp-url" placeholder="Paste RFP URL or upload document" />
            </div>
            <div>
              <Label htmlFor="company-info">Company Information</Label>
              <Textarea id="company-info" placeholder="Provide key company details, capabilities, and differentiators" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="response-tone">Response Tone</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select tone" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="professional">Professional</SelectItem>
                    <SelectItem value="innovative">Innovative</SelectItem>
                    <SelectItem value="technical">Technical</SelectItem>
                    <SelectItem value="collaborative">Collaborative</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="priority-sections">Priority Sections</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select focus areas" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="technical">Technical Approach</SelectItem>
                    <SelectItem value="experience">Experience & Credentials</SelectItem>
                    <SelectItem value="pricing">Pricing & Value</SelectItem>
                    <SelectItem value="timeline">Project Timeline</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="include-case-studies" defaultChecked />
              <Label htmlFor="include-case-studies">Include relevant case studies</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="compliance-check" defaultChecked />
              <Label htmlFor="compliance-check">Run compliance and requirement check</Label>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
