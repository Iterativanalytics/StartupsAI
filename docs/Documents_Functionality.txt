===== FILE: client/src/pages/documents-hub.tsx =====

import React, { useState, useEffect } from 'react';
import { Link } from 'wouter';
import { useQuery, useMutation } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { useDropzone } from 'react-dropzone';
import { 
  FileText, 
  Upload, 
  Search, 
  Filter, 
  Plus, 
  MoreVertical, 
  Download, 
  Share2, 
  Edit, 
  Trash2, 
  Eye, 
  Clock, 
  CheckCircle, 
  AlertCircle, 
  Star, 
  Tag, 
  Users, 
  MessageSquare, 
  Zap, 
  Brain, 
  Sparkles, 
  Target, 
  TrendingUp, 
  BarChart3, 
  FileSpreadsheet, 
  Presentation, 
  Image, 
  Video, 
  Archive, 
  Bookmark, 
  Calendar, 
  Globe, 
  Lock, 
  Unlock, 
  RefreshCw, 
  Settings, 
  Bot, 
  Wand2, 
  Copy, 
  ExternalLink,
  ChevronDown,
  ChevronRight,
  Folder,
  FolderOpen
} from '@/lib/icons';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import RFPAutomation from '@/components/documents/RFPAutomation';
import RFIAutomation from '@/components/documents/RFIAutomation';
import RFQAutomation from '@/components/documents/RFQAutomation';
import DocumentIntelligence from '@/components/documents/DocumentIntelligence';
import CollaborationWorkflow from '@/components/documents/CollaborationWorkflow';

// Types
interface Document {
  id: string;
  name: string;
  type: 'business-plan' | 'proposal' | 'pitch-deck' | 'application' | 'contract' | 'report' | 'other';
  status: 'draft' | 'review' | 'approved' | 'published' | 'archived';
  category: string;
  tags: string[];
  size: number;
  lastModified: string;
  createdBy: string;
  collaborators: string[];
  version: string;
  isPublic: boolean;
  isTemplate: boolean;
  aiGenerated: boolean;
  completionScore: number;
  insights: DocumentInsight[];
  metadata: DocumentMetadata;
}

interface DocumentInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'achievement' | 'opportunity';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  aiGenerated: boolean;
}

interface DocumentMetadata {
  wordCount: number;
  pageCount: number;
  readingTime: number;
  complexity: 'low' | 'medium' | 'high';
  language: string;
  lastAnalyzed: string;
  aiScore: number;
}

interface DocumentTemplate {
  id: string;
  name: string;
  description: string;
  category: string;
  type: string;
  fields: TemplateField[];
  aiEnabled: boolean;
  popularity: number;
  rating: number;
}

interface TemplateField {
  id: string;
  name: string;
  type: 'text' | 'textarea' | 'number' | 'date' | 'select' | 'checkbox' | 'file';
  required: boolean;
  placeholder: string;
  options?: string[];
  aiSuggestion?: string;
}

interface DocumentWorkflow {
  id: string;
  name: string;
  steps: WorkflowStep[];
  isActive: boolean;
  participants: string[];
}

interface WorkflowStep {
  id: string;
  name: string;
  type: 'review' | 'approval' | 'signature' | 'notification';
  assignee: string;
  dueDate: string;
  completed: boolean;
  comments: string[];
}

// Mock data
const mockDocuments: Document[] = [
  {
    id: '1',
    name: 'Q4 Business Plan 2024',
    type: 'business-plan',
    status: 'review',
    category: 'Strategic Planning',
    tags: ['Q4', 'Growth', 'Strategy'],
    size: 2048576,
    lastModified: '2024-01-15',
    createdBy: 'John Doe',
    collaborators: ['Jane Smith', 'Mike Johnson'],
    version: '2.1',
    isPublic: false,
    isTemplate: false,
    aiGenerated: true,
    completionScore: 85,
    insights: [
      {
        id: '1',
        type: 'suggestion',
        title: 'Market Analysis Enhancement',
        description: 'Consider adding more detailed competitor analysis',
        priority: 'medium',
        actionable: true,
        aiGenerated: true
      }
    ],
    metadata: {
      wordCount: 15420,
      pageCount: 45,
      readingTime: 32,
      complexity: 'high',
      language: 'en',
      lastAnalyzed: '2024-01-15',
      aiScore: 87
    }
  },
  {
    id: '2',
    name: 'Series A Pitch Deck',
    type: 'pitch-deck',
    status: 'approved',
    category: 'Fundraising',
    tags: ['Series A', 'Investors', 'Presentation'],
    size: 1536000,
    lastModified: '2024-01-10',
    createdBy: 'Sarah Wilson',
    collaborators: ['Alex Chen'],
    version: '3.0',
    isPublic: true,
    isTemplate: false,
    aiGenerated: false,
    completionScore: 95,
    insights: [],
    metadata: {
      wordCount: 3200,
      pageCount: 18,
      readingTime: 8,
      complexity: 'medium',
      language: 'en',
      lastAnalyzed: '2024-01-10',
      aiScore: 92
    }
  }
];

const mockTemplates: DocumentTemplate[] = [
  {
    id: '1',
    name: 'Business Plan Template',
    description: 'Comprehensive business plan with AI-powered sections',
    category: 'Strategic Planning',
    type: 'business-plan',
    fields: [
      { id: '1', name: 'Executive Summary', type: 'textarea', required: true, placeholder: 'Brief overview of your business' },
      { id: '2', name: 'Market Analysis', type: 'textarea', required: true, placeholder: 'Describe your target market' }
    ],
    aiEnabled: true,
    popularity: 95,
    rating: 4.8
  },
  {
    id: '2',
    name: 'Grant Proposal Template',
    description: 'AI-optimized grant proposal with compliance checking',
    category: 'Funding',
    type: 'proposal',
    fields: [
      { id: '1', name: 'Project Title', type: 'text', required: true, placeholder: 'Enter project title' },
      { id: '2', name: 'Budget Request', type: 'number', required: true, placeholder: 'Amount requested' }
    ],
    aiEnabled: true,
    popularity: 88,
    rating: 4.6
  }
];

const mockWorkflows: DocumentWorkflow[] = [
  {
    id: '1',
    name: 'Business Plan Review Process',
    steps: [
      { id: '1', name: 'Initial Review', type: 'review', assignee: 'Jane Smith', dueDate: '2024-01-20', completed: true, comments: ['Great start!'] },
      { id: '2', name: 'Financial Review', type: 'review', assignee: 'Mike Johnson', dueDate: '2024-01-22', completed: false, comments: [] },
      { id: '3', name: 'Final Approval', type: 'approval', assignee: 'Sarah Wilson', dueDate: '2024-01-25', completed: false, comments: [] }
    ],
    isActive: true,
    participants: ['Jane Smith', 'Mike Johnson', 'Sarah Wilson']
  }
];

export default function DocumentsHub() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sortBy, setSortBy] = useState('lastModified');
  const [showAIInsights, setShowAIInsights] = useState(true);
  const [selectedDocuments, setSelectedDocuments] = useState<string[]>([]);
  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);
  const [isTemplateDialogOpen, setIsTemplateDialogOpen] = useState(false);
  const [isWorkflowDialogOpen, setIsWorkflowDialogOpen] = useState(false);
  
  const { toast } = useToast();

  // Document queries
  const { data: documents = mockDocuments, isLoading: documentsLoading } = useQuery({
    queryKey: ['documents', searchQuery, selectedCategory, selectedStatus, sortBy],
    queryFn: () => apiRequest('/api/documents', {
      search: searchQuery,
      category: selectedCategory,
      status: selectedStatus,
      sort: sortBy
    })
  });

  const { data: templates = mockTemplates } = useQuery({
    queryKey: ['document-templates'],
    queryFn: () => apiRequest('/api/document-templates')
  });

  const { data: workflows = mockWorkflows } = useQuery({
    queryKey: ['document-workflows'],
    queryFn: () => apiRequest('/api/document-workflows')
  });

  // Document mutations
  const deleteDocumentMutation = useMutation({
    mutationFn: (documentId: string) => apiRequest(`/api/documents/${documentId}`, { method: 'DELETE' }),
    onSuccess: () => {
      toast({ title: 'Document deleted successfully' });
    }
  });

  const archiveDocumentMutation = useMutation({
    mutationFn: (documentId: string) => apiRequest(`/api/documents/${documentId}/archive`, { method: 'POST' }),
    onSuccess: () => {
      toast({ title: 'Document archived successfully' });
    }
  });

  // File upload handling
  const onDrop = (acceptedFiles: File[]) => {
    // Handle file uploads
    toast({ title: 'Files uploaded successfully' });
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'application/msword': ['.doc'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],
      'text/plain': ['.txt'],
      'application/vnd.ms-powerpoint': ['.ppt'],
      'application/vnd.openxmlformats-officedocument.presentationml.presentation': ['.pptx']
    },
    multiple: true
  });

  // Filter and sort documents
  const filteredDocuments = documents.filter(doc => {
    const matchesSearch = doc.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         doc.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
    const matchesCategory = selectedCategory === 'all' || doc.category === selectedCategory;
    const matchesStatus = selectedStatus === 'all' || doc.status === selectedStatus;
    return matchesSearch && matchesCategory && matchesStatus;
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'draft': return 'bg-gray-100 text-gray-800';
      case 'review': return 'bg-yellow-100 text-yellow-800';
      case 'approved': return 'bg-green-100 text-green-800';
      case 'published': return 'bg-blue-100 text-blue-800';
      case 'archived': return 'bg-gray-100 text-gray-600';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'business-plan': return FileText;
      case 'proposal': return FileText;
      case 'pitch-deck': return Presentation;
      case 'application': return FileSpreadsheet;
      case 'contract': return FileText;
      case 'report': return BarChart3;
      default: return FileText;
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <FileText className="h-10 w-10 text-blue-600" />
            <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              Document Hub
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-6">
            AI-powered document management, collaboration, and automation
          </p>
          <div className="flex items-center justify-center gap-3">
            <Button onClick={() => setIsTemplateDialogOpen(true)} variant="outline" size="lg">
              <Wand2 className="h-4 w-4 mr-2" />
              AI Templates
            </Button>
            <Button onClick={() => setIsUploadDialogOpen(true)} size="lg">
              <Plus className="h-4 w-4 mr-2" />
              Upload Document
            </Button>
          </div>
        </div>

        <div className="mb-8">

          {/* AI Insights Toggle */}
          <div className="flex items-center gap-4 mb-6">
            <div className="flex items-center space-x-2">
              <Switch
                id="ai-insights"
                checked={showAIInsights}
                onCheckedChange={setShowAIInsights}
              />
              <Label htmlFor="ai-insights" className="flex items-center gap-2">
                <Brain className="h-4 w-4" />
                AI Insights & Automation
              </Label>
            </div>
            {showAIInsights && (
              <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                <Sparkles className="h-3 w-3 mr-1" />
                AI Enhanced
              </Badge>
            )}
          </div>
        </div>

        {/* Search and Filters */}
        <div className="mb-6">
          <div className="flex flex-col lg:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="Search documents, tags, or content..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <div className="flex gap-2">
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Categories</SelectItem>
                  <SelectItem value="Strategic Planning">Strategic Planning</SelectItem>
                  <SelectItem value="Fundraising">Fundraising</SelectItem>
                  <SelectItem value="Operations">Operations</SelectItem>
                  <SelectItem value="Marketing">Marketing</SelectItem>
                </SelectContent>
              </Select>
              <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                <SelectTrigger className="w-32">
                  <SelectValue placeholder="Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="draft">Draft</SelectItem>
                  <SelectItem value="review">Review</SelectItem>
                  <SelectItem value="approved">Approved</SelectItem>
                  <SelectItem value="published">Published</SelectItem>
                </SelectContent>
              </Select>
              <Select value={sortBy} onValueChange={setSortBy}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Sort by" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="lastModified">Last Modified</SelectItem>
                  <SelectItem value="name">Name</SelectItem>
                  <SelectItem value="size">Size</SelectItem>
                  <SelectItem value="created">Created</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>

        {/* AI Insights Panel */}
        {showAIInsights && (
          <Card className="mb-6 border-purple-200 bg-gradient-to-r from-purple-50 to-blue-50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-purple-800">
                <Brain className="h-5 w-5" />
                AI Document Intelligence
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-purple-100 rounded-lg">
                    <Zap className="h-5 w-5 text-purple-600" />
                  </div>
                  <div>
                    <p className="font-medium">Auto-completion</p>
                    <p className="text-sm text-gray-600">AI suggests content</p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-blue-100 rounded-lg">
                    <Target className="h-5 w-5 text-blue-600" />
                  </div>
                  <div>
                    <p className="font-medium">Smart Templates</p>
                    <p className="text-sm text-gray-600">Context-aware templates</p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-green-100 rounded-lg">
                    <TrendingUp className="h-5 w-5 text-green-600" />
                  </div>
                  <div>
                    <p className="font-medium">Quality Scoring</p>
                    <p className="text-sm text-gray-600">AI-powered document analysis</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Enhanced Features Tabs */}
        <Tabs defaultValue="documents" className="space-y-6">
          <TabsList className="grid w-full grid-cols-6">
            <TabsTrigger value="documents">Documents</TabsTrigger>
            <TabsTrigger value="rfp-automation">RFP</TabsTrigger>
            <TabsTrigger value="rfi-automation">RFI</TabsTrigger>
            <TabsTrigger value="rfq-automation">RFQ</TabsTrigger>
            <TabsTrigger value="intelligence">AI Intelligence</TabsTrigger>
            <TabsTrigger value="collaboration">Collaboration</TabsTrigger>
          </TabsList>

          <TabsContent value="documents" className="space-y-6">
            {/* Documents Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredDocuments.map((document) => {
            const TypeIcon = getTypeIcon(document.type);
            return (
              <Card key={document.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <div className="p-2 bg-blue-100 rounded-lg">
                        <TypeIcon className="h-5 w-5 text-blue-600" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <CardTitle className="text-lg truncate">{document.name}</CardTitle>
                        <p className="text-sm text-gray-600">{document.category}</p>
                      </div>
                    </div>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="sm">
                          <MoreVertical className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem>
                          <Eye className="h-4 w-4 mr-2" />
                          View
                        </DropdownMenuItem>
                        <DropdownMenuItem asChild>
                          <Link href={`/edit-plan/${document.id}`}>
                            <Edit className="h-4 w-4 mr-2" />
                            Edit
                          </Link>
                        </DropdownMenuItem>
                        <DropdownMenuItem>
                          <Share2 className="h-4 w-4 mr-2" />
                          Share
                        </DropdownMenuItem>
                        <DropdownMenuItem>
                          <Download className="h-4 w-4 mr-2" />
                          Download
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem onClick={() => archiveDocumentMutation.mutate(document.id)}>
                          <Archive className="h-4 w-4 mr-2" />
                          Archive
                        </DropdownMenuItem>
                        <DropdownMenuItem 
                          onClick={() => deleteDocumentMutation.mutate(document.id)}
                          className="text-red-600"
                        >
                          <Trash2 className="h-4 w-4 mr-2" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="space-y-3">
                    {/* Status and Version */}
                    <div className="flex items-center justify-between">
                      <Badge className={getStatusColor(document.status)}>
                        {document.status}
                      </Badge>
                      <span className="text-sm text-gray-500">v{document.version}</span>
                    </div>

                    {/* AI Insights */}
                    {showAIInsights && document.insights.length > 0 && (
                      <div className="space-y-2">
                        {document.insights.slice(0, 2).map((insight) => (
                          <div key={insight.id} className="p-2 bg-yellow-50 border border-yellow-200 rounded-lg">
                            <div className="flex items-start gap-2">
                              <AlertCircle className="h-4 w-4 text-yellow-600 mt-0.5" />
                              <div className="flex-1">
                                <p className="text-sm font-medium text-yellow-800">{insight.title}</p>
                                <p className="text-xs text-yellow-700">{insight.description}</p>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}

                    {/* Completion Score */}
                    {showAIInsights && (
                      <div className="space-y-2">
                        <div className="flex items-center justify-between">
                          <span className="text-sm font-medium">AI Score</span>
                          <span className="text-sm text-gray-600">{document.metadata.aiScore}%</span>
                        </div>
                        <Progress value={document.metadata.aiScore} className="h-2" />
                      </div>
                    )}

                    {/* Metadata */}
                    <div className="flex items-center justify-between text-sm text-gray-500">
                      <span>{formatFileSize(document.size)}</span>
                      <span>{document.metadata.pageCount} pages</span>
                    </div>

                    {/* Tags */}
                    <div className="flex flex-wrap gap-1">
                      {document.tags.slice(0, 3).map((tag) => (
                        <Badge key={tag} variant="secondary" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                      {document.tags.length > 3 && (
                        <Badge variant="secondary" className="text-xs">
                          +{document.tags.length - 3}
                        </Badge>
                      )}
                    </div>

                    {/* Collaborators */}
                    <div className="flex items-center gap-2">
                      <Users className="h-4 w-4 text-gray-400" />
                      <span className="text-sm text-gray-600">
                        {document.collaborators.length} collaborator{document.collaborators.length !== 1 ? 's' : ''}
                      </span>
                    </div>

                    {/* Last Modified */}
                    <div className="flex items-center gap-2 text-sm text-gray-500">
                      <Clock className="h-4 w-4" />
                      <span>Modified {document.lastModified}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
            </div>
          </TabsContent>

          <TabsContent value="rfp-automation">
            <RFPAutomation />
          </TabsContent>

          <TabsContent value="rfi-automation">
            <RFIAutomation />
          </TabsContent>

          <TabsContent value="rfq-automation">
            <RFQAutomation />
          </TabsContent>

          <TabsContent value="intelligence">
            <DocumentIntelligence />
          </TabsContent>

          <TabsContent value="collaboration">
            <CollaborationWorkflow />
          </TabsContent>
        </Tabs>

        {/* Upload Dialog */}
        <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Upload Documents</DialogTitle>
              <DialogDescription>
                Upload files or create new documents with AI assistance
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <div
                {...getRootProps()}
                className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
                  isDragActive ? 'border-blue-400 bg-blue-50' : 'border-gray-300'
                }`}
              >
                <input {...getInputProps()} />
                <Upload className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-lg font-medium mb-2">
                  {isDragActive ? 'Drop files here' : 'Drag & drop files here'}
                </p>
                <p className="text-gray-600 mb-4">
                  or click to select files (PDF, DOC, DOCX, PPT, TXT)
                </p>
                <Button variant="outline">Choose Files</Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Template Dialog */}
        <Dialog open={isTemplateDialogOpen} onOpenChange={setIsTemplateDialogOpen}>
          <DialogContent className="max-w-4xl">
            <DialogHeader>
              <DialogTitle>AI-Powered Document Templates</DialogTitle>
              <DialogDescription>
                Choose from intelligent templates that adapt to your needs
              </DialogDescription>
            </DialogHeader>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {templates.map((template) => (
                <Card key={template.id} className="cursor-pointer hover:shadow-md transition-shadow">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg">{template.name}</CardTitle>
                      {template.aiEnabled && (
                        <Badge className="bg-purple-100 text-purple-800">
                          <Brain className="h-3 w-3 mr-1" />
                          AI Enhanced
                        </Badge>
                      )}
                    </div>
                    <CardDescription>{template.description}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between text-sm text-gray-600">
                      <span>Popularity: {template.popularity}%</span>
                      <div className="flex items-center gap-1">
                        <Star className="h-4 w-4 text-yellow-500" />
                        <span>{template.rating}</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}




===== FILE: client/src/components/documents/DocumentIntelligence.tsx =====

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import AIApplicationFiller from './AIApplicationFiller';
import { 
  Brain, 
  Zap, 
  Target, 
  CheckCircle, 
  AlertCircle, 
  TrendingUp, 
  FileText, 
  Sparkles, 
  Wand2, 
  Bot, 
  ArrowRight, 
  Copy, 
  Download, 
  Share2, 
  Eye, 
  Edit, 
  Plus, 
  Search, 
  BarChart3, 
  MessageSquare, 
  RefreshCw, 
  Settings, 
  ExternalLink,
  Globe,
  Lock,
  Unlock,
  Star,
  Award,
  Clock,
  Users,
  DollarSign,
  PieChart,
  LineChart
} from 'lucide-react';

interface DocumentAnalysis {
  id: string;
  documentId: string;
  overallScore: number;
  sections: AnalysisSection[];
  insights: DocumentInsight[];
  recommendations: Recommendation[];
  compliance: ComplianceCheck[];
  lastAnalyzed: string;
  aiConfidence: number;
}

interface AnalysisSection {
  id: string;
  title: string;
  score: number;
  wordCount: number;
  readabilityScore: number;
  completenessScore: number;
  suggestions: string[];
  aiGenerated: boolean;
}

interface DocumentInsight {
  id: string;
  type: 'strength' | 'weakness' | 'opportunity' | 'threat';
  title: string;
  description: string;
  impact: 'low' | 'medium' | 'high';
  actionable: boolean;
  confidence: number;
}

interface Recommendation {
  id: string;
  type: 'content' | 'structure' | 'style' | 'compliance';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  effort: 'low' | 'medium' | 'high';
  impact: 'low' | 'medium' | 'high';
}

interface ComplianceCheck {
  id: string;
  requirement: string;
  status: 'pass' | 'fail' | 'warning';
  description: string;
  suggestion?: string;
}

// Mock data
const mockAnalysis: DocumentAnalysis = {
  id: '1',
  documentId: '1',
  overallScore: 87,
  sections: [
    {
      id: '1',
      title: 'Executive Summary',
      score: 92,
      wordCount: 250,
      readabilityScore: 85,
      completenessScore: 95,
      suggestions: ['Add more specific metrics', 'Include key differentiators'],
      aiGenerated: true
    },
    {
      id: '2',
      title: 'Market Analysis',
      score: 78,
      wordCount: 800,
      readabilityScore: 72,
      completenessScore: 85,
      suggestions: ['Add competitor analysis', 'Include market size data'],
      aiGenerated: false
    }
  ],
  insights: [
    {
      id: '1',
      type: 'strength',
      title: 'Strong Value Proposition',
      description: 'Clear articulation of unique value proposition',
      impact: 'high',
      actionable: false,
      confidence: 95
    },
    {
      id: '2',
      type: 'weakness',
      title: 'Missing Financial Projections',
      description: 'Financial section lacks detailed projections',
      impact: 'medium',
      actionable: true,
      confidence: 88
    }
  ],
  recommendations: [
    {
      id: '1',
      type: 'content',
      title: 'Add Financial Projections',
      description: 'Include 3-year financial projections with assumptions',
      priority: 'high',
      effort: 'medium',
      impact: 'high'
    }
  ],
  compliance: [
    {
      id: '1',
      requirement: 'Executive Summary Required',
      status: 'pass',
      description: 'Executive summary is present and comprehensive'
    },
    {
      id: '2',
      requirement: 'Financial Projections Required',
      status: 'fail',
      description: 'Financial projections are missing',
      suggestion: 'Add detailed financial projections for the next 3 years'
    }
  ],
  lastAnalyzed: '2024-01-15',
  aiConfidence: 92
};

export default function DocumentIntelligence() {
  const [selectedTab, setSelectedTab] = useState('overview');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState<DocumentAnalysis>(mockAnalysis);

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-600';
    if (score >= 70) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getInsightIcon = (type: string) => {
    switch (type) {
      case 'strength': return CheckCircle;
      case 'weakness': return AlertCircle;
      case 'opportunity': return TrendingUp;
      case 'threat': return AlertCircle;
      default: return Target;
    }
  };

  const getInsightColor = (type: string) => {
    switch (type) {
      case 'strength': return 'text-green-600';
      case 'weakness': return 'text-red-600';
      case 'opportunity': return 'text-blue-600';
      case 'threat': return 'text-orange-600';
      default: return 'text-gray-600';
    }
  };

  const handleAnalyze = async () => {
    setIsAnalyzing(true);
    // Simulate analysis
    setTimeout(() => {
      setIsAnalyzing(false);
    }, 3000);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Document Intelligence 🧠
          </h2>
          <p className="text-gray-600">
            AI-powered document analysis, insights, and optimization
          </p>
        </div>
        <Button onClick={handleAnalyze} disabled={isAnalyzing}>
          {isAnalyzing ? (
            <>
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
              Analyzing...
            </>
          ) : (
            <>
              <Brain className="h-4 w-4 mr-2" />
              Analyze Document
            </>
          )}
        </Button>
      </div>

      {/* Overall Score */}
      <Card className="border-blue-200 bg-gradient-to-r from-blue-50 to-purple-50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5 text-blue-600" />
            Overall Document Score
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between mb-4">
            <div className="text-4xl font-bold text-blue-600">{analysis.overallScore}%</div>
            <div className="text-right">
              <p className="text-sm text-gray-600">AI Confidence</p>
              <p className="text-lg font-semibold">{analysis.aiConfidence}%</p>
            </div>
          </div>
          <Progress value={analysis.overallScore} className="h-3 mb-2" />
          <p className="text-sm text-gray-600">
            Last analyzed: {analysis.lastAnalyzed}
          </p>
        </CardContent>
      </Card>

      {/* Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="sections">Sections</TabsTrigger>
          <TabsTrigger value="insights">Insights</TabsTrigger>
          <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
          <TabsTrigger value="ai-filler">AI Application Filler</TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Readability Score</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-green-600">85</div>
                <p className="text-sm text-gray-600">Good readability</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Completeness</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-blue-600">92%</div>
                <p className="text-sm text-gray-600">Well structured</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">AI Enhancement</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-600">78%</div>
                <p className="text-sm text-gray-600">AI optimized</p>
              </CardContent>
            </Card>
          </div>

          {/* Key Insights */}
          <Card>
            <CardHeader>
              <CardTitle>Key Insights</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {analysis.insights.slice(0, 3).map((insight) => {
                  const IconComponent = getInsightIcon(insight.type);
                  return (
                    <div key={insight.id} className="flex items-start gap-3 p-3 bg-gray-50 rounded-lg">
                      <IconComponent className={`h-5 w-5 mt-0.5 ${getInsightColor(insight.type)}`} />
                      <div className="flex-1">
                        <h4 className="font-medium">{insight.title}</h4>
                        <p className="text-sm text-gray-600">{insight.description}</p>
                        <div className="flex items-center gap-2 mt-2">
                          <Badge className={getImpactColor(insight.impact)}>
                            {insight.impact} impact
                          </Badge>
                          <span className="text-xs text-gray-500">
                            {insight.confidence}% confidence
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Sections Tab */}
        <TabsContent value="sections" className="space-y-4">
          {analysis.sections.map((section) => (
            <Card key={section.id}>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg">{section.title}</CardTitle>
                  <div className="flex items-center gap-2">
                    <span className={`text-2xl font-bold ${getScoreColor(section.score)}`}>
                      {section.score}%
                    </span>
                    {section.aiGenerated && (
                      <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                        <Bot className="h-3 w-3 mr-1" />
                        AI
                      </Badge>
                    )}
                  </div>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <p className="text-sm text-gray-600">Word Count</p>
                    <p className="text-lg font-semibold">{section.wordCount}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Readability</p>
                    <p className="text-lg font-semibold">{section.readabilityScore}%</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Completeness</p>
                    <p className="text-lg font-semibold">{section.completenessScore}%</p>
                  </div>
                </div>
                
                <Progress value={section.score} className="h-2" />
                
                {section.suggestions.length > 0 && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-700 mb-2">AI Suggestions:</h4>
                    <ul className="space-y-1">
                      {section.suggestions.map((suggestion, index) => (
                        <li key={index} className="text-sm text-gray-600 flex items-start gap-2">
                          <span className="text-blue-500 mt-1">•</span>
                          <span>{suggestion}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        {/* Insights Tab */}
        <TabsContent value="insights" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {analysis.insights.map((insight) => {
              const IconComponent = getInsightIcon(insight.type);
              return (
                <Card key={insight.id} className="group hover:shadow-lg transition-all duration-200">
                  <CardHeader>
                    <div className="flex items-start gap-3">
                      <IconComponent className={`h-6 w-6 mt-1 ${getInsightColor(insight.type)}`} />
                      <div className="flex-1">
                        <CardTitle className="text-lg">{insight.title}</CardTitle>
                        <CardDescription>{insight.description}</CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <Badge className={getImpactColor(insight.impact)}>
                        {insight.impact} impact
                      </Badge>
                      <div className="text-sm text-gray-500">
                        {insight.confidence}% confidence
                      </div>
                    </div>
                    {insight.actionable && (
                      <Button size="sm" className="mt-3 w-full">
                        <Wand2 className="h-4 w-4 mr-2" />
                        Take Action
                      </Button>
                    )}
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </TabsContent>

        {/* Recommendations Tab */}
        <TabsContent value="recommendations" className="space-y-4">
          {analysis.recommendations.map((recommendation) => (
            <Card key={recommendation.id} className="group hover:shadow-lg transition-all duration-200">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <CardTitle className="text-lg">{recommendation.title}</CardTitle>
                    <CardDescription>{recommendation.description}</CardDescription>
                  </div>
                  <div className="flex gap-2">
                    <Badge className={getImpactColor(recommendation.priority)}>
                      {recommendation.priority} priority
                    </Badge>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-3 gap-4 mb-4">
                  <div>
                    <p className="text-sm text-gray-600">Effort Required</p>
                    <p className="text-lg font-semibold capitalize">{recommendation.effort}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Expected Impact</p>
                    <p className="text-lg font-semibold capitalize">{recommendation.impact}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Type</p>
                    <p className="text-lg font-semibold capitalize">{recommendation.type}</p>
                  </div>
                </div>
                <Button size="sm" className="w-full">
                  <Wand2 className="h-4 w-4 mr-2" />
                  Implement Recommendation
                </Button>
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        {/* AI Application Filler Tab */}
        <TabsContent value="ai-filler">
          <AIApplicationFiller 
            documentId={analysis.documentId}
            documentContent={mockAnalysis}
          />
        </TabsContent>
      </Tabs>

      {/* Compliance Check */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-green-600" />
            Compliance Check
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {analysis.compliance.map((check) => (
              <div key={check.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center gap-3">
                  {check.status === 'pass' ? (
                    <CheckCircle className="h-5 w-5 text-green-600" />
                  ) : check.status === 'fail' ? (
                    <AlertCircle className="h-5 w-5 text-red-600" />
                  ) : (
                    <AlertCircle className="h-5 w-5 text-yellow-600" />
                  )}
                  <div>
                    <p className="font-medium">{check.requirement}</p>
                    <p className="text-sm text-gray-600">{check.description}</p>
                    {check.suggestion && (
                      <p className="text-sm text-blue-600 mt-1">{check.suggestion}</p>
                    )}
                  </div>
                </div>
                <Badge className={
                  check.status === 'pass' ? 'bg-green-100 text-green-800' :
                  check.status === 'fail' ? 'bg-red-100 text-red-800' :
                  'bg-yellow-100 text-yellow-800'
                }>
                  {check.status}
                </Badge>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}




===== FILE: client/src/components/documents/AIApplicationFiller.tsx =====

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { 
  Bot, 
  Zap, 
  Target, 
  CheckCircle, 
  AlertCircle, 
  TrendingUp, 
  FileText, 
  Sparkles, 
  Wand2, 
  ArrowRight, 
  Download, 
  Share2, 
  Eye, 
  Edit, 
  Plus, 
  RefreshCw, 
  Settings, 
  ExternalLink,
  Clock,
  Users,
  DollarSign,
  Award,
  Lightbulb,
  BarChart3
} from 'lucide-react';

interface AIApplicationFillerProps {
  documentId?: string;
  documentContent?: any;
}

export default function AIApplicationFiller({ documentId, documentContent }: AIApplicationFillerProps) {
  const { toast } = useToast();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isFilling, setIsFilling] = useState(false);
  const [readinessAnalysis, setReadinessAnalysis] = useState<any>(null);
  const [filledApplication, setFilledApplication] = useState<any>(null);
  const [selectedApplicationType, setSelectedApplicationType] = useState<string>('accelerator');
  const [aiStatus, setAiStatus] = useState<{ available: boolean; message: string } | null>(null);

  // Check AI service status on mount
  React.useEffect(() => {
    checkAIStatus();
  }, []);

  const checkAIStatus = async () => {
    try {
      const response = await fetch('/api/documents/ai/status');
      const data = await response.json();
      setAiStatus(data);
    } catch (error) {
      console.error('Error checking AI status:', error);
      setAiStatus({ available: false, message: 'Failed to check AI status' });
    }
  };

  const analyzeReadiness = async () => {
    if (!aiStatus?.available) {
      toast({
        title: 'AI Services Unavailable',
        description: aiStatus?.message || 'AI services are not configured',
        variant: 'destructive'
      });
      return;
    }

    setIsAnalyzing(true);
    try {
      const response = await fetch(`/api/documents/ai/${documentId}/analyze-readiness`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          applicationType: selectedApplicationType,
          documentContent
        })
      });

      if (!response.ok) throw new Error('Failed to analyze document');

      const analysis = await response.json();
      setReadinessAnalysis(analysis);
      
      toast({
        title: 'Analysis Complete',
        description: `Readiness score: ${analysis.readinessScore}%`
      });
    } catch (error) {
      console.error('Error analyzing readiness:', error);
      toast({
        title: 'Analysis Failed',
        description: 'Failed to analyze document readiness',
        variant: 'destructive'
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const fillApplication = async () => {
    if (!aiStatus?.available) {
      toast({
        title: 'AI Services Unavailable',
        description: aiStatus?.message || 'AI services are not configured',
        variant: 'destructive'
      });
      return;
    }

    setIsFilling(true);
    try {
      // Mock application form for demonstration
      const mockForm = {
        id: 'demo-form',
        name: `${selectedApplicationType} Application`,
        type: selectedApplicationType,
        organization: 'Demo Organization',
        sections: [
          {
            id: 'company-info',
            title: 'Company Information',
            fields: [
              { id: 'company-name', label: 'Company Name', type: 'text' as const, required: true },
              { id: 'description', label: 'Description', type: 'textarea' as const, required: true }
            ]
          }
        ]
      };

      const response = await fetch(`/api/documents/ai/${documentId}/fill-application`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          form: mockForm,
          documentContent
        })
      });

      if (!response.ok) throw new Error('Failed to fill application');

      const filled = await response.json();
      setFilledApplication(filled);
      
      toast({
        title: 'Application Filled',
        description: `Completeness: ${filled.completeness}%, Match Score: ${filled.matchScore}%`
      });
    } catch (error) {
      console.error('Error filling application:', error);
      toast({
        title: 'Fill Failed',
        description: 'Failed to fill application',
        variant: 'destructive'
      });
    } finally {
      setIsFilling(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* AI Status Banner */}
      {aiStatus && (
        <Card className={`border-2 ${aiStatus.available ? 'border-green-200 bg-green-50' : 'border-yellow-200 bg-yellow-50'}`}>
          <CardContent className="pt-6">
            <div className="flex items-center gap-3">
              {aiStatus.available ? (
                <CheckCircle className="h-5 w-5 text-green-600" />
              ) : (
                <AlertCircle className="h-5 w-5 text-yellow-600" />
              )}
              <div>
                <p className={`font-medium ${aiStatus.available ? 'text-green-800' : 'text-yellow-800'}`}>
                  {aiStatus.available ? 'AI Services Active' : 'AI Services Unavailable'}
                </p>
                <p className={`text-sm ${aiStatus.available ? 'text-green-600' : 'text-yellow-600'}`}>
                  {aiStatus.message}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Application Type Selection */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Wand2 className="h-5 w-5 text-purple-600" />
            AI-Powered Application Filling
          </CardTitle>
          <CardDescription>
            Automatically fill applications using your document data with AI assistance
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="application-type">Application Type</Label>
            <Select value={selectedApplicationType} onValueChange={setSelectedApplicationType}>
              <SelectTrigger id="application-type">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="accelerator">Accelerator Program</SelectItem>
                <SelectItem value="grant">Grant Application</SelectItem>
                <SelectItem value="competition">Startup Competition</SelectItem>
                <SelectItem value="investment">Investment Pitch</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="flex gap-2">
            <Button 
              onClick={analyzeReadiness} 
              disabled={isAnalyzing || !aiStatus?.available}
              variant="outline"
              className="flex-1"
            >
              {isAnalyzing ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Analyzing...
                </>
              ) : (
                <>
                  <BarChart3 className="h-4 w-4 mr-2" />
                  Analyze Readiness
                </>
              )}
            </Button>
            <Button 
              onClick={fillApplication} 
              disabled={isFilling || !aiStatus?.available}
              className="flex-1 bg-gradient-to-r from-purple-600 to-blue-600"
            >
              {isFilling ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Filling...
                </>
              ) : (
                <>
                  <Sparkles className="h-4 w-4 mr-2" />
                  Fill Application
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Readiness Analysis Results */}
      {readinessAnalysis && (
        <Card className="border-2 border-blue-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5 text-blue-600" />
              Application Readiness Analysis
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Readiness Score */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium">Overall Readiness</span>
                <span className="text-2xl font-bold text-blue-600">{readinessAnalysis.readinessScore}%</span>
              </div>
              <Progress value={readinessAnalysis.readinessScore} className="h-3" />
            </div>

            {/* Missing Fields */}
            {readinessAnalysis.missingFields.length > 0 && (
              <div>
                <h4 className="font-semibold text-red-600 mb-2 flex items-center gap-2">
                  <AlertCircle className="h-4 w-4" />
                  Missing Information ({readinessAnalysis.missingFields.length})
                </h4>
                <div className="space-y-1">
                  {readinessAnalysis.missingFields.map((field: string, index: number) => (
                    <div key={index} className="flex items-center gap-2 text-sm text-gray-600">
                      <div className="w-1.5 h-1.5 bg-red-400 rounded-full" />
                      {field}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Strengths */}
            {readinessAnalysis.strengths.length > 0 && (
              <div>
                <h4 className="font-semibold text-green-600 mb-2 flex items-center gap-2">
                  <CheckCircle className="h-4 w-4" />
                  Strengths ({readinessAnalysis.strengths.length})
                </h4>
                <div className="space-y-1">
                  {readinessAnalysis.strengths.map((strength: string, index: number) => (
                    <div key={index} className="flex items-center gap-2 text-sm text-gray-600">
                      <div className="w-1.5 h-1.5 bg-green-400 rounded-full" />
                      {strength}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Improvements */}
            {readinessAnalysis.improvements.length > 0 && (
              <div>
                <h4 className="font-semibold text-yellow-600 mb-2 flex items-center gap-2">
                  <Lightbulb className="h-4 w-4" />
                  Suggested Improvements ({readinessAnalysis.improvements.length})
                </h4>
                <div className="space-y-1">
                  {readinessAnalysis.improvements.map((improvement: string, index: number) => (
                    <div key={index} className="flex items-center gap-2 text-sm text-gray-600">
                      <div className="w-1.5 h-1.5 bg-yellow-400 rounded-full" />
                      {improvement}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Recommendations */}
            {readinessAnalysis.recommendations.length > 0 && (
              <div>
                <h4 className="font-semibold text-purple-600 mb-2 flex items-center gap-2">
                  <Award className="h-4 w-4" />
                  Recommendations ({readinessAnalysis.recommendations.length})
                </h4>
                <div className="space-y-1">
                  {readinessAnalysis.recommendations.map((recommendation: string, index: number) => (
                    <div key={index} className="flex items-center gap-2 text-sm text-gray-600">
                      <div className="w-1.5 h-1.5 bg-purple-400 rounded-full" />
                      {recommendation}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Filled Application Results */}
      {filledApplication && (
        <Card className="border-2 border-green-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Sparkles className="h-5 w-5 text-green-600" />
              AI-Filled Application
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Metrics */}
            <div className="grid grid-cols-2 gap-4">
              <div className="p-4 bg-green-50 rounded-lg">
                <div className="text-2xl font-bold text-green-600">{filledApplication.completeness}%</div>
                <div className="text-sm text-gray-600">Completeness</div>
              </div>
              <div className="p-4 bg-blue-50 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">{filledApplication.matchScore}%</div>
                <div className="text-sm text-gray-600">Match Score</div>
              </div>
            </div>

            {/* Suggestions */}
            {filledApplication.suggestions && filledApplication.suggestions.length > 0 && (
              <div>
                <h4 className="font-semibold mb-3">AI Suggestions</h4>
                <div className="space-y-3">
                  {filledApplication.suggestions.map((suggestion: any, index: number) => (
                    <div key={index} className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                      <div className="flex items-start gap-2">
                        <Lightbulb className="h-4 w-4 text-yellow-600 mt-0.5" />
                        <div className="flex-1">
                          <p className="text-sm font-medium text-yellow-800">{suggestion.suggestion}</p>
                          <p className="text-xs text-yellow-700 mt-1">{suggestion.reason}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Actions */}
            <div className="flex gap-2">
              <Button variant="outline" className="flex-1">
                <Eye className="h-4 w-4 mr-2" />
                Preview
              </Button>
              <Button variant="outline" className="flex-1">
                <Edit className="h-4 w-4 mr-2" />
                Edit
              </Button>
              <Button className="flex-1 bg-gradient-to-r from-green-600 to-blue-600">
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}




===== FILE: client/src/components/documents/CollaborationWorkflow.tsx =====

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { 
  Users, 
  MessageSquare, 
  Clock, 
  CheckCircle, 
  AlertCircle, 
  Edit, 
  Eye, 
  Share2, 
  Plus, 
  Search, 
  Filter, 
  Calendar, 
  Bell, 
  Settings, 
  MoreVertical, 
  ArrowRight, 
  ChevronDown, 
  ChevronRight, 
  Folder, 
  FileText, 
  Bot, 
  Zap, 
  Target, 
  TrendingUp, 
  BarChart3, 
  MessageCircle, 
  ThumbsUp, 
  ThumbsDown, 
  Reply, 
  Flag, 
  Star, 
  Award, 
  Globe, 
  Lock, 
  Unlock, 
  RefreshCw, 
  Download, 
  Upload, 
  Copy, 
  ExternalLink
} from 'lucide-react';

interface WorkflowStep {
  id: string;
  name: string;
  type: 'review' | 'approval' | 'signature' | 'notification' | 'ai-analysis';
  assignee: User;
  dueDate: string;
  completed: boolean;
  comments: Comment[];
  attachments: Attachment[];
  aiInsights?: AIInsight[];
  status: 'pending' | 'in-progress' | 'completed' | 'overdue';
  priority: 'low' | 'medium' | 'high';
}

interface User {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  role: string;
  isOnline: boolean;
}

interface Comment {
  id: string;
  author: User;
  content: string;
  timestamp: string;
  type: 'comment' | 'suggestion' | 'approval' | 'rejection';
  isResolved: boolean;
  replies: Comment[];
}

interface Attachment {
  id: string;
  name: string;
  type: string;
  size: number;
  url: string;
  uploadedBy: User;
  uploadedAt: string;
}

interface AIInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'achievement' | 'opportunity';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  confidence: number;
}

interface Workflow {
  id: string;
  name: string;
  description: string;
  documentId: string;
  steps: WorkflowStep[];
  participants: User[];
  status: 'draft' | 'active' | 'completed' | 'cancelled';
  createdAt: string;
  updatedAt: string;
  createdBy: User;
  aiEnabled: boolean;
}

// Mock data
const mockUsers: User[] = [
  { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Project Manager', isOnline: true },
  { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'Content Writer', isOnline: true },
  { id: '3', name: 'Mike Johnson', email: 'mike@example.com', role: 'Reviewer', isOnline: false },
  { id: '4', name: 'Sarah Wilson', email: 'sarah@example.com', role: 'Approver', isOnline: true }
];

const mockWorkflows: Workflow[] = [
  {
    id: '1',
    name: 'Business Plan Review Process',
    description: 'Comprehensive review and approval workflow for business plans',
    documentId: '1',
    steps: [
      {
        id: '1',
        name: 'Initial Review',
        type: 'review',
        assignee: mockUsers[1],
        dueDate: '2024-01-20',
        completed: true,
        comments: [
          {
            id: '1',
            author: mockUsers[1],
            content: 'Great start! The executive summary is well-written.',
            timestamp: '2024-01-18T10:30:00Z',
            type: 'comment',
            isResolved: false,
            replies: []
          }
        ],
        attachments: [],
        status: 'completed',
        priority: 'high'
      },
      {
        id: '2',
        name: 'Financial Review',
        type: 'review',
        assignee: mockUsers[2],
        dueDate: '2024-01-22',
        completed: false,
        comments: [],
        attachments: [],
        aiInsights: [
          {
            id: '1',
            type: 'suggestion',
            title: 'Financial Projections Need Detail',
            description: 'Consider adding more detailed financial projections with assumptions',
            priority: 'high',
            actionable: true,
            confidence: 92
          }
        ],
        status: 'in-progress',
        priority: 'high'
      },
      {
        id: '3',
        name: 'Final Approval',
        type: 'approval',
        assignee: mockUsers[3],
        dueDate: '2024-01-25',
        completed: false,
        comments: [],
        attachments: [],
        status: 'pending',
        priority: 'medium'
      }
    ],
    participants: mockUsers,
    status: 'active',
    createdAt: '2024-01-15',
    updatedAt: '2024-01-18',
    createdBy: mockUsers[0],
    aiEnabled: true
  }
];

export default function CollaborationWorkflow() {
  const [selectedTab, setSelectedTab] = useState('workflows');
  const [selectedWorkflow, setSelectedWorkflow] = useState<Workflow | null>(null);
  const [isCreateWorkflowDialogOpen, setIsCreateWorkflowDialogOpen] = useState(false);
  const [isAddCommentDialogOpen, setIsAddCommentDialogOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('all');

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'in-progress': return 'bg-blue-100 text-blue-800';
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'overdue': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStepIcon = (type: string) => {
    switch (type) {
      case 'review': return Eye;
      case 'approval': return CheckCircle;
      case 'signature': return Edit;
      case 'notification': return Bell;
      case 'ai-analysis': return Bot;
      default: return Target;
    }
  };

  const filteredWorkflows = mockWorkflows.filter(workflow => {
    const matchesSearch = workflow.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         workflow.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = selectedStatus === 'all' || workflow.status === selectedStatus;
    return matchesSearch && matchesStatus;
  });

  const getWorkflowProgress = (workflow: Workflow) => {
    const completedSteps = workflow.steps.filter(step => step.completed).length;
    return (completedSteps / workflow.steps.length) * 100;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">
            Collaboration Workflow 🤝
          </h2>
          <p className="text-gray-600">
            Streamlined document review, approval, and collaboration processes
          </p>
        </div>
        <Button onClick={() => setIsCreateWorkflowDialogOpen(true)}>
          <Plus className="h-4 w-4 mr-2" />
          Create Workflow
        </Button>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col lg:flex-row gap-4">
        <div className="flex-1">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
            <Input
              placeholder="Search workflows, documents, or participants..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
        <div className="flex gap-2">
          <Select value={selectedStatus} onValueChange={setSelectedStatus}>
            <SelectTrigger className="w-32">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="draft">Draft</SelectItem>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="completed">Completed</SelectItem>
              <SelectItem value="cancelled">Cancelled</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="workflows">Workflows</TabsTrigger>
          <TabsTrigger value="tasks">My Tasks</TabsTrigger>
          <TabsTrigger value="activity">Activity</TabsTrigger>
        </TabsList>

        {/* Workflows Tab */}
        <TabsContent value="workflows" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredWorkflows.map((workflow) => (
              <Card key={workflow.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{workflow.name}</CardTitle>
                      <CardDescription>{workflow.description}</CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(workflow.status)}>
                        {workflow.status}
                      </Badge>
                      {workflow.aiEnabled && (
                        <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                          <Bot className="h-3 w-3 mr-1" />
                          AI
                        </Badge>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Progress */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Progress</span>
                      <span className="text-sm text-gray-600">
                        {workflow.steps.filter(step => step.completed).length}/{workflow.steps.length} steps
                      </span>
                    </div>
                    <Progress value={getWorkflowProgress(workflow)} className="h-2" />
                  </div>

                  {/* Participants */}
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-gray-400" />
                    <div className="flex -space-x-2">
                      {workflow.participants.slice(0, 4).map((participant) => (
                        <Avatar key={participant.id} className="h-8 w-8 border-2 border-white">
                          <AvatarImage src={participant.avatar} />
                          <AvatarFallback>{participant.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                        </Avatar>
                      ))}
                      {workflow.participants.length > 4 && (
                        <div className="h-8 w-8 rounded-full bg-gray-100 border-2 border-white flex items-center justify-center text-xs font-medium">
                          +{workflow.participants.length - 4}
                        </div>
                      )}
                    </div>
                    <span className="text-sm text-gray-600">
                      {workflow.participants.length} participant{workflow.participants.length !== 1 ? 's' : ''}
                    </span>
                  </div>

                  {/* Steps Preview */}
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium text-gray-700">Workflow Steps</h4>
                    {workflow.steps.slice(0, 3).map((step) => {
                      const StepIcon = getStepIcon(step.type);
                      return (
                        <div key={step.id} className="flex items-center gap-3 p-2 bg-gray-50 rounded-lg">
                          <StepIcon className="h-4 w-4 text-gray-500" />
                          <div className="flex-1">
                            <p className="text-sm font-medium">{step.name}</p>
                            <p className="text-xs text-gray-600">{step.assignee.name}</p>
                          </div>
                          <div className="flex items-center gap-2">
                            <Badge className={getStatusColor(step.status)}>
                              {step.status}
                            </Badge>
                            <Badge className={getPriorityColor(step.priority)}>
                              {step.priority}
                            </Badge>
                          </div>
                        </div>
                      );
                    })}
                    {workflow.steps.length > 3 && (
                      <p className="text-xs text-gray-500">
                        +{workflow.steps.length - 3} more steps
                      </p>
                    )}
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button 
                      size="sm" 
                      className="flex-1"
                      onClick={() => setSelectedWorkflow(workflow)}
                    >
                      <Eye className="h-4 w-4 mr-2" />
                      View Details
                    </Button>
                    <Button size="sm" variant="outline">
                      <Settings className="h-4 w-4 mr-2" />
                      Configure
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* My Tasks Tab */}
        <TabsContent value="tasks" className="space-y-4">
          <div className="space-y-4">
            {mockWorkflows.flatMap(workflow => 
              workflow.steps.filter(step => step.assignee.id === '1' && !step.completed)
            ).map((step) => (
              <Card key={step.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{step.name}</CardTitle>
                      <CardDescription>
                        From: {mockWorkflows.find(w => w.steps.includes(step))?.name}
                      </CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(step.status)}>
                        {step.status}
                      </Badge>
                      <Badge className={getPriorityColor(step.priority)}>
                        {step.priority}
                      </Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Due Date */}
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Calendar className="h-4 w-4" />
                    <span>Due: {step.dueDate}</span>
                  </div>

                  {/* AI Insights */}
                  {step.aiInsights && step.aiInsights.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-700">AI Insights</h4>
                      {step.aiInsights.map((insight) => (
                        <div key={insight.id} className="p-2 bg-yellow-50 border border-yellow-200 rounded-lg">
                          <div className="flex items-start gap-2">
                            <Bot className="h-4 w-4 text-yellow-600 mt-0.5" />
                            <div className="flex-1">
                              <p className="text-sm font-medium text-yellow-800">{insight.title}</p>
                              <p className="text-xs text-yellow-700">{insight.description}</p>
                            </div>
                            <Badge className={getPriorityColor(insight.priority)}>
                              {insight.priority}
                            </Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Comments */}
                  {step.comments.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-700">Comments</h4>
                      {step.comments.slice(0, 2).map((comment) => (
                        <div key={comment.id} className="p-2 bg-gray-50 rounded-lg">
                          <div className="flex items-start gap-2">
                            <Avatar className="h-6 w-6">
                              <AvatarImage src={comment.author.avatar} />
                              <AvatarFallback>{comment.author.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                            </Avatar>
                            <div className="flex-1">
                              <p className="text-sm font-medium">{comment.author.name}</p>
                              <p className="text-sm text-gray-600">{comment.content}</p>
                              <p className="text-xs text-gray-500">{comment.timestamp}</p>
                            </div>
                          </div>
                        </div>
                      ))}
                      {step.comments.length > 2 && (
                        <p className="text-xs text-gray-500">
                          +{step.comments.length - 2} more comments
                        </p>
                      )}
                    </div>
                  )}

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button size="sm" className="flex-1">
                      <Edit className="h-4 w-4 mr-2" />
                      Start Review
                    </Button>
                    <Button size="sm" variant="outline">
                      <MessageSquare className="h-4 w-4 mr-2" />
                      Comment
                    </Button>
                    <Button size="sm" variant="outline">
                      <Eye className="h-4 w-4 mr-2" />
                      View
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Activity Tab */}
        <TabsContent value="activity" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Recent Activity</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {[
                  {
                    id: '1',
                    type: 'comment',
                    user: mockUsers[1],
                    action: 'commented on',
                    target: 'Business Plan Review Process',
                    timestamp: '2 hours ago',
                    content: 'Great work on the financial projections!'
                  },
                  {
                    id: '2',
                    type: 'approval',
                    user: mockUsers[3],
                    action: 'approved',
                    target: 'Marketing Strategy Document',
                    timestamp: '4 hours ago',
                    content: null
                  },
                  {
                    id: '3',
                    type: 'ai-insight',
                    user: { id: 'ai', name: 'AI Assistant', email: 'ai@example.com', role: 'AI', isOnline: true },
                    action: 'suggested improvements for',
                    target: 'Executive Summary',
                    timestamp: '6 hours ago',
                    content: 'Consider adding more specific metrics to strengthen the value proposition.'
                  }
                ].map((activity) => (
                  <div key={activity.id} className="flex items-start gap-3 p-3 bg-gray-50 rounded-lg">
                    <Avatar className="h-8 w-8">
                      <AvatarImage src={activity.user.avatar} />
                      <AvatarFallback>
                        {activity.user.name.split(' ').map(n => n[0]).join('')}
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <p className="text-sm">
                        <span className="font-medium">{activity.user.name}</span>{' '}
                        <span className="text-gray-600">{activity.action}</span>{' '}
                        <span className="font-medium">{activity.target}</span>
                      </p>
                      {activity.content && (
                        <p className="text-sm text-gray-600 mt-1">{activity.content}</p>
                      )}
                      <p className="text-xs text-gray-500 mt-1">{activity.timestamp}</p>
                    </div>
                    {activity.type === 'ai-insight' && (
                      <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                        <Bot className="h-3 w-3 mr-1" />
                        AI
                      </Badge>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Create Workflow Dialog */}
      <Dialog open={isCreateWorkflowDialogOpen} onOpenChange={setIsCreateWorkflowDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Create New Workflow</DialogTitle>
            <DialogDescription>
              Set up a new collaboration workflow for document review and approval
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="workflow-name">Workflow Name</Label>
              <Input id="workflow-name" placeholder="Enter workflow name" />
            </div>
            <div>
              <Label htmlFor="workflow-description">Description</Label>
              <Textarea id="workflow-description" placeholder="Describe the workflow purpose" />
            </div>
            <div>
              <Label htmlFor="document">Select Document</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Choose document" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">Business Plan 2024</SelectItem>
                  <SelectItem value="2">Marketing Strategy</SelectItem>
                  <SelectItem value="3">Financial Projections</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="participants">Add Participants</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select participants" />
                </SelectTrigger>
                <SelectContent>
                  {mockUsers.map((user) => (
                    <SelectItem key={user.id} value={user.id}>
                      {user.name} ({user.role})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}




===== FILE: client/src/components/documents/RFPAutomation.tsx =====

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { 
  Bot, 
  Zap, 
  Target, 
  CheckCircle, 
  Clock, 
  AlertCircle, 
  TrendingUp, 
  FileText, 
  Sparkles, 
  Wand2, 
  Brain, 
  ArrowRight, 
  Copy, 
  Download, 
  Share2, 
  Eye, 
  Edit, 
  Trash2, 
  Plus, 
  Search, 
  Filter, 
  Calendar, 
  Users, 
  DollarSign, 
  Award, 
  Star, 
  BarChart3, 
  MessageSquare, 
  RefreshCw, 
  Settings, 
  ExternalLink,
  ChevronDown,
  ChevronRight,
  Folder,
  Globe,
  Lock,
  Unlock
} from 'lucide-react';

interface RFPOpportunity {
  id: string;
  title: string;
  organization: string;
  description: string;
  deadline: string;
  budget: string;
  category: string;
  matchScore: number;
  status: 'open' | 'in-progress' | 'submitted' | 'won' | 'lost';
  requirements: string[];
  keywords: string[];
  aiInsights: AIInsight[];
  autoGenerated: boolean;
  lastUpdated: string;
}

interface AIInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'opportunity' | 'compliance';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  confidence: number;
}

interface RFPResponse {
  id: string;
  rfpId: string;
  title: string;
  status: 'draft' | 'review' | 'submitted' | 'under-review' | 'accepted' | 'rejected';
  completionScore: number;
  sections: ResponseSection[];
  aiGenerated: boolean;
  lastModified: string;
  collaborators: string[];
}

interface ResponseSection {
  id: string;
  title: string;
  content: string;
  aiGenerated: boolean;
  qualityScore: number;
  suggestions: string[];
  required: boolean;
  wordCount: number;
  lastModified: string;
}

// Mock data
const mockRFPOpportunities: RFPOpportunity[] = [
  {
    id: '1',
    title: 'Digital Transformation Initiative',
    organization: 'TechCorp Solutions',
    description: 'Seeking innovative solutions for digital transformation across multiple business units',
    deadline: '2024-02-15',
    budget: '$500,000 - $1,000,000',
    category: 'Technology',
    matchScore: 94,
    status: 'open',
    requirements: [
      'Minimum 5 years experience in digital transformation',
      'Proven track record with enterprise clients',
      'Certified in relevant technologies'
    ],
    keywords: ['digital transformation', 'enterprise', 'cloud', 'automation'],
    aiInsights: [
      {
        id: '1',
        type: 'opportunity',
        title: 'High Match Score',
        description: 'Your company profile matches 94% of the requirements',
        priority: 'high',
        actionable: true,
        confidence: 95
      },
      {
        id: '2',
        type: 'suggestion',
        title: 'Emphasize AI Integration',
        description: 'Highlight your AI capabilities as this is a key requirement',
        priority: 'medium',
        actionable: true,
        confidence: 87
      }
    ],
    autoGenerated: true,
    lastUpdated: '2024-01-15'
  },
  {
    id: '2',
    title: 'Sustainability Consulting Services',
    organization: 'GreenFuture Inc',
    description: 'Comprehensive sustainability consulting for manufacturing operations',
    deadline: '2024-01-30',
    budget: '$200,000 - $400,000',
    category: 'Sustainability',
    matchScore: 78,
    status: 'in-progress',
    requirements: [
      'Environmental consulting experience',
      'Manufacturing sector knowledge',
      'Sustainability certifications'
    ],
    keywords: ['sustainability', 'manufacturing', 'environmental', 'consulting'],
    aiInsights: [
      {
        id: '3',
        type: 'warning',
        title: 'Tight Deadline',
        description: 'Only 15 days remaining - prioritize this opportunity',
        priority: 'high',
        actionable: true,
        confidence: 100
      }
    ],
    autoGenerated: false,
    lastUpdated: '2024-01-10'
  }
];

const mockRFPResponses: RFPResponse[] = [
  {
    id: '1',
    rfpId: '1',
    title: 'Digital Transformation Response',
    status: 'draft',
    completionScore: 65,
    sections: [
      {
        id: '1',
        title: 'Executive Summary',
        content: 'Our company brings 8+ years of experience in digital transformation...',
        aiGenerated: true,
        qualityScore: 88,
        suggestions: ['Add specific metrics', 'Include client testimonials'],
        required: true,
        wordCount: 250,
        lastModified: '2024-01-15'
      },
      {
        id: '2',
        title: 'Technical Approach',
        content: 'We propose a phased approach to digital transformation...',
        aiGenerated: false,
        qualityScore: 72,
        suggestions: ['Provide more technical details', 'Include architecture diagrams'],
        required: true,
        wordCount: 500,
        lastModified: '2024-01-14'
      }
    ],
    aiGenerated: true,
    lastModified: '2024-01-15',
    collaborators: ['John Doe', 'Jane Smith']
  }
];

export default function RFPAutomation() {
  const [selectedTab, setSelectedTab] = useState('opportunities');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [showAIInsights, setShowAIInsights] = useState(true);
  const [isCreateRFPDialogOpen, setIsCreateRFPDialogOpen] = useState(false);
  const [isAutoGenerateDialogOpen, setIsAutoGenerateDialogOpen] = useState(false);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'bg-green-100 text-green-800';
      case 'in-progress': return 'bg-yellow-100 text-yellow-800';
      case 'submitted': return 'bg-blue-100 text-blue-800';
      case 'won': return 'bg-purple-100 text-purple-800';
      case 'lost': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const filteredOpportunities = mockRFPOpportunities.filter(opp => {
    const matchesSearch = opp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         opp.organization.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         opp.keywords.some(keyword => keyword.toLowerCase().includes(searchQuery.toLowerCase()));
    const matchesCategory = selectedCategory === 'all' || opp.category === selectedCategory;
    const matchesStatus = selectedStatus === 'all' || opp.status === selectedStatus;
    return matchesSearch && matchesCategory && matchesStatus;
  });

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
            RFP Automation 🤖
          </h2>
          <p className="text-gray-600">
            AI-powered RFP discovery, analysis, and response generation
          </p>
        </div>
        <div className="flex gap-2">
          <Button onClick={() => setIsAutoGenerateDialogOpen(true)} variant="outline">
            <Wand2 className="h-4 w-4 mr-2" />
            Auto-Generate Response
          </Button>
          <Button onClick={() => setIsCreateRFPDialogOpen(true)}>
            <Plus className="h-4 w-4 mr-2" />
            Create RFP
          </Button>
        </div>
      </div>

      {/* AI Insights Toggle */}
      <div className="flex items-center gap-4">
        <div className="flex items-center space-x-2">
          <input
            type="checkbox"
            id="ai-insights"
            checked={showAIInsights}
            onChange={(e) => setShowAIInsights(e.target.checked)}
            className="rounded"
          />
          <Label htmlFor="ai-insights" className="flex items-center gap-2">
            <Brain className="h-4 w-4" />
            Show AI Insights
          </Label>
        </div>
        {showAIInsights && (
          <Badge variant="secondary" className="bg-purple-100 text-purple-800">
            <Sparkles className="h-3 w-3 mr-1" />
            AI Enhanced
          </Badge>
        )}
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col lg:flex-row gap-4">
        <div className="flex-1">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
            <Input
              placeholder="Search RFPs, organizations, or keywords..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
        <div className="flex gap-2">
          <Select value={selectedCategory} onValueChange={setSelectedCategory}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Category" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Categories</SelectItem>
              <SelectItem value="Technology">Technology</SelectItem>
              <SelectItem value="Sustainability">Sustainability</SelectItem>
              <SelectItem value="Healthcare">Healthcare</SelectItem>
              <SelectItem value="Education">Education</SelectItem>
            </SelectContent>
          </Select>
          <Select value={selectedStatus} onValueChange={setSelectedStatus}>
            <SelectTrigger className="w-32">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="open">Open</SelectItem>
              <SelectItem value="in-progress">In Progress</SelectItem>
              <SelectItem value="submitted">Submitted</SelectItem>
              <SelectItem value="won">Won</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="opportunities">RFP Opportunities</TabsTrigger>
          <TabsTrigger value="responses">My Responses</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        {/* RFP Opportunities Tab */}
        <TabsContent value="opportunities" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredOpportunities.map((opportunity) => (
              <Card key={opportunity.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{opportunity.title}</CardTitle>
                      <CardDescription className="text-sm text-gray-600">
                        {opportunity.organization}
                      </CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(opportunity.status)}>
                        {opportunity.status}
                      </Badge>
                      {opportunity.autoGenerated && (
                        <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                          <Bot className="h-3 w-3 mr-1" />
                          AI Found
                        </Badge>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-gray-600">{opportunity.description}</p>
                  
                  {/* Match Score */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Match Score</span>
                      <span className="text-sm text-gray-600">{opportunity.matchScore}%</span>
                    </div>
                    <Progress value={opportunity.matchScore} className="h-2" />
                  </div>

                  {/* Key Info */}
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-gray-400" />
                      <span>Due: {opportunity.deadline}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <DollarSign className="h-4 w-4 text-gray-400" />
                      <span>{opportunity.budget}</span>
                    </div>
                  </div>

                  {/* AI Insights */}
                  {showAIInsights && opportunity.aiInsights.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-700">AI Insights</h4>
                      {opportunity.aiInsights.slice(0, 2).map((insight) => (
                        <div key={insight.id} className={`p-2 rounded-lg border ${
                          insight.type === 'opportunity' ? 'bg-green-50 border-green-200' :
                          insight.type === 'warning' ? 'bg-red-50 border-red-200' :
                          'bg-yellow-50 border-yellow-200'
                        }`}>
                          <div className="flex items-start gap-2">
                            {insight.type === 'opportunity' ? (
                              <TrendingUp className="h-4 w-4 text-green-600 mt-0.5" />
                            ) : insight.type === 'warning' ? (
                              <AlertCircle className="h-4 w-4 text-red-600 mt-0.5" />
                            ) : (
                              <Target className="h-4 w-4 text-yellow-600 mt-0.5" />
                            )}
                            <div className="flex-1">
                              <p className="text-sm font-medium">{insight.title}</p>
                              <p className="text-xs text-gray-600">{insight.description}</p>
                            </div>
                            <Badge className={getPriorityColor(insight.priority)}>
                              {insight.priority}
                            </Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Keywords */}
                  <div className="flex flex-wrap gap-1">
                    {opportunity.keywords.slice(0, 4).map((keyword) => (
                      <Badge key={keyword} variant="secondary" className="text-xs">
                        {keyword}
                      </Badge>
                    ))}
                    {opportunity.keywords.length > 4 && (
                      <Badge variant="secondary" className="text-xs">
                        +{opportunity.keywords.length - 4}
                      </Badge>
                    )}
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button size="sm" className="flex-1">
                      <Eye className="h-4 w-4 mr-2" />
                      View Details
                    </Button>
                    <Button size="sm" variant="outline">
                      <Zap className="h-4 w-4 mr-2" />
                      Auto-Respond
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* My Responses Tab */}
        <TabsContent value="responses" className="space-y-4">
          <div className="grid grid-cols-1 gap-6">
            {mockRFPResponses.map((response) => (
              <Card key={response.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{response.title}</CardTitle>
                      <CardDescription>
                        RFP: {mockRFPOpportunities.find(opp => opp.id === response.rfpId)?.title}
                      </CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(response.status)}>
                        {response.status}
                      </Badge>
                      {response.aiGenerated && (
                        <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                          <Bot className="h-3 w-3 mr-1" />
                          AI Generated
                        </Badge>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Completion Score */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Completion Score</span>
                      <span className="text-sm text-gray-600">{response.completionScore}%</span>
                    </div>
                    <Progress value={response.completionScore} className="h-2" />
                  </div>

                  {/* Sections */}
                  <div className="space-y-3">
                    <h4 className="text-sm font-medium text-gray-700">Response Sections</h4>
                    {response.sections.map((section) => (
                      <div key={section.id} className="p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <h5 className="text-sm font-medium">{section.title}</h5>
                          <div className="flex items-center gap-2">
                            {section.aiGenerated && (
                              <Badge variant="secondary" className="bg-purple-100 text-purple-800 text-xs">
                                <Bot className="h-3 w-3 mr-1" />
                                AI
                              </Badge>
                            )}
                            <span className="text-xs text-gray-500">{section.qualityScore}% quality</span>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                          {section.content}
                        </p>
                        <div className="flex items-center justify-between text-xs text-gray-500">
                          <span>{section.wordCount} words</span>
                          <span>Modified {section.lastModified}</span>
                        </div>
                        {section.suggestions.length > 0 && (
                          <div className="mt-2">
                            <p className="text-xs font-medium text-gray-700 mb-1">AI Suggestions:</p>
                            <ul className="text-xs text-gray-600 space-y-1">
                              {section.suggestions.map((suggestion, index) => (
                                <li key={index} className="flex items-start gap-1">
                                  <span className="text-blue-500">•</span>
                                  <span>{suggestion}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>

                  {/* Collaborators */}
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-gray-400" />
                    <span className="text-sm text-gray-600">
                      {response.collaborators.length} collaborator{response.collaborators.length !== 1 ? 's' : ''}
                    </span>
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button size="sm" className="flex-1">
                      <Edit className="h-4 w-4 mr-2" />
                      Continue Editing
                    </Button>
                    <Button size="sm" variant="outline">
                      <Download className="h-4 w-4 mr-2" />
                      Export
                    </Button>
                    <Button size="sm" variant="outline">
                      <Share2 className="h-4 w-4 mr-2" />
                      Share
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Analytics Tab */}
        <TabsContent value="analytics" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Response Success Rate</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-green-600">73%</div>
                <p className="text-sm text-gray-600">+12% from last quarter</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">AI Time Saved</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-blue-600">45h</div>
                <p className="text-sm text-gray-600">This month</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Active RFPs</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-600">12</div>
                <p className="text-sm text-gray-600">In progress</p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Create RFP Dialog */}
      <Dialog open={isCreateRFPDialogOpen} onOpenChange={setIsCreateRFPDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Create New RFP</DialogTitle>
            <DialogDescription>
              Set up a new RFP opportunity with AI assistance
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="title">RFP Title</Label>
                <Input id="title" placeholder="Enter RFP title" />
              </div>
              <div>
                <Label htmlFor="organization">Organization</Label>
                <Input id="organization" placeholder="Organization name" />
              </div>
            </div>
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea id="description" placeholder="Describe the RFP requirements" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="deadline">Deadline</Label>
                <Input id="deadline" type="date" />
              </div>
              <div>
                <Label htmlFor="budget">Budget Range</Label>
                <Input id="budget" placeholder="$0 - $0" />
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="ai-assistance" />
              <Label htmlFor="ai-assistance">Enable AI assistance for response generation</Label>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Auto-Generate Response Dialog */}
      <Dialog open={isAutoGenerateDialogOpen} onOpenChange={setIsAutoGenerateDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Auto-Generate RFP Response</DialogTitle>
            <DialogDescription>
              Let AI analyze the RFP and generate a comprehensive response
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="rfp-url">RFP URL or Document</Label>
              <Input id="rfp-url" placeholder="Paste RFP URL or upload document" />
            </div>
            <div>
              <Label htmlFor="company-info">Company Information</Label>
              <Textarea id="company-info" placeholder="Provide key company details, capabilities, and differentiators" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="response-tone">Response Tone</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select tone" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="professional">Professional</SelectItem>
                    <SelectItem value="innovative">Innovative</SelectItem>
                    <SelectItem value="technical">Technical</SelectItem>
                    <SelectItem value="collaborative">Collaborative</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="priority-sections">Priority Sections</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select focus areas" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="technical">Technical Approach</SelectItem>
                    <SelectItem value="experience">Experience & Credentials</SelectItem>
                    <SelectItem value="pricing">Pricing & Value</SelectItem>
                    <SelectItem value="timeline">Project Timeline</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="include-case-studies" defaultChecked />
              <Label htmlFor="include-case-studies">Include relevant case studies</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="compliance-check" defaultChecked />
              <Label htmlFor="compliance-check">Run compliance and requirement check</Label>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}




===== FILE: client/src/components/documents/RFQAutomation.tsx =====

/**
 * RFQAutomation
 * @package components
 * @subpackage documents
 * @since 0.1.0
 */
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { FileText } from 'lucide-react';

export default function RFQAutomation() {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5" />
          RFQ Automation
        </CardTitle>
        <CardDescription>
          Request for Quotation automation coming soon
        </CardDescription>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-gray-600">
          This feature is under development and will be available soon.
        </p>
      </CardContent>
    </Card>
  );
}




===== FILE: server/routes/document-ai-routes.ts =====

import { Router } from 'express';
import { documentAIService } from '../services/document-ai-service';
import type { ApplicationForm } from '../ai-application-filler';
import { handleRouteError, validateRequiredFields } from '../utils/routeHelpers';

const router = Router();

/**
 * Check if AI services are available
 */
router.get('/status', (req, res) => {
  res.json({
    available: documentAIService.isAIAvailable(),
    message: documentAIService.isAIAvailable() 
      ? 'AI services are available' 
      : 'AI services are not configured. Please set up OpenAI API keys.'
  });
});

/**
 * Fill application from document
 * POST /api/documents/:documentId/fill-application
 */
router.post('/:documentId/fill-application', async (req, res) => {
  try {
    const { documentId } = req.params;
    const { form } = req.body as { form: ApplicationForm };

    if (!validateRequiredFields(req.body, ['form'], res)) return;

    if (!documentAIService.isAIAvailable()) {
      return res.status(503).json({ 
        message: 'AI services are not available. Please configure OpenAI API keys.' 
      });
    }

    // Fetch document from database (mock for now)
    const document = req.body.document || { 
      id: documentId,
      content: req.body.documentContent 
    };

    const filledApplication = await documentAIService.fillApplicationFromDocument(
      documentId,
      document,
      form
    );

    res.json(filledApplication);
  } catch (error) {
    handleRouteError(error, res, 'Failed to fill application', 'filling application from document');
  }
});

/**
 * Generate suggestions for application improvement
 * POST /api/documents/:documentId/application-suggestions
 */
router.post('/:documentId/application-suggestions', async (req, res) => {
  try {
    const { documentId } = req.params;
    const { form, responses } = req.body as { 
      form: ApplicationForm; 
      responses: Record<string, any> 
    };

    if (!validateRequiredFields(req.body, ['form', 'responses'], res)) return;

    if (!documentAIService.isAIAvailable()) {
      return res.status(503).json({ 
        message: 'AI services are not available' 
      });
    }

    const document = req.body.document || { 
      id: documentId,
      content: req.body.documentContent 
    };

    const suggestions = await documentAIService.generateDocumentSuggestions(
      document,
      form,
      responses
    );

    res.json({ suggestions });
  } catch (error) {
    handleRouteError(error, res, 'Failed to generate suggestions', 'generating suggestions');
  }
});

/**
 * Analyze document for application readiness
 * POST /api/documents/:documentId/analyze-readiness
 */
router.post('/:documentId/analyze-readiness', async (req, res) => {
  try {
    const { documentId } = req.params;
    const { applicationType } = req.body as { 
      applicationType: 'accelerator' | 'grant' | 'competition' | 'investment' 
    };

    if (!validateRequiredFields(req.body, ['applicationType'], res)) return;

    const document = req.body.document || { 
      id: documentId,
      content: req.body.documentContent 
    };

    const analysis = await documentAIService.analyzeDocumentForApplication(
      document,
      applicationType
    );

    res.json(analysis);
  } catch (error) {
    handleRouteError(error, res, 'Failed to analyze document', 'analyzing document');
  }
});

/**
 * Prepare document for application
 * POST /api/documents/:documentId/prepare-application
 */
router.post('/:documentId/prepare-application', async (req, res) => {
  try {
    const { documentId } = req.params;
    const { targetFormat } = req.body as { targetFormat: 'pdf' | 'docx' | 'json' };

    if (!validateRequiredFields(req.body, ['targetFormat'], res)) return;

    const document = req.body.document || { 
      id: documentId,
      content: req.body.documentContent 
    };

    const prepared = await documentAIService.prepareDocumentForApplication(
      document,
      targetFormat
    );

    res.json(prepared);
  } catch (error) {
    handleRouteError(error, res, 'Failed to prepare document', 'preparing document');
  }
});

/**
 * Batch process documents for applications
 * POST /api/documents/batch-fill-applications
 */
router.post('/batch-fill-applications', async (req, res) => {
  try {
    const { documents, form } = req.body as { 
      documents: any[]; 
      form: ApplicationForm 
    };

    if (!validateRequiredFields(req.body, ['documents', 'form'], res)) return;

    if (!documentAIService.isAIAvailable()) {
      return res.status(503).json({ 
        message: 'AI services are not available' 
      });
    }

    const results = await documentAIService.batchProcessDocuments(documents, form);

    res.json({ 
      total: results.length,
      successful: results.filter(r => r.status === 'success').length,
      failed: results.filter(r => r.status === 'error').length,
      results 
    });
  } catch (error) {
    handleRouteError(error, res, 'Failed to batch process documents', 'batch processing documents');
  }
});

export default router;




===== FILE: server/services/document-ai-service.ts =====

import { aiApplicationFiller, ApplicationForm, BusinessPlanData, FilledApplication } from '../ai-application-filler';

/**
 * Document AI Service
 * Bridges the AI Application Filler with the Document System
 * Provides intelligent document processing and application filling capabilities
 */
export class DocumentAIService {
  /**
   * Extract business plan data from a document
   */
  async extractBusinessPlanFromDocument(document: any): Promise<BusinessPlanData> {
    // Extract structured data from document content
    const content = document.content || {};
    
    return {
      companyName: content.companyName || document.title || 'Unknown Company',
      description: content.executiveSummary || content.description || '',
      problem: content.problemStatement || content.problem || '',
      solution: content.solution || content.productDescription || '',
      targetMarket: content.targetMarket || content.marketAnalysis || '',
      businessModel: content.businessModel || content.revenueModel || '',
      competitors: content.competitors || [],
      uniqueValueProposition: content.valueProposition || content.uniqueSellingPoint || '',
      founders: content.founders || content.team?.founders || [],
      traction: {
        users: content.traction?.users || content.metrics?.users,
        revenue: content.traction?.revenue || content.financials?.revenue,
        growth: content.traction?.growth || content.metrics?.growth,
        milestones: content.traction?.milestones || content.achievements || []
      },
      financials: {
        fundingHistory: content.financials?.fundingHistory || '',
        currentRunway: content.financials?.runway || '',
        projections: content.financials?.projections || '',
        useOfFunds: content.financials?.useOfFunds || ''
      },
      team: {
        size: content.team?.size || content.teamSize || 0,
        keyMembers: content.team?.keyMembers || [],
        advisors: content.team?.advisors || []
      }
    };
  }

  /**
   * Fill an application using a document as the source
   */
  async fillApplicationFromDocument(
    documentId: string,
    document: any,
    form: ApplicationForm
  ): Promise<FilledApplication> {
    if (!aiApplicationFiller || !(aiApplicationFiller as any).client) {
      throw new Error('AI Application Filler is not configured. Please set up OpenAI API keys.');
    }

    const businessPlan = await this.extractBusinessPlanFromDocument(document);
    return await aiApplicationFiller.fillApplication(form, businessPlan);
  }

  /**
   * Generate document-specific suggestions for application improvement
   */
  async generateDocumentSuggestions(
    document: any,
    form: ApplicationForm,
    currentResponses: Record<string, any>
  ): Promise<Array<{ fieldId: string; suggestion: string; reason: string }>> {
    if (!aiApplicationFiller || !(aiApplicationFiller as any).client) {
      return [];
    }

    const businessPlan = await this.extractBusinessPlanFromDocument(document);
    return await aiApplicationFiller.generateSuggestions(form, currentResponses, businessPlan);
  }

  /**
   * Analyze document for application readiness
   */
  async analyzeDocumentForApplication(
    document: any,
    applicationType: 'accelerator' | 'grant' | 'competition' | 'investment'
  ): Promise<{
    readinessScore: number;
    missingFields: string[];
    strengths: string[];
    improvements: string[];
    recommendations: string[];
  }> {
    const businessPlan = await this.extractBusinessPlanFromDocument(document);
    
    const missingFields: string[] = [];
    const strengths: string[] = [];
    const improvements: string[] = [];
    const recommendations: string[] = [];

    // Analyze completeness
    if (!businessPlan.companyName) missingFields.push('Company Name');
    if (!businessPlan.description) missingFields.push('Company Description');
    if (!businessPlan.problem) missingFields.push('Problem Statement');
    if (!businessPlan.solution) missingFields.push('Solution Description');
    if (!businessPlan.targetMarket) missingFields.push('Target Market');
    if (!businessPlan.businessModel) missingFields.push('Business Model');
    if (!businessPlan.uniqueValueProposition) missingFields.push('Value Proposition');

    // Identify strengths
    if (businessPlan.traction?.users && businessPlan.traction.users > 0) {
      strengths.push(`Strong user traction: ${businessPlan.traction.users} users`);
    }
    if (businessPlan.traction?.revenue && businessPlan.traction.revenue > 0) {
      strengths.push(`Revenue generation: $${businessPlan.traction.revenue}`);
    }
    if (businessPlan.founders && businessPlan.founders.length > 0) {
      strengths.push(`Experienced founding team: ${businessPlan.founders.length} founders`);
    }
    if (businessPlan.competitors && businessPlan.competitors.length > 0) {
      strengths.push('Competitive analysis completed');
    }

    // Generate improvements
    if (!businessPlan.traction?.milestones || businessPlan.traction.milestones.length === 0) {
      improvements.push('Add key milestones and achievements');
    }
    if (!businessPlan.financials?.projections) {
      improvements.push('Include financial projections');
    }
    if (!businessPlan.team?.advisors || businessPlan.team.advisors.length === 0) {
      improvements.push('List advisory board members');
    }

    // Type-specific recommendations
    switch (applicationType) {
      case 'accelerator':
        recommendations.push('Emphasize growth potential and scalability');
        recommendations.push('Highlight team\'s ability to execute quickly');
        recommendations.push('Show clear product-market fit');
        break;
      case 'grant':
        recommendations.push('Focus on social impact and innovation');
        recommendations.push('Demonstrate alignment with grant objectives');
        recommendations.push('Provide detailed budget breakdown');
        break;
      case 'competition':
        recommendations.push('Create compelling pitch narrative');
        recommendations.push('Highlight unique differentiators');
        recommendations.push('Show traction and validation');
        break;
      case 'investment':
        recommendations.push('Emphasize market opportunity size');
        recommendations.push('Show clear path to profitability');
        recommendations.push('Demonstrate competitive advantages');
        break;
    }

    // Calculate readiness score
    const totalFields = 15; // Total expected fields
    const completedFields = totalFields - missingFields.length;
    const readinessScore = Math.round((completedFields / totalFields) * 100);

    return {
      readinessScore,
      missingFields,
      strengths,
      improvements,
      recommendations
    };
  }

  /**
   * Convert document to application-ready format
   */
  async prepareDocumentForApplication(
    document: any,
    targetFormat: 'pdf' | 'docx' | 'json'
  ): Promise<{
    format: string;
    content: any;
    metadata: {
      generatedAt: string;
      documentId: string;
      version: string;
    };
  }> {
    const businessPlan = await this.extractBusinessPlanFromDocument(document);
    
    return {
      format: targetFormat,
      content: businessPlan,
      metadata: {
        generatedAt: new Date().toISOString(),
        documentId: document.id || document._id,
        version: '1.0'
      }
    };
  }

  /**
   * Batch process multiple documents for applications
   */
  async batchProcessDocuments(
    documents: any[],
    form: ApplicationForm
  ): Promise<Array<{
    documentId: string;
    status: 'success' | 'error';
    result?: FilledApplication;
    error?: string;
  }>> {
    const results = [];

    for (const document of documents) {
      try {
        const result = await this.fillApplicationFromDocument(
          document.id || document._id,
          document,
          form
        );
        results.push({
          documentId: document.id || document._id,
          status: 'success' as const,
          result
        });
      } catch (error) {
        results.push({
          documentId: document.id || document._id,
          status: 'error' as const,
          error: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    return results;
  }

  /**
   * Check if AI services are available
   */
  isAIAvailable(): boolean {
    return !!(aiApplicationFiller && (aiApplicationFiller as any).client);
  }
}

export const documentAIService = new DocumentAIService();




===== FILE: server/ai-application-filler.ts =====

import OpenAI from "openai";

export interface ApplicationFormField {
  id: string;
  label: string;
  type: 'text' | 'textarea' | 'number' | 'select' | 'multiselect' | 'date';
  required: boolean;
  maxLength?: number;
  options?: string[];
  placeholder?: string;
  helpText?: string;
}

export interface ApplicationFormSection {
  id: string;
  title: string;
  description?: string;
  fields: ApplicationFormField[];
}

export interface ApplicationForm {
  id: string;
  name: string;
  type: 'accelerator' | 'grant' | 'competition' | 'investment';
  organization: string;
  sections: ApplicationFormSection[];
}

export interface BusinessPlanData {
  companyName: string;
  description: string;
  problem: string;
  solution: string;
  targetMarket: string;
  businessModel: string;
  competitors: string[];
  uniqueValueProposition: string;
  founders: Array<{
    name: string;
    role: string;
    bio: string;
    experience: string;
  }>;
  traction: {
    users?: number;
    revenue?: number;
    growth?: string;
    milestones?: string[];
  };
  financials: {
    fundingHistory?: string;
    currentRunway?: string;
    projections?: string;
    useOfFunds?: string;
  };
  team: {
    size: number;
    keyMembers: string[];
    advisors?: string[];
  };
}

export interface FilledApplication {
  formId: string;
  responses: Record<string, any>;
  completeness: number;
  suggestions: Array<{
    fieldId: string;
    suggestion: string;
    reason: string;
  }>;
  matchScore: number;
}

/**
 * AI Application Filler Service
 * Automatically fills application forms using business plan data and AI
 */
export class AIApplicationFiller {
  private client: OpenAI | null;

  constructor() {
    const apiKey = process.env.AZURE_OPENAI_API_KEY || process.env.OPENAI_API_KEY;
    const endpoint = process.env.AZURE_OPENAI_ENDPOINT;
    
    if (!apiKey) {
      console.warn('OpenAI API key not configured. AI Application Filler will not be available.');
      this.client = null;
      return;
    }

    if (endpoint) {
      const deployment = process.env.AZURE_OPENAI_DEPLOYMENT || 'gpt-4';
      const normalizedEndpoint = endpoint.endsWith('/') ? endpoint : `${endpoint}/`;
      
      this.client = new OpenAI({
        apiKey,
        baseURL: `${normalizedEndpoint}openai/deployments/${deployment}`,
        defaultQuery: { "api-version": "2024-08-01-preview" },
        defaultHeaders: { "api-key": apiKey },
      });
    } else {
      this.client = new OpenAI({ apiKey });
    }
  }

  /**
   * Fill an entire application form using business plan data
   */
  async fillApplication(
    form: ApplicationForm,
    businessPlan: BusinessPlanData
  ): Promise<FilledApplication> {
    if (!this.client) {
      throw new Error('AI Application Filler is not configured. Please set OpenAI API key.');
    }

    const responses: Record<string, any> = {};
    const suggestions: Array<{ fieldId: string; suggestion: string; reason: string }> = [];

    // Process each section
    for (const section of form.sections) {
      for (const field of section.fields) {
        try {
          const response = await this.fillField(field, section, form, businessPlan);
          responses[field.id] = response.value;

          if (response.suggestion) {
            suggestions.push({
              fieldId: field.id,
              suggestion: response.suggestion,
              reason: response.reason || 'AI-generated improvement suggestion'
            });
          }
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'Unknown error';
          console.error(`Error filling field ${field.id}:`, errorMessage);
          responses[field.id] = '';
        }
      }
    }

    // Calculate completeness
    const totalFields = form.sections.reduce((sum, s) => sum + s.fields.length, 0);
    const filledFields = Object.values(responses).filter(v => v && v.toString().trim() !== '').length;
    const completeness = Math.round((filledFields / totalFields) * 100);

    // Calculate match score
    const matchScore = await this.calculateMatchScore(form, businessPlan, responses);

    return {
      formId: form.id,
      responses,
      completeness,
      suggestions,
      matchScore
    };
  }

  /**
   * Fill a single form field using AI
   */
  private async fillField(
    field: ApplicationFormField,
    section: ApplicationFormSection,
    form: ApplicationForm,
    businessPlan: BusinessPlanData
  ): Promise<{ value: any; suggestion?: string; reason?: string }> {
    if (!this.client) {
      return this.fillFieldWithTemplate(field, businessPlan);
    }

    const prompt = this.buildFieldPrompt(field, section, form, businessPlan);

    try {
      const response = await this.client.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: `You are an expert application writer helping startups fill out ${form.type} applications. 
Generate compelling, accurate, and tailored responses based on the business plan data provided.
Keep responses concise, professional, and aligned with the application requirements.
For text fields, provide the response directly without quotes or formatting.
For suggestions, provide actionable improvements.`
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: field.type === 'textarea' ? 500 : 150
      });

      const content = response.choices[0]?.message?.content?.trim() || '';
      
      // Parse response
      if (content.includes('SUGGESTION:')) {
        const [value, suggestionPart] = content.split('SUGGESTION:');
        return {
          value: value.trim(),
          suggestion: suggestionPart.trim(),
          reason: 'AI-generated enhancement'
        };
      }

      return { value: content };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('Error calling OpenAI API:', errorMessage);
      return this.fillFieldWithTemplate(field, businessPlan);
    }
  }

  /**
   * Build a context-aware prompt for filling a field
   */
  private buildFieldPrompt(
    field: ApplicationFormField,
    section: ApplicationFormSection,
    form: ApplicationForm,
    businessPlan: BusinessPlanData
  ): string {
    let prompt = `Fill out the following field for a ${form.type} application to ${form.organization}:\n\n`;
    prompt += `Section: ${section.title}\n`;
    prompt += `Field: ${field.label}\n`;
    if (field.helpText) prompt += `Help Text: ${field.helpText}\n`;
    if (field.maxLength) prompt += `Max Length: ${field.maxLength} characters\n`;
    prompt += `\nBusiness Plan Data:\n`;
    prompt += `Company: ${businessPlan.companyName}\n`;
    prompt += `Description: ${businessPlan.description}\n`;
    
    // Add relevant context based on field label
    const fieldLower = field.label.toLowerCase();
    
    if (fieldLower.includes('problem')) {
      prompt += `Problem: ${businessPlan.problem}\n`;
    }
    if (fieldLower.includes('solution')) {
      prompt += `Solution: ${businessPlan.solution}\n`;
    }
    if (fieldLower.includes('market') || fieldLower.includes('target')) {
      prompt += `Target Market: ${businessPlan.targetMarket}\n`;
    }
    if (fieldLower.includes('business model') || fieldLower.includes('revenue')) {
      prompt += `Business Model: ${businessPlan.businessModel}\n`;
    }
    if (fieldLower.includes('team') || fieldLower.includes('founder')) {
      prompt += `Founders: ${JSON.stringify(businessPlan.founders, null, 2)}\n`;
      prompt += `Team Size: ${businessPlan.team.size}\n`;
    }
    if (fieldLower.includes('traction') || fieldLower.includes('metric') || fieldLower.includes('growth')) {
      prompt += `Traction: ${JSON.stringify(businessPlan.traction, null, 2)}\n`;
    }
    if (fieldLower.includes('financial') || fieldLower.includes('funding')) {
      prompt += `Financials: ${JSON.stringify(businessPlan.financials, null, 2)}\n`;
    }
    if (fieldLower.includes('competitive') || fieldLower.includes('advantage')) {
      prompt += `Unique Value Proposition: ${businessPlan.uniqueValueProposition}\n`;
      prompt += `Competitors: ${businessPlan.competitors.join(', ')}\n`;
    }

    prompt += `\nGenerate a compelling response for this field. `;
    if (field.maxLength) {
      prompt += `Keep it under ${field.maxLength} characters. `;
    }
    prompt += `If you have a suggestion to improve the response, add it after "SUGGESTION:" on a new line.`;

    return prompt;
  }

  /**
   * Template-based fallback for filling fields
   */
  private fillFieldWithTemplate(
    field: ApplicationFormField,
    businessPlan: BusinessPlanData
  ): { value: any } {
    const fieldLower = field.label.toLowerCase();

    // Company name fields
    if (fieldLower.includes('company name') || fieldLower.includes('startup name')) {
      return { value: businessPlan.companyName };
    }

    // Description fields
    if (fieldLower.includes('description') || fieldLower.includes('overview')) {
      return { value: businessPlan.description };
    }

    // Problem fields
    if (fieldLower.includes('problem')) {
      return { value: businessPlan.problem };
    }

    // Solution fields
    if (fieldLower.includes('solution')) {
      return { value: businessPlan.solution };
    }

    // Market fields
    if (fieldLower.includes('market') || fieldLower.includes('target')) {
      return { value: businessPlan.targetMarket };
    }

    // Business model fields
    if (fieldLower.includes('business model') || fieldLower.includes('revenue model')) {
      return { value: businessPlan.businessModel };
    }

    // Team fields
    if (fieldLower.includes('team size')) {
      return { value: businessPlan.team.size.toString() };
    }

    // Founder fields
    if (fieldLower.includes('founder')) {
      const founderInfo = businessPlan.founders
        .map(f => `${f.name} (${f.role}): ${f.bio}`)
        .join('\n\n');
      return { value: founderInfo };
    }

    // Traction fields
    if (fieldLower.includes('traction') || fieldLower.includes('metric')) {
      let traction = '';
      if (businessPlan.traction.users) traction += `Users: ${businessPlan.traction.users}\n`;
      if (businessPlan.traction.revenue) traction += `Revenue: $${businessPlan.traction.revenue}\n`;
      if (businessPlan.traction.growth) traction += `Growth: ${businessPlan.traction.growth}\n`;
      return { value: traction };
    }

    return { value: '' };
  }

  /**
   * Calculate how well the business plan matches the application requirements
   */
  private async calculateMatchScore(
    form: ApplicationForm,
    businessPlan: BusinessPlanData,
    responses: Record<string, any>
  ): Promise<number> {
    if (!this.client) {
      return 50;
    }

    try {
      const prompt = `Analyze how well this startup matches the ${form.type} application requirements for ${form.organization}.

Business Plan:
- Company: ${businessPlan.companyName}
- Description: ${businessPlan.description}
- Stage: ${businessPlan.traction.users ? 'Has traction' : 'Pre-traction'}
- Team Size: ${businessPlan.team.size}
- Revenue: ${businessPlan.traction.revenue || 'Pre-revenue'}

Application Type: ${form.type}
Organization: ${form.organization}

Rate the match on a scale of 0-100, considering:
1. Stage alignment
2. Team strength
3. Traction/metrics
4. Market opportunity
5. Overall fit

Respond with just a number between 0-100.`;

      const response = await this.client.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "You are an expert at evaluating startup-program fit. Provide only a numeric score."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.3,
        max_tokens: 10
      });

      const score = parseInt(response.choices[0]?.message?.content?.trim() || '50');
      return Math.min(100, Math.max(0, score));
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('Error calculating match score:', errorMessage);
      return 50;
    }
  }

  /**
   * Generate improvement suggestions for a filled application
   */
  async generateSuggestions(
    form: ApplicationForm,
    responses: Record<string, any>,
    businessPlan: BusinessPlanData
  ): Promise<Array<{ fieldId: string; suggestion: string; reason: string }>> {
    if (!this.client) {
      return [];
    }

    const suggestions: Array<{ fieldId: string; suggestion: string; reason: string }> = [];

    for (const section of form.sections) {
      for (const field of section.fields) {
        const response = responses[field.id];
        if (!response || response.toString().trim() === '') continue;

        try {
          const prompt = `Review this application response and suggest improvements:

Field: ${field.label}
Current Response: ${response}

Provide a specific, actionable suggestion to make this response more compelling for a ${form.type} application.
Keep the suggestion concise (1-2 sentences).`;

          const aiResponse = await this.client.chat.completions.create({
            model: "gpt-4",
            messages: [
              {
                role: "system",
                content: "You are an expert application reviewer. Provide concise, actionable feedback."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            temperature: 0.7,
            max_tokens: 150
          });

          const suggestion = aiResponse.choices[0]?.message?.content?.trim();
          if (suggestion && suggestion.length > 10) {
            suggestions.push({
              fieldId: field.id,
              suggestion,
              reason: 'AI-generated improvement'
            });
          }
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'Unknown error';
          console.error(`Error generating suggestion for field ${field.id}:`, errorMessage);
        }
      }
    }

    return suggestions;
  }
}

export const aiApplicationFiller = new AIApplicationFiller();



