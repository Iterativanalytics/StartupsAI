===== FILE: client/src/pages/ecosystem-hub.tsx =====
import { Link } from "wouter";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  Rocket, 
  Target, 
  Lightbulb, 
  ArrowRight, 
  Building2, 
  Users, 
  Clock,
  DollarSign,
  Zap,
  Handshake,
  TrendingUp,
  CheckCircle2,
  Trophy,
  Award,
  Star,
  Calendar,
  MapPin,
  Filter,
  Search,
  ExternalLink,
  Bookmark,
  Share2
} from "lucide-react";

const ecosystemModels = [
  {
    name: "Venture Studio",
    icon: Rocket,
    href: "/venture-studio",
    stage: "Pre-idea to Early Stage",
    equity: "20-50%",
    timeline: "6 months - 2+ years",
    investment: "Co-founder equity",
    description: "Build companies from scratch internally with full-service company building support.",
    approach: "Generate ideas, provide co-founders, and build companies using internal resources",
    features: [
      "Full-service company building",
      "Strategy & product development", 
      "Engineering & marketing",
      "Fundraising support",
      "Co-founder model"
    ],
    examples: ["Rocket Internet", "Idealab", "Science Inc."],
    color: "from-purple-500 to-indigo-600",
    bgColor: "bg-purple-50"
  },
  {
    name: "Accelerator",
    icon: Target,
    href: "/accelerator",
    stage: "Early Stage with Traction",
    equity: "6-10%",
    timeline: "3-6 months",
    investment: "$100K-250K",
    description: "Intensive short-term programs for existing startups with structured curriculum.",
    approach: "Cohort-based programs with mentorship, education, and networking",
    features: [
      "Cohort-based programs",
      "Intensive mentorship",
      "Demo day finale",
      "Network access",
      "Structured curriculum"
    ],
    examples: ["Y Combinator", "Techstars", "500 Startups"],
    color: "from-teal-500 to-blue-600",
    bgColor: "bg-teal-50"
  },
  {
    name: "Incubator",
    icon: Lightbulb,
    href: "/incubator",
    stage: "Idea to Early Stage",
    equity: "Varies (sometimes 0%)",
    timeline: "6 months - 2+ years",
    investment: "Flexible",
    description: "Longer-term nurturing of early-stage companies with flexible support.",
    approach: "Provide resources, workspace, and guidance over extended periods",
    features: [
      "Office space & resources",
      "Long-term support",
      "Flexible programs",
      "Basic services",
      "Sometimes funding"
    ],
    examples: ["University incubators", "Corporate incubators", "Government programs"],
    color: "from-orange-500 to-red-600",
    bgColor: "bg-orange-50"
  },
  {
    name: "Competitions",
    icon: Trophy,
    href: "/applications",
    stage: "All Stages",
    equity: "0% (Prize-based)",
    timeline: "1-3 days",
    investment: "Prize money + exposure",
    description: "Competitive events where startups pitch for prizes, recognition, and networking opportunities.",
    approach: "Time-limited competitive events with judging panels and prize distribution",
    features: [
      "Prize money & recognition",
      "Media exposure",
      "Investor networking",
      "Validation opportunity",
      "Quick feedback"
    ],
    examples: ["TechCrunch Disrupt", "Startup Grind", "Pitch competitions"],
    color: "from-yellow-500 to-orange-600",
    bgColor: "bg-yellow-50"
  }
];

const competitions = [
  {
    id: 'techcrunch-disrupt',
    name: 'TechCrunch Disrupt Startup Battlefield',
    organizer: 'TechCrunch',
    category: 'Pitch Competition',
    prize: '$100K',
    deadline: '2024-08-31',
    location: 'San Francisco, CA',
    status: 'closing-soon',
    difficulty: 'hard',
    popularity: 95,
    description: 'The world\'s premier startup conference. Pitch to global investors and win $100K.',
    requirements: ['Early-stage startup', 'Pitch presentation', 'Demo ready'],
    benefits: ['$100K prize', 'Global exposure', 'Media coverage', 'Investor access'],
    eligibility: {
      stage: ['pre-seed', 'seed'],
      industry: ['technology'],
      teamSize: { min: 1, max: 10 }
    },
    featured: true,
    website: 'https://techcrunch.com',
    tags: ['prestigious', 'media', 'global', 'tech']
  },
  {
    id: 'startup-grind-global',
    name: 'Startup Grind Global Conference',
    organizer: 'Startup Grind',
    category: 'Pitch Competition',
    prize: '$50K',
    deadline: '2024-09-30',
    location: 'Redwood City, CA',
    status: 'open',
    difficulty: 'medium',
    popularity: 70,
    description: 'Pitch your startup to global investors and win $50K in prizes.',
    requirements: ['Working product', 'Pitch deck', 'Team presentation'],
    benefits: ['$50K prize', 'Investor exposure', 'Media coverage', 'Networking'],
    eligibility: {
      stage: ['pre-seed', 'seed', 'series-a'],
      industry: ['all'],
      teamSize: { min: 1, max: 20 }
    },
    featured: false,
    website: 'https://startupgrind.com',
    tags: ['pitch', 'competition', 'networking']
  },
  {
    id: 'sxsw-pitch',
    name: 'SXSW Pitch Competition',
    organizer: 'SXSW',
    category: 'Tech Innovation',
    prize: '$25K',
    deadline: '2024-10-15',
    location: 'Austin, TX',
    status: 'open',
    difficulty: 'medium',
    popularity: 80,
    description: 'Showcase your startup at the world\'s most influential tech conference.',
    requirements: ['Tech startup', 'Innovation focus', 'Market potential'],
    benefits: ['$25K prize', 'SXSW exposure', 'Media coverage', 'Networking'],
    eligibility: {
      stage: ['pre-seed', 'seed'],
      industry: ['technology', 'innovation'],
      teamSize: { min: 1, max: 15 }
    },
    featured: true,
    website: 'https://sxsw.com',
    tags: ['tech', 'innovation', 'media', 'networking']
  },
  {
    id: 'web-summit-pitch',
    name: 'Web Summit PITCH Competition',
    organizer: 'Web Summit',
    category: 'Global Startup',
    prize: '$30K',
    deadline: '2024-11-01',
    location: 'Lisbon, Portugal',
    status: 'open',
    difficulty: 'hard',
    popularity: 85,
    description: 'Europe\'s largest tech conference startup competition.',
    requirements: ['Global startup', 'Tech focus', 'Growth potential'],
    benefits: ['$30K prize', 'European exposure', 'Investor network', 'Media coverage'],
    eligibility: {
      stage: ['pre-seed', 'seed', 'series-a'],
      industry: ['technology'],
      teamSize: { min: 1, max: 25 }
    },
    featured: true,
    website: 'https://websummit.com',
    tags: ['europe', 'global', 'tech', 'networking']
  },
  {
    id: 'ces-innovation-awards',
    name: 'CES Innovation Awards',
    organizer: 'Consumer Technology Association',
    category: 'Innovation Recognition',
    prize: 'Award + Exposure',
    deadline: '2024-09-15',
    location: 'Las Vegas, NV',
    status: 'open',
    difficulty: 'medium',
    popularity: 75,
    description: 'Recognize the most innovative products and startups at CES.',
    requirements: ['Consumer tech product', 'Innovation demonstration', 'Market readiness'],
    benefits: ['CES recognition', 'Media exposure', 'Industry validation', 'Networking'],
    eligibility: {
      stage: ['pre-seed', 'seed', 'series-a'],
      industry: ['consumer-technology', 'hardware', 'software'],
      teamSize: { min: 1, max: 50 }
    },
    featured: false,
    website: 'https://ces.tech',
    tags: ['innovation', 'consumer-tech', 'hardware', 'recognition']
  },
  {
    id: 'slush-pitch',
    name: 'Slush 100 Pitching Competition',
    organizer: 'Slush',
    category: 'Nordic Startup',
    prize: '$50K',
    deadline: '2024-11-15',
    location: 'Helsinki, Finland',
    status: 'open',
    difficulty: 'hard',
    popularity: 78,
    description: 'Northern Europe\'s leading startup and tech event competition.',
    requirements: ['Nordic startup', 'Tech focus', 'Growth potential'],
    benefits: ['$50K prize', 'Nordic exposure', 'Investor network', 'Media coverage'],
    eligibility: {
      stage: ['pre-seed', 'seed'],
      industry: ['technology'],
      teamSize: { min: 1, max: 20 }
    },
    featured: false,
    website: 'https://slush.org',
    tags: ['nordic', 'europe', 'tech', 'networking']
  }
];

const comparisons = [
  {
    aspect: "Hands-on Involvement",
    studio: "Most hands-on - Co-building",
    accelerator: "Structured guidance",
    incubator: "Light touch support",
    competitions: "Minimal - Pitch focused"
  },
  {
    aspect: "Time Commitment", 
    studio: "Intensive & long-term",
    accelerator: "Intensive but time-limited",
    incubator: "Flexible timeline",
    competitions: "Very short-term (1-3 days)"
  },
  {
    aspect: "Program Structure",
    studio: "Custom company building",
    accelerator: "Structured curriculum",
    incubator: "Flexible resources",
    competitions: "Competitive events"
  },
  {
    aspect: "Equity Requirement",
    studio: "20-50% equity",
    accelerator: "6-10% equity",
    incubator: "Varies (sometimes 0%)",
    competitions: "0% equity (prize-based)"
  },
  {
    aspect: "Primary Benefit",
    studio: "Full company building",
    accelerator: "Mentorship & network",
    incubator: "Resources & space",
    competitions: "Recognition & exposure"
  }
];

export default function EcosystemHub() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-teal-50">
      <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <Building2 className="h-10 w-10 text-purple-600" />
            <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-600 to-teal-600 bg-clip-text text-transparent">
              Ecosystem Hub
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Choose the right ecosystem model for your startup journey. Each model offers unique approaches, 
            timelines, and support structures tailored to different stages and needs
          </p>
        </div>

      {/* Ecosystem Model Cards */}
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16">
        {ecosystemModels.map((model) => {
          const IconComponent = model.icon;
          return (
            <Card key={model.name} className={`relative overflow-hidden border-2 hover:shadow-xl transition-all duration-300 ${model.bgColor}`}>
              <div className={`absolute top-0 right-0 w-32 h-32 bg-gradient-to-br ${model.color} opacity-10 rounded-full -mr-16 -mt-16`} />

              <CardHeader className="relative">
                <div className="flex items-center justify-between mb-4">
                  <div className={`p-3 rounded-lg bg-gradient-to-br ${model.color} text-white`}>
                    <IconComponent className="h-8 w-8" />
                  </div>
                  <Badge variant="outline" className="font-medium">
                    {model.stage}
                  </Badge>
                </div>
                <CardTitle className="text-2xl mb-2">{model.name}</CardTitle>
                <CardDescription className="text-base">
                  {model.description}
                </CardDescription>
              </CardHeader>

              <CardContent className="space-y-6">
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <DollarSign className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="font-medium">Equity</p>
                      <p className="text-gray-600">{model.equity}</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="font-medium">Timeline</p>
                      <p className="text-gray-600">{model.timeline}</p>
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="font-semibold mb-2 flex items-center gap-2">
                    <Zap className="h-4 w-4" />
                    Key Features
                  </h4>
                  <ul className="space-y-1 text-sm text-gray-600">
                    {model.features.map((feature, index) => (
                      <li key={index} className="flex items-center gap-2">
                        <div className="w-1.5 h-1.5 bg-gray-400 rounded-full" />
                        {feature}
                      </li>
                    ))}
                  </ul>
                </div>

                <div>
                  <h4 className="font-semibold mb-2 flex items-center gap-2">
                    <Building2 className="h-4 w-4" />
                    Examples
                  </h4>
                  <div className="flex flex-wrap gap-1">
                    {model.examples.map((example, index) => (
                      <Badge key={index} variant="secondary" className="text-xs">
                        {example}
                      </Badge>
                    ))}
                  </div>
                </div>

                <Link href={model.href}>
                  <Button className={`w-full bg-gradient-to-r ${model.color} hover:opacity-90 transition-opacity`}>
                    Explore {model.name}
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                </Link>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Comparison Table */}
      <Card className="mb-16">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Handshake className="h-6 w-6" />
            Model Comparison
          </CardTitle>
          <CardDescription>
            Key differences between the three ecosystem models
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-3 px-4 font-semibold">Aspect</th>
                  <th className="text-left py-3 px-4 font-semibold text-purple-600">Venture Studio</th>
                  <th className="text-left py-3 px-4 font-semibold text-teal-600">Accelerator</th>
                  <th className="text-left py-3 px-4 font-semibold text-orange-600">Incubator</th>
                  <th className="text-left py-3 px-4 font-semibold text-yellow-600">Competitions</th>
                </tr>
              </thead>
              <tbody>
                {comparisons.map((comparison, index) => (
                  <tr key={index} className="border-b">
                    <td className="py-3 px-4 font-medium">{comparison.aspect}</td>
                    <td className="py-3 px-4 text-gray-600">{comparison.studio}</td>
                    <td className="py-3 px-4 text-gray-600">{comparison.accelerator}</td>
                    <td className="py-3 px-4 text-gray-600">{comparison.incubator}</td>
                    <td className="py-3 px-4 text-gray-600">{comparison.competitions}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* Featured Competitions */}
      <div className="mb-16">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold mb-4 flex items-center justify-center gap-3">
            <Trophy className="h-8 w-8 text-yellow-500" />
            Featured Competitions
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Compete for prizes, recognition, and networking opportunities at the world's leading startup competitions
          </p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {competitions.filter(comp => comp.featured).map((competition) => (
            <Card key={competition.id} className="relative overflow-hidden border-2 hover:shadow-xl transition-all duration-300 bg-gradient-to-br from-yellow-50 to-orange-50">
              <div className="absolute top-0 right-0 w-24 h-24 bg-gradient-to-br from-yellow-400 to-orange-400 opacity-10 rounded-full -mr-12 -mt-12" />
              
              <CardHeader className="relative">
                <div className="flex items-start justify-between mb-4">
                  <div className="p-3 rounded-lg bg-gradient-to-br from-yellow-500 to-orange-500 text-white">
                    <Trophy className="h-6 w-6" />
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="font-medium">
                      {competition.category}
                    </Badge>
                    <Badge className={`${
                      competition.status === 'open' ? 'bg-green-100 text-green-800' :
                      competition.status === 'closing-soon' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {competition.status.replace('-', ' ')}
                    </Badge>
                  </div>
                </div>
                <CardTitle className="text-xl mb-2">{competition.name}</CardTitle>
                <CardDescription className="text-sm text-gray-600 mb-2">
                  {competition.organizer}
                </CardDescription>
                <p className="text-sm text-gray-700 line-clamp-2">
                  {competition.description}
                </p>
              </CardHeader>

              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <DollarSign className="h-4 w-4 text-yellow-600" />
                    <div>
                      <p className="font-medium text-yellow-700">Prize</p>
                      <p className="text-gray-600">{competition.prize}</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <MapPin className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="font-medium">Location</p>
                      <p className="text-gray-600">{competition.location}</p>
                    </div>
                  </div>
                </div>

                <div className="space-y-2">
                  <h4 className="font-semibold text-sm flex items-center gap-2">
                    <Award className="h-4 w-4" />
                    Benefits
                  </h4>
                  <div className="flex flex-wrap gap-1">
                    {competition.benefits.slice(0, 3).map((benefit, index) => (
                      <Badge key={index} variant="secondary" className="text-xs">
                        {benefit}
                      </Badge>
                    ))}
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                      competition.difficulty === 'easy' ? 'bg-green-100 text-green-800' :
                      competition.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {competition.difficulty}
                    </span>
                    <span className="text-xs text-gray-500">
                      {competition.popularity}% popular
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" className="border-yellow-200 hover:bg-yellow-50">
                      <ExternalLink className="h-4 w-4 mr-1" />
                      View
                    </Button>
                    <Button size="sm" className="bg-gradient-to-r from-yellow-500 to-orange-500 hover:opacity-90">
                      Apply
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="text-center">
          <Link href="/applications">
            <Button variant="outline" className="border-yellow-200 hover:bg-yellow-50">
              View All Competitions
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </Link>
        </div>
      </div>

      {/* Enhanced Quick Actions */}
      <div className="grid md:grid-cols-2 gap-8 mb-16">
        <Card className="relative overflow-hidden">
          <div className="absolute top-0 right-0 w-24 h-24 bg-gradient-to-br from-purple-400 to-pink-400 opacity-10 rounded-full -mr-12 -mt-12" />
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="h-6 w-6 text-purple-600" />
              Smart Ecosystem Matcher
            </CardTitle>
            <CardDescription>
              AI-powered assessment to find your perfect ecosystem fit based on stage, goals, and industry
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3 mb-4">
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <CheckCircle2 className="h-4 w-4 text-green-600" />
                <span>5-minute assessment</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <CheckCircle2 className="h-4 w-4 text-green-600" />
                <span>Personalized recommendations</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <CheckCircle2 className="h-4 w-4 text-green-600" />
                <span>Direct program connections</span>
              </div>
            </div>
            <Button className="w-full bg-gradient-to-r from-purple-600 to-pink-600">
              Start Assessment
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </CardContent>
        </Card>

        <Card className="relative overflow-hidden">
          <div className="absolute top-0 right-0 w-24 h-24 bg-gradient-to-br from-teal-400 to-blue-400 opacity-10 rounded-full -mr-12 -mt-12" />
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Building2 className="h-6 w-6 text-teal-600" />
              Global Program Directory
            </CardTitle>
            <CardDescription>
              Discover and connect with 500+ accelerators, incubators, and venture studios worldwide
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3 mb-4">
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <CheckCircle2 className="h-4 w-4 text-green-600" />
                <span>Geographic filtering</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <CheckCircle2 className="h-4 w-4 text-green-600" />
                <span>Industry specialization</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <CheckCircle2 className="h-4 w-4 text-green-600" />
                <span>Application tracking</span>
              </div>
            </div>
            <Button variant="outline" className="w-full border-teal-200 hover:bg-teal-50">
              Browse Programs
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Success Metrics */}
      <Card className="mb-16">
        <CardHeader className="text-center">
          <CardTitle className="flex items-center justify-center gap-2 text-2xl">
            <TrendingUp className="h-7 w-7 text-green-600" />
            Platform Success Metrics
          </CardTitle>
          <CardDescription>
            Real outcomes from our ecosystem participants
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-4 gap-8">
            <div className="text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">$2.8B</div>
              <div className="text-sm text-gray-600">Total Funding Raised</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-600 mb-2">1,247</div>
              <div className="text-sm text-gray-600">Companies Launched</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-purple-600 mb-2">73%</div>
              <div className="text-sm text-gray-600">Success Rate</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-orange-600 mb-2">156</div>
              <div className="text-sm text-gray-600">Successful Exits</div>
            </div>
          </div>
          
          <div className="mt-8 pt-8 border-t">
            <h3 className="text-lg font-semibold text-center mb-6 flex items-center justify-center gap-2">
              <Trophy className="h-5 w-5 text-yellow-500" />
              Competition Highlights
            </h3>
            <div className="grid md:grid-cols-3 gap-6">
              <div className="text-center">
                <div className="text-2xl font-bold text-yellow-600 mb-2">$2.1M</div>
                <div className="text-sm text-gray-600">Total Prize Money Won</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-yellow-600 mb-2">89</div>
                <div className="text-sm text-gray-600">Competitions Entered</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-yellow-600 mb-2">23</div>
                <div className="text-sm text-gray-600">First Place Wins</div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
      </div>
    </div>
  );
}

===== FILE: client/src/pages/venture-studio.tsx =====

import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { 
  Rocket, 
  Lightbulb, 
  Users, 
  Building2, 
  Target, 
  TrendingUp,
  Loader2,
  Plus,
  Code,
  Briefcase,
  DollarSign,
  Calendar,
  CheckCircle2
} from "lucide-react";

const ventureIdeaSchema = z.object({
  title: z.string().min(3, "Title must be at least 3 characters"),
  description: z.string().min(10, "Description must be at least 10 characters"),
  industry: z.string().min(1, "Industry is required"),
  targetMarket: z.string().min(1, "Target market is required"),
  estimatedBudget: z.string().transform(val => parseInt(val)),
  timeline: z.string().min(1, "Timeline is required"),
});

const studioCapabilities = [
  {
    icon: Lightbulb,
    title: "Idea Generation",
    description: "Market research and opportunity identification",
    status: "active"
  },
  {
    icon: Users,
    title: "Co-founder Matching",
    description: "Find the right team for your venture",
    status: "active"
  },
  {
    icon: Code,
    title: "Product Development",
    description: "Full-stack engineering and design",
    status: "active"
  },
  {
    icon: TrendingUp,
    title: "Growth Marketing",
    description: "Marketing strategy and execution",
    status: "active"
  },
  {
    icon: DollarSign,
    title: "Fundraising",
    description: "Investor connections and pitch preparation",
    status: "active"
  },
  {
    icon: Briefcase,
    title: "Operations",
    description: "Legal, finance, and business operations",
    status: "active"
  }
];

const currentVentures = [
  {
    id: 1,
    name: "EcoLogistics AI",
    industry: "Supply Chain",
    stage: "Development",
    progress: 65,
    team: ["Sarah Chen", "Mike Rodriguez", "Lisa Park"],
    investment: 850000,
    timeline: "Q2 2024 Launch",
    description: "AI-powered sustainable logistics optimization platform"
  },
  {
    id: 2,
    name: "HealthSync",
    industry: "Healthcare",
    stage: "Validation", 
    progress: 40,
    team: ["Dr. James Wilson", "Anna Kumar"],
    investment: 450000,
    timeline: "Q3 2024 Beta",
    description: "Unified patient data platform for healthcare providers"
  },
  {
    id: 3,
    name: "FinBridge",
    industry: "FinTech",
    stage: "Pre-launch",
    progress: 85,
    team: ["Tom Anderson", "Maya Patel", "Alex Kim", "Rachel Green"],
    investment: 1200000,
    timeline: "Q1 2024 Launch",
    description: "Cross-border payments for emerging markets"
  }
];

function VentureStudioDashboard() {
  const { toast } = useToast();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);

  const form = useForm<z.infer<typeof ventureIdeaSchema>>({
    resolver: zodResolver(ventureIdeaSchema),
    defaultValues: {
      title: "",
      description: "",
      industry: "",
      targetMarket: "",
      timeline: "",
    },
  });

  function onSubmit(values: z.infer<typeof ventureIdeaSchema>) {
    toast({
      title: "Venture Idea Submitted",
      description: "Your idea has been submitted for evaluation by our studio team.",
    });
    setIsCreateDialogOpen(false);
    form.reset();
  }

  const getStageColor = (stage: string) => {
    switch (stage.toLowerCase()) {
      case "development": return "bg-blue-500";
      case "validation": return "bg-yellow-500";
      case "pre-launch": return "bg-green-500";
      default: return "bg-gray-500";
    }
  };

  return (
    <div className="container mx-auto py-8">
      {/* Header */}
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent">
            Venture Studio
          </h1>
          <p className="text-xl text-gray-600">Building companies from scratch with full-service support</p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button className="bg-gradient-to-r from-purple-600 to-indigo-600">
              <Plus className="mr-2 h-4 w-4" />
              Submit Venture Idea
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>Submit New Venture Idea</DialogTitle>
              <DialogDescription>
                Share your venture idea with our studio team for evaluation and potential development.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Venture Title</FormLabel>
                      <FormControl>
                        <Input placeholder="AI-Powered Supply Chain Platform" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Describe the problem, solution, and market opportunity..."
                          className="min-h-32"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="industry"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Industry</FormLabel>
                        <FormControl>
                          <Input placeholder="FinTech, HealthTech, etc." {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="targetMarket"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Target Market</FormLabel>
                        <FormControl>
                          <Input placeholder="SMBs, Enterprises, Consumers" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="estimatedBudget"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Estimated Budget (USD)</FormLabel>
                        <FormControl>
                          <Input type="number" placeholder="500000" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="timeline"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Expected Timeline</FormLabel>
                        <FormControl>
                          <Input placeholder="12-18 months" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <DialogFooter>
                  <Button type="submit">Submit for Evaluation</Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      {/* Studio Capabilities */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Building2 className="h-6 w-6" />
            Studio Capabilities
          </CardTitle>
          <CardDescription>
            Full-service company building with integrated expertise across all functions
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-6">
            {studioCapabilities.map((capability, index) => {
              const IconComponent = capability.icon;
              return (
                <div key={index} className="flex items-start space-x-3 p-4 rounded-lg bg-gray-50">
                  <div className="bg-purple-100 p-2 rounded-lg">
                    <IconComponent className="h-5 w-5 text-purple-600" />
                  </div>
                  <div>
                    <h3 className="font-semibold mb-1">{capability.title}</h3>
                    <p className="text-sm text-gray-600">{capability.description}</p>
                    <Badge variant="secondary" className="mt-2 text-xs">
                      {capability.status}
                    </Badge>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Current Ventures */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold mb-6">Current Ventures in Development</h2>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {currentVentures.map((venture) => (
            <Card key={venture.id} className="overflow-hidden">
              <CardHeader className="pb-3">
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-lg">{venture.name}</CardTitle>
                    <CardDescription className="text-sm">{venture.industry}</CardDescription>
                  </div>
                  <Badge className={getStageColor(venture.stage)}>
                    {venture.stage}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <p className="text-sm text-gray-600">{venture.description}</p>
                
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span>Progress</span>
                    <span>{venture.progress}%</span>
                  </div>
                  <Progress value={venture.progress} className="h-2" />
                </div>

                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <p className="font-medium text-gray-500">Investment</p>
                    <p className="font-semibold">${(venture.investment / 1000).toFixed(0)}K</p>
                  </div>
                  <div>
                    <p className="font-medium text-gray-500">Timeline</p>
                    <p className="font-semibold">{venture.timeline}</p>
                  </div>
                </div>

                <div>
                  <p className="font-medium text-gray-500 text-sm mb-2">Team</p>
                  <div className="flex -space-x-2">
                    {venture.team.map((member, index) => (
                      <div
                        key={index}
                        className="w-8 h-8 bg-gradient-to-br from-purple-400 to-pink-400 rounded-full flex items-center justify-center text-white text-xs font-medium border-2 border-white"
                        title={member}
                      >
                        {member.split(' ').map(n => n[0]).join('')}
                      </div>
                    ))}
                  </div>
                </div>

                <Button variant="outline" size="sm" className="w-full">
                  View Details
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Studio Metrics */}
      <div className="grid md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Rocket className="h-8 w-8 text-purple-600" />
              <div>
                <p className="text-2xl font-bold">12</p>
                <p className="text-sm text-gray-600">Active Ventures</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <CheckCircle2 className="h-8 w-8 text-green-600" />
              <div>
                <p className="text-2xl font-bold">8</p>
                <p className="text-sm text-gray-600">Successful Exits</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <DollarSign className="h-8 w-8 text-green-600" />
              <div>
                <p className="text-2xl font-bold">$45M</p>
                <p className="text-sm text-gray-600">Total Invested</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Users className="h-8 w-8 text-blue-600" />
              <div>
                <p className="text-2xl font-bold">150+</p>
                <p className="text-sm text-gray-600">Team Members</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default function VentureStudio() {
  return (
    <Tabs defaultValue="dashboard" className="w-full">
      <div className="container mx-auto py-8">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="ventures">Ventures</TabsTrigger>
          <TabsTrigger value="resources">Resources</TabsTrigger>
          <TabsTrigger value="team">Team</TabsTrigger>
        </TabsList>
      </div>
      
      <TabsContent value="dashboard">
        <VentureStudioDashboard />
      </TabsContent>
      
      <TabsContent value="ventures">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Venture Portfolio</h3>
            <p className="text-gray-500 mb-4">Detailed venture tracking and management coming soon.</p>
            <Button>View All Ventures</Button>
          </div>
        </div>
      </TabsContent>
      
      <TabsContent value="resources">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Studio Resources</h3>
            <p className="text-gray-500 mb-4">Resource allocation and management tools coming soon.</p>
            <Button>Manage Resources</Button>
          </div>
        </div>
      </TabsContent>
      
      <TabsContent value="team">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Studio Team</h3>
            <p className="text-gray-500 mb-4">Team management and co-founder matching coming soon.</p>
            <Button>View Team</Button>
          </div>
        </div>
      </TabsContent>
    </Tabs>
  );
}


===== FILE: client/src/pages/accelerator.tsx =====
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import {
  Target,
  Users,
  Calendar,
  Trophy,
  Clock,
  BookOpen,
  Presentation,
  Network,
  DollarSign,
  TrendingUp,
  Building2
} from "lucide-react";

const currentCohorts = [
  {
    id: 1,
    name: "Summer 2024 Cohort",
    status: "Active",
    startDate: "2024-06-01",
    demoDay: "2024-08-15",
    progress: 75,
    companies: 12,
    weeklyMeetings: "Tuesdays 2PM PST",
    focus: "AI & Deep Tech"
  },
  {
    id: 2,
    name: "Fall 2024 Cohort",
    status: "Applications Open",
    startDate: "2024-09-15",
    demoDay: "2024-12-10",
    progress: 0,
    companies: 0,
    applications: 89,
    focus: "Climate Tech & Sustainability"
  }
];

const acceleratorFeatures = [
  {
    icon: Users,
    title: "Cohort-Based Learning",
    description: "Learn alongside peer startups in structured cohorts",
    details: "12-15 startups per cohort with weekly group sessions"
  },
  {
    icon: BookOpen,
    title: "Structured Curriculum",
    description: "Proven framework covering all aspects of startup building",
    details: "12-week program with weekly modules and assignments"
  },
  {
    icon: Network,
    title: "Mentor Network",
    description: "Access to 200+ mentors across industries",
    details: "1:1 mentor matching and weekly mentor office hours"
  },
  {
    icon: Presentation,
    title: "Demo Day",
    description: "Present to 500+ investors and industry leaders",
    details: "Professional pitch coaching and investor matching"
  },
  {
    icon: DollarSign,
    title: "Initial Investment",
    description: "$150K for 8% equity upon acceptance",
    details: "Follow-on funding connections and investor introductions"
  },
  {
    icon: Trophy,
    title: "Alumni Network",
    description: "Join 1,200+ successful alumni companies",
    details: "Ongoing support and cross-portfolio collaboration"
  }
];

const programSchedule = [
  {
    week: "Week 1-2",
    title: "Foundation & Vision",
    topics: ["Product-Market Fit", "Customer Discovery", "Team Building"],
    deliverable: "Customer Interview Summary"
  },
  {
    week: "Week 3-4",
    title: "Product Development",
    topics: ["MVP Design", "Technical Architecture", "User Experience"],
    deliverable: "Product Roadmap"
  },
  {
    week: "Week 5-6",
    title: "Go-to-Market",
    topics: ["Marketing Strategy", "Sales Process", "Pricing Strategy"],
    deliverable: "GTM Plan"
  },
  {
    week: "Week 7-8",
    title: "Business Model",
    topics: ["Revenue Streams", "Unit Economics", "Financial Modeling"],
    deliverable: "Financial Projections"
  },
  {
    week: "Week 9-10",
    title: "Fundraising Prep",
    topics: ["Pitch Deck", "Due Diligence", "Term Sheets"],
    deliverable: "Investor Deck"
  },
  {
    week: "Week 11-12",
    title: "Demo Day Prep",
    topics: ["Pitch Practice", "Investor Meetings", "Next Steps"],
    deliverable: "Demo Day Presentation"
  }
];

const successMetrics = [
  { label: "Companies Accelerated", value: "450+", icon: Building2 },
  { label: "Total Funding Raised", value: "$2.8B", icon: DollarSign },
  { label: "Active Mentors", value: "200+", icon: Users },
  { label: "Demo Day Investors", value: "500+", icon: TrendingUp }
];

function AcceleratorDashboard() {
  return (
    <div className="container mx-auto py-8">
      {/* Header */}
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-teal-600 to-blue-600 bg-clip-text text-transparent">
          Startup Accelerator
        </h1>
        <p className="text-xl text-gray-600 max-w-3xl mx-auto">
          Intensive 12-week programs designed to accelerate your startup's growth through
          structured curriculum, mentorship, and investor connections.
        </p>
      </div>

      {/* Current Cohorts */}
      <div className="mb-12">
        <h2 className="text-2xl font-bold mb-6">Current Cohorts</h2>
        <div className="grid md:grid-cols-2 gap-6">
          {currentCohorts.map((cohort) => (
            <Card key={cohort.id} className="overflow-hidden">
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-xl">{cohort.name}</CardTitle>
                    <CardDescription>Focus: {cohort.focus}</CardDescription>
                  </div>
                  <Badge variant={cohort.status === 'Active' ? 'default' : 'outline'}>
                    {cohort.status}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                {cohort.status === 'Active' && (
                  <div>
                    <div className="flex justify-between text-sm mb-2">
                      <span>Program Progress</span>
                      <span>{cohort.progress}%</span>
                    </div>
                    <Progress value={cohort.progress} className="h-2" />
                  </div>
                )}

                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="font-medium">Start Date</p>
                      <p className="text-gray-600">{new Date(cohort.startDate).toLocaleDateString()}</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Presentation className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="font-medium">Demo Day</p>
                      <p className="text-gray-600">{new Date(cohort.demoDay).toLocaleDateString()}</p>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="font-medium">Companies</p>
                      <p className="text-gray-600">
                        {cohort.status === 'Active' ? cohort.companies : `${cohort.applications} applications`}
                      </p>
                    </div>
                  </div>
                  {cohort.status === 'Active' && (
                    <div className="flex items-center gap-2">
                      <Clock className="h-4 w-4 text-gray-500" />
                      <div>
                        <p className="font-medium">Meetings</p>
                        <p className="text-gray-600">{cohort.weeklyMeetings}</p>
                      </div>
                    </div>
                  )}
                </div>

                <Button variant="outline" className="w-full">
                  {cohort.status === 'Active' ? 'View Cohort' : 'Apply Now'}
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Program Features */}
      <Card className="mb-12">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-6 w-6" />
            Accelerator Program Features
          </CardTitle>
          <CardDescription>
            Comprehensive support system designed to accelerate startup growth
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-6">
            {acceleratorFeatures.map((feature, index) => {
              const IconComponent = feature.icon;
              return (
                <div key={index} className="p-4 rounded-lg border bg-gray-50">
                  <div className="flex items-start space-x-3">
                    <div className="bg-teal-100 p-2 rounded-lg">
                      <IconComponent className="h-5 w-5 text-teal-600" />
                    </div>
                    <div>
                      <h3 className="font-semibold mb-1">{feature.title}</h3>
                      <p className="text-sm text-gray-600 mb-2">{feature.description}</p>
                      <p className="text-xs text-gray-500">{feature.details}</p>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Success Metrics */}
      <div className="grid md:grid-cols-4 gap-6">
        {successMetrics.map((metric, index) => (
          <Card key={index}>
            <CardContent className="p-6 text-center">
              <div className="text-3xl font-bold text-teal-600 mb-2">{metric.value}</div>
              <div className="text-sm text-gray-600">{metric.label}</div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

function ProgramSchedule() {
  return (
    <div className="container mx-auto py-8">
      <div className="mb-8">
        <h2 className="text-3xl font-bold mb-4">12-Week Program Schedule</h2>
        <p className="text-gray-600">Structured curriculum designed to cover all critical aspects of startup development</p>
      </div>

      <div className="space-y-6">
        {programSchedule.map((week, index) => (
          <Card key={index}>
            <CardContent className="p-6">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between">
                <div className="mb-4 md:mb-0">
                  <div className="flex items-center gap-3 mb-2">
                    <Badge variant="outline">{week.week}</Badge>
                    <h3 className="text-xl font-semibold">{week.title}</h3>
                  </div>
                  <div className="flex flex-wrap gap-2 mb-2">
                    {week.topics.map((topic, topicIndex) => (
                      <Badge key={topicIndex} variant="secondary" className="text-xs">
                        {topic}
                      </Badge>
                    ))}
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-sm text-gray-500">Deliverable</p>
                  <p className="font-medium">{week.deliverable}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

export default function Accelerator() {
  return (
    <Tabs defaultValue="dashboard" className="w-full">
      <div className="container mx-auto py-8">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="schedule">Program</TabsTrigger>
          <TabsTrigger value="mentors">Mentors</TabsTrigger>
          <TabsTrigger value="alumni">Alumni</TabsTrigger>
        </TabsList>
      </div>

      <TabsContent value="dashboard">
        <AcceleratorDashboard />
      </TabsContent>

      <TabsContent value="schedule">
        <ProgramSchedule />
      </TabsContent>

      <TabsContent value="mentors">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Mentor Network</h3>
            <p className="text-gray-500 mb-4">Mentor directory and matching system coming soon.</p>
            <Button>Browse Mentors</Button>
          </div>
        </div>
      </TabsContent>

      <TabsContent value="alumni">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Alumni Network</h3>
            <p className="text-gray-500 mb-4">Alumni directory and success stories coming soon.</p>
            <Button>View Alumni</Button>
          </div>
        </div>
      </TabsContent>
    </Tabs>
  );
}

===== FILE: client/src/pages/incubator.tsx =====

import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { 
  Lightbulb, 
  Building2, 
  Users, 
  Calendar, 
  MapPin,
  Coffee,
  BookOpen,
  Handshake,
  DollarSign,
  Clock,
  Target,
  Network
} from "lucide-react";

const incubatorSpaces = [
  {
    id: 1,
    name: "Main Campus",
    location: "Downtown Tech District",
    capacity: 50,
    currentOccupancy: 38,
    amenities: ["High-speed WiFi", "Meeting Rooms", "Coffee Bar", "Event Space"],
    type: "Co-working Hub"
  },
  {
    id: 2,
    name: "University Lab",
    location: "University Research Park",
    capacity: 25,
    currentOccupancy: 18,
    amenities: ["Research Lab Access", "University Library", "Student Interns", "Academic Mentors"],
    type: "Academic Incubator"
  },
  {
    id: 3,
    name: "Corporate Innovation Center",
    location: "Business District",
    capacity: 30,
    currentOccupancy: 22,
    amenities: ["Corporate Mentors", "Pilot Program Access", "B2B Connections", "Industry Expertise"],
    type: "Corporate Incubator"
  }
];

const incubatorPrograms = [
  {
    id: 1,
    name: "Early Stage Program",
    duration: "6-12 months",
    stage: "Idea to Prototype",
    participants: 15,
    equity: "0-5%",
    investment: "Up to $50K",
    focus: "Product development and market validation"
  },
  {
    id: 2,
    name: "Growth Track",
    duration: "12-24 months", 
    stage: "Prototype to Market",
    participants: 12,
    equity: "5-10%",
    investment: "$50K-200K",
    focus: "Scaling and business development"
  },
  {
    id: 3,
    name: "University Spin-off",
    duration: "18+ months",
    stage: "Research to Commercialization",
    participants: 8,
    equity: "Varies",
    investment: "Grant-based",
    focus: "Technology transfer and IP commercialization"
  }
];

const supportServices = [
  {
    icon: Building2,
    title: "Flexible Workspace",
    description: "Dedicated desks, meeting rooms, and collaborative spaces",
    included: true
  },
  {
    icon: Users,
    title: "Mentorship Program",
    description: "Industry experts and successful entrepreneurs",
    included: true
  },
  {
    icon: BookOpen,
    title: "Educational Workshops",
    description: "Regular workshops on business fundamentals",
    included: true
  },
  {
    icon: Network,
    title: "Networking Events",
    description: "Monthly pitch nights and investor meetups",
    included: true
  },
  {
    icon: Handshake,
    title: "Legal & Accounting",
    description: "Basic legal setup and accounting guidance",
    included: true
  },
  {
    icon: DollarSign,
    title: "Funding Connections",
    description: "Access to angel investors and VC networks",
    included: false
  }
];

const currentStartups = [
  {
    id: 1,
    name: "GreenTech Solutions",
    founder: "Sarah Kim",
    industry: "CleanTech",
    stage: "Product Development",
    joinDate: "2023-08-15",
    program: "Growth Track",
    progress: 60,
    description: "Renewable energy storage solutions for residential use"
  },
  {
    id: 2,
    name: "MedAI Diagnostics", 
    founder: "Dr. James Wilson",
    industry: "HealthTech",
    stage: "Market Validation",
    joinDate: "2024-01-20",
    program: "University Spin-off",
    progress: 35,
    description: "AI-powered diagnostic tool for early disease detection"
  },
  {
    id: 3,
    name: "EduPlatform",
    founder: "Maria Rodriguez",
    industry: "EdTech",
    stage: "Early Development",
    joinDate: "2024-03-10",
    program: "Early Stage Program",
    progress: 25,
    description: "Personalized learning platform for K-12 students"
  }
];

function IncubatorDashboard() {
  return (
    <div className="container mx-auto py-8">
      {/* Header */}
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent">
          Startup Incubator
        </h1>
        <p className="text-xl text-gray-600 max-w-3xl mx-auto">
          Nurturing early-stage startups with flexible, long-term support, workspace, 
          and guidance to help founders build sustainable businesses.
        </p>
      </div>

      {/* Incubator Spaces */}
      <div className="mb-12">
        <h2 className="text-2xl font-bold mb-6">Incubator Locations</h2>
        <div className="grid md:grid-cols-3 gap-6">
          {incubatorSpaces.map((space) => (
            <Card key={space.id}>
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-lg">{space.name}</CardTitle>
                    <CardDescription className="flex items-center gap-1">
                      <MapPin className="h-4 w-4" />
                      {space.location}
                    </CardDescription>
                  </div>
                  <Badge variant="outline">{space.type}</Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <div className="flex justify-between text-sm mb-2">
                    <span>Occupancy</span>
                    <span>{space.currentOccupancy}/{space.capacity}</span>
                  </div>
                  <Progress value={(space.currentOccupancy / space.capacity) * 100} className="h-2" />
                </div>
                
                <div>
                  <p className="font-medium text-sm mb-2">Amenities</p>
                  <div className="flex flex-wrap gap-1">
                    {space.amenities.map((amenity, index) => (
                      <Badge key={index} variant="secondary" className="text-xs">
                        {amenity}
                      </Badge>
                    ))}
                  </div>
                </div>
                
                <Button variant="outline" size="sm" className="w-full">
                  Request Tour
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Programs */}
      <Card className="mb-12">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-6 w-6" />
            Incubator Programs
          </CardTitle>
          <CardDescription>
            Flexible programs tailored to different startup stages and needs
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-6">
            {incubatorPrograms.map((program) => (
              <div key={program.id} className="p-4 rounded-lg border bg-gray-50">
                <h3 className="font-semibold text-lg mb-2">{program.name}</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-500">Duration:</span>
                    <span className="font-medium">{program.duration}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-500">Stage:</span>
                    <span className="font-medium">{program.stage}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-500">Participants:</span>
                    <span className="font-medium">{program.participants}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-500">Equity:</span>
                    <span className="font-medium">{program.equity}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-500">Investment:</span>
                    <span className="font-medium">{program.investment}</span>
                  </div>
                </div>
                <p className="text-sm text-gray-600 mt-3">{program.focus}</p>
                <Button variant="outline" size="sm" className="w-full mt-4">
                  Learn More
                </Button>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Support Services */}
      <Card className="mb-12">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Handshake className="h-6 w-6" />
            Support Services
          </CardTitle>
          <CardDescription>
            Comprehensive support ecosystem for startup development
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-6">
            {supportServices.map((service, index) => {
              const IconComponent = service.icon;
              return (
                <div key={index} className="flex items-start space-x-3">
                  <div className={`p-2 rounded-lg ${service.included ? 'bg-orange-100' : 'bg-gray-100'}`}>
                    <IconComponent className={`h-5 w-5 ${service.included ? 'text-orange-600' : 'text-gray-500'}`} />
                  </div>
                  <div>
                    <h3 className="font-semibold mb-1">{service.title}</h3>
                    <p className="text-sm text-gray-600">{service.description}</p>
                    <Badge 
                      variant={service.included ? "default" : "secondary"} 
                      className="mt-2 text-xs"
                    >
                      {service.included ? "Included" : "Optional"}
                    </Badge>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Current Startups */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold mb-6">Current Startups</h2>
        <div className="space-y-4">
          {currentStartups.map((startup) => (
            <Card key={startup.id}>
              <CardContent className="p-6">
                <div className="flex flex-col md:flex-row md:items-center justify-between">
                  <div className="mb-4 md:mb-0">
                    <div className="flex items-center gap-3 mb-2">
                      <h3 className="text-xl font-semibold">{startup.name}</h3>
                      <Badge variant="outline">{startup.industry}</Badge>
                      <Badge className="bg-orange-100 text-orange-800">{startup.program}</Badge>
                    </div>
                    <p className="text-gray-600 mb-2">{startup.description}</p>
                    <div className="flex items-center gap-4 text-sm text-gray-500">
                      <span>Founder: {startup.founder}</span>
                      <span>Joined: {new Date(startup.joinDate).toLocaleDateString()}</span>
                      <span>Stage: {startup.stage}</span>
                    </div>
                  </div>
                  <div className="text-right min-w-[120px]">
                    <div className="mb-2">
                      <span className="text-sm text-gray-500">Progress</span>
                      <div className="text-2xl font-bold text-orange-600">{startup.progress}%</div>
                    </div>
                    <Progress value={startup.progress} className="h-2 w-24 ml-auto" />
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6 text-center">
            <Building2 className="h-8 w-8 text-orange-600 mx-auto mb-2" />
            <div className="text-2xl font-bold">3</div>
            <div className="text-sm text-gray-600">Locations</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6 text-center">
            <Users className="h-8 w-8 text-orange-600 mx-auto mb-2" />
            <div className="text-2xl font-bold">78</div>
            <div className="text-sm text-gray-600">Active Startups</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6 text-center">
            <Clock className="h-8 w-8 text-orange-600 mx-auto mb-2" />
            <div className="text-2xl font-bold">18</div>
            <div className="text-sm text-gray-600">Avg. Months</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6 text-center">
            <Target className="h-8 w-8 text-orange-600 mx-auto mb-2" />
            <div className="text-2xl font-bold">85%</div>
            <div className="text-sm text-gray-600">Success Rate</div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default function Incubator() {
  return (
    <Tabs defaultValue="dashboard" className="w-full">
      <div className="container mx-auto py-8">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="workspace">Workspace</TabsTrigger>
          <TabsTrigger value="community">Community</TabsTrigger>
          <TabsTrigger value="resources">Resources</TabsTrigger>
        </TabsList>
      </div>
      
      <TabsContent value="dashboard">
        <IncubatorDashboard />
      </TabsContent>
      
      <TabsContent value="workspace">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Workspace Management</h3>
            <p className="text-gray-500 mb-4">Desk booking and facility management coming soon.</p>
            <Button>Book Workspace</Button>
          </div>
        </div>
      </TabsContent>
      
      <TabsContent value="community">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Community Hub</h3>
            <p className="text-gray-500 mb-4">Community events and networking tools coming soon.</p>
            <Button>Join Community</Button>
          </div>
        </div>
      </TabsContent>
      
      <TabsContent value="resources">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Resource Library</h3>
            <p className="text-gray-500 mb-4">Educational resources and tools coming soon.</p>
            <Button>Browse Resources</Button>
          </div>
        </div>
      </TabsContent>
    </Tabs>
  );
}


===== FILE: client/src/pages/venture-building.tsx =====
import { useQuery, useMutation } from "@tanstack/react-query";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { 
  Loader2, 
  Lightbulb, 
  Beaker, 
  Rocket, 
  Users, 
  BarChart3, 
  CheckCircle2, 
  Clock, 
  ArrowUpRight,
  XCircle,
  FileCheck
} from "lucide-react";

// Venture Project Schema
const ventureProjectSchema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  description: z.string().optional(),
  organizationId: z.number(),
  stage: z.enum(["idea", "validation", "prototype", "mvp", "scaling"]),
  businessPlanId: z.number().optional(),
});

type VentureProject = {
  id: number;
  name: string;
  description: string | null;
  organizationId: number;
  stage: string;
  businessPlanId: number | null;
  team: any;
  resources: any;
  roadmap: any;
  validationResults: any;
  createdAt: string;
  updatedAt: string;
};

function VentureProjectsList() {
  // State for selected organization (for demo we'll use a fixed value)
  const organizationId = 4; // Assuming ID 4 is for a venture builder organization
  const { toast } = useToast();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);

  // Query venture projects
  const { data: projects, isLoading } = useQuery({
    queryKey: ['/api/venture-projects/organization', organizationId],
    queryFn: () => apiRequest(`/api/venture-projects/organization/${organizationId}`),
  });

  // Create venture project form
  const form = useForm<z.infer<typeof ventureProjectSchema>>({
    resolver: zodResolver(ventureProjectSchema),
    defaultValues: {
      name: "",
      description: "",
      organizationId: organizationId,
      stage: "idea",
    },
  });

  // Mutation to create venture project
  const createProject = useMutation({
    mutationFn: (values: z.infer<typeof ventureProjectSchema>) => apiRequest('/api/venture-projects', {
      method: 'POST',
      body: JSON.stringify(values),
      headers: {
        'Content-Type': 'application/json',
      },
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/venture-projects/organization', organizationId] });
      toast({
        title: "Project created",
        description: "The venture project has been created successfully.",
      });
      setIsCreateDialogOpen(false);
      form.reset();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create venture project. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Handle form submission
  function onSubmit(values: z.infer<typeof ventureProjectSchema>) {
    const projectData = {
      ...values,
      team: { members: [] },
      resources: { allocated: {}, required: {} },
      roadmap: { milestones: [] },
      validationResults: { interviews: [], surveys: [], experiments: [] }
    };
    createProject.mutate(projectData);
  }

  // Helper function to get stage icon
  const getStageIcon = (stage: string) => {
    switch (stage) {
      case "idea":
        return <Lightbulb className="h-5 w-5" />;
      case "validation":
        return <FileCheck className="h-5 w-5" />;
      case "prototype":
        return <Beaker className="h-5 w-5" />;
      case "mvp":
        return <Rocket className="h-5 w-5" />;
      case "scaling":
        return <BarChart3 className="h-5 w-5" />;
      default:
        return <Lightbulb className="h-5 w-5" />;
    }
  };

  // Helper function to get stage color
  const getStageColor = (stage: string) => {
    switch (stage) {
      case "idea":
        return "bg-violet-500";
      case "validation":
        return "bg-blue-500";
      case "prototype":
        return "bg-teal-500";
      case "mvp":
        return "bg-orange-500";
      case "scaling":
        return "bg-green-500";
      default:
        return "bg-gray-500";
    }
  };

  // Mock project data for demo
  const getProjectData = (project: VentureProject) => {
    // In a real app, this would come from the API
    const stageMap: { [key: string]: number } = {
      "idea": 1,
      "validation": 2,
      "prototype": 3,
      "mvp": 4,
      "scaling": 5
    };
    
    const stageValue = stageMap[project.stage] || 1;
    const progress = (stageValue / 5) * 100;
    
    return {
      teamSize: Math.floor(Math.random() * 5) + 2,
      progress,
      tasks: {
        total: Math.floor(Math.random() * 30) + 10,
        completed: Math.floor(Math.random() * 20) + 5
      },
      nextMilestone: ["Market Research", "Customer Interviews", "MVP Development", "Beta Launch", "Seed Funding"][Math.floor(Math.random() * 5)],
      daysRemaining: Math.floor(Math.random() * 30) + 5
    };
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
      </div>
    );
  }

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-4xl font-bold">Venture Projects</h1>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>Create New Project</Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[550px]">
            <DialogHeader>
              <DialogTitle>Create New Venture Project</DialogTitle>
              <DialogDescription>
                Start a new venture building project from scratch or based on an existing business plan.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Project Name</FormLabel>
                      <FormControl>
                        <Input placeholder="EcoSolutions Marketplace" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="A B2B marketplace connecting eco-friendly suppliers with sustainable businesses..."
                          className="min-h-32"
                          {...field}
                          value={field.value || ""}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="stage"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Current Stage</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select project stage" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="idea">Idea</SelectItem>
                          <SelectItem value="validation">Validation</SelectItem>
                          <SelectItem value="prototype">Prototype</SelectItem>
                          <SelectItem value="mvp">MVP</SelectItem>
                          <SelectItem value="scaling">Scaling</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <DialogFooter>
                  <Button type="submit" disabled={createProject.isPending}>
                    {createProject.isPending && (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    Create Project
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {projects && projects.length > 0 ? (
          projects.map((project: VentureProject) => {
            const projectData = getProjectData(project);
            return (
              <Card key={project.id} className="overflow-hidden shadow-md">
                <CardHeader className="pb-3">
                  <div className="flex justify-between items-start">
                    <CardTitle className="text-xl">{project.name}</CardTitle>
                    <Badge className={getStageColor(project.stage)}>
                      <span className="flex items-center gap-1">
                        {getStageIcon(project.stage)}
                        {project.stage.charAt(0).toUpperCase() + project.stage.slice(1)}
                      </span>
                    </Badge>
                  </div>
                  <CardDescription className="text-sm truncate">
                    {project.description || "No description provided."}
                  </CardDescription>
                </CardHeader>
                <CardContent className="pb-3">
                  <div className="mb-4">
                    <p className="text-sm font-medium mb-1">Project Progress</p>
                    <div className="flex items-center gap-2">
                      <Progress value={projectData.progress} className="h-2 flex-1" />
                      <span className="text-sm font-medium">{Math.round(projectData.progress)}%</span>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div className="flex items-center space-x-2">
                      <Users className="h-5 w-5 text-gray-500" />
                      <div>
                        <p className="text-sm font-medium">Team Size</p>
                        <p className="text-gray-600">{projectData.teamSize} members</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <CheckCircle2 className="h-5 w-5 text-green-500" />
                      <div>
                        <p className="text-sm font-medium">Tasks</p>
                        <p className="text-gray-600">{projectData.tasks.completed}/{projectData.tasks.total} complete</p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="border rounded-md p-3 bg-gray-50 dark:bg-gray-800">
                    <div className="flex justify-between items-center mb-1">
                      <p className="text-sm font-medium">Next Milestone</p>
                      <Badge variant="outline" className="font-normal">
                        <Clock className="h-3 w-3 mr-1" />
                        {projectData.daysRemaining} days
                      </Badge>
                    </div>
                    <p className="text-gray-700 dark:text-gray-300">{projectData.nextMilestone}</p>
                  </div>
                </CardContent>
                <CardFooter className="flex justify-between border-t p-3 pt-3">
                  <Button variant="outline" size="sm">
                    View Details
                  </Button>
                  <Button size="sm">
                    Manage <ArrowUpRight className="ml-1 h-4 w-4" />
                  </Button>
                </CardFooter>
              </Card>
            );
          })
        ) : (
          <div className="col-span-2 text-center py-10">
            <p className="text-lg text-gray-500 dark:text-gray-400">
              No venture projects found. Create your first project to get started.
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

function ValidationFramework() {
  return (
    <div className="container mx-auto py-10">
      <div className="text-center py-20">
        <h3 className="text-xl font-medium mb-2">Idea Validation Framework</h3>
        <p className="text-gray-500 mb-4">This feature is coming soon.</p>
        <Button>Go to Venture Projects</Button>
      </div>
    </div>
  );
}

function ResourceAllocation() {
  return (
    <div className="container mx-auto py-10">
      <div className="text-center py-20">
        <h3 className="text-xl font-medium mb-2">Resource Allocation</h3>
        <p className="text-gray-500 mb-4">This feature is coming soon.</p>
        <Button>Go to Venture Projects</Button>
      </div>
    </div>
  );
}

export default function VentureBuildingPage() {
  const tabs = ["Projects", "Validation", "Resources"];
  
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-6">Venture Building</h1>
      <Tabs defaultValue="Projects" className="w-full">
        <TabsList className="grid w-[400px] grid-cols-3 mb-8">
          {tabs.map((tab) => (
            <TabsTrigger key={tab} value={tab}>
              {tab}
            </TabsTrigger>
          ))}
        </TabsList>
        <TabsContent value="Projects" className="space-y-4">
          <VentureProjectsList />
        </TabsContent>
        <TabsContent value="Validation" className="space-y-4">
          <ValidationFramework />
        </TabsContent>
        <TabsContent value="Resources" className="space-y-4">
          <ResourceAllocation />
        </TabsContent>
      </Tabs>
    </div>
  );
}

===== FILE: client/src/pages/programs.tsx =====
import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { apiRequest } from "@/lib/queryClient";
import { useCreateMutation } from "@/hooks/useFormMutation";
import { getStatusColorClass, getStatusBadgeVariant } from "@/utils/statusUtils";
import { formatDate, formatDateRange } from "@/utils/dateUtils";
import { CardLoadingSpinner } from "@/components/ui/loading-spinner";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { 
  Loader2, 
  Calendar,
  Users,
  Hourglass,
  CheckCircle2,
  Plus,
  ArrowRight,
  ListFilter,
  Search,
  BarChart
} from "lucide-react";

// Program schema
const programSchema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  description: z.string().optional(),
  type: z.string().min(1, { message: "Type is required" }),
  organizationId: z.number(),
  status: z.string().min(1, { message: "Status is required" }),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  capacity: z.string().transform(val => val ? parseInt(val) : null).optional(),
});

type Program = {
  id: number;
  name: string;
  description: string | null;
  type: string;
  organizationId: number;
  status: string;
  startDate: string | null;
  endDate: string | null;
  capacity: number | null;
  applicationProcess: any;
  metrics: any;
  createdAt: string;
};

// Cohort schema
const cohortSchema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  status: z.string().min(1, { message: "Status is required" }),
  programId: z.number(),
  startDate: z.string().min(1, { message: "Start date is required" }),
  endDate: z.string().min(1, { message: "End date is required" }),
});

function ProgramsList() {
  // State for selected organization (for demo we'll use a fixed value)
  const organizationId = 3; // Assuming ID 3 is for an accelerator/incubator organization
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);

  // Query programs
  const { data: programs, isLoading } = useQuery({
    queryKey: ['/api/programs/organization', organizationId],
    queryFn: () => apiRequest(`/api/programs/organization/${organizationId}`),
  });

  // Create program form
  const form = useForm<z.infer<typeof programSchema>>({
    resolver: zodResolver(programSchema),
    defaultValues: {
      name: "",
      description: "",
      type: "accelerator",
      organizationId: organizationId,
      status: "active",
    },
  });

  // Mutation to create program
  const createProgram = useCreateMutation<Program, z.infer<typeof programSchema>>(
    '/api/programs',
    'Program',
    [`/api/programs/organization/${organizationId}`]
  );

  // Handle form submission
  function onSubmit(values: z.infer<typeof programSchema>) {
    // Add default values for fields that might be empty
    const programData = {
      ...values,
      applicationProcess: { stages: [] },
      metrics: { 
        startups: 0,
        mentors: 0,
        investors: 0,
        events: 0,
        successRate: 0,
      }
    };
    createProgram.mutate(programData, {
      onSuccess: () => {
        setIsCreateDialogOpen(false);
        form.reset();
      }
    });
  }

  // Helper function to get program type badge color
  const getProgramTypeColor = (type: string) => {
    switch (type.toLowerCase()) {
      case "accelerator":
        return "bg-blue-500";
      case "incubator":
        return "bg-green-500";
      case "mentorship":
        return "bg-purple-500";
      case "workshop":
        return "bg-orange-500";
      default:
        return "bg-gray-500";
    }
  };

  // Helper functions moved to utils

  if (isLoading) {
    return <CardLoadingSpinner text="Loading programs..." />;
  }

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-4xl font-bold">Programs</h1>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Create New Program
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[550px]">
            <DialogHeader>
              <DialogTitle>Create New Program</DialogTitle>
              <DialogDescription>
                Create a new program for entrepreneurs and startups.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Program Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Summer Founders Program" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="A 12-week program to help early-stage founders..."
                          className="min-h-24"
                          {...field}
                          value={field.value || ""}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="type"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Program Type</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select program type" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="accelerator">Accelerator</SelectItem>
                            <SelectItem value="incubator">Incubator</SelectItem>
                            <SelectItem value="mentorship">Mentorship</SelectItem>
                            <SelectItem value="workshop">Workshop</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="status"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Status</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select status" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="active">Active</SelectItem>
                            <SelectItem value="upcoming">Upcoming</SelectItem>
                            <SelectItem value="completed">Completed</SelectItem>
                            <SelectItem value="cancelled">Cancelled</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="startDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Start Date</FormLabel>
                        <FormControl>
                          <Input type="date" {...field} value={field.value || ""} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="endDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>End Date</FormLabel>
                        <FormControl>
                          <Input type="date" {...field} value={field.value || ""} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <FormField
                  control={form.control}
                  name="capacity"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Capacity (max participants)</FormLabel>
                      <FormControl>
                        <Input type="number" placeholder="20" {...field} value={field.value || ""} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <DialogFooter>
                  <Button type="submit" disabled={createProgram.isPending}>
                    {createProgram.isPending && (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    Create Program
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {programs && programs.length > 0 ? (
          programs.map((program: Program) => (
            <Card key={program.id} className="overflow-hidden">
              <CardHeader className="pb-3">
                <div className="flex justify-between items-start">
                  <CardTitle className="text-xl">{program.name}</CardTitle>
                  <Badge className={getProgramTypeColor(program.type)}>
                    {program.type}
                  </Badge>
                </div>
                <CardDescription className="text-sm line-clamp-2">
                  {program.description || "No description provided."}
                </CardDescription>
              </CardHeader>
              <CardContent className="pb-3">
                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div className="flex items-center space-x-2">
                    <Calendar className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="text-sm text-gray-500">Start Date</p>
                      <p className="text-sm font-medium">{formatDate(program.startDate)}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Calendar className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="text-sm text-gray-500">End Date</p>
                      <p className="text-sm font-medium">{formatDate(program.endDate)}</p>
                    </div>
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="flex items-center space-x-2">
                    <Users className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="text-sm text-gray-500">Capacity</p>
                      <p className="text-sm font-medium">{program.capacity || "Unlimited"}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Badge variant={getStatusBadgeVariant(program.status as any)}>
                      {program.status}
                    </Badge>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between border-t p-3 pt-3">
                <Button variant="outline" size="sm">
                  View Cohorts
                </Button>
                <Button size="sm">
                  Manage
                  <ArrowRight className="ml-1 h-4 w-4" />
                </Button>
              </CardFooter>
            </Card>
          ))
        ) : (
          <div className="col-span-3 text-center py-10">
            <p className="text-lg text-gray-500 dark:text-gray-400">
              No programs found. Create your first program to get started.
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

function CohortManagement() {
  const programId = 1; // For demo purposes
  const { toast } = useToast();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  
  // Query cohorts for the selected program
  const { data: cohorts, isLoading } = useQuery({
    queryKey: ['/api/cohorts/program', programId],
    queryFn: () => apiRequest(`/api/cohorts/program/${programId}`),
  });
  
  // Create cohort form
  const form = useForm<z.infer<typeof cohortSchema>>({
    resolver: zodResolver(cohortSchema),
    defaultValues: {
      name: "",
      status: "upcoming",
      programId: programId,
      startDate: "",
      endDate: "",
    },
  });
  
  // Mutation to create cohort
  const createCohort = useMutation({
    mutationFn: (values: z.infer<typeof cohortSchema>) => {
      return apiRequest('/api/cohorts', {
        method: 'POST',
        body: JSON.stringify(values),
        headers: {
          'Content-Type': 'application/json',
        },
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/cohorts/program', programId] });
      toast({
        title: "Cohort created",
        description: "The cohort has been created successfully.",
      });
      setIsCreateDialogOpen(false);
      form.reset();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create cohort. Please try again.",
        variant: "destructive",
      });
    },
  });
  
  // Handle form submission
  function onSubmit(values: z.infer<typeof cohortSchema>) {
    // Add metrics data structure
    const cohortData = {
      ...values,
      metrics: {
        participants: 0,
        completionRate: 0,
        satisfactionScore: 0,
        outcomes: {
          raised_funding: 0,
          partnerships: 0,
          revenue_growth: 0
        }
      }
    };
    createCohort.mutate(cohortData);
  }
  
  // Format date for display
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };
  
  // Helper function to get status color
  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case "active":
        return "bg-green-500 text-white";
      case "upcoming":
        return "bg-blue-500 text-white";
      case "completed":
        return "bg-gray-500 text-white";
      default:
        return "bg-gray-500 text-white";
    }
  };
  
  // Helper function to calculate progress percentage based on dates
  const calculateProgress = (startDate: string, endDate: string) => {
    const start = new Date(startDate).getTime();
    const end = new Date(endDate).getTime();
    const now = new Date().getTime();
    
    if (now < start) return 0;
    if (now > end) return 100;
    
    return Math.round(((now - start) / (end - start)) * 100);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
      </div>
    );
  }
  
  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h2 className="text-3xl font-bold">Cohort Management</h2>
          <p className="text-gray-500">Manage program cohorts and participant tracking</p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Create New Cohort
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[550px]">
            <DialogHeader>
              <DialogTitle>Create New Cohort</DialogTitle>
              <DialogDescription>
                Create a new cohort for your program.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Cohort Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Summer 2023" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Status</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select status" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="upcoming">Upcoming</SelectItem>
                          <SelectItem value="active">Active</SelectItem>
                          <SelectItem value="completed">Completed</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="startDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Start Date</FormLabel>
                        <FormControl>
                          <Input type="date" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="endDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>End Date</FormLabel>
                        <FormControl>
                          <Input type="date" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <DialogFooter>
                  <Button type="submit" disabled={createCohort.isPending}>
                    {createCohort.isPending && (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    Create Cohort
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>
      
      <div className="mb-6 flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <ListFilter className="h-5 w-5 text-gray-500" />
          <Select defaultValue="all">
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Statuses</SelectItem>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="upcoming">Upcoming</SelectItem>
              <SelectItem value="completed">Completed</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div className="relative w-64">
          <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-500" />
          <Input placeholder="Search cohorts..." className="pl-8" />
        </div>
      </div>
      
      <div className="space-y-4">
        {cohorts && cohorts.length > 0 ? (
          cohorts.map((cohort: any) => {
            const progressPercent = calculateProgress(cohort.startDate, cohort.endDate);
            return (
              <Card key={cohort.id} className="overflow-hidden">
                <div className="flex flex-col md:flex-row">
                  <div className="flex-1 p-6">
                    <div className="flex justify-between items-start mb-4">
                      <div>
                        <h3 className="text-xl font-semibold">{cohort.name}</h3>
                        <p className="text-sm text-gray-500">
                          {formatDate(cohort.startDate)} - {formatDate(cohort.endDate)}
                        </p>
                      </div>
                      <Badge className={getStatusColor(cohort.status)}>
                        {cohort.status}
                      </Badge>
                    </div>
                    
                    <div className="mb-4">
                      <div className="flex justify-between mb-1">
                        <span className="text-sm font-medium">Progress</span>
                        <span className="text-sm font-medium">{progressPercent}%</span>
                      </div>
                      <Progress value={progressPercent} className="h-2" />
                    </div>
                    
                    <div className="grid grid-cols-3 gap-4 mb-4">
                      <div className="flex flex-col items-center p-2 bg-gray-50 rounded-md">
                        <Users className="h-5 w-5 text-blue-500 mb-1" />
                        <p className="text-sm font-medium">{cohort.metrics?.participants || 0}</p>
                        <p className="text-xs text-gray-500">Participants</p>
                      </div>
                      <div className="flex flex-col items-center p-2 bg-gray-50 rounded-md">
                        <CheckCircle2 className="h-5 w-5 text-green-500 mb-1" />
                        <p className="text-sm font-medium">{cohort.metrics?.completionRate || 0}%</p>
                        <p className="text-xs text-gray-500">Completion</p>
                      </div>
                      <div className="flex flex-col items-center p-2 bg-gray-50 rounded-md">
                        <Hourglass className="h-5 w-5 text-orange-500 mb-1" />
                        <p className="text-sm font-medium">
                          {Math.floor((new Date(cohort.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))} days
                        </p>
                        <p className="text-xs text-gray-500">Remaining</p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 dark:bg-gray-800 p-6 flex flex-col justify-between md:w-64">
                    <div>
                      <div className="flex items-center mb-4">
                        <BarChart className="h-5 w-5 text-gray-500 mr-2" />
                        <h4 className="font-medium">Key Outcomes</h4>
                      </div>
                      <ul className="space-y-2 text-sm">
                        <li className="flex justify-between">
                          <span>Raised Funding</span>
                          <span className="font-medium">{cohort.metrics?.outcomes?.raised_funding || 0}</span>
                        </li>
                        <li className="flex justify-between">
                          <span>Partnerships</span>
                          <span className="font-medium">{cohort.metrics?.outcomes?.partnerships || 0}</span>
                        </li>
                        <li className="flex justify-between">
                          <span>Revenue Growth</span>
                          <span className="font-medium">{cohort.metrics?.outcomes?.revenue_growth || 0}%</span>
                        </li>
                      </ul>
                    </div>
                    <div className="mt-6">
                      <Button className="w-full">Manage Participants</Button>
                    </div>
                  </div>
                </div>
              </Card>
            );
          })
        ) : (
          <div className="text-center py-10">
            <p className="text-lg text-gray-500 dark:text-gray-400">
              No cohorts found. Create your first cohort to get started.
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

export default function ProgramsPage() {
  const tabs = ["Programs", "Cohorts", "Participants", "Outcomes"];
  
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-6">Program Management</h1>
      <Tabs defaultValue="Programs" className="w-full">
        <TabsList className="grid w-[600px] grid-cols-4 mb-8">
          {tabs.map((tab) => (
            <TabsTrigger key={tab} value={tab}>
              {tab}
            </TabsTrigger>
          ))}
        </TabsList>
        <TabsContent value="Programs" className="space-y-4">
          <ProgramsList />
        </TabsContent>
        <TabsContent value="Cohorts" className="space-y-4">
          <CohortManagement />
        </TabsContent>
        <TabsContent value="Participants" className="space-y-4">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Participant Management</h3>
            <p className="text-gray-500 mb-4">This feature is coming soon.</p>
            <Button>Go to Programs</Button>
          </div>
        </TabsContent>
        <TabsContent value="Outcomes" className="space-y-4">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Outcomes Tracking</h3>
            <p className="text-gray-500 mb-4">This feature is coming soon.</p>
            <Button>Go to Programs</Button>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}

