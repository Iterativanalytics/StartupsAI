===== FILE: client/src/pages/funding.tsx =====
import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  ArrowRight, Search, Filter, DollarSign, Building2, Globe, PieChart, Clock, Shield,
  TrendingUp, Users, Award, CheckCircle, AlertCircle, CreditCard, History, Info,
  BarChart2, HelpCircle, Wallet, Target, Gift, FileText, ExternalLink, BarChart, 
  TrendingDown, AlertTriangle, Star, Bell, Settings, Download, RefreshCw, Plus,
  Eye, Lock, Zap, ShieldCheck
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

// Helper functions for the enhanced credit score meter
const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {
  const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;
  return {
    x: centerX + radius * Math.cos(angleInRadians),
    y: centerY + radius * Math.sin(angleInRadians),
  };
};

const describeArc = (x: number, y: number, radius: number, startAngle: number, endAngle: number): string => {
  const start = polarToCartesian(x, y, radius, endAngle);
  const end = polarToCartesian(x, y, radius, startAngle);
  const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';
  const d = ['M', start.x, start.y, 'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(' ');
  return d;
};

// Helper to generate a lighter shade of a color
const shadeColor = (color: string, percent: number) => {
  let R = parseInt(color.substring(1, 3), 16);
  let G = parseInt(color.substring(3, 5), 16);
  let B = parseInt(color.substring(5, 7), 16);

  R = Math.round(R * (100 + percent) / 100);
  G = Math.round(G * (100 + percent) / 100);
  B = Math.round(B * (100 + percent) / 100);

  R = (R < 255) ? R : 255;
  G = (G < 255) ? G : 255;
  B = (B < 255) ? B : 255;

  const RR = ((R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16));
  const GG = ((G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16));
  const BB = ((B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16));

  return "#" + RR + GG + BB;
};

interface Investor {
  id: number;
  name: string;
  type: 'angel' | 'vc' | 'pe';
  logo: string;
  minInvestment: number;
  maxInvestment: number;
  industries: string[];
  stages: string[];
  regions: string[];
  portfolio: number;
  successRate: number;
  matchScore: number;
}

interface Lender {
  id: number;
  name: string;
  type: 'bank' | 'credit-union' | 'online';
  logo: string;
  minLoan: number;
  maxLoan: number;
  interestRate: number;
  term: number;
  requirements: {
    minCreditScore: number;
    minTimeInBusiness: number;
    minAnnualRevenue: number;
  };
  matchScore: number;
}

interface Grant {
  id: number;
  name: string;
  provider: string;
  type: 'government' | 'foundation' | 'corporate';
  amount: number;
  deadline: string;
  eligibility: string[];
  sectors: string[];
  matchScore: number;
  description: string;
}

function Funding() {
  const { id } = useParams();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);
  const [fundingRange, setFundingRange] = useState([50000, 500000]);
  const [selectedBureau, setSelectedBureau] = useState("transunion");

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Fetch user data for credit monitoring
  interface UserData {
    username: string;
    id: number;
    role: string;
  }
  
  const { data: userData } = useQuery<UserData>({
    queryKey: ['/api/user'],
  });

  const userName = userData?.username || "User";

  // Mock data for demonstrations
  const investors: Investor[] = [
    {
      id: 1,
      name: "Sequoia Capital",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 500000,
      maxInvestment: 10000000,
      industries: ["Software", "FinTech", "Healthcare"],
      stages: ["Seed", "Series A", "Series B"],
      regions: ["North America", "Europe", "Asia"],
      portfolio: 156,
      successRate: 0.78,
      matchScore: 92
    },
    {
      id: 2,
      name: "Andreessen Horowitz",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 1000000,
      maxInvestment: 20000000,
      industries: ["AI", "Blockchain", "Enterprise"],
      stages: ["Series A", "Series B", "Series C"],
      regions: ["North America"],
      portfolio: 289,
      successRate: 0.82,
      matchScore: 87
    },
    {
      id: 3,
      name: "Angel Investor Network",
      type: "angel",
      logo: "https://via.placeholder.com/40",
      minInvestment: 25000,
      maxInvestment: 250000,
      industries: ["Software", "E-commerce", "Mobile"],
      stages: ["Pre-seed", "Seed"],
      regions: ["North America", "Europe"],
      portfolio: 45,
      successRate: 0.65,
      matchScore: 94
    }
  ];

  const lenders: Lender[] = [
    {
      id: 1,
      name: "Business Capital Corp",
      type: "online",
      logo: "https://via.placeholder.com/40",
      minLoan: 10000,
      maxLoan: 500000,
      interestRate: 8.5,
      term: 36,
      requirements: {
        minCreditScore: 650,
        minTimeInBusiness: 12,
        minAnnualRevenue: 100000
      },
      matchScore: 89
    },
    {
      id: 2,
      name: "FirstBank Business Lending",
      type: "bank",
      logo: "https://via.placeholder.com/40",
      minLoan: 25000,
      maxLoan: 1000000,
      interestRate: 6.2,
      term: 60,
      requirements: {
        minCreditScore: 700,
        minTimeInBusiness: 24,
        minAnnualRevenue: 250000
      },
      matchScore: 76
    },
    {
      id: 3,
      name: "Community Credit Union",
      type: "credit-union",
      logo: "https://via.placeholder.com/40",
      minLoan: 5000,
      maxLoan: 150000,
      interestRate: 7.8,
      term: 48,
      requirements: {
        minCreditScore: 600,
        minTimeInBusiness: 6,
        minAnnualRevenue: 50000
      },
      matchScore: 82
    }
  ];

  const grants: Grant[] = [
    {
      id: 1,
      name: "NYDA Grant Programme",
      provider: "National Youth Development Agency",
      type: "government",
      amount: 100000,
      deadline: "2024-03-31",
      eligibility: ["Youth entrepreneurs (18-35)", "South African citizens", "Viable business plan"],
      sectors: ["Technology", "Agriculture", "Manufacturing"],
      matchScore: 95,
      description: "Supports youth entrepreneurs with non-repayable grants for business development and job creation."
    },
    {
      id: 2,
      name: "Small Business Innovation Research (SBIR)",
      provider: "National Science Foundation",
      type: "government",
      amount: 250000,
      deadline: "2024-06-15",
      eligibility: ["Small businesses", "Research-focused", "Technology innovation"],
      sectors: ["Technology", "Healthcare", "Energy"],
      matchScore: 78,
      description: "Federal funding for small businesses engaged in research and development with commercialization potential."
    },
    {
      id: 3,
      name: "Gates Foundation Innovation Grant",
      provider: "Bill & Melinda Gates Foundation",
      type: "foundation",
      amount: 500000,
      deadline: "2024-08-30",
      eligibility: ["Global health focus", "Poverty alleviation", "Educational impact"],
      sectors: ["Healthcare", "Education", "Agriculture"],
      matchScore: 65,
      description: "Supports innovative solutions addressing global challenges in health, education, and poverty reduction."
    }
  ];

  // Enhanced credit monitoring data
  const creditScore = 803;
  const creditMaxScore = 850;
  const scoreChange = +12; // Points changed this month
  const previousScore = creditScore - scoreChange;
  const scorePercentage = (creditScore / creditMaxScore) * 100;
  const needleRotation = -90 + (scorePercentage * 180 / 100);
  
  // Enhanced credit factors
  const creditFactors = [
    {
      name: "Payment History",
    percentage: 100,
    status: "excellent",
      impact: "Most Impact",
      description: "You've made 100% of payments on time",
      trend: "stable",
      weight: 35
    },
    {
      name: "Credit Utilization",
    percentage: 2,
    status: "excellent",
      impact: "High Impact",
      description: "$1,508 of $84,301 total credit used",
      trend: "improving",
      weight: 30
    },
    {
      name: "Credit Age",
      years: 7,
      months: 3,
      status: "good",
      impact: "Medium Impact", 
      description: "Average age of your credit accounts",
      trend: "improving",
      weight: 15
    },
    {
      name: "Credit Mix",
      accounts: 5,
      types: 3,
      status: "good",
      impact: "Low Impact",
      description: "Good variety of credit types",
      trend: "stable",
      weight: 10
    },
    {
      name: "New Credit",
      inquiries: 1,
      status: "excellent",
      impact: "Low Impact", 
      description: "1 hard inquiry in the last 2 years",
      trend: "stable",
      weight: 10
    }
  ];

  // Credit goals and achievements
  const creditGoals = [
    {
      title: "Reach 820 Credit Score",
      current: 803,
      target: 820,
      progress: 94,
      timeframe: "3 months",
      status: "in_progress"
    },
    {
      title: "Reduce Utilization to 1%",
      current: 2,
      target: 1,
      progress: 50,
      timeframe: "1 month", 
      status: "in_progress"
    },
    {
      title: "Maintain Perfect Payment History",
      current: 100,
      target: 100,
      progress: 100,
      timeframe: "Ongoing",
      status: "achieved"
    }
  ];

  // Credit monitoring alerts
  const creditAlerts = [
    {
      type: "positive",
      title: "Credit Score Increased",
      description: "Your TransUnion score increased by 12 points",
      date: "2 days ago",
      icon: TrendingUp,
      action: "View Details"
    },
    {
      type: "info", 
      title: "Monthly Report Available",
      description: "Your December credit report is ready to view",
      date: "1 week ago",
      icon: Bell,
      action: "Download"
    }
  ];

  // Account data with enhanced details
  const creditAccounts = [
    {
      name: "Capital One Venture",
      type: "Credit Card",
      balance: 2500,
      limit: 10000,
      utilization: 25,
      payment: 125,
      status: "Current",
      opened: "Jan 2019",
      lastPayment: "Dec 15, 2023",
      paymentHistory: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
      name: "Chase Freedom Unlimited", 
      type: "Credit Card",
      balance: 0,
      limit: 15000,
      utilization: 0,
      payment: 0,
      status: "Current",
      opened: "Mar 2020",
      lastPayment: "Dec 10, 2023",
      paymentHistory: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
      name: "Auto Loan - Honda",
      type: "Installment Loan", 
      balance: 12000,
      originalAmount: 25000,
      payment: 450,
      status: "Current",
      opened: "Jun 2021",
      lastPayment: "Dec 20, 2023",
      paymentHistory: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    }
  ];

  // Credit score tiers
  const creditTiers = [
    { name: "Poor", min: 300, max: 579, color: "bg-red-500" },
    { name: "Fair", min: 580, max: 669, color: "bg-yellow-500" }, 
    { name: "Good", min: 670, max: 739, color: "bg-blue-500" },
    { name: "Very Good", min: 740, max: 799, color: "bg-green-500" },
    { name: "Exceptional", min: 800, max: 850, color: "bg-purple-500" }
  ];

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const getScoreColorClass = (score: number) => {
    if (score >= 800) return "text-purple-600";
    if (score >= 740) return "text-green-600";
    if (score >= 670) return "text-blue-600";
    if (score >= 580) return "text-yellow-600";
    return "text-red-600";
  };

  const getStatusColorClass = (status: string) => {
    switch (status.toLowerCase()) {
      case "excellent": return "text-green-600";
      case "good": return "text-blue-600";
      case "fair": return "text-yellow-600";
      case "poor": return "text-red-600";
      default: return "text-gray-600";
    }
  };

  // Get trend icon
  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case "improving": return <TrendingUp className="h-4 w-4 text-green-600" />;
      case "declining": return <TrendingDown className="h-4 w-4 text-red-600" />;
      default: return <div className="h-4 w-4" />;
    }
  };

  const filteredInvestors = investors.filter(investor =>
    investor.name.toLowerCase().includes(searchQuery.toLowerCase()) &&
    (selectedIndustries.length === 0 || investor.industries.some(industry => 
      selectedIndustries.includes(industry)
    )) &&
    investor.maxInvestment >= fundingRange[0] &&
    investor.minInvestment <= fundingRange[1]
  );

  const filteredLenders = lenders.filter(lender =>
    lender.name.toLowerCase().includes(searchQuery.toLowerCase()) &&
    lender.maxLoan >= fundingRange[0] &&
    lender.minLoan <= fundingRange[1]
  );

  const filteredGrants = grants.filter(grant =>
    grant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    grant.provider.toLowerCase().includes(searchQuery.toLowerCase()) ||
    grant.sectors.some(sector => sector.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <DollarSign className="h-10 w-10 text-indigo-600" />
            <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
              Funding Hub
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Explore comprehensive funding options for your business across equity, debt, and grant opportunities
          </p>
        </div>

        <Tabs defaultValue="equity" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3 lg:w-fit">
            <TabsTrigger value="equity" className="flex items-center gap-2">
              <PieChart className="h-4 w-4" />
              Equity Funding
            </TabsTrigger>
            <TabsTrigger value="debt" className="flex items-center gap-2">
              <CreditCard className="h-4 w-4" />
              Debt Funding
            </TabsTrigger>
            <TabsTrigger value="grants" className="flex items-center gap-2">
              <Gift className="h-4 w-4" />
              Grant Funding
            </TabsTrigger>
          </TabsList>

          {/* Equity Funding Tab */}
          <TabsContent value="equity" className="space-y-6">
            <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <PieChart className="h-5 w-5 text-blue-600" />
                  Equity Funding Overview
                </CardTitle>
                <CardDescription>
                  Selling a portion of your company's ownership in exchange for capital.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-semibold text-green-600 mb-2">Pros</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>• No obligation to repay the funds</li>
                      <li>• No additional financial burden</li>
                      <li>• Access to investor expertise and networks</li>
                      <li>• Shared risk with investors</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold text-red-600 mb-2">Cons</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>• Give up ownership and control</li>
                      <li>• Dilution of founder equity</li>
                      <li>• Investor involvement in decisions</li>
                      <li>• Complex legal agreements</li>
                    </ul>
                  </div>
                </div>
                <div className="bg-blue-50 p-4 rounded-lg">
                  <p className="text-sm text-blue-800">
                    <strong>Best for:</strong> Startups and high-growth businesses that need significant capital 
                    but may not qualify for large loans, or companies seeking strategic partnerships.
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Search and Filters */}
            <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
              <CardHeader>
                <CardTitle>Find Investors</CardTitle>
                <CardDescription>
                  Discover investors that match your business profile and funding needs.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex gap-4">
                    <div className="flex-1">
                      <Input
                        placeholder="Search investors..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className="w-full"
                      />
                    </div>
                    <Button variant="outline">
                      <Filter className="h-4 w-4 mr-2" />
                      Filters
                    </Button>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium mb-2 block">
                      Investment Range: {formatCurrency(fundingRange[0])} - {formatCurrency(fundingRange[1])}
                    </label>
                    <Slider
                      value={fundingRange}
                      onValueChange={setFundingRange}
                      max={10000000}
                      min={10000}
                      step={10000}
                      className="w-full"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Investor Results */}
            <div className="grid gap-6">
              {filteredInvestors.map((investor) => (
                <Card key={investor.id} className="backdrop-blur-sm bg-white/70 border-0 shadow-lg hover:shadow-xl transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-4">
                        <img
                          src={investor.logo}
                          alt={investor.name}
                          className="w-12 h-12 rounded-lg object-cover"
                        />
                        <div>
                          <h3 className="font-semibold text-lg">{investor.name}</h3>
                          <Badge variant="outline" className="mt-1">
                            {investor.type.toUpperCase()}
                          </Badge>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-2xl font-bold text-green-600">{investor.matchScore}%</div>
                        <div className="text-sm text-gray-500">Match Score</div>
                      </div>
                    </div>
                    
                    <div className="grid md:grid-cols-3 gap-4 mt-6">
                      <div>
                        <div className="text-sm text-gray-500">Investment Range</div>
                        <div className="font-semibold">
                          {formatCurrency(investor.minInvestment)} - {formatCurrency(investor.maxInvestment)}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-gray-500">Portfolio Size</div>
                        <div className="font-semibold">{investor.portfolio} companies</div>
                      </div>
                      <div>
                        <div className="text-sm text-gray-500">Success Rate</div>
                        <div className="font-semibold">{(investor.successRate * 100).toFixed(0)}%</div>
                      </div>
                    </div>
                    
                    <div className="mt-4">
                      <div className="text-sm text-gray-500 mb-2">Focus Areas</div>
                      <div className="flex flex-wrap gap-2">
                        {investor.industries.map((industry) => (
                          <Badge key={industry} variant="secondary" className="text-xs">
                            {industry}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    
                    <div className="flex justify-between items-center mt-6">
                      <div className="flex gap-2">
                        {investor.stages.map((stage) => (
                          <Badge key={stage} variant="outline" className="text-xs">
                            {stage}
                          </Badge>
                        ))}
                      </div>
                      <Button className="ml-auto">
                        Connect
                        <ArrowRight className="h-4 w-4 ml-2" />
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Debt Funding Tab */}
          <TabsContent value="debt" className="space-y-6">
            <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CreditCard className="h-5 w-5 text-green-600" />
                  Debt Funding Overview
                </CardTitle>
                <CardDescription>
                  Borrowing money that must be paid back, usually with interest, over a set period.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-semibold text-green-600 mb-2">Pros</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>• Owners retain full control of the business</li>
                      <li>• No dilution of ownership</li>
                      <li>• Interest payments are tax deductible</li>
                      <li>• Predictable payment schedule</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold text-red-600 mb-2">Cons</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>• Creates financial obligation and burden</li>
                      <li>• Regular payments required regardless of performance</li>
                      <li>• Personal guarantees often required</li>
                      <li>• Strict qualification requirements</li>
                    </ul>
                  </div>
                </div>
                <div className="bg-green-50 p-4 rounded-lg">
                  <p className="text-sm text-green-800">
                    <strong>Best for:</strong> Established businesses with steady cash flow, 
                    good credit history, and predictable revenue streams.
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Credit Bureau Tabs */}
            <Tabs value={selectedBureau} onValueChange={setSelectedBureau} className="mb-6">
              <TabsList className="grid grid-cols-3 bg-white/70 backdrop-blur-sm">
                <TabsTrigger value="transunion" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
                  TransUnion
                </TabsTrigger>
                <TabsTrigger value="equifax" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
                  Equifax
                </TabsTrigger>
                <TabsTrigger value="experian" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
                  Experian
                </TabsTrigger>
              </TabsList>
            </Tabs>

            {/* Quick Stats */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Credit Score</p>
                      <p className={`text-2xl font-bold ${getScoreColorClass(creditScore)}`}>
                        {creditScore}
                      </p>
                      <div className="flex items-center mt-1">
                        <TrendingUp className="h-3 w-3 text-green-600 mr-1" />
                        <span className="text-xs text-green-600">+{scoreChange} points</span>
                      </div>
                    </div>
                    <div className="p-2 bg-purple-100 rounded-lg">
                      <Award className="h-6 w-6 text-purple-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Utilization</p>
                      <p className="text-2xl font-bold text-green-600">2%</p>
                      <p className="text-xs text-gray-500">$1,508 / $84,301</p>
                    </div>
                    <div className="p-2 bg-green-100 rounded-lg">
                      <CreditCard className="h-6 w-6 text-green-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Payment History</p>
                      <p className="text-2xl font-bold text-green-600">100%</p>
                      <p className="text-xs text-gray-500">Always on time</p>
                    </div>
                    <div className="p-2 bg-blue-100 rounded-lg">
                      <CheckCircle className="h-6 w-6 text-blue-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Total Accounts</p>
                      <p className="text-2xl font-bold text-blue-600">28</p>
                      <p className="text-xs text-gray-500">Open & closed</p>
                    </div>
                    <div className="p-2 bg-teal-100 rounded-lg">
                      <Wallet className="h-6 w-6 text-teal-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Left Column - Credit Score & Factors */}
              <div className="lg:col-span-2 space-y-6">
                {/* Enhanced Credit Score Overview */}
                <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg overflow-hidden relative">
                  <div className="absolute inset-0 bg-gradient-to-br from-purple-50/50 via-blue-50/30 to-green-50/50 pointer-events-none" />
                  
                  <CardHeader className="relative z-10">
                    <div className="flex items-center justify-between">
                      <CardTitle className="flex items-center gap-2">
                        <div className="p-2 rounded-lg bg-gradient-to-r from-purple-500 to-blue-500 text-white">
                          <Award className="h-5 w-5" />
                        </div>
                        <span className="bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                        Credit Score Overview
                        </span>
                      </CardTitle>
                      <Badge className="bg-gradient-to-r from-purple-100 to-blue-100 text-purple-700 border-purple-200 shadow-sm">
                        <Star className="h-3 w-3 mr-1" />
                        Exceptional
                      </Badge>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="relative z-10">
                    <div className="flex flex-col lg:flex-row items-center gap-6 lg:gap-8">
                      {/* Enhanced Credit Score Meter */}
                      <div className="flex-shrink-0 w-full lg:w-auto">
                        <div className="relative w-full max-w-sm mx-auto lg:mx-0 lg:w-80 h-44 group">
                          <svg className="w-full h-full drop-shadow-lg" viewBox="0 0 400 220" role="img" aria-label="Credit score meter gauge">
                            <defs>
                              {creditTiers.map((tier, index) => {
                                const tierAngle = 180 / creditTiers.length;
                                const startAngle = -90 + index * tierAngle;
                                const endAngle = startAngle + tierAngle;
                                const textPath = describeArc(200, 200, 150, startAngle, endAngle);
                            return (
                              <path
                                    key={`text-path-${index}`}
                                    id={`text-path-${index}`}
                                    d={textPath}
                                fill="none"
                              />
                            );
                          })}
                            
                              <filter id="drop-shadow" x="-50%" y="-50%" width="200%" height="200%">
                                <feDropShadow dx="0" dy="2" stdDeviation="2" floodColor="rgba(0,0,0,0.15)" />
                              </filter>
                            </defs>

                            {creditTiers.map((tier, index) => {
                              const tierAngle = 180 / creditTiers.length;
                              const startAngle = -90 + index * tierAngle;
                              const endAngle = startAngle + tierAngle;
                              const angleGap = 2;
                              const arcPath = describeArc(200, 200, 150, startAngle + angleGap, endAngle - angleGap);

                              const colors = {
                                "Poor": "#f85959",
                                "Fair": "#ff934c", 
                                "Good": "#f9d14b",
                                "Very Good": "#93d25b",
                                "Exceptional": "#4acb6d"
                              };

                              const tierColor = colors[tier.name as keyof typeof colors] || "#f85959";

                              return (
                                <g key={tier.name}>
                                  <path d={arcPath} fill="none" stroke={tierColor} strokeWidth="48" strokeLinecap="butt"/>
                                  <path d={arcPath} fill="none" stroke={shadeColor(tierColor, 10)} strokeWidth="38" strokeLinecap="butt"/>
                                  <path d={arcPath} fill="none" stroke={shadeColor(tierColor, 20)} strokeWidth="28" strokeLinecap="butt"/>
                                </g>
                              );
                            })}

                            {creditTiers.map((tier, index) => {
                              return (
                                <text key={`label-${tier.name}`} fill="#0d233a" fontSize="17" fontWeight="bold" dominantBaseline="middle">
                                  <textPath href={`#text-path-${index}`} startOffset="15%" textAnchor="start">
                                    {tier.name.toUpperCase()}
                                  </textPath>
                            </text>
                              );
                            })}

                            <g transform={`rotate(${needleRotation} 200 200)`} style={{ transition: 'transform 0.7s cubic-bezier(0.23, 1, 0.32, 1)' }}>
                              <path 
                                d={`M 196 200 C 196 140, 200 85, 200 65 C 200 85, 204 140, 204 200 Z`} 
                                fill="#0d233a" 
                              />
                            </g>
                            
                            <g filter="url(#drop-shadow)">
                              <circle cx="200" cy="200" r="16" fill="#0d233a" />
                              <circle cx="200" cy="200" r="13" fill="none" stroke="white" strokeWidth="2" />
                            </g>
                        </svg>

                        <div className="absolute top-[185px] left-1/2 -translate-x-1/2 w-full">
                          <div className="w-20 h-0.5 mx-auto" style={{backgroundColor: '#0d233a'}} />
                          <p className="text-xl font-medium tracking-[0.2em] mt-2" style={{color: '#0d233a'}}>CREDIT SCORE</p>
                        </div>
                      </div>
                    </div>
                    </div>

                    <div className="flex-1 space-y-6">
                      <div className="text-center lg:text-left">
                        <div className="flex items-center justify-center lg:justify-start gap-3 mb-3">
                          <span className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                            Exceptional Credit
                          </span>
                          <div className="flex items-center gap-1 px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">
                            <TrendingUp className="h-4 w-4" />
                            +{scoreChange}
                          </div>
                        </div>
                        <p className="text-gray-600 text-lg">
                          Your score increased by <span className="font-semibold text-green-600">{scoreChange} points</span> this month
                        </p>
                        <p className="text-sm text-gray-500 mt-2">
                          You're in the top 20% of credit scores nationwide
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Credit Factors */}
              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                      <BarChart className="h-5 w-5 text-blue-600" />
                      Credit Score Factors
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      {creditFactors.map((factor, index) => (
                        <div key={index} className="space-y-3">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <div className="flex items-center gap-2">
                                <span className="font-medium">{factor.name}</span>
                                {getTrendIcon(factor.trend)}
                              </div>
                              <Badge variant="outline" className="text-xs">
                                {factor.impact}
                              </Badge>
                            </div>
                            <div className="text-right">
                              <span className={`font-semibold text-lg ${getStatusColorClass(factor.status)}`}>
                                {factor.percentage !== undefined ? `${factor.percentage}%` : 
                                 factor.years !== undefined ? `${factor.years}y ${factor.months}m` :
                                 factor.accounts !== undefined ? `${factor.accounts} accounts` :
                                 factor.inquiries !== undefined ? `${factor.inquiries} inquiry` : ''}
                              </span>
                            </div>
                          </div>
                          
                          <div className="space-y-2">
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">{factor.description}</span>
                              <span className="text-gray-500">{factor.weight}% of score</span>
                            </div>
                            
                            <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
                              <div 
                                className={`h-full rounded-full ${
                                  factor.status === "excellent" ? "bg-green-500" :
                                  factor.status === "good" ? "bg-blue-500" :
                                  factor.status === "fair" ? "bg-yellow-500" : "bg-red-500"
                                }`}
                                style={{ width: `${factor.percentage || 80}%` }}
                              />
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Right Column - AI Scoring, Goals, Alerts */}
              <div className="space-y-6">
                {/* AI Credit Scoring */}
                <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <div className="p-2 rounded-lg bg-gradient-to-r from-purple-500 to-blue-500 text-white">
                        <Zap className="h-5 w-5" />
                      </div>
                      <span className="bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                        AI Credit Scoring
                      </span>
                  </CardTitle>
                  <CardDescription>
                      Advanced AI analysis of your credit profile
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="text-center">
                      <div className="relative w-24 h-24 mx-auto mb-4">
                        <svg viewBox="0 0 100 100" className="w-full h-full">
                          <circle
                            cx="50"
                            cy="50"
                            r="40"
                            stroke="#f3f4f6"
                            strokeWidth="8"
                            fill="none"
                          />
                          <circle
                            cx="50"
                            cy="50"
                            r="40"
                            stroke="url(#aiScoreGradient)"
                            strokeWidth="8"
                            fill="none"
                            strokeDasharray={`${2 * Math.PI * 40}`}
                            strokeDashoffset={`${2 * Math.PI * 40 * (1 - 0.95)}`}
                            className="transition-all duration-2000 ease-out"
                            style={{
                              strokeDasharray: `${2 * Math.PI * 40}`,
                              strokeDashoffset: `${2 * Math.PI * 40 * (1 - 0.95)}`
                            }}
                          />
                          <defs>
                            <linearGradient id="aiScoreGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                              <stop offset="0%" stopColor="#8b5cf6" />
                              <stop offset="100%" stopColor="#3b82f6" />
                            </linearGradient>
                          </defs>
                        </svg>
                        <div className="absolute inset-0 flex items-center justify-center">
                          <span className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                            95
                          </span>
                        </div>
                      </div>
                      <h3 className="text-lg font-semibold text-gray-800 mb-1">AI Credit Score</h3>
                      <p className="text-sm text-gray-600">Exceptional AI Analysis</p>
                  </div>

                  <div className="space-y-4">
                      <div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg border border-green-200">
                        <div className="flex items-start gap-3">
                          <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0">
                            <CheckCircle className="h-4 w-4 text-green-600" />
                          </div>
                      <div>
                            <h4 className="font-semibold text-green-800 text-sm mb-1">Payment Pattern Analysis</h4>
                            <p className="text-xs text-green-700">AI detected consistent on-time payments across all accounts</p>
                      </div>
                      </div>
                    </div>

                      <div className="p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-200">
                        <div className="flex items-start gap-3">
                          <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                            <TrendingUp className="h-4 w-4 text-blue-600" />
                          </div>
                      <div>
                            <h4 className="font-semibold text-blue-800 text-sm mb-1">Credit Utilization Optimization</h4>
                            <p className="text-xs text-blue-700">AI recommends maintaining current low utilization for maximum score</p>
                      </div>
                        </div>
                        </div>
                      </div>
                  </CardContent>
                </Card>

                {/* Credit Goals */}
                <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Target className="h-5 w-5 text-orange-600" />
                      Credit Goals
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {creditGoals.map((goal, index) => (
                        <div key={index} className="space-y-2">
                          <div className="flex items-center justify-between">
                            <h4 className="font-medium text-sm">{goal.title}</h4>
                            <Badge variant={goal.status === "achieved" ? "default" : "outline"}>
                              {goal.status === "achieved" ? "✓" : `${goal.progress}%`}
                            </Badge>
                    </div>
                          <Progress value={goal.progress} className="h-2" />
                          <div className="flex justify-between text-xs text-gray-600">
                            <span>{goal.current} / {goal.target}</span>
                            <span>{goal.timeframe}</span>
                  </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* Credit Alerts */}
                <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Bell className="h-5 w-5 text-blue-600" />
                      Recent Alerts
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {creditAlerts.map((alert, index) => {
                        const IconComponent = alert.icon;
                        return (
                          <div key={index} className="flex items-start gap-3 p-3 rounded-lg bg-gray-50">
                            <div className={`p-1 rounded-full ${
                              alert.type === "positive" ? "bg-green-100" : "bg-blue-100"
                            }`}>
                              <IconComponent className={`h-4 w-4 ${
                                alert.type === "positive" ? "text-green-600" : "text-blue-600"
                              }`} />
                            </div>
                            <div className="flex-1 min-w-0">
                              <h4 className="font-medium text-sm">{alert.title}</h4>
                              <p className="text-xs text-gray-600 mt-1">{alert.description}</p>
                              <p className="text-xs text-gray-500 mt-1">{alert.date}</p>
                            </div>
                            <Button size="sm" variant="ghost" className="text-xs">
                              {alert.action}
                  </Button>
                          </div>
                        );
                      })}
                    </div>
                </CardContent>
              </Card>
              </div>
              
              {/* Right Column - Lender Matching */}
              <div className="lg:col-span-1">
              {/* Lender Matching */}
              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardHeader>
                  <CardTitle>Find Lenders</CardTitle>
                  <CardDescription>
                    Discover lending options that match your credit profile
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm font-medium mb-2 block">
                        Loan Amount: {formatCurrency(fundingRange[0])} - {formatCurrency(fundingRange[1])}
                      </label>
                      <Slider
                        value={fundingRange}
                        onValueChange={setFundingRange}
                        max={2000000}
                        min={5000}
                        step={5000}
                        className="w-full"
                      />
                    </div>
                    
                    <div className="space-y-3">
                      {filteredLenders.slice(0, 2).map((lender) => (
                        <div key={lender.id} className="p-4 border rounded-lg bg-white/50">
                          <div className="flex justify-between items-start mb-2">
                            <div>
                              <h4 className="font-semibold">{lender.name}</h4>
                              <Badge variant="outline" className="text-xs">
                                {lender.type}
                              </Badge>
                            </div>
                            <div className="text-right">
                              <div className="text-lg font-bold text-green-600">{lender.matchScore}%</div>
                              <div className="text-xs text-gray-500">Match</div>
                            </div>
                          </div>
                          <div className="grid grid-cols-2 gap-2 text-sm">
                            <div>
                              <span className="text-gray-500">Rate:</span> {lender.interestRate}%
                            </div>
                            <div>
                              <span className="text-gray-500">Term:</span> {lender.term} months
                            </div>
                            <div>
                              <span className="text-gray-500">Min Credit:</span> {lender.requirements.minCreditScore}
                            </div>
                            <div>
                              <span className="text-gray-500">Max Loan:</span> {formatCurrency(lender.maxLoan)}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    <Button className="w-full">
                      View All Lenders
                      <ArrowRight className="h-4 w-4 ml-2" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
              </div>
            </div>
          </TabsContent>

          {/* Grant Funding Tab */}
          <TabsContent value="grants" className="space-y-6">
            <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Gift className="h-5 w-5 text-purple-600" />
                  Grant Funding Overview
                </CardTitle>
                <CardDescription>
                  Non-repayable funds provided for projects with social or economic benefits.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-semibold text-green-600 mb-2">Pros</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>• No repayment required</li>
                      <li>• No loss of ownership or control</li>
                      <li>• Ideal for non-profits and social impact projects</li>
                      <li>• Often includes additional support and resources</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold text-red-600 mb-2">Cons</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>• Highly competitive application process</li>
                      <li>• Specific project or demographic requirements</li>
                      <li>• Extensive reporting and compliance obligations</li>
                      <li>• Limited funding amounts and strict deadlines</li>
                    </ul>
                  </div>
                </div>
                <div className="bg-purple-50 p-4 rounded-lg">
                  <p className="text-sm text-purple-800">
                    <strong>Best for:</strong> Non-profits, social enterprises, research projects, 
                    and businesses focused on community impact or specific demographics like youth entrepreneurs.
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Grant Search */}
            <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
              <CardHeader>
                <CardTitle>Find Grant Opportunities</CardTitle>
                <CardDescription>
                  Discover grants that align with your business mission and demographics.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <Input
                    placeholder="Search grants by name, provider, or sector..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full"
                  />
                </div>
              </CardContent>
            </Card>

            {/* Grant Results */}
            <div className="grid gap-6">
              {filteredGrants.map((grant) => (
                <Card key={grant.id} className="backdrop-blur-sm bg-white/70 border-0 shadow-lg hover:shadow-xl transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div>
                        <h3 className="font-semibold text-lg mb-1">{grant.name}</h3>
                        <p className="text-gray-600 mb-2">{grant.provider}</p>
                        <Badge variant="outline" className="mr-2">
                          {grant.type}
                        </Badge>
                        <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                          {grant.matchScore}% Match
                        </Badge>
                      </div>
                      <div className="text-right">
                        <div className="text-2xl font-bold text-purple-600">
                          {formatCurrency(grant.amount)}
                        </div>
                        <div className="text-sm text-gray-500">Grant Amount</div>
                      </div>
                    </div>
                    
                    <p className="text-gray-600 mb-4">{grant.description}</p>
                    
                    <div className="grid md:grid-cols-2 gap-4 mb-4">
                      <div>
                        <div className="text-sm text-gray-500 mb-2">Deadline</div>
                        <div className="font-semibold flex items-center gap-2">
                          <Clock className="h-4 w-4 text-orange-500" />
                          {new Date(grant.deadline).toLocaleDateString()}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-gray-500 mb-2">Focus Sectors</div>
                        <div className="flex flex-wrap gap-1">
                          {grant.sectors.map((sector) => (
                            <Badge key={sector} variant="secondary" className="text-xs">
                              {sector}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>
                    
                    <div className="mb-4">
                      <div className="text-sm text-gray-500 mb-2">Eligibility Requirements</div>
                      <ul className="text-sm text-gray-600 space-y-1">
                        {grant.eligibility.map((req, index) => (
                          <li key={index} className="flex items-center gap-2">
                            <CheckCircle className="h-3 w-3 text-green-500 flex-shrink-0" />
                            {req}
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    <div className="flex justify-between items-center">
                      <Button variant="outline">
                        <FileText className="h-4 w-4 mr-2" />
                        View Guidelines
                      </Button>
                      <Button>
                        Apply Now
                        <ArrowRight className="h-4 w-4 ml-2" />
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

export default Funding;

===== FILE: client/src/pages/equity-funding.tsx =====
import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  ArrowRight, Search, Filter, DollarSign, Building2, Globe, PieChart, Clock, Shield,
  TrendingUp, Users, Award, CheckCircle, AlertCircle, CreditCard, History, Info,
  BarChart2, HelpCircle, Wallet, Target, Star, ExternalLink, Building, Zap
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

interface Investor {
  id: number;
  name: string;
  type: 'angel' | 'vc' | 'pe';
  logo: string;
  minInvestment: number;
  maxInvestment: number;
  industries: string[];
  stages: string[];
  regions: string[];
  portfolio: number;
  successRate: number;
  matchScore: number;
  description: string;
  website: string;
  recentInvestments: string[];
}

function EquityFunding() {
  const { id } = useParams();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);
  const [fundingRange, setFundingRange] = useState([50000, 5000000]);
  const [selectedStage, setSelectedStage] = useState<string>('all');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for equity investors
  const investors: Investor[] = [
    {
      id: 1,
      name: "Sequoia Capital",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 500000,
      maxInvestment: 10000000,
      industries: ["Software", "FinTech", "Healthcare"],
      stages: ["Seed", "Series A", "Series B"],
      regions: ["North America", "Europe", "Asia"],
      portfolio: 156,
      successRate: 0.78,
      matchScore: 92,
      description: "Leading venture capital firm focused on technology companies from seed to growth stage.",
      website: "https://sequoiacap.com",
      recentInvestments: ["Airbnb", "WhatsApp", "Stripe"]
    },
    {
      id: 2,
      name: "Andreessen Horowitz",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 1000000,
      maxInvestment: 20000000,
      industries: ["AI", "Blockchain", "Enterprise"],
      stages: ["Series A", "Series B", "Series C"],
      regions: ["North America", "Europe"],
      portfolio: 208,
      successRate: 0.82,
      matchScore: 88,
      description: "Technology-focused venture capital firm investing in software and internet companies.",
      website: "https://a16z.com",
      recentInvestments: ["Coinbase", "GitHub", "Oculus"]
    },
    {
      id: 3,
      name: "Accel Partners",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 250000,
      maxInvestment: 15000000,
      industries: ["SaaS", "E-commerce", "Mobile"],
      stages: ["Seed", "Series A"],
      regions: ["North America", "Europe"],
      portfolio: 134,
      successRate: 0.75,
      matchScore: 85,
      description: "Early-stage venture capital firm with a focus on consumer and enterprise software.",
      website: "https://accel.com",
      recentInvestments: ["Facebook", "Slack", "Dropbox"]
    },
    {
      id: 4,
      name: "Y Combinator",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 125000,
      maxInvestment: 2000000,
      industries: ["All Industries"],
      stages: ["Pre-seed", "Seed"],
      regions: ["Global"],
      portfolio: 3000,
      successRate: 0.65,
      matchScore: 95,
      description: "Startup accelerator and seed fund providing funding and mentorship to early-stage companies.",
      website: "https://ycombinator.com",
      recentInvestments: ["Airbnb", "Stripe", "DoorDash"]
    },
    {
      id: 5,
      name: "First Round Capital",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 100000,
      maxInvestment: 5000000,
      industries: ["Technology", "Consumer", "Enterprise"],
      stages: ["Seed", "Series A"],
      regions: ["North America"],
      portfolio: 89,
      successRate: 0.71,
      matchScore: 82,
      description: "Early-stage venture capital firm focused on technology companies.",
      website: "https://firstround.com",
      recentInvestments: ["Uber", "Square", "Warby Parker"]
    }
  ];

  const angelInvestors: Investor[] = [
    {
      id: 6,
      name: "Jason Calacanis",
      type: "angel",
      logo: "https://via.placeholder.com/40",
      minInvestment: 10000,
      maxInvestment: 100000,
      industries: ["Technology", "Media"],
      stages: ["Pre-seed", "Seed"],
      regions: ["North America"],
      portfolio: 45,
      successRate: 0.68,
      matchScore: 78,
      description: "Angel investor and entrepreneur with investments in early-stage technology companies.",
      website: "https://calacanis.com",
      recentInvestments: ["Uber", "Thumbtack", "Robinhood"]
    },
    {
      id: 7,
      name: "Naval Ravikant",
      type: "angel",
      logo: "https://via.placeholder.com/40",
      minInvestment: 5000,
      maxInvestment: 50000,
      industries: ["Technology", "Crypto"],
      stages: ["Pre-seed", "Seed"],
      regions: ["Global"],
      portfolio: 78,
      successRate: 0.72,
      matchScore: 85,
      description: "Angel investor and founder of AngelList, focused on technology startups.",
      website: "https://nav.al",
      recentInvestments: ["Twitter", "Uber", "Snapchat"]
    }
  ];

  const allInvestors = [...investors, ...angelInvestors];

  const filteredInvestors = allInvestors.filter(investor => {
    const matchesSearch = investor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         investor.industries.some(industry => 
                           industry.toLowerCase().includes(searchQuery.toLowerCase())
                         );
    const matchesIndustry = selectedIndustries.length === 0 || 
                           selectedIndustries.some(industry => 
                             investor.industries.includes(industry)
                           );
    const matchesStage = selectedStage === 'all' || investor.stages.includes(selectedStage);
    const matchesRange = investor.minInvestment <= fundingRange[1] && 
                        investor.maxInvestment >= fundingRange[0];
    
    return matchesSearch && matchesIndustry && matchesStage && matchesRange;
  });

  const industries = ["Software", "FinTech", "Healthcare", "AI", "Blockchain", "Enterprise", "SaaS", "E-commerce", "Mobile", "Technology", "Consumer", "Media", "Crypto"];

  const stages = [
    { value: 'all', label: 'All Stages' },
    { value: 'Pre-seed', label: 'Pre-seed' },
    { value: 'Seed', label: 'Seed' },
    { value: 'Series A', label: 'Series A' },
    { value: 'Series B', label: 'Series B' },
    { value: 'Series C', label: 'Series C' }
  ];

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    }
    return `$${amount}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-blue-100 rounded-lg">
              <Building className="h-6 w-6 text-blue-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Equity Funding
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Connect with venture capitalists, angel investors, and equity partners to fuel your company's growth.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <TrendingUp className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">$2.4B</p>
                  <p className="text-sm text-gray-600">Total Funding Available</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Users className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">127</p>
                  <p className="text-sm text-gray-600">Active Investors</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Award className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">73%</p>
                  <p className="text-sm text-gray-600">Success Rate</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <Clock className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">45</p>
                  <p className="text-sm text-gray-600">Days Avg. Close</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Filter className="h-5 w-5" />
              Find Your Perfect Match
            </CardTitle>
            <CardDescription>
              Use filters to find investors that align with your business needs
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Search Investors
                </label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search by name or industry..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Funding Stage
                </label>
                <select
                  value={selectedStage}
                  onChange={(e) => setSelectedStage(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {stages.map(stage => (
                    <option key={stage.value} value={stage.value}>
                      {stage.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Funding Range: {formatCurrency(fundingRange[0])} - {formatCurrency(fundingRange[1])}
              </label>
              <Slider
                value={fundingRange}
                onValueChange={setFundingRange}
                min={10000}
                max={10000000}
                step={10000}
                className="w-full"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Industries
              </label>
              <div className="flex flex-wrap gap-2">
                {industries.map(industry => (
                  <Badge
                    key={industry}
                    variant={selectedIndustries.includes(industry) ? "default" : "outline"}
                    className="cursor-pointer"
                    onClick={() => {
                      setSelectedIndustries(prev => 
                        prev.includes(industry) 
                          ? prev.filter(i => i !== industry)
                          : [...prev, industry]
                      );
                    }}
                  >
                    {industry}
                  </Badge>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Results */}
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-gray-900">
              {filteredInvestors.length} Investors Found
            </h2>
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <span>Sorted by Match Score</span>
              <TrendingUp className="h-4 w-4" />
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredInvestors.map(investor => (
              <Card key={investor.id} className="hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <img
                        src={investor.logo}
                        alt={investor.name}
                        className="w-12 h-12 rounded-lg object-cover"
                      />
                      <div>
                        <CardTitle className="text-lg">{investor.name}</CardTitle>
                        <CardDescription className="capitalize">
                          {investor.type === 'vc' ? 'Venture Capital' : 
                           investor.type === 'angel' ? 'Angel Investor' : 'Private Equity'}
                        </CardDescription>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="flex items-center gap-1 mb-1">
                        <Star className="h-4 w-4 text-yellow-500 fill-current" />
                        <span className="text-sm font-medium">{investor.matchScore}% Match</span>
                      </div>
                      <Progress value={investor.matchScore} className="w-20 h-2" />
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-600 mb-4">{investor.description}</p>
                  
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <p className="text-sm font-medium text-gray-700">Investment Range</p>
                      <p className="text-sm text-gray-600">
                        {formatCurrency(investor.minInvestment)} - {formatCurrency(investor.maxInvestment)}
                      </p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">Portfolio Size</p>
                      <p className="text-sm text-gray-600">{investor.portfolio} companies</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">Success Rate</p>
                      <p className="text-sm text-gray-600">{(investor.successRate * 100).toFixed(0)}%</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">Regions</p>
                      <p className="text-sm text-gray-600">{investor.regions.join(', ')}</p>
                    </div>
                  </div>

                  <div className="mb-4">
                    <p className="text-sm font-medium text-gray-700 mb-2">Industries</p>
                    <div className="flex flex-wrap gap-1">
                      {investor.industries.slice(0, 3).map(industry => (
                        <Badge key={industry} variant="secondary" className="text-xs">
                          {industry}
                        </Badge>
                      ))}
                      {investor.industries.length > 3 && (
                        <Badge variant="outline" className="text-xs">
                          +{investor.industries.length - 3} more
                        </Badge>
                      )}
                    </div>
                  </div>

                  <div className="mb-4">
                    <p className="text-sm font-medium text-gray-700 mb-2">Recent Investments</p>
                    <div className="flex flex-wrap gap-1">
                      {investor.recentInvestments.slice(0, 3).map(company => (
                        <Badge key={company} variant="outline" className="text-xs">
                          {company}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="flex gap-2">
                  <Button className="flex-1">
                    <ExternalLink className="h-4 w-4 mr-2" />
                    View Profile
                  </Button>
                  <Button variant="outline" className="flex-1">
                    <Users className="h-4 w-4 mr-2" />
                    Connect
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>

        {/* CTA Section */}
        <Card className="mt-8 bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
          <CardContent className="p-8">
            <div className="text-center">
              <h3 className="text-2xl font-bold mb-4">Ready to Raise Equity?</h3>
              <p className="text-blue-100 mb-6 max-w-2xl mx-auto">
                Get matched with the right investors for your startup. Our AI-powered platform 
                analyzes your business and connects you with investors who are actively looking 
                for companies like yours.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button size="lg" variant="secondary">
                  <Zap className="h-5 w-5 mr-2" />
                  Start Matching
                </Button>
                <Button size="lg" variant="outline" className="border-white text-white hover:bg-white hover:text-blue-600">
                  <HelpCircle className="h-5 w-5 mr-2" />
                  Learn More
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default EquityFunding;


===== FILE: client/src/pages/debt-funding.tsx =====
import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  ArrowRight, Search, Filter, DollarSign, Building2, Globe, PieChart, Clock, Shield,
  TrendingUp, Users, Award, CheckCircle, AlertCircle, CreditCard, History, Info,
  BarChart2, HelpCircle, Wallet, Target, Star, ExternalLink, Building, Zap, Banknote
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

interface Lender {
  id: number;
  name: string;
  type: 'bank' | 'credit-union' | 'online' | 'sba' | 'alternative';
  logo: string;
  minLoan: number;
  maxLoan: number;
  interestRate: number;
  term: number;
  requirements: {
    minCreditScore: number;
    minTimeInBusiness: number;
    minAnnualRevenue: number;
  };
  matchScore: number;
  description: string;
  website: string;
  features: string[];
  approvalTime: string;
}

function DebtFunding() {
  const { id } = useParams();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);
  const [loanRange, setLoanRange] = useState([10000, 1000000]);
  const [selectedTerm, setSelectedTerm] = useState<string>('all');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for lenders
  const lenders: Lender[] = [
    {
      id: 1,
      name: "Wells Fargo Business",
      type: "bank",
      logo: "https://via.placeholder.com/40",
      minLoan: 10000,
      maxLoan: 1000000,
      interestRate: 4.5,
      term: 60,
      requirements: {
        minCreditScore: 680,
        minTimeInBusiness: 2,
        minAnnualRevenue: 100000
      },
      matchScore: 92,
      description: "Traditional bank offering comprehensive business lending solutions with competitive rates.",
      website: "https://wellsfargo.com",
      features: ["Low interest rates", "Flexible terms", "Relationship banking"],
      approvalTime: "7-14 days"
    },
    {
      id: 2,
      name: "Kabbage (American Express)",
      type: "online",
      logo: "https://via.placeholder.com/40",
      minLoan: 2000,
      maxLoan: 250000,
      interestRate: 6.5,
      term: 24,
      requirements: {
        minCreditScore: 600,
        minTimeInBusiness: 1,
        minAnnualRevenue: 50000
      },
      matchScore: 88,
      description: "Online lender specializing in quick business loans with fast approval process.",
      website: "https://kabbage.com",
      features: ["Fast approval", "Online application", "Flexible repayment"],
      approvalTime: "24-48 hours"
    },
    {
      id: 3,
      name: "SBA Express",
      type: "sba",
      logo: "https://via.placeholder.com/40",
      minLoan: 5000,
      maxLoan: 500000,
      interestRate: 3.5,
      term: 84,
      requirements: {
        minCreditScore: 650,
        minTimeInBusiness: 2,
        minAnnualRevenue: 75000
      },
      matchScore: 85,
      description: "SBA-backed loans with government guarantee, offering lower rates and longer terms.",
      website: "https://sba.gov",
      features: ["Government backed", "Low rates", "Long terms"],
      approvalTime: "14-21 days"
    },
    {
      id: 4,
      name: "OnDeck",
      type: "alternative",
      logo: "https://via.placeholder.com/40",
      minLoan: 5000,
      maxLoan: 500000,
      interestRate: 7.5,
      term: 36,
      requirements: {
        minCreditScore: 550,
        minTimeInBusiness: 1,
        minAnnualRevenue: 100000
      },
      matchScore: 82,
      description: "Alternative lender focused on small business loans with quick funding.",
      website: "https://ondeck.com",
      features: ["Quick funding", "Flexible requirements", "Online platform"],
      approvalTime: "1-3 days"
    },
    {
      id: 5,
      name: "Chase Business Banking",
      type: "bank",
      logo: "https://via.placeholder.com/40",
      minLoan: 25000,
      maxLoan: 2000000,
      interestRate: 4.0,
      term: 84,
      requirements: {
        minCreditScore: 700,
        minTimeInBusiness: 3,
        minAnnualRevenue: 250000
      },
      matchScore: 90,
      description: "Full-service bank offering comprehensive business lending and banking solutions.",
      website: "https://chase.com",
      features: ["Full banking services", "Relationship management", "Competitive rates"],
      approvalTime: "10-21 days"
    },
    {
      id: 6,
      name: "Funding Circle",
      type: "alternative",
      logo: "https://via.placeholder.com/40",
      minLoan: 25000,
      maxLoan: 500000,
      interestRate: 5.5,
      term: 60,
      requirements: {
        minCreditScore: 620,
        minTimeInBusiness: 2,
        minAnnualRevenue: 150000
      },
      matchScore: 87,
      description: "Peer-to-peer lending platform connecting businesses with investors for competitive rates.",
      website: "https://fundingcircle.com",
      features: ["Peer-to-peer", "Competitive rates", "Transparent process"],
      approvalTime: "3-7 days"
    }
  ];

  const filteredLenders = lenders.filter(lender => {
    const matchesSearch = lender.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         lender.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesType = selectedTypes.length === 0 || selectedTypes.includes(lender.type);
    const matchesRange = lender.minLoan <= loanRange[1] && lender.maxLoan >= loanRange[0];
    const matchesTerm = selectedTerm === 'all' || 
                       (selectedTerm === 'short' && lender.term <= 24) ||
                       (selectedTerm === 'medium' && lender.term > 24 && lender.term <= 60) ||
                       (selectedTerm === 'long' && lender.term > 60);
    
    return matchesSearch && matchesType && matchesRange && matchesTerm;
  });

  const lenderTypes = [
    { value: 'bank', label: 'Traditional Banks', icon: Building },
    { value: 'online', label: 'Online Lenders', icon: Globe },
    { value: 'sba', label: 'SBA Loans', icon: Shield },
    { value: 'alternative', label: 'Alternative Lenders', icon: Zap },
    { value: 'credit-union', label: 'Credit Unions', icon: Users }
  ];

  const terms = [
    { value: 'all', label: 'All Terms' },
    { value: 'short', label: 'Short Term (≤24 months)' },
    { value: 'medium', label: 'Medium Term (25-60 months)' },
    { value: 'long', label: 'Long Term (>60 months)' }
  ];

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    }
    return `$${amount}`;
  };

  const getTypeIcon = (type: string) => {
    const typeConfig = lenderTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.icon : Building;
  };

  const getTypeLabel = (type: string) => {
    const typeConfig = lenderTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.label : type;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-emerald-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-green-100 rounded-lg">
              <CreditCard className="h-6 w-6 text-green-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Debt Funding
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Access business loans, lines of credit, and debt financing options to fuel your growth without giving up equity.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <DollarSign className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">$1.8B</p>
                  <p className="text-sm text-gray-600">Available Credit</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Building className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">89</p>
                  <p className="text-sm text-gray-600">Lending Partners</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Award className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">4.2%</p>
                  <p className="text-sm text-gray-600">Avg. Interest Rate</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <Clock className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">7</p>
                  <p className="text-sm text-gray-600">Days Avg. Approval</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Filter className="h-5 w-5" />
              Find Your Perfect Lender
            </CardTitle>
            <CardDescription>
              Use filters to find lenders that match your business needs and credit profile
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Search Lenders
                </label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search by name or description..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Loan Term
                </label>
                <select
                  value={selectedTerm}
                  onChange={(e) => setSelectedTerm(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  {terms.map(term => (
                    <option key={term.value} value={term.value}>
                      {term.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Loan Amount: {formatCurrency(loanRange[0])} - {formatCurrency(loanRange[1])}
              </label>
              <Slider
                value={loanRange}
                onValueChange={setLoanRange}
                min={1000}
                max={2000000}
                step={1000}
                className="w-full"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Lender Types
              </label>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
                {lenderTypes.map(type => {
                  const Icon = type.icon;
                  return (
                    <button
                      key={type.value}
                      onClick={() => {
                        setSelectedTypes(prev => 
                          prev.includes(type.value) 
                            ? prev.filter(t => t !== type.value)
                            : [...prev, type.value]
                        );
                      }}
                      className={`p-3 rounded-lg border-2 transition-all ${
                        selectedTypes.includes(type.value)
                          ? 'border-green-500 bg-green-50 text-green-700'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <Icon className="h-5 w-5 mx-auto mb-2" />
                      <p className="text-xs font-medium text-center">{type.label}</p>
                    </button>
                  );
                })}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Results */}
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-gray-900">
              {filteredLenders.length} Lenders Found
            </h2>
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <span>Sorted by Match Score</span>
              <TrendingUp className="h-4 w-4" />
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredLenders.map(lender => {
              const TypeIcon = getTypeIcon(lender.type);
              return (
                <Card key={lender.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-3">
                        <img
                          src={lender.logo}
                          alt={lender.name}
                          className="w-12 h-12 rounded-lg object-cover"
                        />
                        <div>
                          <CardTitle className="text-lg">{lender.name}</CardTitle>
                          <CardDescription className="flex items-center gap-1">
                            <TypeIcon className="h-4 w-4" />
                            {getTypeLabel(lender.type)}
                          </CardDescription>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center gap-1 mb-1">
                          <Star className="h-4 w-4 text-yellow-500 fill-current" />
                          <span className="text-sm font-medium">{lender.matchScore}% Match</span>
                        </div>
                        <Progress value={lender.matchScore} className="w-20 h-2" />
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-600 mb-4">{lender.description}</p>
                    
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div>
                        <p className="text-sm font-medium text-gray-700">Loan Range</p>
                        <p className="text-sm text-gray-600">
                          {formatCurrency(lender.minLoan)} - {formatCurrency(lender.maxLoan)}
                        </p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Interest Rate</p>
                        <p className="text-sm text-gray-600">{lender.interestRate}% APR</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Term Length</p>
                        <p className="text-sm text-gray-600">{lender.term} months</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Approval Time</p>
                        <p className="text-sm text-gray-600">{lender.approvalTime}</p>
                      </div>
                    </div>

                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-700 mb-2">Requirements</p>
                      <div className="grid grid-cols-3 gap-2 text-xs">
                        <div className="bg-gray-50 p-2 rounded">
                          <p className="font-medium">Credit Score</p>
                          <p className="text-gray-600">{lender.requirements.minCreditScore}+</p>
                        </div>
                        <div className="bg-gray-50 p-2 rounded">
                          <p className="font-medium">Time in Business</p>
                          <p className="text-gray-600">{lender.requirements.minTimeInBusiness}+ years</p>
                        </div>
                        <div className="bg-gray-50 p-2 rounded">
                          <p className="font-medium">Annual Revenue</p>
                          <p className="text-gray-600">{formatCurrency(lender.requirements.minAnnualRevenue)}+</p>
                        </div>
                      </div>
                    </div>

                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-700 mb-2">Key Features</p>
                      <div className="flex flex-wrap gap-1">
                        {lender.features.map(feature => (
                          <Badge key={feature} variant="secondary" className="text-xs">
                            {feature}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter className="flex gap-2">
                    <Button className="flex-1">
                      <ExternalLink className="h-4 w-4 mr-2" />
                      Apply Now
                    </Button>
                    <Button variant="outline" className="flex-1">
                      <Info className="h-4 w-4 mr-2" />
                      Learn More
                    </Button>
                  </CardFooter>
                </Card>
              );
            })}
          </div>
        </div>

        {/* CTA Section */}
        <Card className="mt-8 bg-gradient-to-r from-green-600 to-emerald-600 text-white">
          <CardContent className="p-8">
            <div className="text-center">
              <h3 className="text-2xl font-bold mb-4">Ready to Secure Debt Funding?</h3>
              <p className="text-green-100 mb-6 max-w-2xl mx-auto">
                Get matched with lenders who understand your business needs. Our platform 
                analyzes your credit profile and connects you with the best loan options 
                available in the market.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button size="lg" variant="secondary">
                  <Banknote className="h-5 w-5 mr-2" />
                  Find My Loan
                </Button>
                <Button size="lg" variant="outline" className="border-white text-white hover:bg-white hover:text-green-600">
                  <HelpCircle className="h-5 w-5 mr-2" />
                  Get Help
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default DebtFunding;


===== FILE: client/src/pages/grant-funding.tsx =====
import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  ArrowRight, Search, Filter, DollarSign, Building2, Globe, PieChart, Clock, Shield,
  TrendingUp, Users, Award, CheckCircle, AlertCircle, CreditCard, History, Info,
  BarChart2, HelpCircle, Wallet, Target, Star, ExternalLink, Building, Zap, Gift, Calendar
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

interface Grant {
  id: number;
  name: string;
  provider: string;
  type: 'government' | 'foundation' | 'corporate' | 'research';
  amount: number;
  deadline: string;
  eligibility: string[];
  sectors: string[];
  matchScore: number;
  description: string;
  website: string;
  requirements: string[];
  applicationProcess: string[];
  successRate: number;
  avgProcessingTime: string;
}

function GrantFunding() {
  const { id } = useParams();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedSectors, setSelectedSectors] = useState<string[]>([]);
  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);
  const [amountRange, setAmountRange] = useState([1000, 1000000]);
  const [deadlineFilter, setDeadlineFilter] = useState<string>('all');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for grants
  const grants: Grant[] = [
    {
      id: 1,
      name: "SBIR Phase I",
      provider: "National Science Foundation",
      type: "government",
      amount: 150000,
      deadline: "2024-06-15",
      eligibility: ["Small business", "US-based", "Technology focus"],
      sectors: ["Technology", "Research", "Innovation"],
      matchScore: 95,
      description: "Small Business Innovation Research program for early-stage technology development.",
      website: "https://nsf.gov/sbir",
      requirements: ["Research proposal", "Technical feasibility", "Commercial potential"],
      applicationProcess: ["Pre-application", "Full proposal", "Review process"],
      successRate: 0.15,
      avgProcessingTime: "6-8 months"
    },
    {
      id: 2,
      name: "Gates Foundation Global Health",
      provider: "Bill & Melinda Gates Foundation",
      type: "foundation",
      amount: 500000,
      deadline: "2024-08-30",
      eligibility: ["Non-profit", "Global health focus", "Innovation"],
      sectors: ["Healthcare", "Global Health", "Technology"],
      matchScore: 88,
      description: "Funding for innovative solutions to global health challenges.",
      website: "https://gatesfoundation.org",
      requirements: ["Health impact", "Innovation", "Scalability"],
      applicationProcess: ["Letter of inquiry", "Full proposal", "Review"],
      successRate: 0.08,
      avgProcessingTime: "4-6 months"
    },
    {
      id: 3,
      name: "Google for Startups",
      provider: "Google",
      type: "corporate",
      amount: 100000,
      deadline: "2024-07-20",
      eligibility: ["Tech startup", "Early stage", "Global"],
      sectors: ["Technology", "AI", "Cloud Computing"],
      matchScore: 92,
      description: "Google's startup accelerator program with funding and mentorship.",
      website: "https://startup.google.com",
      requirements: ["Tech focus", "Scalable business", "Innovation"],
      applicationProcess: ["Application", "Interview", "Selection"],
      successRate: 0.12,
      avgProcessingTime: "2-3 months"
    },
    {
      id: 4,
      name: "NIH Small Business Grant",
      provider: "National Institutes of Health",
      type: "government",
      amount: 300000,
      deadline: "2024-09-15",
      eligibility: ["Healthcare", "Biotech", "US-based"],
      sectors: ["Healthcare", "Biotechnology", "Research"],
      matchScore: 85,
      description: "NIH funding for small businesses developing healthcare technologies.",
      website: "https://grants.nih.gov",
      requirements: ["Health focus", "Scientific merit", "Commercial potential"],
      applicationProcess: ["Pre-application", "Full proposal", "Peer review"],
      successRate: 0.20,
      avgProcessingTime: "8-10 months"
    },
    {
      id: 5,
      name: "Microsoft for Startups",
      provider: "Microsoft",
      type: "corporate",
      amount: 120000,
      deadline: "2024-08-10",
      eligibility: ["B2B startup", "Cloud technology", "Global"],
      sectors: ["Technology", "Cloud", "Enterprise"],
      matchScore: 90,
      description: "Microsoft's startup program offering funding and Azure credits.",
      website: "https://startups.microsoft.com",
      requirements: ["B2B focus", "Cloud integration", "Innovation"],
      applicationProcess: ["Application", "Demo day", "Selection"],
      successRate: 0.15,
      avgProcessingTime: "3-4 months"
    },
    {
      id: 6,
      name: "Ford Foundation Innovation",
      provider: "Ford Foundation",
      type: "foundation",
      amount: 200000,
      deadline: "2024-10-01",
      eligibility: ["Social impact", "Non-profit", "Global"],
      sectors: ["Social Impact", "Education", "Sustainability"],
      matchScore: 82,
      description: "Funding for organizations creating social impact and positive change.",
      website: "https://fordfoundation.org",
      requirements: ["Social mission", "Impact measurement", "Sustainability"],
      applicationProcess: ["Concept note", "Full proposal", "Site visit"],
      successRate: 0.10,
      avgProcessingTime: "6-8 months"
    }
  ];

  const filteredGrants = grants.filter(grant => {
    const matchesSearch = grant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         grant.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         grant.provider.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesSector = selectedSectors.length === 0 || 
                          selectedSectors.some(sector => grant.sectors.includes(sector));
    const matchesType = selectedTypes.length === 0 || selectedTypes.includes(grant.type);
    const matchesAmount = grant.amount >= amountRange[0] && grant.amount <= amountRange[1];
    const matchesDeadline = deadlineFilter === 'all' || 
                           (deadlineFilter === 'soon' && new Date(grant.deadline) <= new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)) ||
                           (deadlineFilter === 'later' && new Date(grant.deadline) > new Date(Date.now() + 30 * 24 * 60 * 60 * 1000));
    
    return matchesSearch && matchesSector && matchesType && matchesAmount && matchesDeadline;
  });

  const sectors = ["Technology", "Healthcare", "Research", "Innovation", "Global Health", "AI", "Cloud Computing", "Biotechnology", "Social Impact", "Education", "Sustainability", "Enterprise"];

  const grantTypes = [
    { value: 'government', label: 'Government', icon: Building, color: 'blue' },
    { value: 'foundation', label: 'Foundation', icon: Gift, color: 'purple' },
    { value: 'corporate', label: 'Corporate', icon: Building2, color: 'green' },
    { value: 'research', label: 'Research', icon: Award, color: 'orange' }
  ];

  const deadlineFilters = [
    { value: 'all', label: 'All Deadlines' },
    { value: 'soon', label: 'Within 30 Days' },
    { value: 'later', label: 'More than 30 Days' }
  ];

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    }
    return `$${amount}`;
  };

  const getTypeIcon = (type: string) => {
    const typeConfig = grantTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.icon : Gift;
  };

  const getTypeLabel = (type: string) => {
    const typeConfig = grantTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.label : type;
  };

  const getTypeColor = (type: string) => {
    const typeConfig = grantTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.color : 'gray';
  };

  const formatDeadline = (deadline: string) => {
    const date = new Date(deadline);
    const now = new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return 'Expired';
    if (diffDays === 0) return 'Today';
    if (diffDays === 1) return 'Tomorrow';
    if (diffDays <= 7) return `${diffDays} days left`;
    if (diffDays <= 30) return `${Math.ceil(diffDays / 7)} weeks left`;
    return `${Math.ceil(diffDays / 30)} months left`;
  };

  const getDeadlineColor = (deadline: string) => {
    const date = new Date(deadline);
    const now = new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return 'text-red-600 bg-red-50';
    if (diffDays <= 7) return 'text-orange-600 bg-orange-50';
    if (diffDays <= 30) return 'text-yellow-600 bg-yellow-50';
    return 'text-green-600 bg-green-50';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-purple-100 rounded-lg">
              <Gift className="h-6 w-6 text-purple-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Grant Funding
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Discover non-dilutive funding opportunities from government agencies, foundations, and corporations to support your mission.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <DollarSign className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">$3.2B</p>
                  <p className="text-sm text-gray-600">Available Grants</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Gift className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">156</p>
                  <p className="text-sm text-gray-600">Active Programs</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <Award className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">14%</p>
                  <p className="text-sm text-gray-600">Success Rate</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <Calendar className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">23</p>
                  <p className="text-sm text-gray-600">Deadlines This Month</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Filter className="h-5 w-5" />
              Find Your Perfect Grant
            </CardTitle>
            <CardDescription>
              Use filters to find grants that align with your organization's mission and capabilities
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Search Grants
                </label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search by name, provider, or description..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Deadline Filter
                </label>
                <select
                  value={deadlineFilter}
                  onChange={(e) => setDeadlineFilter(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                >
                  {deadlineFilters.map(filter => (
                    <option key={filter.value} value={filter.value}>
                      {filter.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Grant Amount: {formatCurrency(amountRange[0])} - {formatCurrency(amountRange[1])}
              </label>
              <Slider
                value={amountRange}
                onValueChange={setAmountRange}
                min={1000}
                max={2000000}
                step={1000}
                className="w-full"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Grant Types
              </label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                {grantTypes.map(type => {
                  const Icon = type.icon;
                  return (
                    <button
                      key={type.value}
                      onClick={() => {
                        setSelectedTypes(prev => 
                          prev.includes(type.value) 
                            ? prev.filter(t => t !== type.value)
                            : [...prev, type.value]
                        );
                      }}
                      className={`p-3 rounded-lg border-2 transition-all ${
                        selectedTypes.includes(type.value)
                          ? `border-${type.color}-500 bg-${type.color}-50 text-${type.color}-700`
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <Icon className="h-5 w-5 mx-auto mb-2" />
                      <p className="text-xs font-medium text-center">{type.label}</p>
                    </button>
                  );
                })}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Sectors
              </label>
              <div className="flex flex-wrap gap-2">
                {sectors.map(sector => (
                  <Badge
                    key={sector}
                    variant={selectedSectors.includes(sector) ? "default" : "outline"}
                    className="cursor-pointer"
                    onClick={() => {
                      setSelectedSectors(prev => 
                        prev.includes(sector) 
                          ? prev.filter(s => s !== sector)
                          : [...prev, sector]
                      );
                    }}
                  >
                    {sector}
                  </Badge>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Results */}
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-gray-900">
              {filteredGrants.length} Grants Found
            </h2>
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <span>Sorted by Match Score</span>
              <TrendingUp className="h-4 w-4" />
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredGrants.map(grant => {
              const TypeIcon = getTypeIcon(grant.type);
              const typeColor = getTypeColor(grant.type);
              return (
                <Card key={grant.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-3">
                        <div className={`p-2 bg-${typeColor}-100 rounded-lg`}>
                          <TypeIcon className={`h-6 w-6 text-${typeColor}-600`} />
                        </div>
                        <div>
                          <CardTitle className="text-lg">{grant.name}</CardTitle>
                          <CardDescription>{grant.provider}</CardDescription>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center gap-1 mb-1">
                          <Star className="h-4 w-4 text-yellow-500 fill-current" />
                          <span className="text-sm font-medium">{grant.matchScore}% Match</span>
                        </div>
                        <Progress value={grant.matchScore} className="w-20 h-2" />
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-600 mb-4">{grant.description}</p>
                    
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div>
                        <p className="text-sm font-medium text-gray-700">Grant Amount</p>
                        <p className="text-lg font-bold text-gray-900">{formatCurrency(grant.amount)}</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Success Rate</p>
                        <p className="text-sm text-gray-600">{(grant.successRate * 100).toFixed(0)}%</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Processing Time</p>
                        <p className="text-sm text-gray-600">{grant.avgProcessingTime}</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Deadline</p>
                        <Badge className={`text-xs ${getDeadlineColor(grant.deadline)}`}>
                          {formatDeadline(grant.deadline)}
                        </Badge>
                      </div>
                    </div>

                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-700 mb-2">Sectors</p>
                      <div className="flex flex-wrap gap-1">
                        {grant.sectors.map(sector => (
                          <Badge key={sector} variant="secondary" className="text-xs">
                            {sector}
                          </Badge>
                        ))}
                      </div>
                    </div>

                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-700 mb-2">Eligibility</p>
                      <div className="flex flex-wrap gap-1">
                        {grant.eligibility.slice(0, 3).map(requirement => (
                          <Badge key={requirement} variant="outline" className="text-xs">
                            {requirement}
                          </Badge>
                        ))}
                        {grant.eligibility.length > 3 && (
                          <Badge variant="outline" className="text-xs">
                            +{grant.eligibility.length - 3} more
                          </Badge>
                        )}
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter className="flex gap-2">
                    <Button className="flex-1">
                      <ExternalLink className="h-4 w-4 mr-2" />
                      Apply Now
                    </Button>
                    <Button variant="outline" className="flex-1">
                      <Info className="h-4 w-4 mr-2" />
                      Learn More
                    </Button>
                  </CardFooter>
                </Card>
              );
            })}
          </div>
        </div>

        {/* CTA Section */}
        <Card className="mt-8 bg-gradient-to-r from-purple-600 to-pink-600 text-white">
          <CardContent className="p-8">
            <div className="text-center">
              <h3 className="text-2xl font-bold mb-4">Ready to Secure Grant Funding?</h3>
              <p className="text-purple-100 mb-6 max-w-2xl mx-auto">
                Get matched with grants that align with your mission. Our platform analyzes 
                your organization and connects you with funding opportunities that are 
                perfect for your goals.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button size="lg" variant="secondary">
                  <Gift className="h-5 w-5 mr-2" />
                  Find My Grants
                </Button>
                <Button size="lg" variant="outline" className="border-white text-white hover:bg-white hover:text-purple-600">
                  <HelpCircle className="h-5 w-5 mr-2" />
                  Get Help
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default GrantFunding;


===== FILE: client/src/pages/funding-matcher.tsx =====
import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  ArrowRight, Search, Filter, DollarSign, Building2, Globe, PieChart, Clock, Shield, 
  Gift, CheckCircle, Users, Award, TrendingUp, Star, ExternalLink, Zap, Target,
  Building, CreditCard, Gift as GiftIcon, HelpCircle, BarChart3
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';

interface Investor {
  id: number;
  name: string;
  type: 'angel' | 'vc' | 'pe';
  logo: string;
  minInvestment: number;
  maxInvestment: number;
  industries: string[];
  stages: string[];
  regions: string[];
  portfolio: number;
  successRate: number;
  matchScore: number;
}

interface Lender {
  id: number;
  name: string;
  type: 'bank' | 'credit-union' | 'online';
  logo: string;
  minLoan: number;
  maxLoan: number;
  interestRate: number;
  term: number;
  requirements: {
    minCreditScore: number;
    minTimeInBusiness: number;
    minAnnualRevenue: number;
  };
  matchScore: number;
}

interface Grant {
  id: number;
  name: string;
  provider: string;
  type: 'government' | 'foundation' | 'corporate';
  amount: number;
  deadline: string;
  eligibility: string[];
  sectors: string[];
  matchScore: number;
  description: string;
}

function FundingMatcher() {
  const { id } = useParams();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);
  const [fundingRange, setFundingRange] = useState([50000, 500000]);
  const [activeTab, setActiveTab] = useState('all');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Simulated investors and lenders data
  const investors: Investor[] = [
    {
      id: 1,
      name: "Sequoia Capital",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 500000,
      maxInvestment: 10000000,
      industries: ["Software", "FinTech", "Healthcare"],
      stages: ["Seed", "Series A", "Series B"],
      regions: ["North America", "Europe", "Asia"],
      portfolio: 156,
      successRate: 0.78,
      matchScore: 92
    },
    {
      id: 2,
      name: "Andreessen Horowitz",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 1000000,
      maxInvestment: 20000000,
      industries: ["AI", "Blockchain", "Enterprise"],
      stages: ["Series A", "Series B", "Series C"],
      regions: ["North America", "Europe"],
      portfolio: 208,
      successRate: 0.82,
      matchScore: 88
    },
    {
      id: 3,
      name: "Angel Ventures",
      type: "angel",
      logo: "https://via.placeholder.com/40",
      minInvestment: 100000,
      maxInvestment: 1000000,
      industries: ["E-commerce", "SaaS", "FinTech"],
      stages: ["Pre-seed", "Seed"],
      regions: ["North America", "Latin America"],
      portfolio: 32,
      successRate: 0.62,
      matchScore: 95
    },
    {
      id: 4,
      name: "Early Bird VC",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 250000,
      maxInvestment: 5000000,
      industries: ["Healthcare", "CleanTech", "Education"],
      stages: ["Seed", "Series A"],
      regions: ["Europe", "Middle East"],
      portfolio: 87,
      successRate: 0.71,
      matchScore: 79
    },
    {
      id: 5,
      name: "Growth Partners",
      type: "pe",
      logo: "https://via.placeholder.com/40",
      minInvestment: 5000000,
      maxInvestment: 50000000,
      industries: ["Manufacturing", "Retail", "Healthcare"],
      stages: ["Series C", "Series D", "Growth"],
      regions: ["North America", "Europe", "Asia"],
      portfolio: 42,
      successRate: 0.89,
      matchScore: 71
    }
  ];

  const lenders: Lender[] = [
    {
      id: 1,
      name: "First National Bank",
      type: "bank",
      logo: "https://via.placeholder.com/40",
      minLoan: 100000,
      maxLoan: 5000000,
      interestRate: 0.065,
      term: 60,
      requirements: {
        minCreditScore: 680,
        minTimeInBusiness: 2,
        minAnnualRevenue: 250000
      },
      matchScore: 88
    },
    {
      id: 2,
      name: "Business Growth Loans",
      type: "online",
      logo: "https://via.placeholder.com/40",
      minLoan: 50000,
      maxLoan: 2000000,
      interestRate: 0.082,
      term: 36,
      requirements: {
        minCreditScore: 650,
        minTimeInBusiness: 1,
        minAnnualRevenue: 100000
      },
      matchScore: 94
    },
    {
      id: 3,
      name: "Community Credit Union",
      type: "credit-union",
      logo: "https://via.placeholder.com/40",
      minLoan: 25000,
      maxLoan: 1000000,
      interestRate: 0.068,
      term: 48,
      requirements: {
        minCreditScore: 660,
        minTimeInBusiness: 1.5,
        minAnnualRevenue: 150000
      },
      matchScore: 91
    },
    {
      id: 4,
      name: "Capital Express",
      type: "online",
      logo: "https://via.placeholder.com/40",
      minLoan: 75000,
      maxLoan: 3000000,
      interestRate: 0.095,
      term: 24,
      requirements: {
        minCreditScore: 620,
        minTimeInBusiness: 0.5,
        minAnnualRevenue: 75000
      },
      matchScore: 82
    },
    {
      id: 5,
      name: "Enterprise Bank",
      type: "bank",
      logo: "https://via.placeholder.com/40",
      minLoan: 250000,
      maxLoan: 10000000,
      interestRate: 0.059,
      term: 84,
      requirements: {
        minCreditScore: 720,
        minTimeInBusiness: 3,
        minAnnualRevenue: 500000
      },
      matchScore: 76
    }
  ];

  const grants: Grant[] = [
    {
      id: 1,
      name: "NYDA Grant Programme",
      provider: "National Youth Development Agency",
      type: "government",
      amount: 100000,
      deadline: "2024-03-31",
      eligibility: ["Youth entrepreneurs (18-35)", "South African citizens", "Viable business plan"],
      sectors: ["Technology", "Agriculture", "Manufacturing"],
      matchScore: 95,
      description: "Supports youth entrepreneurs with non-repayable grants for business development and job creation."
    },
    {
      id: 2,
      name: "Small Business Innovation Research (SBIR)",
      provider: "National Science Foundation",
      type: "government",
      amount: 250000,
      deadline: "2024-06-15",
      eligibility: ["Small businesses", "Research-focused", "Technology innovation"],
      sectors: ["Technology", "Healthcare", "Energy"],
      matchScore: 78,
      description: "Federal funding for small businesses engaged in research and development with commercialization potential."
    },
    {
      id: 3,
      name: "Gates Foundation Innovation Grant",
      provider: "Bill & Melinda Gates Foundation",
      type: "foundation",
      amount: 500000,
      deadline: "2024-08-30",
      eligibility: ["Global health focus", "Poverty alleviation", "Educational impact"],
      sectors: ["Healthcare", "Education", "Agriculture"],
      matchScore: 65,
      description: "Supports innovative solutions addressing global challenges in health, education, and poverty reduction."
    },
    {
      id: 4,
      name: "Tech Startup Grant",
      provider: "Innovation Foundation",
      type: "foundation",
      amount: 150000,
      deadline: "2024-05-20",
      eligibility: ["Tech startups", "Under 2 years old", "Innovation focus"],
      sectors: ["Technology", "AI", "Blockchain"],
      matchScore: 88,
      description: "Supporting early-stage technology companies with innovative solutions and growth potential."
    },
    {
      id: 5,
      name: "Green Business Initiative",
      provider: "Environmental Protection Agency",
      type: "government",
      amount: 300000,
      deadline: "2024-07-10",
      eligibility: ["Environmental focus", "Sustainability goals", "Clean technology"],
      sectors: ["CleanTech", "Renewable Energy", "Sustainability"],
      matchScore: 72,
      description: "Funding for businesses developing environmentally sustainable solutions and clean technologies."
    }
  ];

  const industries = [
    "Software", "FinTech", "Healthcare", "E-commerce", "SaaS", 
    "AI", "Blockchain", "Enterprise", "CleanTech", "Education", 
    "Manufacturing", "Retail"
  ];

  // Apply filter to investors
  const filteredInvestors = investors
    .filter(investor => 
      (searchQuery === '' || 
       investor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
       investor.industries.some(industry => 
         industry.toLowerCase().includes(searchQuery.toLowerCase())))
    )
    .filter(investor => 
      (selectedIndustries.length === 0 || 
       investor.industries.some(industry => 
         selectedIndustries.includes(industry)))
    )
    .filter(investor => 
      (investor.minInvestment <= fundingRange[1] && 
       investor.maxInvestment >= fundingRange[0])
    )
    .sort((a, b) => b.matchScore - a.matchScore);

  // Apply filter to lenders
  const filteredLenders = lenders
    .filter(lender => 
      (searchQuery === '' || 
       lender.name.toLowerCase().includes(searchQuery.toLowerCase()))
    )
    .filter(lender => 
      (lender.minLoan <= fundingRange[1] && 
       lender.maxLoan >= fundingRange[0])
    )
    .sort((a, b) => b.matchScore - a.matchScore);

  // Apply filter to grants
  const filteredGrants = grants
    .filter(grant => 
      (searchQuery === '' || 
       grant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
       grant.provider.toLowerCase().includes(searchQuery.toLowerCase()) ||
       grant.sectors.some(sector => sector.toLowerCase().includes(searchQuery.toLowerCase())))
    )
    .filter(grant => 
      (grant.amount <= fundingRange[1] && 
       grant.amount >= fundingRange[0])
    )
    .sort((a, b) => b.matchScore - a.matchScore);

  if (isLoadingPlan) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    } else {
      return `$${amount}`;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-indigo-100 rounded-lg">
              <Target className="h-6 w-6 text-indigo-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Funding Matcher
              {businessPlan && typeof businessPlan === 'object' && 'name' in businessPlan ? 
                ` for ${businessPlan.name}` : ''}
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Get matched with the perfect funding opportunities for your business. Our AI-powered platform 
            analyzes your profile and connects you with investors, lenders, and grant providers.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Users className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">2,847</p>
                  <p className="text-sm text-gray-600">Active Funders</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <DollarSign className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">$8.2B</p>
                  <p className="text-sm text-gray-600">Available Funding</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Award className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">89%</p>
                  <p className="text-sm text-gray-600">Match Accuracy</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <TrendingUp className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">1,234</p>
                  <p className="text-sm text-gray-600">Successful Matches</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="flex flex-col md:flex-row gap-4 mb-6">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search by name or industry..."
                className="pl-10"
                value={searchQuery}
                onChange={e => setSearchQuery(e.target.value)}
              />
            </div>
          </div>
          <div className="flex-1">
            <div className="flex items-center gap-2">
              <DollarSign className="h-4 w-4 text-gray-400" />
              <span className="text-sm text-gray-600">Funding Range:</span>
              <span className="text-sm font-medium">{formatCurrency(fundingRange[0])} - {formatCurrency(fundingRange[1])}</span>
            </div>
            <Slider
              defaultValue={fundingRange}
              min={10000}
              max={10000000}
              step={10000}
              onValueChange={(value) => setFundingRange(value as number[])}
              className="mt-2"
            />
          </div>
        </div>

        <div className="mb-6">
          <div className="flex items-center gap-2 mb-2">
            <Filter className="h-4 w-4 text-gray-400" />
            <span className="text-sm text-gray-600">Filter by industry:</span>
          </div>
          <div className="flex flex-wrap gap-2">
            {industries.map(industry => (
              <Badge
                key={industry}
                variant={selectedIndustries.includes(industry) ? "default" : "outline"}
                className="cursor-pointer"
                onClick={() => {
                  if (selectedIndustries.includes(industry)) {
                    setSelectedIndustries(selectedIndustries.filter(i => i !== industry));
                  } else {
                    setSelectedIndustries([...selectedIndustries, industry]);
                  }
                }}
              >
                {industry}
              </Badge>
            ))}
          </div>
        </div>

        <Tabs defaultValue="investors" onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="investors">Equity Funding</TabsTrigger>
            <TabsTrigger value="lenders">Debt Funding</TabsTrigger>
            <TabsTrigger value="grants">Grant Funding</TabsTrigger>
          </TabsList>
          <TabsContent value="investors" className="mt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredInvestors.map(investor => (
                <Card key={investor.id} className={`border-l-4 ${investor.matchScore >= 90 ? 'border-l-green-500' : investor.matchScore >= 80 ? 'border-l-blue-500' : 'border-l-gray-300'}`}>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <div className="flex items-center space-x-4">
                      <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                        <Building2 className="h-6 w-6 text-gray-600" />
                      </div>
                      <div>
                        <CardTitle className="text-lg">{investor.name}</CardTitle>
                        <CardDescription>
                          {investor.type === 'vc' ? 'Venture Capital' : 
                           investor.type === 'angel' ? 'Angel Investor' : 'Private Equity'}
                        </CardDescription>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-blue-600">{investor.matchScore}%</div>
                      <div className="text-xs text-gray-500">Match Score</div>
                    </div>
                  </CardHeader>
                  <CardContent className="py-2">
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="flex items-center gap-2">
                        <DollarSign className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Investment:</span>
                        <span className="font-medium">{formatCurrency(investor.minInvestment)} - {formatCurrency(investor.maxInvestment)}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Globe className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Regions:</span>
                        <span className="font-medium">{investor.regions.slice(0, 2).join(', ')}{investor.regions.length > 2 ? '...' : ''}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <PieChart className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Portfolio:</span>
                        <span className="font-medium">{investor.portfolio} companies</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Shield className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Success Rate:</span>
                        <span className="font-medium">{Math.round(investor.successRate * 100)}%</span>
                      </div>
                    </div>
                    <div className="mt-3">
                      <div className="flex flex-wrap gap-1">
                        {investor.industries.map(industry => (
                          <Badge key={industry} variant="secondary" className="text-xs">{industry}</Badge>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button className="w-full">Connect <ArrowRight className="ml-2 h-4 w-4" /></Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>
          <TabsContent value="lenders" className="mt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredLenders.map(lender => (
                <Card key={lender.id} className={`border-l-4 ${lender.matchScore >= 90 ? 'border-l-green-500' : lender.matchScore >= 80 ? 'border-l-blue-500' : 'border-l-gray-300'}`}>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <div className="flex items-center space-x-4">
                      <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                        <Building2 className="h-6 w-6 text-gray-600" />
                      </div>
                      <div>
                        <CardTitle className="text-lg">{lender.name}</CardTitle>
                        <CardDescription>
                          {lender.type === 'bank' ? 'Bank' : 
                           lender.type === 'credit-union' ? 'Credit Union' : 'Online Lender'}
                        </CardDescription>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-blue-600">{lender.matchScore}%</div>
                      <div className="text-xs text-gray-500">Match Score</div>
                    </div>
                  </CardHeader>
                  <CardContent className="py-2">
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="flex items-center gap-2">
                        <DollarSign className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Loan Range:</span>
                        <span className="font-medium">{formatCurrency(lender.minLoan)} - {formatCurrency(lender.maxLoan)}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <PieChart className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Interest Rate:</span>
                        <span className="font-medium">{(lender.interestRate * 100).toFixed(2)}%</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Term:</span>
                        <span className="font-medium">{lender.term} months</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Shield className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Credit Score:</span>
                        <span className="font-medium">Min {lender.requirements.minCreditScore}</span>
                      </div>
                    </div>
                    <div className="mt-3 text-xs text-gray-600">
                      <div>Requires {lender.requirements.minTimeInBusiness} {lender.requirements.minTimeInBusiness === 1 ? 'year' : 'years'} in business</div>
                      <div>Min Annual Revenue: {formatCurrency(lender.requirements.minAnnualRevenue)}</div>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button className="w-full">Apply Now <ArrowRight className="ml-2 h-4 w-4" /></Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>
          <TabsContent value="grants" className="mt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredGrants.map(grant => (
                <Card key={grant.id} className={`border-l-4 ${grant.matchScore >= 90 ? 'border-l-green-500' : grant.matchScore >= 80 ? 'border-l-blue-500' : 'border-l-gray-300'}`}>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <div className="flex items-center space-x-4">
                      <div className="h-10 w-10 rounded-full bg-purple-100 flex items-center justify-center">
                        <Gift className="h-6 w-6 text-purple-600" />
                      </div>
                      <div>
                        <CardTitle className="text-lg">{grant.name}</CardTitle>
                        <CardDescription>{grant.provider}</CardDescription>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-purple-600">{grant.matchScore}%</div>
                      <div className="text-xs text-gray-500">Match Score</div>
                    </div>
                  </CardHeader>
                  <CardContent className="py-2">
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="flex items-center gap-2">
                        <DollarSign className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Amount:</span>
                        <span className="font-medium">{formatCurrency(grant.amount)}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Deadline:</span>
                        <span className="font-medium">{new Date(grant.deadline).toLocaleDateString()}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Building2 className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Type:</span>
                        <span className="font-medium capitalize">{grant.type}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Globe className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Sectors:</span>
                        <span className="font-medium">{grant.sectors.slice(0, 2).join(', ')}{grant.sectors.length > 2 ? '...' : ''}</span>
                      </div>
                    </div>
                    <div className="mt-3">
                      <p className="text-sm text-gray-600 mb-2">{grant.description}</p>
                      <div className="flex flex-wrap gap-1">
                        {grant.sectors.map(sector => (
                          <Badge key={sector} variant="secondary" className="text-xs">{sector}</Badge>
                        ))}
                      </div>
                    </div>
                    <div className="mt-3">
                      <div className="text-xs text-gray-500 mb-1">Eligibility Requirements:</div>
                      <ul className="text-xs text-gray-600 space-y-1">
                        {grant.eligibility.slice(0, 3).map((req, index) => (
                          <li key={index} className="flex items-center gap-1">
                            <CheckCircle className="h-3 w-3 text-green-500 flex-shrink-0" />
                            {req}
                          </li>
                        ))}
                        {grant.eligibility.length > 3 && (
                          <li className="text-gray-400">+{grant.eligibility.length - 3} more requirements</li>
                        )}
                      </ul>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button className="w-full">Apply Now <ArrowRight className="ml-2 h-4 w-4" /></Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
      </div>
    </div>
  );
}

export default FundingMatcher;

===== FILE: server/routes/investment-routes.ts =====
/**
 * Investment Routes
 * Handles all investment-related endpoints
 */

import { Router } from 'express';
import { isAuthenticated } from '../auth-middleware';
import { storage } from '../storage';
import { asyncHandler, NotFoundError, ForbiddenError, assertExists } from '../utils/errors';
import { logger } from '../utils/logger';
import * as ValidationSchemas from '../../shared/types/validation';

const router = Router();

/**
 * Get user ID from authenticated request
 */
function getUserId(req: any): string {
  const userId = req.user?.claims?.sub;
  if (!userId) {
    throw new Error('User not authenticated');
  }
  return userId;
}

/**
 * GET /api/investments
 * Get all investments for authenticated user
 */
router.get('/', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  logger.info('Fetching investments', { userId });
  
  const investments = await storage.getInvestmentsByInvestor(userId);
  res.json(investments);
}));

/**
 * GET /api/investments/:id
 * Get a specific investment
 */
router.get('/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Fetching investment', { investmentId: id, userId });
  
  const investment = await storage.getInvestmentById(id);
  assertExists(investment, 'Investment');
  
  if (investment.investorId !== userId) {
    throw new ForbiddenError('Access denied to this investment');
  }
  
  res.json(investment);
}));

/**
 * POST /api/investments
 * Create a new investment
 */
router.post('/', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  
  const validatedData = ValidationSchemas.InsertInvestmentSchema.parse({
    ...req.body,
    investorId: userId
  });
  
  logger.info('Creating investment', { userId, businessPlanId: validatedData.businessPlanId });
  
  const investment = await storage.createInvestment(validatedData as any);
  
  logger.info('Investment created', { investmentId: investment.id, userId });
  res.status(201).json(investment);
}));

/**
 * PATCH /api/investments/:id
 * Update an investment
 */
router.patch('/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Updating investment', { investmentId: id, userId });
  
  const existingInvestment = await storage.getInvestmentById(id);
  assertExists(existingInvestment, 'Investment');
  
  if (existingInvestment.investorId !== userId) {
    throw new ForbiddenError('Access denied to this investment');
  }
  
  const investment = await storage.updateInvestment(id, req.body);
  assertExists(investment, 'Investment');
  
  logger.info('Investment updated', { investmentId: id, userId });
  res.json(investment);
}));

/**
 * DELETE /api/investments/:id
 * Delete an investment
 */
router.delete('/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Deleting investment', { investmentId: id, userId });
  
  const existingInvestment = await storage.getInvestmentById(id);
  assertExists(existingInvestment, 'Investment');
  
  if (existingInvestment.investorId !== userId) {
    throw new ForbiddenError('Access denied to this investment');
  }
  
  const success = await storage.deleteInvestment(id);
  if (!success) {
    throw new NotFoundError('Investment');
  }
  
  logger.info('Investment deleted', { investmentId: id, userId });
  res.status(204).end();
}));

/**
 * GET /api/investments/business-plan/:planId
 * Get investments for a specific business plan
 */
router.get('/business-plan/:planId', isAuthenticated, asyncHandler(async (req, res) => {
  const { planId } = req.params;
  const userId = getUserId(req);
  
  // Verify user has access to the business plan
  const plan = await storage.getBusinessPlan(planId);
  assertExists(plan, 'Business plan');
  
  if (plan.userId !== userId) {
    throw new ForbiddenError('Access denied to this business plan');
  }
  
  const investments = await storage.getInvestments(planId);
  res.json(investments);
}));

export default router;


===== FILE: server/routes/credit-routes.ts =====
/**
 * Credit Routes
 * Handles all credit scoring and financial milestone endpoints
 */

import { Router } from 'express';
import { isAuthenticated } from '../auth-middleware';
import { storage } from '../storage';
import { asyncHandler, NotFoundError, ForbiddenError, assertExists } from '../utils/errors';
import { logger } from '../utils/logger';
import * as ValidationSchemas from '../../shared/types/validation';

const router = Router();

/**
 * Get user ID from authenticated request
 */
function getUserId(req: any): string {
  const userId = req.user?.claims?.sub;
  if (!userId) {
    throw new Error('User not authenticated');
  }
  return userId;
}

/**
 * GET /api/credit/scores
 * Get user's credit scores
 */
router.get('/scores', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  logger.info('Fetching credit scores', { userId });
  
  const scores = await storage.getCreditScores(userId);
  res.json(scores);
}));

/**
 * GET /api/credit/scores/:id
 * Get a specific credit score
 */
router.get('/scores/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Fetching credit score', { scoreId: id, userId });
  
  const score = await storage.getCreditScore(id);
  assertExists(score, 'Credit score');
  
  if (score.userId !== userId) {
    throw new ForbiddenError('Access denied to this credit score');
  }
  
  res.json(score);
}));

/**
 * POST /api/credit/scores
 * Create a new credit score
 */
router.post('/scores', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  
  const validatedData = ValidationSchemas.InsertCreditScoreSchema.parse({
    ...req.body,
    userId
  });
  
  logger.info('Creating credit score', { userId });
  
  const score = await storage.createCreditScore(validatedData as any);
  
  logger.info('Credit score created', { scoreId: score.id, userId });
  res.status(201).json(score);
}));

/**
 * PATCH /api/credit/scores/:id
 * Update a credit score
 */
router.patch('/scores/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Updating credit score', { scoreId: id, userId });
  
  const existingScore = await storage.getCreditScore(id);
  assertExists(existingScore, 'Credit score');
  
  if (existingScore.userId !== userId) {
    throw new ForbiddenError('Access denied to this credit score');
  }
  
  const score = await storage.updateCreditScore(id, req.body);
  assertExists(score, 'Credit score');
  
  logger.info('Credit score updated', { scoreId: id, userId });
  res.json(score);
}));

/**
 * GET /api/credit/milestones
 * Get user's financial milestones
 */
router.get('/milestones', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  logger.info('Fetching financial milestones', { userId });
  
  const milestones = await storage.getFinancialMilestones(userId);
  res.json(milestones);
}));

/**
 * GET /api/credit/milestones/:id
 * Get a specific financial milestone
 */
router.get('/milestones/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Fetching financial milestone', { milestoneId: id, userId });
  
  const milestone = await storage.getFinancialMilestone(id);
  assertExists(milestone, 'Financial milestone');
  
  if (milestone.userId !== userId) {
    throw new ForbiddenError('Access denied to this financial milestone');
  }
  
  res.json(milestone);
}));

/**
 * POST /api/credit/milestones
 * Create a new financial milestone
 */
router.post('/milestones', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  
  const validatedData = ValidationSchemas.InsertFinancialMilestoneSchema.parse({
    ...req.body,
    userId
  });
  
  logger.info('Creating financial milestone', { userId });
  
  const milestone = await storage.createFinancialMilestone(validatedData as any);
  
  logger.info('Financial milestone created', { milestoneId: milestone.id, userId });
  res.status(201).json(milestone);
}));

/**
 * PATCH /api/credit/milestones/:id
 * Update a financial milestone
 */
router.patch('/milestones/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Updating financial milestone', { milestoneId: id, userId });
  
  const existingMilestone = await storage.getFinancialMilestone(id);
  assertExists(existingMilestone, 'Financial milestone');
  
  if (existingMilestone.userId !== userId) {
    throw new ForbiddenError('Access denied to this financial milestone');
  }
  
  const milestone = await storage.updateFinancialMilestone(id, req.body);
  assertExists(milestone, 'Financial milestone');
  
  logger.info('Financial milestone updated', { milestoneId: id, userId });
  res.json(milestone);
}));

/**
 * GET /api/credit/coaching
 * Get AI coaching messages for user
 */
router.get('/coaching', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  logger.info('Fetching AI coaching messages', { userId });
  
  const messages = await storage.getAiCoachingMessages(userId);
  res.json(messages);
}));

/**
 * POST /api/credit/coaching
 * Create a new AI coaching message
 */
router.post('/coaching', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  
  const validatedData = ValidationSchemas.InsertAiCoachingMessageSchema.parse({
    ...req.body,
    userId
  });
  
  logger.info('Creating AI coaching message', { userId });
  
  const message = await storage.createAiCoachingMessage(validatedData as any);
  
  logger.info('AI coaching message created', { messageId: message.id, userId });
  res.status(201).json(message);
}));

/**
 * GET /api/credit/tips
 * Get credit tips
 */
router.get('/tips', isAuthenticated, asyncHandler(async (req, res) => {
  const { category } = req.query;
  logger.info('Fetching credit tips', { category });
  
  const tips = category 
    ? await storage.getCreditTipsByCategory(category as string)
    : await storage.getCreditTips();
  
  res.json(tips);
}));

/**
 * GET /api/credit/tips/:id
 * Get a specific credit tip
 */
router.get('/tips/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  
  logger.info('Fetching credit tip', { tipId: id });
  
  const tip = await storage.getCreditTip(id);
  assertExists(tip, 'Credit tip');
  
  res.json(tip);
}));

/**
 * GET /api/credit/user-tips
 * Get user's personalized credit tips
 */
router.get('/user-tips', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  logger.info('Fetching user credit tips', { userId });
  
  const userTips = await storage.getUserCreditTips(userId);
  res.json(userTips);
}));

/**
 * POST /api/credit/user-tips
 * Create a user credit tip
 */
router.post('/user-tips', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  
  const validatedData = ValidationSchemas.InsertUserCreditTipSchema.parse({
    ...req.body,
    userId
  });
  
  logger.info('Creating user credit tip', { userId });
  
  const userTip = await storage.createUserCreditTip(validatedData as any);
  
  logger.info('User credit tip created', { userTipId: userTip.id, userId });
  res.status(201).json(userTip);
}));

/**
 * PATCH /api/credit/user-tips/:id
 * Update a user credit tip
 */
router.patch('/user-tips/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Updating user credit tip', { userTipId: id, userId });
  
  const userTip = await storage.updateUserCreditTip(id, req.body);
  assertExists(userTip, 'User credit tip');
  
  logger.info('User credit tip updated', { userTipId: id, userId });
  res.json(userTip);
}));

/**
 * GET /api/credit/achievements
 * Get credit achievements
 */
router.get('/achievements', isAuthenticated, asyncHandler(async (req, res) => {
  const { category } = req.query;
  logger.info('Fetching credit achievements', { category });
  
  const achievements = category 
    ? await storage.getCreditAchievementsByCategory(category as string)
    : await storage.getCreditAchievements();
  
  res.json(achievements);
}));

/**
 * GET /api/credit/achievements/user
 * Get user's credit achievements
 */
router.get('/achievements/user', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  logger.info('Fetching user credit achievements', { userId });
  
  const achievements = await storage.getUserCreditAchievements(userId);
  res.json(achievements);
}));

/**
 * GET /api/credit/achievements/unseen
 * Get unseen achievements for user
 */
router.get('/achievements/unseen', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  logger.info('Fetching unseen achievements', { userId });
  
  const unseenAchievements = await storage.getUnseenAchievements(userId);
  res.json(unseenAchievements);
}));

/**
 * POST /api/credit/achievements/user
 * Create a user credit achievement
 */
router.post('/achievements/user', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  
  const validatedData = ValidationSchemas.InsertUserCreditAchievementSchema.parse({
    ...req.body,
    userId
  });
  
  logger.info('Creating user credit achievement', { userId });
  
  const achievement = await storage.createUserCreditAchievement(validatedData as any);
  
  logger.info('User credit achievement created', { achievementId: achievement.id, userId });
  res.status(201).json(achievement);
}));

/**
 * PATCH /api/credit/achievements/user/:id
 * Update a user credit achievement
 */
router.patch('/achievements/user/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Updating user credit achievement', { achievementId: id, userId });
  
  const achievement = await storage.updateUserCreditAchievement(id, req.body);
  assertExists(achievement, 'User credit achievement');
  
  logger.info('User credit achievement updated', { achievementId: id, userId });
  res.json(achievement);
}));

/**
 * PATCH /api/credit/achievements/user/:id/seen
 * Mark achievement as seen
 */
router.patch('/achievements/user/:id/seen', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Marking achievement as seen', { achievementId: id, userId });
  
  const achievement = await storage.markAchievementAsSeen(id);
  assertExists(achievement, 'User credit achievement');
  
  logger.info('Achievement marked as seen', { achievementId: id, userId });
  res.json(achievement);
}));

/**
 * GET /api/credit/history
 * Get credit score history for user
 */
router.get('/history', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  logger.info('Fetching credit score history', { userId });
  
  const history = await storage.getCreditScoreHistory(userId);
  res.json(history);
}));

/**
 * POST /api/credit/history
 * Create a credit score history entry
 */
router.post('/history', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  
  const validatedData = ValidationSchemas.InsertCreditScoreHistorySchema.parse({
    ...req.body,
    userId
  });
  
  logger.info('Creating credit score history entry', { userId });
  
  const historyEntry = await storage.createCreditScoreHistory(validatedData as any);
  
  logger.info('Credit score history entry created', { historyId: historyEntry.id, userId });
  res.status(201).json(historyEntry);
}));

/**
 * GET /api/credit/points
 * Get user's reward points
 */
router.get('/points', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  logger.info('Fetching user reward points', { userId });
  
  const points = await storage.getUserRewardPoints(userId);
  res.json(points || { userId, points: 0, level: 'Bronze' });
}));

/**
 * POST /api/credit/points
 * Create user reward points
 */
router.post('/points', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  
  const validatedData = ValidationSchemas.InsertUserRewardPointsSchema.parse({
    ...req.body,
    userId
  });
  
  logger.info('Creating user reward points', { userId });
  
  const points = await storage.createUserRewardPoints(validatedData as any);
  
  logger.info('User reward points created', { pointsId: points.id, userId });
  res.status(201).json(points);
}));

/**
 * PATCH /api/credit/points/:id
 * Update user reward points
 */
router.patch('/points/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Updating user reward points', { pointsId: id, userId });
  
  const points = await storage.updateUserRewardPoints(id, req.body);
  assertExists(points, 'User reward points');
  
  logger.info('User reward points updated', { pointsId: id, userId });
  res.json(points);
}));

/**
 * POST /api/credit/points/add
 * Add points to user
 */
router.post('/points/add', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  const { points } = req.body;
  
  logger.info('Adding points to user', { userId, points });
  
  const updatedPoints = await storage.addUserPoints(userId, points);
  
  logger.info('Points added to user', { userId, points });
  res.json(updatedPoints);
}));

/**
 * GET /api/credit/transactions
 * Get user's point transactions
 */
router.get('/transactions', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  logger.info('Fetching user point transactions', { userId });
  
  const transactions = await storage.getPointTransactions(userId);
  res.json(transactions);
}));

/**
 * POST /api/credit/transactions
 * Create a point transaction
 */
router.post('/transactions', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  
  const validatedData = ValidationSchemas.InsertPointTransactionSchema.parse({
    ...req.body,
    userId
  });
  
  logger.info('Creating point transaction', { userId });
  
  const transaction = await storage.createPointTransaction(validatedData as any);
  
  logger.info('Point transaction created', { transactionId: transaction.id, userId });
  res.status(201).json(transaction);
}));

export default router;


===== FILE: server/routes/loan-routes.ts =====
/**
 * Loan Routes
 * Handles all loan-related endpoints
 */

import { Router } from 'express';
import { isAuthenticated } from '../auth-middleware';
import { storage } from '../storage';
import { asyncHandler, NotFoundError, ForbiddenError, assertExists } from '../utils/errors';
import { logger } from '../utils/logger';
import * as ValidationSchemas from '../../shared/types/validation';

const router = Router();

/**
 * Get user ID from authenticated request
 */
function getUserId(req: any): string {
  const userId = req.user?.claims?.sub;
  if (!userId) {
    throw new Error('User not authenticated');
  }
  return userId;
}

/**
 * GET /api/loans
 * Get all loans for authenticated user
 */
router.get('/', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  logger.info('Fetching loans', { userId });
  
  const loans = await storage.getLoansByLender(userId);
  res.json(loans);
}));

/**
 * GET /api/loans/:id
 * Get a specific loan
 */
router.get('/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Fetching loan', { loanId: id, userId });
  
  const loan = await storage.getLoanById(id);
  assertExists(loan, 'Loan');
  
  if (loan.lenderId !== userId && loan.borrowerId !== userId) {
    throw new ForbiddenError('Access denied to this loan');
  }
  
  res.json(loan);
}));

/**
 * POST /api/loans
 * Create a new loan
 */
router.post('/', isAuthenticated, asyncHandler(async (req, res) => {
  const userId = getUserId(req);
  
  const validatedData = ValidationSchemas.InsertLoanSchema.parse({
    ...req.body,
    lenderId: userId
  });
  
  logger.info('Creating loan', { userId, businessPlanId: validatedData.businessPlanId });
  
  const loan = await storage.createLoan(validatedData as any);
  
  logger.info('Loan created', { loanId: loan.id, userId });
  res.status(201).json(loan);
}));

/**
 * PATCH /api/loans/:id
 * Update a loan
 */
router.patch('/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Updating loan', { loanId: id, userId });
  
  const existingLoan = await storage.getLoanById(id);
  assertExists(existingLoan, 'Loan');
  
  if (existingLoan.lenderId !== userId) {
    throw new ForbiddenError('Access denied to this loan');
  }
  
  const loan = await storage.updateLoan(id, req.body);
  assertExists(loan, 'Loan');
  
  logger.info('Loan updated', { loanId: id, userId });
  res.json(loan);
}));

/**
 * DELETE /api/loans/:id
 * Delete a loan
 */
router.delete('/:id', isAuthenticated, asyncHandler(async (req, res) => {
  const { id } = req.params;
  const userId = getUserId(req);
  
  logger.info('Deleting loan', { loanId: id, userId });
  
  const existingLoan = await storage.getLoanById(id);
  assertExists(existingLoan, 'Loan');
  
  if (existingLoan.lenderId !== userId) {
    throw new ForbiddenError('Access denied to this loan');
  }
  
  const success = await storage.deleteLoan(id);
  if (!success) {
    throw new NotFoundError('Loan');
  }
  
  logger.info('Loan deleted', { loanId: id, userId });
  res.status(204).end();
}));

/**
 * GET /api/loans/business-plan/:planId
 * Get loans for a specific business plan
 */
router.get('/business-plan/:planId', isAuthenticated, asyncHandler(async (req, res) => {
  const { planId } = req.params;
  const userId = getUserId(req);
  
  // Verify user has access to the business plan
  const plan = await storage.getBusinessPlan(planId);
  assertExists(plan, 'Business plan');
  
  if (plan.userId !== userId) {
    throw new ForbiddenError('Access denied to this business plan');
  }
  
  const loans = await storage.getLoans(planId);
  res.json(loans);
}));

/**
 * GET /api/loans/borrower/:borrowerId
 * Get loans for a specific borrower
 */
router.get('/borrower/:borrowerId', isAuthenticated, asyncHandler(async (req, res) => {
  const { borrowerId } = req.params;
  const userId = getUserId(req);
  
  // Only allow if user is the borrower or lender
  if (borrowerId !== userId) {
    throw new ForbiddenError('Access denied to this borrower\'s loans');
  }
  
  const loans = await storage.getLoansByBorrower(borrowerId);
  res.json(loans);
}));

/**
 * GET /api/loans/lender/:lenderId
 * Get loans for a specific lender
 */
router.get('/lender/:lenderId', isAuthenticated, asyncHandler(async (req, res) => {
  const { lenderId } = req.params;
  const userId = getUserId(req);
  
  // Only allow if user is the lender
  if (lenderId !== userId) {
    throw new ForbiddenError('Access denied to this lender\'s loans');
  }
  
  const loans = await storage.getLoansByLender(lenderId);
  res.json(loans);
}));

export default router;


===== FILE: server/services/roi-calculator.ts =====
import { DatabaseService } from './database-service';

/**
 * ROI Calculator for Design Thinking System
 * 
 * Calculates return on investment for DT workflows:
 * - Investment calculation
 * - Returns measurement
 * - ROI calculation
 * - Payback period analysis
 */
export class ROICalculator {
  private db: DatabaseService;

  constructor() {
    this.db = new DatabaseService();
  }

  /**
   * Calculate comprehensive ROI for workflow
   */
  async calculateROI(workflow: DTWorkflow): Promise<ROIAnalysis> {
    try {
      const investment = await this.calculateInvestment(workflow);
      const returns = await this.calculateReturns(workflow);
      const roi = this.calculateROIPercentage(investment, returns);
      const paybackPeriod = this.calculatePaybackPeriod(investment, returns);
      const intangibleBenefits = await this.identifyIntangibleBenefits(workflow);

      return {
        investment,
        returns,
        roi,
        paybackPeriod,
        intangibleBenefits,
        calculatedAt: new Date()
      };
    } catch (error) {
      console.error('Error calculating ROI:', error);
      throw new Error('Failed to calculate ROI');
    }
  }

  /**
   * Calculate investment
   */
  private async calculateInvestment(workflow: DTWorkflow): Promise<InvestmentBreakdown> {
    const timeInvested = await this.calculateTimeInvestment(workflow);
    const resourceCost = await this.calculateResourceCost(workflow);
    const toolCost = await this.calculateToolCost(workflow);
    const opportunityCost = await this.calculateOpportunityCost(workflow);

    const total = timeInvested + resourceCost + toolCost + opportunityCost;

    return {
      timeInvested,
      resourceCost,
      toolCost,
      opportunityCost,
      total
    };
  }

  /**
   * Calculate returns
   */
  private async calculateReturns(workflow: DTWorkflow): Promise<ReturnsBreakdown> {
    const timeToMarketReduction = await this.estimateTimeToMarketReduction(workflow);
    const developmentCostSavings = await this.estimateDevelopmentCostSavings(workflow);
    const revenueImpact = await this.estimateRevenueImpact(workflow);
    const riskMitigation = await this.estimateRiskMitigation(workflow);
    const innovationValue = await this.estimateInnovationValue(workflow);

    const total = timeToMarketReduction + developmentCostSavings + revenueImpact + riskMitigation + innovationValue;

    return {
      timeToMarketReduction,
      developmentCostSavings,
      revenueImpact,
      riskMitigation,
      innovationValue,
      total
    };
  }

  /**
   * Calculate time investment
   */
  private async calculateTimeInvestment(workflow: DTWorkflow): Promise<number> {
    try {
      const sessions = await this.db.getWorkflowSessions(workflow.id);
      const participants = await this.db.getWorkflowParticipants(workflow.id);
      
      const totalSessionTime = sessions.reduce((sum, session) => sum + (session.duration || 0), 0);
      const preparationTime = totalSessionTime * 0.3; // 30% preparation time
      const followUpTime = totalSessionTime * 0.2; // 20% follow-up time
      
      const totalTime = totalSessionTime + preparationTime + followUpTime;
      const hourlyRate = 50; // Average hourly rate
      
      return totalTime * hourlyRate;
    } catch (error) {
      console.error('Error calculating time investment:', error);
      return 0;
    }
  }

  /**
   * Calculate resource cost
   */
  private async calculateResourceCost(workflow: DTWorkflow): Promise<number> {
    try {
      const participants = await this.db.getWorkflowParticipants(workflow.id);
      const sessions = await this.db.getWorkflowSessions(workflow.id);
      
      const facilitatorCost = sessions.length * 200; // $200 per session
      const participantCost = participants.length * 50; // $50 per participant
      const materialsCost = sessions.length * 25; // $25 per session
      
      return facilitatorCost + participantCost + materialsCost;
    } catch (error) {
      console.error('Error calculating resource cost:', error);
      return 0;
    }
  }

  /**
   * Calculate tool cost
   */
  private async calculateToolCost(workflow: DTWorkflow): Promise<number> {
    try {
      const toolUsage = await this.db.getWorkflowToolUsage(workflow.id);
      const aiServiceCost = toolUsage.aiCalls * 0.01; // $0.01 per AI call
      const collaborationCost = toolUsage.collaborationMinutes * 0.05; // $0.05 per minute
      const analyticsCost = toolUsage.analyticsQueries * 0.02; // $0.02 per query
      
      return aiServiceCost + collaborationCost + analyticsCost;
    } catch (error) {
      console.error('Error calculating tool cost:', error);
      return 0;
    }
  }

  /**
   * Calculate opportunity cost
   */
  private async calculateOpportunityCost(workflow: DTWorkflow): Promise<number> {
    try {
      const timeInvested = await this.calculateTimeInvestment(workflow);
      const alternativeReturn = timeInvested * 0.1; // 10% alternative return
      
      return alternativeReturn;
    } catch (error) {
      console.error('Error calculating opportunity cost:', error);
      return 0;
    }
  }

  /**
   * Estimate time to market reduction
   */
  private async estimateTimeToMarketReduction(workflow: DTWorkflow): Promise<number> {
    try {
      const outcomes = await this.db.getWorkflowOutcomes(workflow.id);
      const prototypes = await this.db.getWorkflowPrototypes(workflow.id);
      
      const timeReduction = outcomes.length * 30; // 30 days per outcome
      const prototypeAcceleration = prototypes.length * 15; // 15 days per prototype
      
      const totalDays = timeReduction + prototypeAcceleration;
      const dailyValue = 1000; // $1000 per day
      
      return totalDays * dailyValue;
    } catch (error) {
      console.error('Error estimating time to market reduction:', error);
      return 0;
    }
  }

  /**
   * Estimate development cost savings
   */
  private async estimateDevelopmentCostSavings(workflow: DTWorkflow): Promise<number> {
    try {
      const prototypes = await this.db.getWorkflowPrototypes(workflow.id);
      const tests = await this.db.getWorkflowTests(workflow.id);
      
      const prototypeSavings = prototypes.length * 5000; // $5000 per prototype
      const testSavings = tests.length * 2000; // $2000 per test
      
      return prototypeSavings + testSavings;
    } catch (error) {
      console.error('Error estimating development cost savings:', error);
      return 0;
    }
  }

  /**
   * Estimate revenue impact
   */
  private async estimateRevenueImpact(workflow: DTWorkflow): Promise<number> {
    try {
      const outcomes = await this.db.getWorkflowOutcomes(workflow.id);
      const businessValue = await this.calculateBusinessValue(workflow);
      
      const revenuePerOutcome = 10000; // $10,000 per successful outcome
      const totalRevenue = outcomes.length * revenuePerOutcome;
      
      return totalRevenue + businessValue;
    } catch (error) {
      console.error('Error estimating revenue impact:', error);
      return 0;
    }
  }

  /**
   * Estimate risk mitigation
   */
  private async estimateRiskMitigation(workflow: DTWorkflow): Promise<number> {
    try {
      const risks = await this.db.getWorkflowRisks(workflow.id);
      const mitigations = await this.db.getWorkflowMitigations(workflow.id);
      
      const riskValue = risks.length * 5000; // $5000 per risk mitigated
      const mitigationValue = mitigations.length * 2000; // $2000 per mitigation
      
      return riskValue + mitigationValue;
    } catch (error) {
      console.error('Error estimating risk mitigation:', error);
      return 0;
    }
  }

  /**
   * Estimate innovation value
   */
  private async estimateInnovationValue(workflow: DTWorkflow): Promise<number> {
    try {
      const insights = await this.db.getWorkflowInsights(workflow.id);
      const ideas = await this.db.getWorkflowIdeas(workflow.id);
      
      const insightValue = insights.length * 1000; // $1000 per insight
      const ideaValue = ideas.length * 500; // $500 per idea
      
      return insightValue + ideaValue;
    } catch (error) {
      console.error('Error estimating innovation value:', error);
      return 0;
    }
  }

  /**
   * Calculate business value
   */
  private async calculateBusinessValue(workflow: DTWorkflow): Promise<number> {
    try {
      const outcomes = await this.db.getWorkflowOutcomes(workflow.id);
      const quality = await this.assessOutcomeQuality(outcomes);
      const marketSize = await this.estimateMarketSize(workflow);
      
      return quality * marketSize * 0.1; // 10% of market size
    } catch (error) {
      console.error('Error calculating business value:', error);
      return 0;
    }
  }

  /**
   * Calculate ROI percentage
   */
  private calculateROIPercentage(investment: InvestmentBreakdown, returns: ReturnsBreakdown): number {
    if (investment.total === 0) return 0;
    return ((returns.total - investment.total) / investment.total) * 100;
  }

  /**
   * Calculate payback period
   */
  private calculatePaybackPeriod(investment: InvestmentBreakdown, returns: ReturnsBreakdown): number {
    if (returns.total <= 0) return Infinity;
    return investment.total / returns.total;
  }

  /**
   * Identify intangible benefits
   */
  private async identifyIntangibleBenefits(workflow: DTWorkflow): Promise<string[]> {
    const benefits: string[] = [];
    
    const insights = await this.db.getWorkflowInsights(workflow.id);
    if (insights.length > 0) {
      benefits.push('Enhanced team learning and knowledge');
    }
    
    const collaboration = await this.assessCollaborationQuality(workflow);
    if (collaboration > 0.7) {
      benefits.push('Improved team collaboration');
    }
    
    const innovation = await this.assessInnovationCulture(workflow);
    if (innovation > 0.7) {
      benefits.push('Strengthened innovation culture');
    }
    
    return benefits;
  }

  /**
   * Assess outcome quality
   */
  private async assessOutcomeQuality(outcomes: any[]): Promise<number> {
    if (outcomes.length === 0) return 0;
    
    const qualityScores = outcomes.map(outcome => outcome.quality || 0.5);
    return qualityScores.reduce((sum, score) => sum + score, 0) / qualityScores.length;
  }

  /**
   * Estimate market size
   */
  private async estimateMarketSize(workflow: DTWorkflow): Promise<number> {
    // Simple market size estimation based on industry
    const industryMultipliers: Record<string, number> = {
      'technology': 1000000,
      'healthcare': 800000,
      'finance': 600000,
      'education': 400000,
      'retail': 300000
    };
    
    return industryMultipliers[workflow.industry || 'general'] || 500000;
  }

  /**
   * Assess collaboration quality
   */
  private async assessCollaborationQuality(workflow: DTWorkflow): Promise<number> {
    try {
      const sessions = await this.db.getWorkflowSessions(workflow.id);
      const participants = await this.db.getWorkflowParticipants(workflow.id);
      
      if (sessions.length === 0 || participants.length === 0) return 0;
      
      const participationRate = sessions.reduce((sum, session) => 
        sum + (session.participants?.length || 0), 0) / (sessions.length * participants.length);
      
      return participationRate;
    } catch (error) {
      console.error('Error assessing collaboration quality:', error);
      return 0;
    }
  }

  /**
   * Assess innovation culture
   */
  private async assessInnovationCulture(workflow: DTWorkflow): Promise<number> {
    try {
      const ideas = await this.db.getWorkflowIdeas(workflow.id);
      const prototypes = await this.db.getWorkflowPrototypes(workflow.id);
      
      const ideaToPrototypeRate = prototypes.length / Math.max(ideas.length, 1);
      return Math.min(ideaToPrototypeRate, 1);
    } catch (error) {
      console.error('Error assessing innovation culture:', error);
      return 0;
    }
  }
}

// Type definitions
interface DTWorkflow {
  id: string;
  name: string;
  industry?: string;
  currentPhase: string;
  status: string;
}

interface ROIAnalysis {
  investment: InvestmentBreakdown;
  returns: ReturnsBreakdown;
  roi: number;
  paybackPeriod: number;
  intangibleBenefits: string[];
  calculatedAt: Date;
}

interface InvestmentBreakdown {
  timeInvested: number;
  resourceCost: number;
  toolCost: number;
  opportunityCost: number;
  total: number;
}

interface ReturnsBreakdown {
  timeToMarketReduction: number;
  developmentCostSavings: number;
  revenueImpact: number;
  riskMitigation: number;
  innovationValue: number;
  total: number;
}


