=== FILE: client/index.html ===

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <meta name="description" content="Advanced analytics dashboard with predictive insights for startups" />
    <meta name="theme-color" content="#8A4EF5" />

    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json" />

    <!-- Apple specific meta tags -->
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="IS Dashboard" />
    <link rel="apple-touch-icon" href="/icon-192.png" />

    <!-- Microsoft specific meta tags -->
    <meta name="msapplication-TileImage" content="/icon-144.png" />
    <meta name="msapplication-TileColor" content="#8A4EF5" />

    <!-- Preconnect to external domains for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <title>IterativStartups Dashboard</title>

    <!-- Enhanced critical CSS for mobile loading -->
    <style>
      /* Enhanced critical CSS for mobile loading */
      .loading-screen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        height: 100dvh; /* Dynamic viewport height for mobile */
        background: linear-gradient(135deg, #8A4EF5 0%, #4ED0F5 100%);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        color: white;
        padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
      }

      .loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 1s ease-in-out infinite;
      }

      @keyframes spin {
        to { transform: rotate(360deg); }
      }

      /* Mobile-first responsive design */
      @media (max-width: 768px) {
        body { font-size: 14px; }
        .container { padding: 1rem; }
      }

      /* Reduce motion for accessibility */
      @media (prefers-reduced-motion: reduce) {
        .loading-spinner { animation: none; }
        * { animation-duration: 0.01ms !important; }
      }
    </style>
  </head>
  <body>
    <!-- Loading screen -->
    <div id="loading-screen" class="loading-screen">
      <div class="loading-spinner"></div>
      <p style="margin-top: 1rem;">Loading Dashboard...</p>
    </div>

    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>

    <!-- Service Worker: only register in production; in development, unregister and clear caches -->
    <script type="module">
      if (import.meta.env.DEV && 'serviceWorker' in navigator) {
        // Unregister any existing service workers during development to avoid caching issues
        navigator.serviceWorker.getRegistrations().then(registrations => {
          for (const reg of registrations) {
            reg.unregister();
          }
        });
        // Clear caches created by previous SW versions
        if (window.caches && caches.keys) {
          caches.keys().then(keys => keys.forEach(key => caches.delete(key)));
        }
        console.log('[DEV] Service workers unregistered and caches cleared');
      }

      if (import.meta.env.PROD && 'serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js')
            .then((registration) => {
              console.log('SW registered: ', registration);
            })
            .catch((registrationError) => {
              console.log('SW registration failed: ', registrationError);
            });
        });
      }

      // Force hide loading screen immediately
      function hideLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
          loadingScreen.style.display = 'none';
        }
      }

      // Hide loading screen when app loads
      window.addEventListener('load', () => {
        setTimeout(hideLoadingScreen, 500);
      });

      // Also hide loading screen when DOM is ready
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(hideLoadingScreen, 1000);
      });

      // Force hide after 3 seconds regardless
      setTimeout(hideLoadingScreen, 3000);

      // Install prompt for PWA
      let deferredPrompt;
      window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        // Show install button/banner if desired
        console.log('PWA install prompt ready');
      });
    </script>
  </body>
</html>

=== FILE: client/public/index.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StartupsAI Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #8A4EF5 0%, #4ED0F5 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .status {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        .status-item {
            display: flex;
            align-items: center;
            margin: 10px 0;
            padding: 10px;
            border-radius: 5px;
        }
        .success {
            background: #d4edda;
            color: #155724;
        }
        .warning {
            background: #fff3cd;
            color: #856404;
        }
        .error {
            background: #f8d7da;
            color: #721c24;
        }
        .routes {
            margin-top: 30px;
        }
        .routes a {
            display: block;
            padding: 10px;
            margin: 5px 0;
            background: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            text-align: center;
        }
        .routes a:hover {
            background: #0056b3;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ StartupsAI Dashboard</h1>
        
        <div class="status">
            <h2>Application Status</h2>
            <div class="status-item success">
                <span>‚úÖ</span>
                <span style="margin-left: 10px;">Server is running on port 3000</span>
            </div>
            <div class="status-item success">
                <span>‚úÖ</span>
                <span style="margin-left: 10px;">React dependencies are loading</span>
            </div>
            <div class="status-item success">
                <span>‚úÖ</span>
                <span style="margin-left: 10px;">Vite HMR is working</span>
            </div>
            <div class="status-item warning">
                <span>‚ö†Ô∏è</span>
                <span style="margin-left: 10px;">Authentication is disabled in development</span>
            </div>
        </div>

        <div class="routes">
            <h2>Available Routes</h2>
            <a href="/test">Test Page</a>
            <a href="/login">Login Page</a>
            <a href="/education">Education Hub</a>
            <a href="/ecosystem">Ecosystem Hub</a>
            <a href="/debug.html">Debug Page</a>
        </div>

        <div class="status">
            <h2>React App Test</h2>
            <div id="react-test">
                <p>Testing React app loading...</p>
            </div>
        </div>
    </div>

    <script>
        // Test if React app is working
        setTimeout(() => {
            const rootElement = document.getElementById('root');
            if (rootElement && rootElement.innerHTML.trim() !== '') {
                document.getElementById('react-test').innerHTML = 
                    '<div class="status-item success"><span>‚úÖ</span><span style="margin-left: 10px;">React app is rendering</span></div>';
            } else {
                document.getElementById('react-test').innerHTML = 
                    '<div class="status-item error"><span>‚ùå</span><span style="margin-left: 10px;">React app is not rendering</span></div>';
            }
        }, 2000);

        // Force hide any loading screens
        setTimeout(() => {
            const loadingScreen = document.getElementById('loading-screen');
            if (loadingScreen) {
                loadingScreen.style.display = 'none';
            }
        }, 100);
    </script>
</body>
</html>



=== FILE: client/public/working-test.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StartupsAI - Working Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #8A4EF5 0%, #4ED0F5 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .status {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        .success {
            color: #28a745;
            font-weight: bold;
        }
        .routes {
            margin-top: 30px;
        }
        .routes a {
            display: block;
            padding: 15px;
            margin: 10px 0;
            background: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            text-align: center;
            font-weight: bold;
        }
        .routes a:hover {
            background: #0056b3;
        }
        .test-info {
            background: #e9ecef;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ StartupsAI Dashboard</h1>
        
        <div class="test-info">
            <h2>‚úÖ Server Test Successful!</h2>
            <p>This page confirms that:</p>
            <ul>
                <li>‚úÖ Server is running on port 3000</li>
                <li>‚úÖ Static files are being served</li>
                <li>‚úÖ HTML/CSS is working</li>
                <li>‚úÖ JavaScript is working</li>
            </ul>
        </div>

        <div class="status">
            <h2>React App Status</h2>
            <p id="react-status">Checking React app...</p>
        </div>

        <div class="routes">
            <h2>Available Routes</h2>
            <a href="/">Main React App</a>
            <a href="/test">Test Route</a>
            <a href="/login">Login Page</a>
            <a href="/education">Education Hub</a>
            <a href="/ecosystem">Ecosystem Hub</a>
            <a href="/debug.html">Debug Page</a>
        </div>

        <div class="status">
            <h2>Next Steps</h2>
            <p>If you can see this page, the server is working correctly. The React app issue is likely related to:</p>
            <ul>
                <li>Loading screen not hiding properly</li>
                <li>JavaScript module loading issues</li>
                <li>React component compilation errors</li>
            </ul>
        </div>
    </div>

    <script>
        // Test React app status
        setTimeout(() => {
            fetch('/')
                .then(response => response.text())
                .then(html => {
                    if (html.includes('StartupsAI Dashboard')) {
                        document.getElementById('react-status').innerHTML = 
                            '<span class="success">‚úÖ React app is rendering!</span>';
                    } else {
                        document.getElementById('react-status').innerHTML = 
                            '‚ùå React app is not rendering properly';
                    }
                })
                .catch(error => {
                    document.getElementById('react-status').innerHTML = 
                        '‚ùå Error checking React app: ' + error.message;
                });
        }, 2000);
    </script>
</body>
</html>


=== FILE: client/public/test.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Page</title>
</head>
<body>
    <h1>üöÄ Test Page - Server is Working!</h1>
    <p>If you can see this, the server is running correctly.</p>
    <p>Time: <span id="time"></span></p>
    <script>
        document.getElementById('time').textContent = new Date().toLocaleString();
    </script>
</body>
</html>



=== FILE: client/public/manifest.json ===


{
  "name": "IterativStartups Dashboard",
  "short_name": "IS Dashboard",
  "description": "Advanced analytics dashboard with predictive insights",
  "start_url": "/",
  "display": "standalone",
  "theme_color": "#8A4EF5",
  "background_color": "#ffffff",
  "orientation": "portrait-primary",
  "categories": ["business", "productivity", "analytics"],
  "lang": "en-US",
  "dir": "ltr",
  "icons": [
    {
      "src": "/icon-72.png",
      "sizes": "72x72",
      "type": "image/png",
      "purpose": "maskable"
    },
    {
      "src": "/icon-96.png",
      "sizes": "96x96",
      "type": "image/png",
      "purpose": "maskable"
    },
    {
      "src": "/icon-128.png",
      "sizes": "128x128",
      "type": "image/png",
      "purpose": "maskable"
    },
    {
      "src": "/icon-144.png",
      "sizes": "144x144",
      "type": "image/png",
      "purpose": "maskable"
    },
    {
      "src": "/icon-152.png",
      "sizes": "152x152",
      "type": "image/png",
      "purpose": "maskable"
    },
    {
      "src": "/icon-192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "/icon-384.png",
      "sizes": "384x384",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "/icon-512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any maskable"
    }
  ],
  "screenshots": [
    {
      "src": "/screenshot1.png",
      "sizes": "1280x720",
      "type": "image/png",
      "form_factor": "wide",
      "label": "Dashboard Overview"
    },
    {
      "src": "/screenshot2.png",
      "sizes": "750x1334",
      "type": "image/png",
      "form_factor": "narrow",
      "label": "Mobile Dashboard"
    }
  ],
  "shortcuts": [
    {
      "name": "View Dashboard",
      "short_name": "Dashboard",
      "description": "Open the main analytics dashboard",
      "url": "/dashboard",
      "icons": [
        {
          "src": "/shortcut-dashboard.png",
          "sizes": "192x192"
        }
      ]
    },
    {
      "name": "View Analytics",
      "short_name": "Analytics",
      "description": "Open advanced analytics",
      "url": "/analytics",
      "icons": [
        {
          "src": "/shortcut-analytics.png",
          "sizes": "192x192"
        }
      ]
    }
  ]
}


=== FILE: client/public/debug.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Debug Page</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        .debug { background: #f0f0f0; padding: 10px; margin: 10px 0; border-radius: 5px; }
        .error { background: #ffebee; color: #c62828; }
        .success { background: #e8f5e8; color: #2e7d32; }
    </style>
</head>
<body>
    <h1>üîç Debug Information</h1>
    
    <div class="debug">
        <h3>Server Status</h3>
        <p id="server-status">Checking...</p>
    </div>
    
    <div class="debug">
        <h3>React App Status</h3>
        <p id="react-status">Checking...</p>
    </div>
    
    <div class="debug">
        <h3>Console Errors</h3>
        <div id="console-errors">No errors detected</div>
    </div>
    
    <div class="debug">
        <h3>Available Routes</h3>
        <ul>
            <li><a href="/">Main App</a></li>
            <li><a href="/test">Test Route</a></li>
            <li><a href="/test.html">Static Test Page</a></li>
            <li><a href="/login">Login Page</a></li>
        </ul>
    </div>

    <script>
        // Check server status
        fetch('/api/user')
            .then(response => {
                document.getElementById('server-status').innerHTML = 
                    '<span class="success">‚úÖ Server is responding (Status: ' + response.status + ')</span>';
            })
            .catch(error => {
                document.getElementById('server-status').innerHTML = 
                    '<span class="error">‚ùå Server error: ' + error.message + '</span>';
            });

        // Check if React app loads
        setTimeout(() => {
            const rootElement = document.getElementById('root');
            if (rootElement && rootElement.innerHTML.trim() !== '') {
                document.getElementById('react-status').innerHTML = 
                    '<span class="success">‚úÖ React app is rendering</span>';
            } else {
                document.getElementById('react-status').innerHTML = 
                    '<span class="error">‚ùå React app is not rendering</span>';
            }
        }, 3000);

        // Capture console errors
        const originalError = console.error;
        const errors = [];
        console.error = function(...args) {
            errors.push(args.join(' '));
            originalError.apply(console, args);
        };

        setTimeout(() => {
            if (errors.length > 0) {
                document.getElementById('console-errors').innerHTML = 
                    '<span class="error">‚ùå Errors found:<br>' + errors.join('<br>') + '</span>';
            } else {
                document.getElementById('console-errors').innerHTML = 
                    '<span class="success">‚úÖ No console errors</span>';
            }
        }, 2000);
    </script>
</body>
</html>



=== FILE: client/public/sw.js ===

const CACHE_VERSION = 'v2.0';
const CACHE_NAME = `dashboard-cache-${CACHE_VERSION}`;
const API_CACHE_NAME = `api-cache-${CACHE_VERSION}`;
const IMAGE_CACHE_NAME = `image-cache-${CACHE_VERSION}`;
const FONT_CACHE_NAME = `font-cache-${CACHE_VERSION}`;

// Cache duration in milliseconds
const CACHE_MAX_AGE = {
  static: 7 * 24 * 60 * 60 * 1000, // 7 days
  api: 5 * 60 * 1000, // 5 minutes
  image: 30 * 24 * 60 * 60 * 1000, // 30 days
  font: 365 * 24 * 60 * 60 * 1000 // 1 year
};

// Core files to cache during install
const CORE_ASSETS = [
  '/',
  '/manifest.json',
  '/icon-192.png',
  '/icon-512.png'
];

// Install event - cache core resources
self.addEventListener('install', (event) => {
  console.log('[Service Worker] Installing...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('[Service Worker] Caching core assets');
        return cache.addAll(CORE_ASSETS).catch((error) => {
          console.error('[Service Worker] Failed to cache core assets:', error);
        });
      })
      .then(() => self.skipWaiting())
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('[Service Worker] Activating...');
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (!cacheName.includes(CACHE_VERSION)) {
              console.log('[Service Worker] Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => self.clients.claim())
  );
});

// Helper function to check if cache is expired
function isCacheExpired(response, maxAge) {
  if (!response) return true;
  
  const cachedTime = response.headers.get('sw-cached-time');
  if (!cachedTime) return true;
  
  const age = Date.now() - parseInt(cachedTime, 10);
  return age > maxAge;
}

// Helper function to add timestamp to cached response
function addCacheTimestamp(response) {
  // Don't add timestamps to opaque responses (cross-origin)
  if (response.type === 'opaque') {
    return Promise.resolve(response);
  }
  
  const clonedResponse = response.clone();
  const headers = new Headers(clonedResponse.headers);
  headers.append('sw-cached-time', Date.now().toString());
  
  return clonedResponse.blob().then(blob => {
    return new Response(blob, {
      status: clonedResponse.status,
      statusText: clonedResponse.statusText,
      headers: headers
    });
  });
}

// Network-first strategy for API calls
async function networkFirstStrategy(request, cacheName, maxAge) {
  try {
    const response = await fetch(request);
    
    // Cache successful responses and opaque responses (cross-origin)
    if (response.ok || response.type === 'opaque') {
      const cache = await caches.open(cacheName);
      const responseWithTimestamp = await addCacheTimestamp(response);
      cache.put(request, responseWithTimestamp.clone());
      return response;
    }
    
    return response;
  } catch (error) {
    console.log('[Service Worker] Network request failed, trying cache:', request.url);
    const cachedResponse = await caches.match(request);
    
    if (cachedResponse && !isCacheExpired(cachedResponse, maxAge)) {
      return cachedResponse;
    }
    
    // Return a custom offline response for API calls
    return new Response(
      JSON.stringify({ 
        error: 'Offline', 
        message: 'You are currently offline. Please check your connection.' 
      }),
      {
        status: 503,
        statusText: 'Service Unavailable',
        headers: new Headers({ 'Content-Type': 'application/json' })
      }
    );
  }
}

// Cache-first strategy for static assets
async function cacheFirstStrategy(request, cacheName, maxAge) {
  const cachedResponse = await caches.match(request);
  
  if (cachedResponse && !isCacheExpired(cachedResponse, maxAge)) {
    // Fetch in background to update cache
    fetch(request).then(response => {
      if (response.ok) {
        caches.open(cacheName).then(cache => {
          addCacheTimestamp(response).then(responseWithTimestamp => {
            cache.put(request, responseWithTimestamp);
          });
        });
      }
    }).catch(() => {});
    
    return cachedResponse;
  }
  
  try {
    const response = await fetch(request);
    
    // Cache successful responses and opaque responses (cross-origin)
    if (response.ok || response.type === 'opaque') {
      const cache = await caches.open(cacheName);
      const responseWithTimestamp = await addCacheTimestamp(response);
      cache.put(request, responseWithTimestamp.clone());
    }
    
    return response;
  } catch (error) {
    if (cachedResponse) {
      return cachedResponse;
    }
    throw error;
  }
}

// Fetch event - intelligent caching strategy
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }
  
  // Skip chrome extensions and other protocols
  if (!url.protocol.startsWith('http')) {
    return;
  }

  // API requests - network first with cache fallback
  if (url.pathname.startsWith('/api/')) {
    event.respondWith(networkFirstStrategy(request, API_CACHE_NAME, CACHE_MAX_AGE.api));
    return;
  }

  // Font files - cache first with long expiration
  if (url.pathname.match(/\.(woff|woff2|ttf|otf|eot)$/)) {
    event.respondWith(cacheFirstStrategy(request, FONT_CACHE_NAME, CACHE_MAX_AGE.font));
    return;
  }

  // Image files - cache first with long expiration
  if (url.pathname.match(/\.(jpg|jpeg|png|gif|svg|webp|ico)$/)) {
    event.respondWith(cacheFirstStrategy(request, IMAGE_CACHE_NAME, CACHE_MAX_AGE.image));
    return;
  }

  // Static assets (JS, CSS) - cache first
  if (url.pathname.match(/\.(js|css|json)$/)) {
    event.respondWith(cacheFirstStrategy(request, CACHE_NAME, CACHE_MAX_AGE.static));
    return;
  }

  // HTML pages - network first
  if (request.headers.get('accept')?.includes('text/html')) {
    event.respondWith(
      fetch(request)
        .then(response => {
          const cache = caches.open(CACHE_NAME);
          cache.then(c => c.put(request, response.clone()));
          return response;
        })
        .catch(() => {
          return caches.match(request).then(cachedResponse => {
            return cachedResponse || caches.match('/');
          });
        })
    );
    return;
  }

  // Default: try network, fallback to cache
  event.respondWith(
    fetch(request)
      .then(response => {
        if (response.ok) {
          const cache = caches.open(CACHE_NAME);
          cache.then(c => c.put(request, response.clone()));
        }
        return response;
      })
      .catch(() => caches.match(request))
  );
});

// Background sync
self.addEventListener('sync', (event) => {
  console.log('[Service Worker] Background sync triggered:', event.tag);
  
  if (event.tag === 'sync-data') {
    event.waitUntil(syncPendingData());
  }
});

async function syncPendingData() {
  try {
    const allClients = await self.clients.matchAll();
    allClients.forEach(client => {
      client.postMessage({
        type: 'SYNC_START'
      });
    });

    // Notify success
    allClients.forEach(client => {
      client.postMessage({
        type: 'SYNC_COMPLETE'
      });
    });
  } catch (error) {
    console.error('[Service Worker] Sync failed:', error);
    
    const allClients = await self.clients.matchAll();
    allClients.forEach(client => {
      client.postMessage({
        type: 'SYNC_ERROR',
        error: error.message
      });
    });
  }
}

// Push notifications
self.addEventListener('push', (event) => {
  console.log('[Service Worker] Push notification received');
  
  const data = event.data ? event.data.json() : {};
  const options = {
    body: data.body || 'New update available',
    icon: '/icon-192.png',
    badge: '/icon-72.png',
    vibrate: [200, 100, 200],
    data: {
      dateOfArrival: Date.now(),
      url: data.url || '/'
    },
    actions: [
      {
        action: 'open',
        title: 'Open'
      },
      {
        action: 'close',
        title: 'Close'
      }
    ],
    requireInteraction: false,
    tag: 'dashboard-notification'
  };

  event.waitUntil(
    self.registration.showNotification(data.title || 'Dashboard Update', options)
  );
});

// Notification click handler
self.addEventListener('notificationclick', (event) => {
  console.log('[Service Worker] Notification clicked');
  event.notification.close();

  if (event.action === 'close') {
    return;
  }

  const urlToOpen = event.notification.data?.url || '/';

  event.waitUntil(
    self.clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then((clientList) => {
        // Check if there's already a window open
        for (const client of clientList) {
          if (client.url === urlToOpen && 'focus' in client) {
            return client.focus();
          }
        }
        // Open new window if none exists
        if (self.clients.openWindow) {
          return self.clients.openWindow(urlToOpen);
        }
      })
  );
});

// Message handler for communication with clients
self.addEventListener('message', (event) => {
  console.log('[Service Worker] Message received:', event.data);
  
  if (event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data.type === 'CLEAR_CACHE') {
    event.waitUntil(
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => caches.delete(cacheName))
        );
      })
    );
  }
  
  if (event.data.type === 'GET_CACHE_SIZE') {
    event.waitUntil(
      caches.keys()
        .then((cacheNames) => {
          return Promise.all(
            cacheNames.map((cacheName) => {
              return caches.open(cacheName).then((cache) => {
                return cache.keys().then((keys) => ({
                  name: cacheName,
                  size: keys.length
                }));
              });
            })
          );
        })
        .then((cacheSizes) => {
          event.ports[0].postMessage({ cacheSizes });
        })
    );
  }
});

console.log('[Service Worker] Service Worker loaded');


=== FILE: client/src/App.tsx ===

import "./index.css";
import { Router, Route, Switch } from "wouter";
import Dashboard from "@/pages/dashboard";

function App() {
  console.log("App with minimal routing rendering.");
  return (
    <Router>
      <div className="flex flex-col min-h-screen" style={{ fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>
        <header style={{ padding: '12px 16px', borderBottom: '1px solid #eee' }}>
          <strong>StartupsAI</strong> ‚Äî Development Preview
        </header>
        <main style={{ padding: '24px' }}>
          <Switch>
            <Route path="/" component={Dashboard} />
            <Route>Not found</Route>
          </Switch>
        </main>
      </div>
    </Router>
  );
}

export default App;

=== FILE: client/src/main.tsx ===

import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

console.log("Starting React app...");

// Force hide loading screen
const loadingScreen = document.getElementById("loading-screen");
if (loadingScreen) {
  console.log("Hiding loading screen...");
  console.log("üì± Hiding loading screen...");
  loadingScreen.style.display = "none";
} else {
  console.log("‚ö†Ô∏è Loading screen not found");
}

// Ensure the root element exists
const rootElement = document.getElementById("root");
if (!rootElement) {
  console.error("‚ùå Root element not found!");
  document.body.innerHTML = '<div style="padding: 20px; color: red;">Error: Root element not found!</div>';
} else {
  console.log("‚úÖ Root element found, rendering app...");
  try {
    const root = createRoot(rootElement);
    root.render(<App />);
    console.log("‚úÖ React app rendered successfully!");
  } catch (error) {
    console.error("‚ùå Error rendering React app:", error);
    rootElement.innerHTML = '<div style="padding: 20px; color: red;">Error rendering React app: ' + (error as Error).message + '</div>';
  }
}


=== FILE: client/src/contexts/FeatureFlagsContext.tsx ===

import React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';

export type FeatureFlagKey =
  | 'onboarding_v2'
  | 'contextual_tour_v1'
  | 'nav_action_model'
  | 'sidebar_context_v1'
  | 'help_tooltips_v1'
  | 'help_hub'
  | 'global_search_v1';

export type FeatureFlags = Record<FeatureFlagKey, boolean>;

const DEFAULT_FLAGS: FeatureFlags = {
  onboarding_v2: true,
  contextual_tour_v1: false,
  nav_action_model: true,
  sidebar_context_v1: false,
  help_tooltips_v1: true,
  help_hub: true,
  global_search_v1: true,
};

type FeatureFlagsContextValue = {
  flags: FeatureFlags;
  isEnabled: (key: FeatureFlagKey) => boolean;
  setFlag: (key: FeatureFlagKey, enabled: boolean) => void;
  setFlags: (next: Partial<FeatureFlags>) => void;
};

const FeatureFlagsContext = createContext<FeatureFlagsContextValue | null>(null);

function readBootstrapFlags(): Partial<FeatureFlags> {
  if (typeof window !== 'undefined' && (window as any).__FLAGS__) {
    return (window as any).__FLAGS__ as Partial<FeatureFlags>;
  }
  return {};
}

function readStoredFlags(): Partial<FeatureFlags> {
  try {
    const raw = localStorage.getItem('feature_flags');
    return raw ? (JSON.parse(raw) as Partial<FeatureFlags>) : {};
  } catch {
    return {};
  }
}

function persistFlags(flags: FeatureFlags) {
  try {
    localStorage.setItem('feature_flags', JSON.stringify(flags));
  } catch {
    // ignore
  }
}

export const FeatureFlagsProvider: React.FC<{ children: React.ReactNode; initialFlags?: Partial<FeatureFlags> }> = ({
  children,
  initialFlags,
}) => {
  const [flags, setFlagsState] = useState<FeatureFlags>(() => ({
    ...DEFAULT_FLAGS,
    ...readBootstrapFlags(),
    ...readStoredFlags(),
    ...initialFlags,
  }));

  useEffect(() => {
    persistFlags(flags);
  }, [flags]);

  const isEnabled = useCallback((key: FeatureFlagKey) => !!flags[key], [flags]);

  const setFlag = useCallback((key: FeatureFlagKey, enabled: boolean) => {
    setFlagsState(prev => ({ ...prev, [key]: enabled }));
  }, []);

  const setFlags = useCallback((next: Partial<FeatureFlags>) => {
    setFlagsState(prev => ({ ...prev, ...next }));
  }, []);

  const value = useMemo<FeatureFlagsContextValue>(
    () => ({ flags, isEnabled, setFlag, setFlags }),
    [flags, isEnabled, setFlag, setFlags]
  );

  return <FeatureFlagsContext.Provider value={value}>{children}</FeatureFlagsContext.Provider>;
};

export function useFeatureFlags(): FeatureFlagsContextValue {
  const ctx = useContext(FeatureFlagsContext);
  if (!ctx) {
    throw new Error('useFeatureFlags must be used within FeatureFlagsProvider');
  }
  return ctx;
}

export function useFeature(key: FeatureFlagKey): boolean {
  return useFeatureFlags().isEnabled(key);
}

export const FeatureGate: React.FC<{ flag: FeatureFlagKey; children: React.ReactNode; fallback?: React.ReactNode }> = ({
  flag,
  children,
  fallback = null,
}) => {
  const enabled = useFeature(flag);
  return <>{enabled ? children : fallback}</>;
};


=== FILE: client/src/contexts/BusinessPlanContext.tsx ===

import React, { createContext, useContext, useState, useCallback, useEffect, ReactNode } from 'react';
import type { PlanChapter } from '@/constants/businessPlanStructure';
import { BUSINESS_PLAN_STRUCTURE, getAllSections } from '@/constants/businessPlanStructure';

export type SectionStatus = 'not_started' | 'in_progress' | 'complete';

export interface SectionContent {
  id: string;
  content: string;
  wordCount: number;
  lastModified: Date;
  status: SectionStatus;
  aiGenerated: boolean;
  aiScore?: number | undefined;
}

export interface BusinessPlanMetadata {
  id?: string;
  name: string;
  industry: string;
  businessStage: 'idea' | 'startup' | 'growth' | 'mature';
  fundingStage: 'pre-seed' | 'seed' | 'series-a' | 'series-b' | 'series-c' | 'ipo';
  createdAt: Date;
  updatedAt: Date;
  completionPercentage: number;
}

export interface BusinessPlanContextType {
  // Metadata
  metadata: BusinessPlanMetadata;
  updateMetadata: (updates: Partial<BusinessPlanMetadata>) => void;
  
  // Section content
  sectionContents: Record<string, SectionContent>;
  updateSectionContent: (sectionId: string, content: string, aiGenerated?: boolean) => void;
  getSectionContent: (sectionId: string) => string;
  getSectionStatus: (sectionId: string) => SectionStatus;
  getSectionWordCount: (sectionId: string) => number;
  
  // Progress tracking
  completedSections: string[];
  getOverallProgress: () => number;
  getChapterProgress: (chapterId: string) => number;
  
  // Auto-save
  isDirty: boolean;
  lastSaved: Date | null;
  save: () => Promise<void>;
  
  // Structure
  structure: PlanChapter[];
}

const BusinessPlanContext = createContext<BusinessPlanContextType | undefined>(undefined);

const STORAGE_KEY = 'business-plan-data';
const AUTO_SAVE_INTERVAL = 30000; // 30 seconds

interface BusinessPlanProviderProps {
  children: ReactNode;
  planId?: string | undefined;
}

export const BusinessPlanProvider: React.FC<BusinessPlanProviderProps> = ({ children, planId }) => {
  const [metadata, setMetadata] = useState<BusinessPlanMetadata>({
    name: 'My Business Plan',
    industry: 'Technology',
    businessStage: 'startup',
    fundingStage: 'pre-seed',
    createdAt: new Date(),
    updatedAt: new Date(),
    completionPercentage: 0
  });

  const [sectionContents, setSectionContents] = useState<Record<string, SectionContent>>({});
  const [isDirty, setIsDirty] = useState(false);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);

  // Load from localStorage on mount
  useEffect(() => {
    const loadData = () => {
      try {
        const stored = localStorage.getItem(STORAGE_KEY);
        if (stored) {
          const data = JSON.parse(stored);
          if (data.metadata) {
            setMetadata({
              ...data.metadata,
              createdAt: new Date(data.metadata.createdAt),
              updatedAt: new Date(data.metadata.updatedAt)
            });
          }
          if (data.sectionContents) {
            const contents: Record<string, SectionContent> = {};
            Object.keys(data.sectionContents).forEach(key => {
              contents[key] = {
                ...data.sectionContents[key],
                lastModified: new Date(data.sectionContents[key].lastModified)
              };
            });
            setSectionContents(contents);
          }
          setLastSaved(new Date(data.lastSaved));
        }
      } catch (error) {
        console.error('Failed to load business plan data:', error);
      }
    };

    loadData();
  }, [planId]);

  // Auto-save
  useEffect(() => {
    if (!isDirty) return;

    const timer = setTimeout(() => {
      save();
    }, AUTO_SAVE_INTERVAL);

    return () => clearTimeout(timer);
  }, [isDirty, sectionContents]);

  const save = useCallback(async () => {
    try {
      const dataToSave = {
        metadata: {
          ...metadata,
          updatedAt: new Date()
        },
        sectionContents,
        lastSaved: new Date()
      };

      localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
      setLastSaved(new Date());
      setIsDirty(false);
      
      // TODO: Also save to backend API
      // await apiRequest('PUT', `/api/business-plans/${planId}`, dataToSave);
    } catch (error) {
      console.error('Failed to save business plan:', error);
      throw error;
    }
  }, [metadata, sectionContents, planId]);

  const updateMetadata = useCallback((updates: Partial<BusinessPlanMetadata>) => {
    setMetadata(prev => ({
      ...prev,
      ...updates,
      updatedAt: new Date()
    }));
    setIsDirty(true);
  }, []);

  const calculateWordCount = (content: string): number => {
    return content.trim().split(/\s+/).filter(word => word.length > 0).length;
  };

  const calculateStatus = (content: string, estimatedWords: number): SectionStatus => {
    const wordCount = calculateWordCount(content);
    if (wordCount === 0) return 'not_started';
    if (wordCount < estimatedWords * 0.7) return 'in_progress';
    return 'complete';
  };

  const updateSectionContent = useCallback((sectionId: string, content: string, aiGenerated = false) => {
    const section = getAllSections().find(s => s.id === sectionId);
    const estimatedWords = section?.estimatedWords || 300;
    
    const newSection: SectionContent = {
      id: sectionId,
      content,
      wordCount: calculateWordCount(content),
      lastModified: new Date(),
      status: calculateStatus(content, estimatedWords),
      aiGenerated,
      aiScore: aiGenerated ? 0.85 : undefined
    };
    
    setSectionContents(prev => ({
      ...prev,
      [sectionId]: newSection
    }));
    setIsDirty(true);
  }, []);

  const getSectionContent = useCallback((sectionId: string): string => {
    return sectionContents[sectionId]?.content || '';
  }, [sectionContents]);

  const getSectionStatus = useCallback((sectionId: string): SectionStatus => {
    return sectionContents[sectionId]?.status || 'not_started';
  }, [sectionContents]);

  const getSectionWordCount = useCallback((sectionId: string): number => {
    return sectionContents[sectionId]?.wordCount || 0;
  }, [sectionContents]);

  const completedSections = Object.values(sectionContents)
    .filter(section => section.status === 'complete')
    .map(section => section.id);

  const getOverallProgress = useCallback((): number => {
    const totalSections = getAllSections().length;
    const completed = completedSections.length;
    return totalSections > 0 ? Math.round((completed / totalSections) * 100) : 0;
  }, [completedSections]);

  const getChapterProgress = useCallback((chapterId: string): number => {
    const chapter = BUSINESS_PLAN_STRUCTURE.find(c => c.id === chapterId);
    if (!chapter) return 0;

    const totalSections = chapter.sections.length;
    const completed = chapter.sections.filter(s => 
      completedSections.includes(s.id)
    ).length;

    return totalSections > 0 ? Math.round((completed / totalSections) * 100) : 0;
  }, [completedSections]);

  // Update completion percentage in metadata
  useEffect(() => {
    const progress = getOverallProgress();
    if (progress !== metadata.completionPercentage) {
      setMetadata(prev => ({
        ...prev,
        completionPercentage: progress
      }));
    }
  }, [completedSections, getOverallProgress]);

  const value: BusinessPlanContextType = {
    metadata,
    updateMetadata,
    sectionContents,
    updateSectionContent,
    getSectionContent,
    getSectionStatus,
    getSectionWordCount,
    completedSections,
    getOverallProgress,
    getChapterProgress,
    isDirty,
    lastSaved,
    save,
    structure: BUSINESS_PLAN_STRUCTURE
  };

  return (
    <BusinessPlanContext.Provider value={value}>
      {children}
    </BusinessPlanContext.Provider>
  );
};

export const useBusinessPlan = (): BusinessPlanContextType => {
  const context = useContext(BusinessPlanContext);
  if (!context) {
    throw new Error('useBusinessPlan must be used within a BusinessPlanProvider');
  }
  return context;
};


=== FILE: client/src/config/navigation.ts ===

/**
 * Navigation Configuration
 * 
 * Role-specific, action-based navigation for all user types.
 * Provides primary actions and AI companion integration.
 */

export type UserType = 'entrepreneur' | 'investor' | 'lender' | 'grantor' | 'partner';

export interface NavSection {
  id: string;
  label: string;
  icon: string;
  description: string;
  items: NavItem[];
}

export interface NavItem {
  label: string;
  path: string;
  icon: string;
  badge?: string;
  disabled?: boolean;
}

export interface AICompanion {
  label: string;
  description: string;
  path: string;
}

export interface NavigationConfig {
  primary: NavSection[];
  aiCompanion: AICompanion;
}

// ============================================================================
// NAVIGATION CONFIGURATIONS BY USER TYPE
// ============================================================================

export const NAVIGATION_CONFIG: Record<UserType, NavigationConfig> = {
  entrepreneur: {
    primary: [
      {
        id: 'build',
        label: 'Build',
        icon: 'pencil-ruler',
        description: 'Create and refine your business',
        items: [
          { label: 'Business Plan', path: '/build/business-plan', icon: 'document' },
          { label: 'Financial Model', path: '/build/financials', icon: 'calculator' },
          { label: 'Pitch Deck', path: '/build/pitch-deck', icon: 'presentation' },
          { label: 'Market Research', path: '/build/research', icon: 'search' }
        ]
      },
      {
        id: 'fund',
        label: 'Fund',
        icon: 'currency-dollar',
        description: 'Raise capital and secure funding',
        items: [
          { label: 'Funding Opportunities', path: '/fund/opportunities', icon: 'lightning-bolt' },
          { label: 'Investor Matching', path: '/fund/investors', icon: 'users' },
          { label: 'Loan Applications', path: '/fund/loans', icon: 'document-text' },
          { label: 'Grant Applications', path: '/fund/grants', icon: 'gift' }
        ]
      },
      {
        id: 'collaborate',
        label: 'Collaborate',
        icon: 'user-group',
        description: 'Build your team and network',
        items: [
          { label: 'Find Co-Founders', path: '/collaborate/co-founders', icon: 'user-plus' },
          { label: 'Team Management', path: '/collaborate/team', icon: 'users' },
          { label: 'Mentors & Advisors', path: '/collaborate/mentors', icon: 'academic-cap' },
          { label: 'Partnerships', path: '/collaborate/partners', icon: 'link' }
        ]
      },
      {
        id: 'learn',
        label: 'Learn',
        icon: 'book-open',
        description: 'Develop skills and knowledge',
        items: [
          { label: 'Courses', path: '/learn/courses', icon: 'play' },
          { label: 'Resources', path: '/learn/resources', icon: 'collection' },
          { label: 'Events', path: '/learn/events', icon: 'calendar' },
          { label: 'Community', path: '/learn/community', icon: 'chat' }
        ]
      }
    ],
    aiCompanion: {
      label: 'Co-Founder',
      description: 'Your strategic partner',
      path: '/co-founder'
    }
  },

  investor: {
    primary: [
      {
        id: 'discover',
        label: 'Discover',
        icon: 'search',
        description: 'Find investment opportunities',
        items: [
          { label: 'Deal Flow', path: '/discover/deals', icon: 'inbox' },
          { label: 'Startup Directory', path: '/discover/startups', icon: 'briefcase' },
          { label: 'Matching', path: '/discover/matching', icon: 'sparkles' },
          { label: 'Market Insights', path: '/discover/insights', icon: 'chart-bar' }
        ]
      },
      {
        id: 'analyze',
        label: 'Analyze',
        icon: 'chart-pie',
        description: 'Evaluate and assess deals',
        items: [
          { label: 'Deal Analysis', path: '/analyze/deals', icon: 'document-search' },
          { label: 'Valuation Tools', path: '/analyze/valuation', icon: 'calculator' },
          { label: 'Due Diligence', path: '/analyze/diligence', icon: 'clipboard-check' },
          { label: 'Risk Assessment', path: '/analyze/risk', icon: 'shield-check' }
        ]
      },
      {
        id: 'manage',
        label: 'Manage',
        icon: 'folder-open',
        description: 'Track your portfolio',
        items: [
          { label: 'Portfolio', path: '/manage/portfolio', icon: 'briefcase' },
          { label: 'Performance', path: '/manage/performance', icon: 'trending-up' },
          { label: 'Company Updates', path: '/manage/updates', icon: 'bell' },
          { label: 'Follow-On Analysis', path: '/manage/followon', icon: 'refresh' }
        ]
      },
      {
        id: 'connect',
        label: 'Connect',
        icon: 'users',
        description: 'Network and collaborate',
        items: [
          { label: 'Syndicate', path: '/connect/syndicate', icon: 'user-group' },
          { label: 'LP Relations', path: '/connect/lps', icon: 'briefcase' },
          { label: 'Mentorship', path: '/connect/mentorship', icon: 'academic-cap' },
          { label: 'Events', path: '/connect/events', icon: 'calendar' }
        ]
      }
    ],
    aiCompanion: {
      label: 'Co-Investor',
      description: 'Your deal intelligence partner',
      path: '/co-investor'
    }
  },

  lender: {
    primary: [
      {
        id: 'applications',
        label: 'Applications',
        icon: 'document-text',
        description: 'Review and process loans',
        items: [
          { label: 'New Applications', path: '/applications/new', icon: 'inbox' },
          { label: 'In Review', path: '/applications/review', icon: 'clock' },
          { label: 'Approved', path: '/applications/approved', icon: 'check-circle' },
          { label: 'Declined', path: '/applications/declined', icon: 'x-circle' }
        ]
      },
      {
        id: 'underwrite',
        label: 'Underwrite',
        icon: 'calculator',
        description: 'Analyze creditworthiness',
        items: [
          { label: 'Credit Analysis', path: '/underwrite/credit', icon: 'chart-bar' },
          { label: 'Risk Assessment', path: '/underwrite/risk', icon: 'shield-exclamation' },
          { label: 'Collateral Valuation', path: '/underwrite/collateral', icon: 'currency-dollar' },
          { label: 'Decision Support', path: '/underwrite/decision', icon: 'light-bulb' }
        ]
      },
      {
        id: 'portfolio',
        label: 'Portfolio',
        icon: 'briefcase',
        description: 'Monitor loan performance',
        items: [
          { label: 'Active Loans', path: '/portfolio/active', icon: 'document' },
          { label: 'Performance', path: '/portfolio/performance', icon: 'chart-line' },
          { label: 'At Risk', path: '/portfolio/at-risk', icon: 'exclamation-triangle' },
          { label: 'Collections', path: '/portfolio/collections', icon: 'bell' }
        ]
      },
      {
        id: 'insights',
        label: 'Insights',
        icon: 'light-bulb',
        description: 'Analytics and reporting',
        items: [
          { label: 'Dashboard', path: '/insights/dashboard', icon: 'chart-pie' },
          { label: 'Reports', path: '/insights/reports', icon: 'document-report' },
          { label: 'Market Trends', path: '/insights/trends', icon: 'trending-up' },
          { label: 'Benchmarking', path: '/insights/benchmarks', icon: 'scale' }
        ]
      }
    ],
    aiCompanion: {
      label: 'Co-Lender',
      description: 'Your credit intelligence partner',
      path: '/co-lender'
    }
  },

  grantor: {
    primary: [
      {
        id: 'applications',
        label: 'Applications',
        icon: 'document-duplicate',
        description: 'Review grant requests',
        items: [
          { label: 'New Submissions', path: '/applications/new', icon: 'inbox' },
          { label: 'Under Review', path: '/applications/review', icon: 'search' },
          { label: 'Recommended', path: '/applications/recommended', icon: 'thumb-up' },
          { label: 'Decisions', path: '/applications/decisions', icon: 'clipboard-check' }
        ]
      },
      {
        id: 'evaluate',
        label: 'Evaluate',
        icon: 'scale',
        description: 'Assess impact and alignment',
        items: [
          { label: 'Impact Analysis', path: '/evaluate/impact', icon: 'chart-bar' },
          { label: 'Mission Alignment', path: '/evaluate/alignment', icon: 'target' },
          { label: 'Risk Assessment', path: '/evaluate/risk', icon: 'shield-check' },
          { label: 'Theory of Change', path: '/evaluate/theory', icon: 'academic-cap' }
        ]
      },
      {
        id: 'portfolio',
        label: 'Portfolio',
        icon: 'folder-open',
        description: 'Track grantee progress',
        items: [
          { label: 'Active Grants', path: '/portfolio/active', icon: 'briefcase' },
          { label: 'Impact Tracking', path: '/portfolio/impact', icon: 'chart-line' },
          { label: 'Reports', path: '/portfolio/reports', icon: 'document-report' },
          { label: 'Renewals', path: '/portfolio/renewals', icon: 'refresh' }
        ]
      },
      {
        id: 'strategy',
        label: 'Strategy',
        icon: 'light-bulb',
        description: 'Optimize giving strategy',
        items: [
          { label: 'Portfolio Overview', path: '/strategy/overview', icon: 'chart-pie' },
          { label: 'Diversification', path: '/strategy/diversification', icon: 'arrows-expand' },
          { label: 'Focus Areas', path: '/strategy/focus', icon: 'filter' },
          { label: 'Collaboration', path: '/strategy/collaboration', icon: 'users' }
        ]
      }
    ],
    aiCompanion: {
      label: 'Co-Builder',
      description: 'Your impact intelligence partner',
      path: '/co-builder'
    }
  },

  partner: {
    primary: [
      {
        id: 'programs',
        label: 'Programs',
        icon: 'collection',
        description: 'Manage your initiatives',
        items: [
          { label: 'Active Cohorts', path: '/programs/cohorts', icon: 'user-group' },
          { label: 'Curriculum', path: '/programs/curriculum', icon: 'book-open' },
          { label: 'Events', path: '/programs/events', icon: 'calendar' },
          { label: 'Resources', path: '/programs/resources', icon: 'folder' }
        ]
      },
      {
        id: 'companies',
        label: 'Companies',
        icon: 'office-building',
        description: 'Track startup progress',
        items: [
          { label: 'Portfolio', path: '/companies/portfolio', icon: 'briefcase' },
          { label: 'Performance', path: '/companies/performance', icon: 'chart-bar' },
          { label: 'Interventions', path: '/companies/interventions', icon: 'support' },
          { label: 'Alumni', path: '/companies/alumni', icon: 'academic-cap' }
        ]
      },
      {
        id: 'connect',
        label: 'Connect',
        icon: 'link',
        description: 'Facilitate connections',
        items: [
          { label: 'Mentor Matching', path: '/connect/mentors', icon: 'user-plus' },
          { label: 'Investor Intros', path: '/connect/investors', icon: 'currency-dollar' },
          { label: 'Partnerships', path: '/connect/partnerships', icon: 'handshake' },
          { label: 'Network', path: '/connect/network', icon: 'globe' }
        ]
      },
      {
        id: 'impact',
        label: 'Impact',
        icon: 'trending-up',
        description: 'Measure and report',
        items: [
          { label: 'Outcomes', path: '/impact/outcomes', icon: 'badge-check' },
          { label: 'Analytics', path: '/impact/analytics', icon: 'chart-pie' },
          { label: 'Reports', path: '/impact/reports', icon: 'document-report' },
          { label: 'Success Stories', path: '/impact/stories', icon: 'star' }
        ]
      }
    ],
    aiCompanion: {
      label: 'Co-Builder',
      description: 'Your ecosystem intelligence partner',
      path: '/co-builder'
    }
  }
};

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================

export function getNavigationConfig(userType: UserType): NavigationConfig {
  return NAVIGATION_CONFIG[userType];
}

export function getAICompanion(userType: UserType): AICompanion {
  return NAVIGATION_CONFIG[userType].aiCompanion;
}

export function getPrimarySections(userType: UserType): NavSection[] {
  return NAVIGATION_CONFIG[userType].primary;
}

export function findNavItem(userType: UserType, path: string): NavItem | null {
  const config = NAVIGATION_CONFIG[userType];
  
  for (const section of config.primary) {
    const item = section.items.find(i => i.path === path);
    if (item) return item;
  }
  
  return null;
}

export function getActiveSection(userType: UserType, currentPath: string): string | null {
  const config = NAVIGATION_CONFIG[userType];
  
  for (const section of config.primary) {
    if (section.items.some(item => currentPath.startsWith(item.path))) {
      return section.id;
    }
  }
  
  return null;
}


=== FILE: client/src/constants/businessPlanStructure.ts ===

/**
 * Business Plan Structure Constants
 * Based on VenturePlanner documentation and industry best practices
 */

export interface PlanSection {
  id: string;
  title: string;
  description?: string;
  aiPrompt?: string;
  required: boolean;
  estimatedWords: number;
  tips: string[];
}

export interface PlanChapter {
  id: string;
  title: string;
  subtitle?: string;
  description: string;
  icon: string;
  sections: PlanSection[];
  tools?: string[];
  order: number;
}

export const BUSINESS_PLAN_STRUCTURE: PlanChapter[] = [
  {
    id: 'executive-summary',
    title: 'Executive',
    subtitle: 'Summary',
    description: 'A concise overview of your business plan highlighting key points',
    icon: 'FileText',
    order: 0,
    sections: [
      {
        id: 'summary',
        title: 'Summary',
        description: 'Brief overview of your entire business plan',
        aiPrompt: 'Write a compelling executive summary that captures the essence of your business, highlighting the problem you solve, your solution, target market, competitive advantage, and financial projections.',
        required: true,
        estimatedWords: 300,
        tips: [
          'Keep it concise - aim for 1-2 pages maximum',
          'Write this section last after completing other sections',
          'Focus on the most compelling aspects of your business',
          'Include key financial highlights and projections'
        ]
      },
      {
        id: 'our-mission',
        title: 'Our Mission',
        description: 'Your company\'s mission statement and core values',
        aiPrompt: 'Craft a powerful mission statement that defines your company\'s purpose, core values, and long-term vision. Make it inspiring and memorable.',
        required: true,
        estimatedWords: 150,
        tips: [
          'Make it clear and memorable',
          'Focus on your purpose and impact',
          'Align with your target audience values',
          'Keep it authentic and achievable'
        ]
      },
      {
        id: 'company-management',
        title: 'The Company & Management',
        description: 'Overview of company structure and leadership team',
        aiPrompt: 'Describe your company structure, legal entity, ownership, and introduce your management team highlighting their relevant experience and expertise.',
        required: true,
        estimatedWords: 400,
        tips: [
          'Highlight key team members and their expertise',
          'Include relevant past achievements',
          'Show how the team complements each other',
          'Mention advisors and board members if applicable'
        ]
      },
      {
        id: 'products-services',
        title: 'Our Products / Services',
        description: 'Description of your offerings and value proposition',
        aiPrompt: 'Detail your products or services, their unique features, benefits to customers, and how they solve specific problems better than alternatives.',
        required: true,
        estimatedWords: 350,
        tips: [
          'Focus on benefits, not just features',
          'Explain your unique value proposition',
          'Include pricing strategy overview',
          'Mention intellectual property if applicable'
        ]
      },
      {
        id: 'opportunity',
        title: 'The Opportunity',
        description: 'Market opportunity and growth potential',
        aiPrompt: 'Explain the market opportunity, why now is the right time, market size, growth trends, and how your business is positioned to capitalize on this opportunity.',
        required: true,
        estimatedWords: 300,
        tips: [
          'Use data to support market size claims',
          'Explain market trends favoring your business',
          'Show why timing is right',
          'Demonstrate scalability potential'
        ]
      },
      {
        id: 'financial-highlights',
        title: 'Financial Highlights',
        description: 'Key financial metrics and projections',
        aiPrompt: 'Summarize key financial projections including revenue forecasts, profitability timeline, funding requirements, and expected ROI for investors.',
        required: true,
        estimatedWords: 250,
        tips: [
          'Include 3-5 year revenue projections',
          'Show path to profitability',
          'Highlight key financial metrics',
          'Be realistic and data-driven'
        ]
      }
    ]
  },
  {
    id: 'the-business',
    title: 'The',
    subtitle: 'Business',
    description: 'Detailed information about your business foundation and operations',
    icon: 'Building2',
    order: 1,
    sections: [
      {
        id: 'description',
        title: 'Description',
        description: 'Comprehensive business description',
        aiPrompt: 'Provide a detailed description of your business including what you do, how you do it, who you serve, and what makes your business unique.',
        required: true,
        estimatedWords: 400,
        tips: [
          'Be specific about your business model',
          'Explain your competitive advantages',
          'Describe your target customers',
          'Include your business location and facilities'
        ]
      },
      {
        id: 'background',
        title: 'Background',
        description: 'Company history and founding story',
        aiPrompt: 'Share your company\'s origin story, key milestones achieved, and the journey that led to where you are today.',
        required: false,
        estimatedWords: 300,
        tips: [
          'Tell a compelling founding story',
          'Highlight key milestones and achievements',
          'Show traction and progress',
          'Include any notable partnerships or customers'
        ]
      },
      {
        id: 'problem-solution',
        title: 'Problem & Solution',
        description: 'The problem you solve and your solution',
        aiPrompt: 'Clearly articulate the problem your target market faces, why existing solutions are inadequate, and how your solution uniquely addresses this problem.',
        required: true,
        estimatedWords: 450,
        tips: [
          'Quantify the problem with data',
          'Show you deeply understand customer pain points',
          'Explain why your solution is superior',
          'Include customer testimonials if available'
        ]
      },
      {
        id: 'mission-values',
        title: 'Mission & Values',
        description: 'Core mission, vision, and company values',
        aiPrompt: 'Define your mission statement, long-term vision, and core values that guide your business decisions and culture.',
        required: true,
        estimatedWords: 300,
        tips: [
          'Make values actionable and specific',
          'Align with target customer values',
          'Show how values influence decisions',
          'Include vision for 5-10 years ahead'
        ]
      },
      {
        id: 'structure-ownership',
        title: 'Structure & Ownership',
        description: 'Legal structure and ownership details',
        aiPrompt: 'Describe your legal business structure, ownership breakdown, equity distribution, and any relevant governance information.',
        required: true,
        estimatedWords: 250,
        tips: [
          'Specify legal entity type',
          'Include ownership percentages',
          'Mention any investor rights or restrictions',
          'Describe decision-making structure'
        ]
      }
    ]
  },
  {
    id: 'products-services',
    title: 'Products /',
    subtitle: 'Services',
    description: 'Detailed information about your offerings',
    icon: 'Package',
    order: 2,
    sections: [
      {
        id: 'descriptions-features',
        title: 'Descriptions & Features',
        description: 'Detailed product/service descriptions and features',
        aiPrompt: 'Provide comprehensive descriptions of your products or services, their key features, technical specifications, and how they deliver value to customers.',
        required: true,
        estimatedWords: 500,
        tips: [
          'Organize by product/service line',
          'Focus on customer benefits',
          'Include technical specifications if relevant',
          'Use visuals and diagrams where helpful'
        ]
      },
      {
        id: 'market-readiness',
        title: 'Market Readiness',
        description: 'Product development stage and readiness',
        aiPrompt: 'Explain your product development stage, testing completed, customer feedback received, and timeline for market launch or expansion.',
        required: true,
        estimatedWords: 300,
        tips: [
          'Be honest about development stage',
          'Include testing and validation results',
          'Show customer feedback and iterations',
          'Provide realistic timeline'
        ]
      },
      {
        id: 'pricing-margins',
        title: 'Pricing & Margins',
        description: 'Pricing strategy and profit margins',
        aiPrompt: 'Detail your pricing strategy, how prices compare to competitors, profit margins, and the rationale behind your pricing decisions.',
        required: true,
        estimatedWords: 350,
        tips: [
          'Justify your pricing strategy',
          'Compare to competitor pricing',
          'Show profit margin calculations',
          'Explain any tiered pricing models'
        ]
      },
      {
        id: 'guarantees-warranties',
        title: 'Guarantees & Warranties',
        description: 'Product guarantees and customer support',
        aiPrompt: 'Describe any guarantees, warranties, or service level agreements you offer, and how you handle customer support and satisfaction.',
        required: false,
        estimatedWords: 200,
        tips: [
          'Detail warranty terms and conditions',
          'Explain customer support processes',
          'Include return and refund policies',
          'Mention quality assurance measures'
        ]
      },
      {
        id: 'future-development',
        title: 'Future Development',
        description: 'Product roadmap and future plans',
        aiPrompt: 'Outline your product development roadmap, planned features, new products or services, and innovation strategy for the next 2-3 years.',
        required: false,
        estimatedWords: 300,
        tips: [
          'Show clear product roadmap',
          'Prioritize based on customer needs',
          'Include innovation strategy',
          'Mention R&D investments'
        ]
      }
    ]
  },
  {
    id: 'market-analysis',
    title: 'Market',
    subtitle: 'Analysis',
    description: 'Comprehensive market research and competitive analysis',
    icon: 'TrendingUp',
    order: 3,
    sections: [
      {
        id: 'swot-analysis',
        title: 'SWOT Analysis',
        description: 'Strengths, Weaknesses, Opportunities, and Threats',
        aiPrompt: 'Conduct a thorough SWOT analysis identifying your internal strengths and weaknesses, and external opportunities and threats in the market.',
        required: true,
        estimatedWords: 400,
        tips: [
          'Be honest about weaknesses',
          'Focus on actionable insights',
          'Link to strategic decisions',
          'Update regularly as market changes'
        ]
      },
      {
        id: 'market-segments',
        title: 'Market Segments',
        description: 'Target market segments and sizing',
        aiPrompt: 'Define your target market segments, their characteristics, size, growth potential, and why they are attractive opportunities for your business.',
        required: true,
        estimatedWords: 450,
        tips: [
          'Use TAM, SAM, SOM framework',
          'Provide data-backed market sizing',
          'Explain segmentation criteria',
          'Show addressable market calculation'
        ]
      },
      {
        id: 'buyer-personas',
        title: 'Buyer Personas',
        description: 'Detailed customer personas and profiles',
        aiPrompt: 'Create detailed buyer personas including demographics, psychographics, pain points, buying behavior, and decision-making criteria.',
        required: true,
        estimatedWords: 400,
        tips: [
          'Create 2-3 detailed personas',
          'Include demographics and psychographics',
          'Describe pain points and motivations',
          'Show buying journey and decision process'
        ]
      },
      {
        id: 'competitor-analysis',
        title: 'Competitor Analysis',
        description: 'Competitive landscape and positioning',
        aiPrompt: 'Analyze your main competitors, their strengths and weaknesses, market positioning, and how you differentiate from them.',
        required: true,
        estimatedWords: 500,
        tips: [
          'Identify direct and indirect competitors',
          'Use competitive matrix or comparison table',
          'Highlight your competitive advantages',
          'Include market share data if available'
        ]
      }
    ]
  },
  {
    id: 'strategy',
    title: 'Strategy',
    subtitle: '',
    description: 'Business and marketing strategy',
    icon: 'Target',
    order: 4,
    sections: [
      {
        id: 'objectives',
        title: 'Objectives',
        description: 'Business objectives and goals',
        aiPrompt: 'Define clear, measurable business objectives for the next 1-3 years using SMART goal framework (Specific, Measurable, Achievable, Relevant, Time-bound).',
        required: true,
        estimatedWords: 350,
        tips: [
          'Use SMART goal framework',
          'Include short and long-term objectives',
          'Make goals measurable and time-bound',
          'Align with overall business strategy'
        ]
      },
      {
        id: 'promotional-strategy',
        title: 'Promotional Strategy',
        description: 'Marketing and promotional plans',
        aiPrompt: 'Outline your marketing and promotional strategy including channels, tactics, messaging, budget allocation, and expected ROI.',
        required: true,
        estimatedWords: 450,
        tips: [
          'Detail marketing channels and tactics',
          'Include content marketing strategy',
          'Show budget allocation',
          'Provide metrics for success'
        ]
      },
      {
        id: 'pricing-strategy',
        title: 'Pricing Strategy',
        description: 'Pricing approach and rationale',
        aiPrompt: 'Explain your pricing strategy, whether cost-based, value-based, or competitive, and how it supports your market positioning and profitability goals.',
        required: true,
        estimatedWords: 300,
        tips: [
          'Explain pricing methodology',
          'Compare to competitor pricing',
          'Show impact on margins',
          'Include any dynamic pricing plans'
        ]
      },
      {
        id: 'distribution-strategy',
        title: 'Distribution Strategy',
        description: 'Sales channels and distribution approach',
        aiPrompt: 'Describe how you will distribute your products or services, including sales channels, partnerships, logistics, and customer acquisition strategy.',
        required: true,
        estimatedWords: 350,
        tips: [
          'Detail all distribution channels',
          'Explain sales process',
          'Include partnership strategy',
          'Describe logistics and fulfillment'
        ]
      },
      {
        id: 'exit-strategy',
        title: 'Exit Strategy',
        description: 'Long-term exit or succession plans',
        aiPrompt: 'Outline potential exit strategies such as acquisition, IPO, merger, or succession planning, and the timeline for these scenarios.',
        required: false,
        estimatedWords: 250,
        tips: [
          'Consider multiple exit scenarios',
          'Include realistic timeline',
          'Show potential acquirers or IPO path',
          'Discuss succession planning if applicable'
        ]
      }
    ]
  },
  {
    id: 'operations',
    title: 'Operations',
    subtitle: '',
    description: 'Operational plans and processes',
    icon: 'Settings',
    order: 5,
    sections: [
      {
        id: 'operations-plan',
        title: 'Operations Plan',
        description: 'Day-to-day operations and processes',
        aiPrompt: 'Describe your operational processes, workflow, key activities, and how you deliver your products or services efficiently.',
        required: true,
        estimatedWords: 450,
        tips: [
          'Detail key operational processes',
          'Include workflow diagrams',
          'Show scalability plans',
          'Mention technology and systems used'
        ]
      },
      {
        id: 'facilities-equipment',
        title: 'Facilities & Equipment',
        description: 'Physical infrastructure and equipment needs',
        aiPrompt: 'Describe your facilities, location, equipment, technology infrastructure, and any capital expenditure requirements.',
        required: true,
        estimatedWords: 300,
        tips: [
          'List key facilities and locations',
          'Detail equipment and technology',
          'Include capacity and utilization',
          'Mention any expansion plans'
        ]
      },
      {
        id: 'supply-chain',
        title: 'Supply Chain',
        description: 'Supply chain and vendor management',
        aiPrompt: 'Explain your supply chain strategy, key suppliers, inventory management, and how you ensure reliable and cost-effective operations.',
        required: true,
        estimatedWords: 350,
        tips: [
          'Identify key suppliers and partners',
          'Explain inventory management',
          'Describe quality control processes',
          'Include contingency plans'
        ]
      },
      {
        id: 'quality-control',
        title: 'Quality Control',
        description: 'Quality assurance and control measures',
        aiPrompt: 'Detail your quality control processes, standards, certifications, and how you ensure consistent quality in your products or services.',
        required: false,
        estimatedWords: 250,
        tips: [
          'Describe QA/QC processes',
          'Include relevant certifications',
          'Show metrics for quality',
          'Explain continuous improvement approach'
        ]
      }
    ]
  },
  {
    id: 'financials',
    title: 'Financials',
    subtitle: '',
    description: 'Financial projections and analysis',
    icon: 'DollarSign',
    order: 6,
    sections: [
      {
        id: 'financial-data',
        title: 'Financial Data',
        description: 'Key financial metrics and assumptions',
        aiPrompt: 'Present your key financial assumptions, metrics, and data that underpin your financial projections and business model.',
        required: true,
        estimatedWords: 400,
        tips: [
          'State all key assumptions clearly',
          'Include unit economics',
          'Show customer acquisition costs',
          'Detail revenue model'
        ]
      },
      {
        id: 'profit-loss',
        title: 'Profit & Loss',
        description: 'Income statement projections',
        aiPrompt: 'Provide detailed profit and loss projections for 3-5 years including revenue, cost of goods sold, operating expenses, and net income.',
        required: true,
        estimatedWords: 300,
        tips: [
          'Project 3-5 years monthly/quarterly',
          'Break down revenue streams',
          'Detail all expense categories',
          'Show path to profitability'
        ]
      },
      {
        id: 'balance-sheet',
        title: 'Balance Sheet',
        description: 'Assets, liabilities, and equity projections',
        aiPrompt: 'Create projected balance sheets showing assets, liabilities, and equity over time, demonstrating financial health and capital requirements.',
        required: true,
        estimatedWords: 250,
        tips: [
          'Show assets and liabilities',
          'Include working capital needs',
          'Detail equity structure',
          'Show financial ratios'
        ]
      },
      {
        id: 'cash-flow',
        title: 'Cash Flow',
        description: 'Cash flow projections and analysis',
        aiPrompt: 'Present cash flow projections showing operating, investing, and financing activities, demonstrating liquidity and funding needs.',
        required: true,
        estimatedWords: 300,
        tips: [
          'Show monthly cash flow for first year',
          'Include burn rate and runway',
          'Detail funding requirements',
          'Show break-even analysis'
        ]
      }
    ],
    tools: ['Financial Setup Assistant', 'Update Financials', 'Break-even Calculator']
  },
  {
    id: 'appendix',
    title: 'Appendix',
    subtitle: '',
    description: 'Supporting documents and additional information',
    icon: 'Paperclip',
    order: 7,
    sections: [
      {
        id: 'supporting-documents',
        title: 'Supporting Documents',
        description: 'Additional documentation and materials',
        aiPrompt: 'List and organize supporting documents such as market research, legal documents, product specifications, and other relevant materials.',
        required: false,
        estimatedWords: 200,
        tips: [
          'Include market research data',
          'Add product specifications',
          'Attach legal documents',
          'Include team resumes'
        ]
      },
      {
        id: 'references',
        title: 'References',
        description: 'Citations and sources',
        aiPrompt: 'Provide references for all data, statistics, and research cited in your business plan to establish credibility.',
        required: false,
        estimatedWords: 150,
        tips: [
          'Cite all data sources',
          'Use credible sources',
          'Include URLs and dates',
          'Follow consistent citation format'
        ]
      }
    ]
  }
];

// Helper functions
export const getChapterById = (id: string): PlanChapter | undefined => {
  return BUSINESS_PLAN_STRUCTURE.find(chapter => chapter.id === id);
};

export const getSectionById = (chapterId: string, sectionId: string): PlanSection | undefined => {
  const chapter = getChapterById(chapterId);
  return chapter?.sections.find(section => section.id === sectionId);
};

export const getAllSections = (): PlanSection[] => {
  return BUSINESS_PLAN_STRUCTURE.flatMap(chapter => chapter.sections);
};

export const getTotalSections = (): number => {
  return getAllSections().length;
};

export const getRequiredSections = (): PlanSection[] => {
  return getAllSections().filter(section => section.required);
};

export const getChapterProgress = (chapterId: string, completedSections: string[]): number => {
  const chapter = getChapterById(chapterId);
  if (!chapter) return 0;
  
  const totalSections = chapter.sections.length;
  const completed = chapter.sections.filter(s => completedSections.includes(s.id)).length;
  
  return totalSections > 0 ? Math.round((completed / totalSections) * 100) : 0;
};

export const getOverallProgress = (completedSections: string[]): number => {
  const total = getTotalSections();
  const completed = completedSections.length;
  
  return total > 0 ? Math.round((completed / total) * 100) : 0;
};


=== FILE: client/src/features/financial-hub/types/index.ts ===

import React from 'react';

export type ToastType = 'success' | 'error' | 'info';

export interface ToastMessage {
  id: number;
  message: string;
  type: ToastType;
}

export type HubModule = 'equity' | 'debt' | 'grants' | 'match';

export interface Investor {
  id: number;
  name: string;
  type: 'angel' | 'vc' | 'pe';
  logo: string;
  minInvestment: number;
  maxInvestment: number;
  industries: string[];
  stages: string[];
  regions: string[];
  portfolio: number;
  successRate: number;
  matchScore: number;
  description: string;
  website: string;
  recentInvestments: string[];
}

export interface Lender {
  id: number;
  name: string;
  type: 'bank' | 'credit-union' | 'online' | 'sba' | 'alternative';
  logo: string;
  minLoan: number;
  maxLoan: number;
  interestRate: number;
  term: number;
  requirements: {
    minCreditScore: number;
    minTimeInBusiness: number;
    minAnnualRevenue: number;
  };
  matchScore: number;
  description: string;
  website: string;
  features: string[];
  approvalTime: string;
}

export interface Grant {
  id: number;
  name: string;
  provider: string;
  type: 'government' | 'foundation' | 'corporate' | 'research';
  amount: number;
  deadline: string;
  eligibility: string[];
  sectors: string[];
  matchScore: number;
  description: string;
  website: string;
  requirements: string[];
  applicationProcess: string[];
  successRate: number;
  avgProcessingTime: string;
}


=== FILE: client/src/features/financial-hub/components/Toaster.tsx ===

import React from 'react';
import Toast from './Toast';
import { ToastMessage } from '../types';

interface ToasterProps {
  toasts: ToastMessage[];
  removeToast: (id: number) => void;
}

export const Toaster: React.FC<ToasterProps> = ({ toasts, removeToast }) => {
  return (
    <div className="fixed top-24 right-5 z-50 w-full max-w-sm space-y-3">
      {toasts.map(toast => (
        <Toast key={toast.id} toast={toast} onClose={removeToast} />
      ))}
    </div>
  );
};


=== FILE: client/src/features/financial-hub/components/Footer.tsx ===

import React from 'react';
import { Link } from 'wouter';

const Footer: React.FC = () => {
  return (
    <footer className="bg-slate-800 text-white mt-16 py-12">
      <div className="max-w-7xl mx-auto px-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mb-8">
          <div>
            <h3 className="text-xl font-bold mb-4 bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
              IterativStartups
            </h3>
            <p className="text-sm text-slate-400">The comprehensive AI-powered business innovation platform.</p>
          </div>
          <div>
            <h4 className="font-bold mb-3">Financial Hub</h4>
            <ul className="space-y-2 text-sm text-slate-400">
              <li><Link href="#" className="hover:text-white transition-colors">IterativEquity</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">IterativDebt</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">IterativGrants</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">IterativMatch</Link></li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold mb-3">Resources</h4>
            <ul className="space-y-2 text-sm text-slate-400">
              <li><Link href="#" className="hover:text-white transition-colors">Blog</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Case Studies</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Methodology</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Certification</Link></li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold mb-3">Company</h4>
            <ul className="space-y-2 text-sm text-slate-400">
              <li><Link href="#" className="hover:text-white transition-colors">About</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Careers</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Partners</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Contact</Link></li>
            </ul>
          </div>
        </div>
        <div className="border-t border-slate-700 pt-8 text-center">
          <p className="text-sm text-slate-400">¬© 2025 IterativStartups Inc. ‚Ä¢ "Where uncertainty becomes strategy."</p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;


=== FILE: client/src/features/financial-hub/components/HubHeader.tsx ===

import React from 'react';
import { PieChart, CreditCard, Gift, Zap, Sparkles } from 'lucide-react';
import { HubModule } from '../types';

interface HubHeaderProps {
  activeHub: HubModule;
  setActiveHub: (hub: HubModule) => void;
}

const hubModules = [
  { id: 'equity' as HubModule, label: 'IterativEquity', icon: PieChart },
  { id: 'debt' as HubModule, label: 'IterativDebt', icon: CreditCard },
  { id: 'grants' as HubModule, label: 'IterativGrants', icon: Gift },
  { id: 'match' as HubModule, label: 'IterativMatch', icon: Zap },
];

const HubHeader: React.FC<HubHeaderProps> = ({ activeHub, setActiveHub }) => {
  return (
    <header className="bg-white/80 border-b border-slate-200 shadow-sm sticky top-0 z-40 backdrop-blur-lg">
      <div className="max-w-7xl mx-auto px-6 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Sparkles className="w-8 h-8 text-purple-600" />
            <div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-600 bg-clip-text text-transparent">
                Financial Hub
              </h1>
              <p className="text-sm text-slate-500">The Funding Workspace of IterativStartups</p>
            </div>
          </div>

          <nav className="hidden lg:flex items-center gap-2 bg-slate-100 p-1.5 rounded-full">
            {hubModules.map(mod => {
              const isActive = activeHub === mod.id;
              const Icon = mod.icon;
              return (
                <button
                  key={mod.id}
                  onClick={() => setActiveHub(mod.id)}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full text-sm font-semibold transition-all ${
                    isActive ? 'bg-white text-purple-700 shadow-md' : 'bg-transparent text-slate-600 hover:bg-white/70'
                  }`}
                >
                  <Icon className="w-4 h-4" />
                  {mod.label}
                </button>
              );
            })}
          </nav>

          <div className="flex items-center gap-3">
            <button className="text-slate-600 hover:text-slate-800 font-medium px-4 py-2 rounded-lg transition-colors">
              Sign In
            </button>
            <button className="bg-gradient-to-r from-purple-600 to-blue-600 text-white font-semibold py-2 px-6 rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all shadow-md hover:shadow-lg">
              Start Free
            </button>
          </div>
        </div>
      </div>
    </header>
  );
};

export default HubHeader;


=== FILE: client/src/features/financial-hub/components/Toast.tsx ===

import React, { useEffect } from 'react';
import { X, CheckCircle, AlertTriangle, Info } from 'lucide-react';
import { ToastMessage, ToastType } from '../types';

interface ToastProps {
  toast: ToastMessage;
  onClose: (id: number) => void;
}

const ICONS: Record<ToastType, React.ReactNode> = {
  success: <CheckCircle className="w-6 h-6 text-green-500" />,
  error: <AlertTriangle className="w-6 h-6 text-red-500" />,
  info: <Info className="w-6 h-6 text-blue-500" />,
};

const TOAST_STYLES: Record<ToastType, string> = {
  success: 'bg-green-50 border-green-200 text-green-800',
  error: 'bg-red-50 border-red-200 text-red-800',
  info: 'bg-blue-50 border-blue-200 text-blue-800',
};

const Toast: React.FC<ToastProps> = ({ toast, onClose }) => {
  useEffect(() => {
    const timer = setTimeout(() => {
      onClose(toast.id);
    }, 5000);

    return () => {
      clearTimeout(timer);
    };
  }, [onClose, toast.id]);

  return (
    <div 
      className={`max-w-sm w-full rounded-lg shadow-lg animate-fade-in-up border ${TOAST_STYLES[toast.type]}`}
      role="alert"
      aria-live="assertive"
    >
      <div className="p-4 flex items-start">
        <div className="flex-shrink-0">{ICONS[toast.type]}</div>
        <div className="ml-3 w-0 flex-1 pt-0.5">
          <p className="text-sm font-medium">{toast.message}</p>
        </div>
        <div className="ml-4 flex-shrink-0 flex">
          <button
            onClick={() => onClose(toast.id)}
            className="inline-flex rounded-md p-1.5 text-current/70 hover:bg-current/10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-current/10 focus:ring-current/50"
            aria-label="Close notification"
          >
            <X className="h-5 w-5" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default Toast;


=== FILE: client/src/features/financial-hub/FinancialHubApp.tsx ===

import React, { useState, useCallback } from 'react';
import HubHeader from './components/HubHeader';
import Footer from './components/Footer';
import EquityApp from './modules/equity/EquityApp';
import DebtApp from './modules/debt/DebtApp';
import GrantsApp from './modules/grants/GrantsApp';
import MatcherApp from './modules/matcher/MatcherApp';
import { Toaster } from './components/Toaster';
import { ToastMessage, ToastType, HubModule } from './types';

const FinancialHubApp: React.FC = () => {
  const [activeHub, setActiveHub] = useState<HubModule>('equity');
  const [toasts, setToasts] = useState<ToastMessage[]>([]);

  const addToast = useCallback((message: string, type: ToastType) => {
    const id = Date.now();
    setToasts(prev => [...prev, { message, type, id }]);
  }, []);

  const removeToast = useCallback((id: number) => {
    setToasts(prev => prev.filter(t => t.id !== id));
  }, []);

  const renderActiveHub = () => {
    switch (activeHub) {
      case 'equity':
        return <EquityApp addToast={addToast} />;
      case 'debt':
        return <DebtApp addToast={addToast} />;
      case 'grants':
        return <GrantsApp addToast={addToast} />;
      case 'match':
        return <MatcherApp addToast={addToast} />;
      default:
        return <EquityApp addToast={addToast} />;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 text-slate-800 flex flex-col">
      <HubHeader activeHub={activeHub} setActiveHub={setActiveHub} />
      <main className="flex-grow max-w-7xl mx-auto px-6 py-8 w-full">
        {renderActiveHub()}
      </main>
      <Toaster toasts={toasts} removeToast={removeToast} />
      <Footer />
    </div>
  );
};

export default FinancialHubApp;


=== FILE: client/src/features/financial-hub/modules/grants/GrantsApp.tsx ===

import React, { useState } from 'react';
import { 
  Search, Filter, DollarSign, Gift, Award, Calendar,
  TrendingUp, Info, HelpCircle, Star, ExternalLink, Building, Building2
} from 'lucide-react';
import { Grant, ToastType } from '../../types';

interface GrantsAppProps {
  addToast: (message: string, type: ToastType) => void;
}

const GrantsApp: React.FC<GrantsAppProps> = ({ addToast }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedSectors, setSelectedSectors] = useState<string[]>([]);
  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);
  const [amountRange, setAmountRange] = useState([1000, 1000000]);
  const [deadlineFilter, setDeadlineFilter] = useState<string>('all');

  const grants: Grant[] = [
    {
      id: 1, name: "SBIR Phase I", provider: "National Science Foundation", type: "government", amount: 150000, deadline: "2024-06-15",
      eligibility: ["Small business", "US-based", "Technology focus"], sectors: ["Technology", "Research", "Innovation"], matchScore: 95,
      description: "Small Business Innovation Research program for early-stage technology development.", website: "https://nsf.gov/sbir",
      requirements: ["Research proposal", "Technical feasibility", "Commercial potential"], applicationProcess: ["Pre-application", "Full proposal", "Review process"],
      successRate: 0.15, avgProcessingTime: "6-8 months"
    },
    {
      id: 2, name: "Gates Foundation Global Health", provider: "Bill & Melinda Gates Foundation", type: "foundation", amount: 500000, deadline: "2024-08-30",
      eligibility: ["Non-profit", "Global health focus", "Innovation"], sectors: ["Healthcare", "Global Health", "Technology"], matchScore: 88,
      description: "Funding for innovative solutions to global health challenges.", website: "https://gatesfoundation.org",
      requirements: ["Health impact", "Innovation", "Scalability"], applicationProcess: ["Letter of inquiry", "Full proposal", "Review"],
      successRate: 0.08, avgProcessingTime: "4-6 months"
    },
    {
      id: 3, name: "Google for Startups", provider: "Google", type: "corporate", amount: 100000, deadline: "2024-07-20",
      eligibility: ["Tech startup", "Early stage", "Global"], sectors: ["Technology", "AI", "Cloud Computing"], matchScore: 92,
      description: "Google's startup accelerator program with funding and mentorship.", website: "https://startup.google.com",
      requirements: ["Tech focus", "Scalable business", "Innovation"], applicationProcess: ["Application", "Interview", "Selection"],
      successRate: 0.12, avgProcessingTime: "2-3 months"
    },
  ];

  const filteredGrants = grants.filter(grant => {
    const matchesSearch = grant.name.toLowerCase().includes(searchQuery.toLowerCase()) || grant.description.toLowerCase().includes(searchQuery.toLowerCase()) || grant.provider.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesSector = selectedSectors.length === 0 || selectedSectors.some(sector => grant.sectors.includes(sector));
    const matchesType = selectedTypes.length === 0 || selectedTypes.includes(grant.type);
    const matchesAmount = grant.amount >= amountRange[0] && grant.amount <= amountRange[1];
    const matchesDeadline = deadlineFilter === 'all' || (deadlineFilter === 'soon' && new Date(grant.deadline) <= new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)) || (deadlineFilter === 'later' && new Date(grant.deadline) > new Date(Date.now() + 30 * 24 * 60 * 60 * 1000));
    return matchesSearch && matchesSector && matchesType && matchesAmount && matchesDeadline;
  });

  const sectors = ["Technology", "Healthcare", "Research", "Innovation", "Global Health", "AI", "Cloud Computing", "Biotechnology", "Social Impact", "Education"];

  const grantTypes = [
    { value: 'government', label: 'Government', icon: Building, color: 'blue' },
    { value: 'foundation', label: 'Foundation', icon: Gift, color: 'purple' },
    { value: 'corporate', label: 'Corporate', icon: Building2, color: 'green' },
    { value: 'research', label: 'Research', icon: Award, color: 'orange' }
  ];

  const deadlineFilters = [{ value: 'all', label: 'All Deadlines' }, { value: 'soon', label: 'Within 30 Days' }, { value: 'later', label: 'More than 30 Days' }];

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) return `$${(amount / 1000000).toFixed(1)}M`;
    if (amount >= 1000) return `$${(amount / 1000).toFixed(0)}K`;
    return `$${amount}`;
  };
  
  const getTypeIcon = (type: string) => grantTypes.find(t => t.value === type)?.icon || Gift;
  const getTypeColor = (type: string) => grantTypes.find(t => t.value === type)?.color || 'gray';
  
  const formatDeadline = (deadline: string) => {
    const diffDays = Math.ceil((new Date(deadline).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
    if (diffDays < 0) return 'Expired';
    if (diffDays <= 30) return `${diffDays} days left`;
    return `${Math.ceil(diffDays / 30)} months left`;
  };
  
  const getDeadlineColor = (deadline: string) => {
    const diffDays = Math.ceil((new Date(deadline).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
    if (diffDays < 0) return 'text-red-600 bg-red-50';
    if (diffDays <= 30) return 'text-orange-600 bg-orange-50';
    return 'text-green-600 bg-green-50';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50 -m-8 p-8">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8"><div className="flex items-center gap-3 mb-4"><div className="p-2 bg-purple-100 rounded-lg"><Gift className="h-6 w-6 text-purple-600" /></div><h1 className="text-4xl font-bold text-gray-900">Grant Funding</h1></div><p className="text-xl text-gray-600 max-w-3xl">Discover non-dilutive funding opportunities from government agencies, foundations, and corporations to support your mission.</p></div>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-purple-100 rounded-lg"><DollarSign className="h-5 w-5 text-purple-600" /></div><div><p className="text-2xl font-bold text-gray-900">$3.2B</p><p className="text-sm text-gray-600">Available Grants</p></div></div></div>
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-blue-100 rounded-lg"><Gift className="h-5 w-5 text-blue-600" /></div><div><p className="text-2xl font-bold text-gray-900">156</p><p className="text-sm text-gray-600">Active Programs</p></div></div></div>
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-green-100 rounded-lg"><Award className="h-5 w-5 text-green-600" /></div><div><p className="text-2xl font-bold text-gray-900">14%</p><p className="text-sm text-gray-600">Avg. Success Rate</p></div></div></div>
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-orange-100 rounded-lg"><Calendar className="h-5 w-5 text-orange-600" /></div><div><p className="text-2xl font-bold text-gray-900">23</p><p className="text-sm text-gray-600">Deadlines This Month</p></div></div></div>
        </div>
        
        <div className="bg-white rounded-lg shadow p-6 mb-8">
          <div className="pb-4 border-b border-gray-200"><h3 className="text-lg font-semibold flex items-center gap-2"><Filter className="h-5 w-5" /> Find Your Perfect Grant</h3><p className="text-sm text-gray-500">Use filters to find grants that align with your organization's mission</p></div>
          <div className="pt-4 space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div><label className="block text-sm font-medium text-gray-700 mb-2">Search Grants</label><div className="relative"><Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" /><input placeholder="Search by name, provider, or description..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="pl-10 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500" /></div></div>
              <div><label className="block text-sm font-medium text-gray-700 mb-2">Deadline</label><select value={deadlineFilter} onChange={(e) => setDeadlineFilter(e.target.value)} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500">{deadlineFilters.map(filter => (<option key={filter.value} value={filter.value}>{filter.label}</option>))}</select></div>
            </div>
            <div><label className="block text-sm font-medium text-gray-700 mb-2">Grant Amount: {formatCurrency(amountRange[0])} - {formatCurrency(amountRange[1])}</label><div className="flex items-center gap-4"><input type="number" value={amountRange[0]} onChange={e => setAmountRange([+e.target.value, amountRange[1]])} className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500" /><span>-</span><input type="number" value={amountRange[1]} onChange={e => setAmountRange([amountRange[0], +e.target.value])} className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500" /></div></div>
            <div><label className="block text-sm font-medium text-gray-700 mb-2">Grant Types</label><div className="grid grid-cols-2 md:grid-cols-4 gap-3">{grantTypes.map(type => { const Icon = type.icon; return (<button key={type.value} onClick={() => { setSelectedTypes(prev => prev.includes(type.value) ? prev.filter(t => t !== type.value) : [...prev, type.value]);}} className={`p-3 rounded-lg border-2 transition-all ${selectedTypes.includes(type.value) ? `border-${type.color}-500 bg-${type.color}-50 text-${type.color}-700` : 'border-gray-200 hover:border-gray-300'}`}><Icon className="h-5 w-5 mx-auto mb-2" /><p className="text-xs font-medium text-center">{type.label}</p></button>);})}</div></div>
            <div><label className="block text-sm font-medium text-gray-700 mb-2">Sectors</label><div className="flex flex-wrap gap-2">{sectors.map(sector => (<button key={sector} onClick={() => { setSelectedSectors(prev => prev.includes(sector) ? prev.filter(s => s !== sector) : [...prev, sector]); }} className={`cursor-pointer px-3 py-1 rounded-full text-sm border ${selectedSectors.includes(sector) ? 'bg-purple-600 text-white border-purple-600' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'}`}>{sector}</button>))}</div></div>
          </div>
        </div>

        <div className="space-y-6">
          <div className="flex items-center justify-between"><h2 className="text-2xl font-bold text-gray-900">{filteredGrants.length} Grants Found</h2><div className="flex items-center gap-2 text-sm text-gray-600"><span>Sorted by Match Score</span><TrendingUp className="h-4 w-4" /></div></div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">{filteredGrants.map(grant => { const TypeIcon = getTypeIcon(grant.type); const typeColor = getTypeColor(grant.type); return (
              <div key={grant.id} className="bg-white rounded-lg shadow hover:shadow-lg transition-shadow">
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3"><div className={`p-2 bg-${typeColor}-100 rounded-lg`}><TypeIcon className={`h-6 w-6 text-${typeColor}-600`} /></div><div><h3 className="text-lg font-semibold">{grant.name}</h3><p className="text-sm text-gray-500">{grant.provider}</p></div></div>
                    <div className="text-right"><div className="flex items-center gap-1 mb-1"><Star className="h-4 w-4 text-yellow-500 fill-current" /><span className="text-sm font-medium">{grant.matchScore}% Match</span></div><div className="w-20 h-2 bg-gray-200 rounded-full overflow-hidden"><div className="h-full bg-purple-500" style={{width: `${grant.matchScore}%`}}></div></div></div>
                  </div>
                  <p className="text-gray-600 mb-4 text-sm">{grant.description}</p>
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div><p className="text-sm font-medium text-gray-700">Grant Amount</p><p className="text-lg font-bold text-gray-900">{formatCurrency(grant.amount)}</p></div>
                    <div><p className="text-sm font-medium text-gray-700">Success Rate</p><p className="text-sm text-gray-600">{(grant.successRate * 100).toFixed(0)}%</p></div>
                    <div><p className="text-sm font-medium text-gray-700">Processing Time</p><p className="text-sm text-gray-600">{grant.avgProcessingTime}</p></div>
                    <div><p className="text-sm font-medium text-gray-700">Deadline</p><span className={`text-xs px-2 py-1 rounded-full font-medium ${getDeadlineColor(grant.deadline)}`}>{formatDeadline(grant.deadline)}</span></div>
                  </div>
                  <div className="mb-4"><p className="text-sm font-medium text-gray-700 mb-2">Sectors</p><div className="flex flex-wrap gap-1">{grant.sectors.map(sector => (<span key={sector} className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full">{sector}</span>))}</div></div>
                </div>
                <div className="p-6 bg-gray-50 rounded-b-lg flex gap-2"><button onClick={() => addToast(`Opening application for ${grant.name}...`, 'info')} className="flex-1 inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-purple-600 hover:bg-purple-700"><ExternalLink className="h-4 w-4 mr-2" />Apply Now</button><button onClick={() => addToast('Learn more feature coming soon!', 'info')} className="flex-1 inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50"><Info className="h-4 w-4 mr-2" />Learn More</button></div>
              </div>);})}</div>
        </div>
        <div className="mt-8 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg shadow"><div className="p-8 text-center"><h3 className="text-2xl font-bold mb-4">Ready to Secure Grant Funding?</h3><p className="text-purple-100 mb-6 max-w-2xl mx-auto">Get matched with grants that align with your mission. Our platform analyzes your organization and connects you with funding opportunities that are perfect for your goals.</p><div className="flex flex-col sm:flex-row gap-4 justify-center"><button onClick={() => addToast('Finding grants...', 'info')} className="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-purple-600 bg-white hover:bg-purple-50"><Gift className="h-5 w-5 mr-2" />Find My Grants</button><button onClick={() => addToast('Help feature coming soon!', 'info')} className="inline-flex items-center justify-center px-6 py-3 border border-white text-base font-medium rounded-md shadow-sm text-white hover:bg-white hover:text-purple-600"><HelpCircle className="h-5 w-5 mr-2" />Get Help</button></div></div></div>
      </div>
    </div>
  );
};

export default GrantsApp;


=== FILE: client/src/features/financial-hub/modules/matcher/MatcherApp.tsx ===

import React, { useState } from 'react';
import { 
  Search, Filter, DollarSign, Users, Award, TrendingUp, Target, Star, ArrowRight
} from 'lucide-react';
import { Investor, Lender, Grant, ToastType } from '../../types';

interface MatcherAppProps {
  addToast: (message: string, type: ToastType) => void;
}

type FundingType = 'equity' | 'debt' | 'grants';

const MatcherApp: React.FC<MatcherAppProps> = ({ addToast }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);
  const [fundingRange, setFundingRange] = useState([50000, 500000]);
  const [activeTab, setActiveTab] = useState<FundingType>('equity');

  const investors: Investor[] = [
    { id: 1, name: "Sequoia Capital", type: "vc", logo: "https://logo.clearbit.com/sequoiacap.com", minInvestment: 500000, maxInvestment: 10000000, industries: ["Software", "FinTech", "Healthcare"], stages: ["Seed", "Series A"], regions: ["North America"], portfolio: 156, successRate: 0.78, matchScore: 92, description: "Leading VC firm", website: "https://sequoiacap.com", recentInvestments: ["Airbnb", "Stripe"] }
  ];
  
  const lenders: Lender[] = [
    { id: 1, name: "First National Bank", type: "bank", logo: "https://logo.clearbit.com/fnb.co.za", minLoan: 100000, maxLoan: 5000000, interestRate: 6.5, term: 60, requirements: { minCreditScore: 680, minTimeInBusiness: 2, minAnnualRevenue: 250000 }, matchScore: 88, description: "Traditional banking", website: "https://fnb.co.za", features: ["Low rates", "Flexible terms"], approvalTime: "7-14 days" }
  ];
  
  const grants: Grant[] = [
    { id: 1, name: "SBIR Phase I", provider: "NSF", type: "government", amount: 150000, deadline: "2024-03-31", eligibility: ["Small business"], sectors: ["Technology"], matchScore: 95, description: "Innovation research program", website: "https://nsf.gov", requirements: ["Research proposal"], applicationProcess: ["Pre-application", "Full proposal"], successRate: 0.15, avgProcessingTime: "6-8 months" }
  ];

  const industries = ["Software", "FinTech", "Healthcare", "E-commerce", "SaaS", "AI", "Blockchain"];

  const filteredInvestors = investors.filter(i => 
    i.name.toLowerCase().includes(searchQuery.toLowerCase()) && 
    (selectedIndustries.length === 0 || i.industries.some(ind => selectedIndustries.includes(ind))) && 
    i.minInvestment <= fundingRange[1] && i.maxInvestment >= fundingRange[0]
  ).sort((a,b) => b.matchScore - a.matchScore);
  
  const filteredLenders = lenders.filter(l => 
    l.name.toLowerCase().includes(searchQuery.toLowerCase()) && 
    l.minLoan <= fundingRange[1] && l.maxLoan >= fundingRange[0]
  ).sort((a,b) => b.matchScore - a.matchScore);
  
  const filteredGrants = grants.filter(g => 
    g.name.toLowerCase().includes(searchQuery.toLowerCase()) && 
    g.amount >= fundingRange[0] && g.amount <= fundingRange[1]
  ).sort((a,b) => b.matchScore - a.matchScore);

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) return `$${(amount / 1000000).toFixed(1)}M`;
    if (amount >= 1000) return `$${(amount / 1000).toFixed(0)}K`;
    return `$${amount}`;
  };

  const FundingTabs = () => (
    <div className="mb-6 border-b border-gray-200">
      <nav className="-mb-px flex space-x-8" aria-label="Tabs">
        <button onClick={() => setActiveTab('equity')} className={`${activeTab === 'equity' ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}>Equity Funding</button>
        <button onClick={() => setActiveTab('debt')} className={`${activeTab === 'debt' ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}>Debt Funding</button>
        <button onClick={() => setActiveTab('grants')} className={`${activeTab === 'grants' ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}>Grant Funding</button>
      </nav>
    </div>
  );
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 -m-8 p-8">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-indigo-100 rounded-lg"><Target className="h-6 w-6 text-indigo-600" /></div>
            <h1 className="text-4xl font-bold text-gray-900">Funding Matcher</h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">Get matched with the perfect funding opportunities for your business. Our AI-powered platform analyzes your profile and connects you with investors, lenders, and grant providers.</p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-blue-100 rounded-lg"><Users className="h-5 w-5 text-blue-600" /></div><div><p className="text-2xl font-bold text-gray-900">2,847</p><p className="text-sm text-gray-600">Active Funders</p></div></div></div>
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-green-100 rounded-lg"><DollarSign className="h-5 w-5 text-green-600" /></div><div><p className="text-2xl font-bold text-gray-900">$8.2B</p><p className="text-sm text-gray-600">Available Funding</p></div></div></div>
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-purple-100 rounded-lg"><Award className="h-5 w-5 text-purple-600" /></div><div><p className="text-2xl font-bold text-gray-900">89%</p><p className="text-sm text-gray-600">Match Accuracy</p></div></div></div>
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-orange-100 rounded-lg"><TrendingUp className="h-5 w-5 text-orange-600" /></div><div><p className="text-2xl font-bold text-gray-900">1,234</p><p className="text-sm text-gray-600">Successful Matches</p></div></div></div>
        </div>

        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex flex-col md:flex-row gap-4 mb-6">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <input placeholder="Search by name or industry..." className="pl-10 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" value={searchQuery} onChange={e => setSearchQuery(e.target.value)} />
              </div>
            </div>
            <div className="flex-1">
              <label className="block text-sm font-medium text-gray-700">Funding Range: {formatCurrency(fundingRange[0])} - {formatCurrency(fundingRange[1])}</label>
              <div className="flex items-center gap-2 mt-1">
                <input type="number" value={fundingRange[0]} onChange={e => setFundingRange([+e.target.value, fundingRange[1]])} className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
                <span>-</span>
                <input type="number" value={fundingRange[1]} onChange={e => setFundingRange([fundingRange[0], +e.target.value])} className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
              </div>
            </div>
          </div>
          
          <div className="mb-6">
            <div className="flex items-center gap-2 mb-2">
              <Filter className="h-4 w-4 text-gray-400" />
              <span className="text-sm text-gray-600">Filter by industry:</span>
            </div>
            <div className="flex flex-wrap gap-2">
              {industries.map(industry => (
                <button 
                  key={industry} 
                  onClick={() => {
                    setSelectedIndustries(prev => 
                      prev.includes(industry) ? prev.filter(i => i !== industry) : [...prev, industry]
                    );
                  }} 
                  className={`cursor-pointer px-3 py-1 rounded-full text-sm border ${selectedIndustries.includes(industry) ? 'bg-indigo-600 text-white border-indigo-600' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'}`}
                >
                  {industry}
                </button>
              ))}
            </div>
          </div>
          
          <FundingTabs />
          
          {activeTab === 'equity' && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredInvestors.map(investor => (
                <div key={investor.id} className={`bg-white rounded-lg shadow border-l-4 ${investor.matchScore >= 90 ? 'border-l-green-500' : 'border-l-blue-500'}`}>
                  <div className="p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-4">
                        <img src={investor.logo} className="h-10 w-10 rounded-full" alt={investor.name}/>
                        <div>
                          <h4 className="text-lg font-semibold">{investor.name}</h4>
                          <p className="text-sm text-gray-500">{investor.type.toUpperCase()}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center gap-1">
                          <Star className="h-4 w-4 text-yellow-500 fill-current" />
                          <span className="text-xl font-bold text-blue-600">{investor.matchScore}%</span>
                        </div>
                        <div className="text-xs text-gray-500">Match Score</div>
                      </div>
                    </div>
                    <div className="mt-4">
                      <button 
                        onClick={() => addToast(`Connecting with ${investor.name}...`, 'success')}
                        className="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 flex items-center justify-center gap-2"
                      >
                        Connect <ArrowRight className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
          
          {activeTab === 'debt' && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredLenders.map(lender => (
                <div key={lender.id} className={`bg-white rounded-lg shadow border-l-4 ${lender.matchScore >= 90 ? 'border-l-green-500' : 'border-l-blue-500'}`}>
                  <div className="p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-4">
                        <img src={lender.logo} className="h-10 w-10 rounded-full" alt={lender.name}/>
                        <div>
                          <h4 className="text-lg font-semibold">{lender.name}</h4>
                          <p className="text-sm text-gray-500 capitalize">{lender.type}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center gap-1">
                          <Star className="h-4 w-4 text-yellow-500 fill-current" />
                          <span className="text-xl font-bold text-blue-600">{lender.matchScore}%</span>
                        </div>
                        <div className="text-xs text-gray-500">Match Score</div>
                      </div>
                    </div>
                    <div className="mt-4">
                      <button 
                        onClick={() => addToast(`Applying to ${lender.name}...`, 'success')}
                        className="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 flex items-center justify-center gap-2"
                      >
                        Apply Now <ArrowRight className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
          
          {activeTab === 'grants' && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredGrants.map(grant => (
                <div key={grant.id} className={`bg-white rounded-lg shadow border-l-4 ${grant.matchScore >= 90 ? 'border-l-green-500' : 'border-l-blue-500'}`}>
                  <div className="p-4">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-4">
                        <div className="h-10 w-10 rounded-full bg-purple-100 flex items-center justify-center">
                          <Award className="h-6 w-6 text-purple-600" />
                        </div>
                        <div>
                          <h4 className="text-lg font-semibold">{grant.name}</h4>
                          <p className="text-sm text-gray-500">{grant.provider}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center gap-1">
                          <Star className="h-4 w-4 text-yellow-500 fill-current" />
                          <span className="text-xl font-bold text-purple-600">{grant.matchScore}%</span>
                        </div>
                        <div className="text-xs text-gray-500">Match Score</div>
                      </div>
                    </div>
                    <div className="mt-4">
                      <button 
                        onClick={() => addToast(`Applying for ${grant.name}...`, 'success')}
                        className="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 flex items-center justify-center gap-2"
                      >
                        Apply Now <ArrowRight className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default MatcherApp;


=== FILE: client/src/features/financial-hub/modules/debt/DebtApp.tsx ===

import React, { useState } from 'react';
import { 
  Search, Filter, DollarSign, Building, Award, Clock, Shield,
  TrendingUp, Info, Zap, CreditCard, Banknote, HelpCircle, Star, ExternalLink, Globe, Users
} from 'lucide-react';
import { Lender, ToastType } from '../../types';

interface DebtAppProps {
  addToast: (message: string, type: ToastType) => void;
}

const DebtApp: React.FC<DebtAppProps> = ({ addToast }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);
  const [loanRange, setLoanRange] = useState([10000, 1000000]);
  const [selectedTerm, setSelectedTerm] = useState<string>('all');

  const lenders: Lender[] = [
    {
      id: 1,
      name: "Wells Fargo Business",
      type: "bank",
      logo: "https://logo.clearbit.com/wellsfargo.com",
      minLoan: 10000,
      maxLoan: 1000000,
      interestRate: 4.5,
      term: 60,
      requirements: { minCreditScore: 680, minTimeInBusiness: 2, minAnnualRevenue: 100000 },
      matchScore: 92,
      description: "Traditional bank offering comprehensive business lending solutions with competitive rates.",
      website: "https://wellsfargo.com",
      features: ["Low interest rates", "Flexible terms", "Relationship banking"],
      approvalTime: "7-14 days"
    },
    {
      id: 2,
      name: "Kabbage (Amex)",
      type: "online",
      logo: "https://logo.clearbit.com/kabbage.com",
      minLoan: 2000,
      maxLoan: 250000,
      interestRate: 6.5,
      term: 24,
      requirements: { minCreditScore: 600, minTimeInBusiness: 1, minAnnualRevenue: 50000 },
      matchScore: 88,
      description: "Online lender specializing in quick business loans with fast approval process.",
      website: "https://kabbage.com",
      features: ["Fast approval", "Online application", "Flexible repayment"],
      approvalTime: "24-48 hours"
    },
    {
      id: 3,
      name: "SBA Express",
      type: "sba",
      logo: "https://logo.clearbit.com/sba.gov",
      minLoan: 5000,
      maxLoan: 500000,
      interestRate: 3.5,
      term: 84,
      requirements: { minCreditScore: 650, minTimeInBusiness: 2, minAnnualRevenue: 75000 },
      matchScore: 85,
      description: "SBA-backed loans with government guarantee, offering lower rates and longer terms.",
      website: "https://sba.gov",
      features: ["Government backed", "Low rates", "Long terms"],
      approvalTime: "14-21 days"
    },
  ];

  const filteredLenders = lenders.filter(lender => {
    const matchesSearch = lender.name.toLowerCase().includes(searchQuery.toLowerCase()) || lender.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesType = selectedTypes.length === 0 || selectedTypes.includes(lender.type);
    const matchesRange = lender.minLoan <= loanRange[1] && lender.maxLoan >= loanRange[0];
    const matchesTerm = selectedTerm === 'all' || (selectedTerm === 'short' && lender.term <= 24) || (selectedTerm === 'medium' && lender.term > 24 && lender.term <= 60) || (selectedTerm === 'long' && lender.term > 60);
    return matchesSearch && matchesType && matchesRange && matchesTerm;
  });

  const lenderTypes = [
    { value: 'bank', label: 'Banks', icon: Building },
    { value: 'online', label: 'Online', icon: Globe },
    { value: 'sba', label: 'SBA', icon: Shield },
    { value: 'alternative', label: 'Alternative', icon: Zap },
    { value: 'credit-union', label: 'Credit Unions', icon: Users }
  ];

  const terms = [
    { value: 'all', label: 'All Terms' },
    { value: 'short', label: 'Short (‚â§24mo)' },
    { value: 'medium', label: 'Medium (25-60mo)' },
    { value: 'long', label: 'Long (>60mo)' }
  ];

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) return `$${(amount / 1000000).toFixed(1)}M`;
    if (amount >= 1000) return `$${(amount / 1000).toFixed(0)}K`;
    return `$${amount}`;
  };

  const getTypeIcon = (type: string) => {
    const typeConfig = lenderTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.icon : Building;
  };
  
  const getTypeLabel = (type: string) => {
    const typeConfig = lenderTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.label : type;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-emerald-50 -m-8 p-8">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-green-100 rounded-lg"><CreditCard className="h-6 w-6 text-green-600" /></div>
            <h1 className="text-4xl font-bold text-gray-900">Debt Funding</h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">Access business loans, lines of credit, and debt financing options to fuel your growth without giving up equity.</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-green-100 rounded-lg"><DollarSign className="h-5 w-5 text-green-600" /></div><div><p className="text-2xl font-bold text-gray-900">$1.8B</p><p className="text-sm text-gray-600">Available Credit</p></div></div></div>
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-blue-100 rounded-lg"><Building className="h-5 w-5 text-blue-600" /></div><div><p className="text-2xl font-bold text-gray-900">89</p><p className="text-sm text-gray-600">Lending Partners</p></div></div></div>
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-purple-100 rounded-lg"><Award className="h-5 w-5 text-purple-600" /></div><div><p className="text-2xl font-bold text-gray-900">4.2%</p><p className="text-sm text-gray-600">Avg. Interest Rate</p></div></div></div>
          <div className="bg-white rounded-lg shadow p-6"><div className="flex items-center gap-3"><div className="p-2 bg-orange-100 rounded-lg"><Clock className="h-5 w-5 text-orange-600" /></div><div><p className="text-2xl font-bold text-gray-900">7</p><p className="text-sm text-gray-600">Days Avg. Approval</p></div></div></div>
        </div>

        <div className="bg-white rounded-lg shadow p-6 mb-8">
          <div className="pb-4 border-b border-gray-200"><h3 className="text-lg font-semibold flex items-center gap-2"><Filter className="h-5 w-5" /> Find Your Perfect Lender</h3><p className="text-sm text-gray-500">Use filters to find lenders that match your business needs and credit profile</p></div>
          <div className="pt-4 space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div><label className="block text-sm font-medium text-gray-700 mb-2">Search Lenders</label><div className="relative"><Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" /><input placeholder="Search by name or description..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="pl-10 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500" /></div></div>
              <div><label className="block text-sm font-medium text-gray-700 mb-2">Loan Term</label><select value={selectedTerm} onChange={(e) => setSelectedTerm(e.target.value)} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">{terms.map(term => (<option key={term.value} value={term.value}>{term.label}</option>))}</select></div>
            </div>
            <div><label className="block text-sm font-medium text-gray-700 mb-2">Loan Amount: {formatCurrency(loanRange[0])} - {formatCurrency(loanRange[1])}</label><div className="flex items-center gap-4"><input type="number" value={loanRange[0]} onChange={e => setLoanRange([+e.target.value, loanRange[1]])} className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500" /><span>-</span><input type="number" value={loanRange[1]} onChange={e => setLoanRange([loanRange[0], +e.target.value])} className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500" /></div></div>
            <div><label className="block text-sm font-medium text-gray-700 mb-2">Lender Types</label><div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">{lenderTypes.map(type => { const Icon = type.icon; return (<button key={type.value} onClick={() => { setSelectedTypes(prev => prev.includes(type.value) ? prev.filter(t => t !== type.value) : [...prev, type.value]); }} className={`p-3 rounded-lg border-2 transition-all ${selectedTypes.includes(type.value) ? 'border-green-500 bg-green-50 text-green-700' : 'border-gray-200 hover:border-gray-300'}`}><Icon className="h-5 w-5 mx-auto mb-2" /><p className="text-xs font-medium text-center">{type.label}</p></button>); })}</div></div>
          </div>
        </div>

        <div className="space-y-6">
          <div className="flex items-center justify-between"><h2 className="text-2xl font-bold text-gray-900">{filteredLenders.length} Lenders Found</h2><div className="flex items-center gap-2 text-sm text-gray-600"><span>Sorted by Match Score</span><TrendingUp className="h-4 w-4" /></div></div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">{filteredLenders.map(lender => { const TypeIcon = getTypeIcon(lender.type); return (
              <div key={lender.id} className="bg-white rounded-lg shadow hover:shadow-lg transition-shadow">
                <div className="p-6"><div className="flex items-start justify-between mb-4"><div className="flex items-center gap-3"><img src={lender.logo} alt={lender.name} className="w-12 h-12 rounded-lg object-cover" /><div><h3 className="text-lg font-semibold">{lender.name}</h3><p className="text-sm text-gray-500 flex items-center gap-1"><TypeIcon className="h-4 w-4" />{getTypeLabel(lender.type)}</p></div></div><div className="text-right"><div className="flex items-center gap-1 mb-1"><Star className="h-4 w-4 text-yellow-500 fill-current" /><span className="text-sm font-medium">{lender.matchScore}% Match</span></div><div className="w-20 h-2 bg-gray-200 rounded-full overflow-hidden"><div className="h-full bg-green-500" style={{width: `${lender.matchScore}%`}}></div></div></div></div><p className="text-gray-600 mb-4 text-sm">{lender.description}</p><div className="grid grid-cols-2 gap-4 mb-4"><div><p className="text-sm font-medium text-gray-700">Loan Range</p><p className="text-sm text-gray-600">{formatCurrency(lender.minLoan)} - {formatCurrency(lender.maxLoan)}</p></div><div><p className="text-sm font-medium text-gray-700">Interest Rate</p><p className="text-sm text-gray-600">{lender.interestRate}% APR</p></div><div><p className="text-sm font-medium text-gray-700">Term Length</p><p className="text-sm text-gray-600">{lender.term} months</p></div><div><p className="text-sm font-medium text-gray-700">Approval Time</p><p className="text-sm text-gray-600">{lender.approvalTime}</p></div></div><div className="mb-4"><p className="text-sm font-medium text-gray-700 mb-2">Key Features</p><div className="flex flex-wrap gap-1">{lender.features.map(feature => (<span key={feature} className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full">{feature}</span>))}</div></div></div>
                <div className="p-6 bg-gray-50 rounded-b-lg flex gap-2"><button onClick={() => addToast(`Opening application for ${lender.name}...`, 'info')} className="flex-1 inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700"><ExternalLink className="h-4 w-4 mr-2" />Apply Now</button><button onClick={() => addToast('Learn more feature coming soon!', 'info')} className="flex-1 inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50"><Info className="h-4 w-4 mr-2" />Learn More</button></div>
              </div>);})}</div>
        </div>

        <div className="mt-8 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg shadow"><div className="p-8 text-center"><h3 className="text-2xl font-bold mb-4">Ready to Secure Debt Funding?</h3><p className="text-green-100 mb-6 max-w-2xl mx-auto">Get matched with lenders who understand your business needs. Our platform analyzes your credit profile and connects you with the best loan options available in the market.</p><div className="flex flex-col sm:flex-row gap-4 justify-center"><button onClick={() => addToast('Finding your loan...', 'info')} className="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-green-600 bg-white hover:bg-green-50"><Banknote className="h-5 w-5 mr-2" />Find My Loan</button><button onClick={() => addToast('Help feature coming soon!', 'info')} className="inline-flex items-center justify-center px-6 py-3 border border-white text-base font-medium rounded-md shadow-sm text-white hover:bg-white hover:text-green-600"><HelpCircle className="h-5 w-5 mr-2" />Get Help</button></div></div></div>
      </div>
    </div>
  );
};

export default DebtApp;


=== FILE: client/src/features/financial-hub/modules/equity/EquityApp.tsx ===

import React, { useState } from 'react';
import { 
  Search, Filter, DollarSign, Users, Award, Clock,
  TrendingUp, Star, ExternalLink, Building, Zap, HelpCircle
} from 'lucide-react';
import { Investor, ToastType } from '../../types';

interface EquityAppProps {
  addToast: (message: string, type: ToastType) => void;
}

const EquityApp: React.FC<EquityAppProps> = ({ addToast }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);
  const [fundingRange, setFundingRange] = useState([50000, 5000000]);
  const [selectedStage, setSelectedStage] = useState<string>('all');

  const investors: Investor[] = [
    {
      id: 1,
      name: "Sequoia Capital",
      type: "vc",
      logo: "https://logo.clearbit.com/sequoiacap.com",
      minInvestment: 500000,
      maxInvestment: 10000000,
      industries: ["Software", "FinTech", "Healthcare"],
      stages: ["Seed", "Series A", "Series B"],
      regions: ["North America", "Europe", "Asia"],
      portfolio: 156,
      successRate: 0.78,
      matchScore: 92,
      description: "Leading venture capital firm focused on technology companies from seed to growth stage.",
      website: "https://sequoiacap.com",
      recentInvestments: ["Airbnb", "WhatsApp", "Stripe"]
    },
    {
      id: 2,
      name: "Andreessen Horowitz",
      type: "vc",
      logo: "https://logo.clearbit.com/a16z.com",
      minInvestment: 1000000,
      maxInvestment: 20000000,
      industries: ["AI", "Blockchain", "Enterprise"],
      stages: ["Series A", "Series B", "Series C"],
      regions: ["North America", "Europe"],
      portfolio: 208,
      successRate: 0.82,
      matchScore: 88,
      description: "Technology-focused venture capital firm investing in software and internet companies.",
      website: "https://a16z.com",
      recentInvestments: ["Coinbase", "GitHub", "Oculus"]
    },
    {
      id: 3,
      name: "Y Combinator",
      type: "vc",
      logo: "https://logo.clearbit.com/ycombinator.com",
      minInvestment: 125000,
      maxInvestment: 2000000,
      industries: ["All Industries"],
      stages: ["Pre-seed", "Seed"],
      regions: ["Global"],
      portfolio: 3000,
      successRate: 0.65,
      matchScore: 95,
      description: "Startup accelerator and seed fund providing funding and mentorship to early-stage companies.",
      website: "https://ycombinator.com",
      recentInvestments: ["Airbnb", "Stripe", "DoorDash"]
    },
  ];

  const filteredInvestors = investors.filter(investor => {
    const matchesSearch = investor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         investor.industries.some(industry => 
                           industry.toLowerCase().includes(searchQuery.toLowerCase())
                         );
    const matchesIndustry = selectedIndustries.length === 0 || 
                           selectedIndustries.some(industry => 
                             investor.industries.includes(industry)
                           );
    const matchesStage = selectedStage === 'all' || investor.stages.includes(selectedStage);
    const matchesRange = investor.minInvestment <= fundingRange[1] && 
                        investor.maxInvestment >= fundingRange[0];
    
    return matchesSearch && matchesIndustry && matchesStage && matchesRange;
  });

  const industries = ["Software", "FinTech", "Healthcare", "AI", "Blockchain", "Enterprise", "SaaS", "E-commerce"];

  const stages = [
    { value: 'all', label: 'All Stages' },
    { value: 'Pre-seed', label: 'Pre-seed' },
    { value: 'Seed', label: 'Seed' },
    { value: 'Series A', label: 'Series A' },
    { value: 'Series B', label: 'Series B' },
  ];

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) return `$${(amount / 1000000).toFixed(1)}M`;
    if (amount >= 1000) return `$${(amount / 1000).toFixed(0)}K`;
    return `$${amount}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 -m-8 p-8">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-blue-100 rounded-lg">
              <Building className="h-6 w-6 text-blue-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">Equity Funding</h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Connect with venture capitalists, angel investors, and equity partners to fuel your company's growth.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-green-100 rounded-lg"><TrendingUp className="h-5 w-5 text-green-600" /></div>
              <div><p className="text-2xl font-bold text-gray-900">$2.4B</p><p className="text-sm text-gray-600">Total Funding Available</p></div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-100 rounded-lg"><Users className="h-5 w-5 text-blue-600" /></div>
              <div><p className="text-2xl font-bold text-gray-900">127</p><p className="text-sm text-gray-600">Active Investors</p></div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-purple-100 rounded-lg"><Award className="h-5 w-5 text-purple-600" /></div>
              <div><p className="text-2xl font-bold text-gray-900">73%</p><p className="text-sm text-gray-600">Success Rate</p></div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-orange-100 rounded-lg"><Clock className="h-5 w-5 text-orange-600" /></div>
              <div><p className="text-2xl font-bold text-gray-900">45</p><p className="text-sm text-gray-600">Days Avg. Close</p></div>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6 mb-8">
          <div className="pb-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold flex items-center gap-2"><Filter className="h-5 w-5" /> Find Your Perfect Match</h3>
            <p className="text-sm text-gray-500">Use filters to find investors that align with your business needs</p>
          </div>
          <div className="pt-4 space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Search Investors</label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <input 
                    placeholder="Search by name or industry..." 
                    value={searchQuery} 
                    onChange={(e) => setSearchQuery(e.target.value)} 
                    className="pl-10 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Funding Stage</label>
                <select 
                  value={selectedStage} 
                  onChange={(e) => setSelectedStage(e.target.value)} 
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {stages.map(stage => (<option key={stage.value} value={stage.value}>{stage.label}</option>))}
                </select>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Funding Range: {formatCurrency(fundingRange[0])} - {formatCurrency(fundingRange[1])}
              </label>
              <div className="flex items-center gap-4">
                <input 
                  type="number" 
                  value={fundingRange[0]} 
                  onChange={e => setFundingRange([+e.target.value, fundingRange[1]])} 
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <span>-</span>
                <input 
                  type="number" 
                  value={fundingRange[1]} 
                  onChange={e => setFundingRange([fundingRange[0], +e.target.value])} 
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Industries</label>
              <div className="flex flex-wrap gap-2">
                {industries.map(industry => (
                  <button 
                    key={industry} 
                    onClick={() => {
                      setSelectedIndustries(prev => 
                        prev.includes(industry) ? prev.filter(i => i !== industry) : [...prev, industry]
                      );
                    }} 
                    className={`cursor-pointer px-3 py-1 rounded-full text-sm border transition-colors ${
                      selectedIndustries.includes(industry) 
                        ? 'bg-blue-600 text-white border-blue-600' 
                        : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                    }`}
                  >
                    {industry}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>

        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-gray-900">{filteredInvestors.length} Investors Found</h2>
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <span>Sorted by Match Score</span>
              <TrendingUp className="h-4 w-4" />
            </div>
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredInvestors.map(investor => (
              <div key={investor.id} className="bg-white rounded-lg shadow hover:shadow-lg transition-shadow">
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <img src={investor.logo} alt={investor.name} className="w-12 h-12 rounded-lg object-cover" />
                      <div>
                        <h3 className="text-lg font-semibold">{investor.name}</h3>
                        <p className="text-sm text-gray-500 capitalize">
                          {investor.type === 'vc' ? 'Venture Capital' : investor.type === 'angel' ? 'Angel Investor' : 'Private Equity'}
                        </p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="flex items-center gap-1 mb-1">
                        <Star className="h-4 w-4 text-yellow-500 fill-current" />
                        <span className="text-sm font-medium">{investor.matchScore}% Match</span>
                      </div>
                      <div className="w-20 h-2 bg-gray-200 rounded-full overflow-hidden">
                        <div className="h-full bg-blue-500" style={{width: `${investor.matchScore}%`}}></div>
                      </div>
                    </div>
                  </div>
                  <p className="text-gray-600 mb-4 text-sm">{investor.description}</p>
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <p className="text-sm font-medium text-gray-700">Investment Range</p>
                      <p className="text-sm text-gray-600">{formatCurrency(investor.minInvestment)} - {formatCurrency(investor.maxInvestment)}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">Portfolio Size</p>
                      <p className="text-sm text-gray-600">{investor.portfolio} companies</p>
                    </div>
                  </div>
                  <div className="mb-4">
                    <p className="text-sm font-medium text-gray-700 mb-2">Industries</p>
                    <div className="flex flex-wrap gap-1">
                      {investor.industries.slice(0, 3).map(industry => (
                        <span key={industry} className="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full">{industry}</span>
                      ))}
                    </div>
                  </div>
                </div>
                <div className="p-6 bg-gray-50 rounded-b-lg flex gap-2">
                  <button 
                    onClick={() => addToast(`Opening ${investor.name} profile...`, 'info')}
                    className="flex-1 inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700"
                  >
                    <ExternalLink className="h-4 w-4 mr-2" />View Profile
                  </button>
                  <button 
                    onClick={() => addToast(`Connection request sent to ${investor.name}!`, 'success')}
                    className="flex-1 inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50"
                  >
                    <Users className="h-4 w-4 mr-2" />Connect
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="mt-8 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow">
          <div className="p-8 text-center">
            <h3 className="text-2xl font-bold mb-4">Ready to Raise Equity?</h3>
            <p className="text-blue-100 mb-6 max-w-2xl mx-auto">
              Get matched with the right investors for your startup. Our AI-powered platform analyzes your business and connects you with investors who are actively looking for companies like yours.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button 
                onClick={() => addToast('Starting matching process...', 'info')}
                className="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-blue-600 bg-white hover:bg-blue-50"
              >
                <Zap className="h-5 w-5 mr-2" />Start Matching
              </button>
              <button 
                onClick={() => addToast('Learn more feature coming soon!', 'info')}
                className="inline-flex items-center justify-center px-6 py-3 border border-white text-base font-medium rounded-md shadow-sm text-white hover:bg-white hover:text-blue-600"
              >
                <HelpCircle className="h-5 w-5 mr-2" />Learn More
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EquityApp;


=== FILE: client/src/features/ecosystem-hub/types/index.ts ===

import React from 'react';

export type ToastType = 'success' | 'error' | 'info';

export interface ToastMessage {
  id: number;
  message: string;
  type: ToastType;
}

export type HubModule = 'studio' | 'accelerators' | 'incubators' | 'competitions';

export type PlatformTab = 'platform' | 'methodology' | 'competitors' | 'pricing';

export type Mode = 'fast-track' | 'validated';

export interface Assumption {
  id: string;
  text: string;
  risk: 'high' | 'medium' | 'low';
  status: 'untested' | 'validated' | 'invalidated';
  sourceSection: string;
}

export interface PhaseStep {
  id: string;
  title: string;
  description: string;
  tool: string;
}

export interface Phase {
  name: string;
  icon: React.ComponentType<any>;
  color: string;
  description: string;
  methodology: string;
  steps: PhaseStep[];
}

export type Phases = Record<string, Phase>;

export interface Tool {
  name: string;
  description: string;
  outputs: string[];
}

export type Tools = Record<string, Tool>;

export interface PivotType {
  id: string;
  name: string;
  description: string;
}

export interface CompetitorRow {
  feature: string;
  iterativePlans: string;
  growthWheel: string;
  venturePlanner: string;
  livePlan: string;
}

export interface PricingTier {
  name: string;
  price: string;
  description: string;
  features: string[];
  cta: string;
  highlighted: boolean;
}


=== FILE: client/src/features/ecosystem-hub/EcosystemHubApp.tsx ===

import React, { useState, useCallback } from 'react';
import HubHeader from './components/HubHeader';
import Footer from './components/Footer';
import StudioApp from './modules/studio/StudioApp';
import AcceleratorsApp from './modules/accelerators/AcceleratorsApp';
import IncubatorsApp from './modules/incubators/IncubatorsApp';
import CompetitionsApp from './modules/competitions/CompetitionsApp';
import { Toaster } from './components/Toaster';
import { ToastMessage, ToastType, HubModule } from './types';

const EcosystemHubApp: React.FC = () => {
  const [activeHub, setActiveHub] = useState<HubModule>('studio');
  const [toasts, setToasts] = useState<ToastMessage[]>([]);

  const addToast = useCallback((message: string, type: ToastType) => {
    const id = Date.now();
    setToasts(prev => [...prev, { message, type, id }]);
  }, []);

  const removeToast = useCallback((id: number) => {
    setToasts(prev => prev.filter(t => t.id !== id));
  }, []);

  const renderActiveHub = () => {
    switch (activeHub) {
      case 'studio':
        return <StudioApp addToast={addToast} />;
      case 'accelerators':
        return <AcceleratorsApp addToast={addToast} />;
      case 'incubators':
        return <IncubatorsApp addToast={addToast} />;
      case 'competitions':
        return <CompetitionsApp addToast={addToast} />;
      default:
        return <StudioApp addToast={addToast} />;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 text-slate-800 flex flex-col">
      <HubHeader activeHub={activeHub} setActiveHub={setActiveHub} />
      <main className="flex-grow max-w-7xl mx-auto px-6 py-8 w-full">
        {renderActiveHub()}
      </main>
      <Toaster toasts={toasts} removeToast={removeToast} />
      <Footer />
    </div>
  );
};

export default EcosystemHubApp;


=== FILE: client/src/features/ecosystem-hub/components/Toaster.tsx ===

import React from 'react';
import Toast from './Toast';
import { ToastMessage } from '../types';

interface ToasterProps {
  toasts: ToastMessage[];
  removeToast: (id: number) => void;
}

export const Toaster: React.FC<ToasterProps> = ({ toasts, removeToast }) => {
  return (
    <div className="fixed top-24 right-5 z-50 w-full max-w-sm space-y-3">
      {toasts.map(toast => (
        <Toast key={toast.id} toast={toast} onClose={removeToast} />
      ))}
    </div>
  );
};


=== FILE: client/src/features/ecosystem-hub/components/Footer.tsx ===

import React from 'react';
import { Link } from 'wouter';

const Footer: React.FC = () => {
  return (
    <footer className="bg-slate-800 text-white mt-16 py-12">
      <div className="max-w-7xl mx-auto px-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mb-8">
          <div>
            <h3 className="text-xl font-bold mb-4 bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
              IterativStudios
            </h3>
            <p className="text-sm text-slate-400">The comprehensive AI-powered startup ecosystem platform.</p>
          </div>
          <div>
            <h4 className="font-bold mb-3">Ecosystem Hub</h4>
            <ul className="space-y-2 text-sm text-slate-400">
              <li><Link href="#" className="hover:text-white transition-colors">IterativStudios</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">IterativAccelerators</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">IterativIncubators</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">IterativCompetitions</Link></li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold mb-3">Resources</h4>
            <ul className="space-y-2 text-sm text-slate-400">
              <li><Link href="#" className="hover:text-white transition-colors">Blog</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Case Studies</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Methodology</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Certification</Link></li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold mb-3">Company</h4>
            <ul className="space-y-2 text-sm text-slate-400">
              <li><Link href="#" className="hover:text-white transition-colors">About</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Careers</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Partners</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Contact</Link></li>
            </ul>
          </div>
        </div>
        <div className="border-t border-slate-700 pt-8 text-center">
          <p className="text-sm text-slate-400">¬© 2025 IterativStudios Inc. ‚Ä¢ "Where uncertainty becomes strategy."</p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;


=== FILE: client/src/features/ecosystem-hub/components/HubHeader.tsx ===

import React from 'react';
import { Rocket, TrendingUp, Building2, Trophy, Sparkles } from 'lucide-react';
import { HubModule } from '../types';

interface HubHeaderProps {
  activeHub: HubModule;
  setActiveHub: (hub: HubModule) => void;
}

const hubModules = [
  { id: 'studio' as HubModule, label: 'IterativStudios', icon: Rocket },
  { id: 'accelerators' as HubModule, label: 'IterativAccelerators', icon: TrendingUp },
  { id: 'incubators' as HubModule, label: 'IterativIncubators', icon: Building2 },
  { id: 'competitions' as HubModule, label: 'IterativCompetitions', icon: Trophy },
];

const HubHeader: React.FC<HubHeaderProps> = ({ activeHub, setActiveHub }) => {
  return (
    <header className="bg-white/80 border-b border-slate-200 shadow-sm sticky top-0 z-40 backdrop-blur-lg">
      <div className="max-w-7xl mx-auto px-6 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Sparkles className="w-8 h-8 text-purple-600" />
            <div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-600 bg-clip-text text-transparent">
                Ecosystem Hub
              </h1>
              <p className="text-sm text-slate-500">The Startup Ecosystem Platform of IterativStudios</p>
            </div>
          </div>

          <nav className="hidden lg:flex items-center gap-2 bg-slate-100 p-1.5 rounded-full">
            {hubModules.map(mod => {
              const isActive = activeHub === mod.id;
              const Icon = mod.icon;
              return (
                <button
                  key={mod.id}
                  onClick={() => setActiveHub(mod.id)}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full text-sm font-semibold transition-all ${
                    isActive ? 'bg-white text-purple-700 shadow-md' : 'bg-transparent text-slate-600 hover:bg-white/70'
                  }`}
                >
                  <Icon className="w-4 h-4" />
                  {mod.label}
                </button>
              );
            })}
          </nav>

          <div className="flex items-center gap-3">
            <button className="text-slate-600 hover:text-slate-800 font-medium px-4 py-2 rounded-lg transition-colors">
              Sign In
            </button>
            <button className="bg-gradient-to-r from-purple-600 to-blue-600 text-white font-semibold py-2 px-6 rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all shadow-md hover:shadow-lg">
              Start Free
            </button>
          </div>
        </div>
      </div>
    </header>
  );
};

export default HubHeader;


=== FILE: client/src/features/ecosystem-hub/components/Toast.tsx ===

import React, { useEffect } from 'react';
import { X, CheckCircle, AlertTriangle, Info } from 'lucide-react';
import { ToastMessage, ToastType } from '../types';

interface ToastProps {
  toast: ToastMessage;
  onClose: (id: number) => void;
}

const ICONS: Record<ToastType, React.ReactNode> = {
  success: <CheckCircle className="w-6 h-6 text-green-500" />,
  error: <AlertTriangle className="w-6 h-6 text-red-500" />,
  info: <Info className="w-6 h-6 text-blue-500" />,
};

const TOAST_STYLES: Record<ToastType, string> = {
  success: 'bg-green-50 border-green-200 text-green-800',
  error: 'bg-red-50 border-red-200 text-red-800',
  info: 'bg-blue-50 border-blue-200 text-blue-800',
};

const Toast: React.FC<ToastProps> = ({ toast, onClose }) => {
  useEffect(() => {
    const timer = setTimeout(() => {
      onClose(toast.id);
    }, 5000);

    return () => {
      clearTimeout(timer);
    };
  }, [onClose, toast.id]);

  return (
    <div 
      className={`max-w-sm w-full rounded-lg shadow-lg animate-fade-in-up border ${TOAST_STYLES[toast.type]}`}
      role="alert"
      aria-live="assertive"
    >
      <div className="p-4 flex items-start">
        <div className="flex-shrink-0">{ICONS[toast.type]}</div>
        <div className="ml-3 w-0 flex-1 pt-0.5">
          <p className="text-sm font-medium">{toast.message}</p>
        </div>
        <div className="ml-4 flex-shrink-0 flex">
          <button
            onClick={() => onClose(toast.id)}
            className="inline-flex rounded-md p-1.5 text-current/70 hover:bg-current/10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-current/10 focus:ring-current/50"
            aria-label="Close notification"
          >
            <X className="h-5 w-5" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default Toast;


=== FILE: client/src/features/ecosystem-hub/modules/studio/StudioApp.tsx ===

import React from 'react';
import { Rocket, Building, Users, TrendingUp, Lightbulb, Code } from 'lucide-react';
import { ToastType } from '../../types';

interface StudioAppProps {
  addToast: (message: string, type: ToastType) => void;
}

const StudioApp: React.FC<StudioAppProps> = ({ addToast }) => {
  const phases = [
    { name: 'Ideation', icon: Lightbulb, color: 'bg-purple-500', description: 'Generate and vet high-potential venture concepts' },
    { name: 'Validation', icon: Users, color: 'bg-blue-500', description: 'Rigorously validate the problem and solution' },
    { name: 'Build', icon: Code, color: 'bg-yellow-500', description: 'Assemble the team and build the MVP' },
    { name: 'Launch', icon: Rocket, color: 'bg-green-500', description: 'Launch the product and find product-market fit' },
    { name: 'Scale', icon: TrendingUp, color: 'bg-orange-500', description: 'Grow the user base and scale operations' },
    { name: 'Spin-Out', icon: Building, color: 'bg-red-500', description: 'Graduate the company from the studio' },
  ];

  return (
    <div className="space-y-8">
      <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-600 rounded-2xl shadow-2xl p-12 text-white text-center">
        <h2 className="text-5xl font-bold mb-4">The Venture Studio Model</h2>
        <p className="text-xl text-white/90 mb-6 max-w-3xl mx-auto">
          We don't just invest in startups, we build them. Our studio provides ideas, co-founders, and a proven process to turn concepts into category-defining companies.
        </p>
        <div className="flex flex-wrap items-center justify-center gap-4 mb-8">
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Ventures Built</div>
            <div className="text-3xl font-bold">45+</div>
            <div className="text-sm">Since 2020</div>
          </div>
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Total Funding</div>
            <div className="text-3xl font-bold">$2.8B+</div>
            <div className="text-sm">Raised</div>
          </div>
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Success Rate</div>
            <div className="text-3xl font-bold">73%</div>
            <div className="text-sm">Series A+</div>
          </div>
        </div>
        <button 
          onClick={() => addToast('Application process coming soon!', 'info')}
          className="bg-white text-purple-600 font-bold py-4 px-8 rounded-xl hover:bg-slate-50 transition-all text-lg shadow-lg"
        >
          Apply to Build with Us
        </button>
      </div>

      <div className="bg-white rounded-xl shadow-md p-8">
        <h3 className="text-3xl font-bold text-slate-800 mb-6">Venture Build Process</h3>
        <div className="grid grid-cols-2 lg:grid-cols-6 gap-4">
          {phases.map((phase) => {
            const Icon = phase.icon;
            return (
              <div
                key={phase.name}
                className="p-4 rounded-lg bg-slate-50 hover:shadow-md transition-all cursor-pointer"
              >
                <div className="flex flex-col items-center gap-2 text-center">
                  <div className={`${phase.color} p-3 rounded-lg`}>
                    <Icon className="w-8 h-8 text-white" />
                  </div>
                  <span className="font-semibold text-sm">{phase.name}</span>
                  <span className="text-xs text-slate-600">{phase.description}</span>
                </div>
              </div>
            );
          })}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-white rounded-xl shadow-md p-6">
          <h4 className="text-xl font-bold text-slate-800 mb-3">20-50% Equity</h4>
          <p className="text-slate-600">We become your co-founder, taking meaningful equity in exchange for capital and full-stack support.</p>
        </div>
        <div className="bg-white rounded-xl shadow-md p-6">
          <h4 className="text-xl font-bold text-slate-800 mb-3">Dedicated Teams</h4>
          <p className="text-slate-600">Access our engineering, design, product, and go-to-market teams to build faster.</p>
        </div>
        <div className="bg-white rounded-xl shadow-md p-6">
          <h4 className="text-xl font-bold text-slate-800 mb-3">Proven Process</h4>
          <p className="text-slate-600">Follow our battle-tested framework from ideation to Series A and beyond.</p>
        </div>
      </div>
    </div>
  );
};

export default StudioApp;


=== FILE: client/src/features/ecosystem-hub/modules/accelerators/AcceleratorsApp.tsx ===

import React from 'react';
import { Users, BookOpen, Mic, Wallet, TrendingUp, Rocket } from 'lucide-react';
import { ToastType } from '../../types';

interface AcceleratorsAppProps {
  addToast: (message: string, type: ToastType) => void;
}

const AcceleratorsApp: React.FC<AcceleratorsAppProps> = ({ addToast }) => {
  const features = [
    {
      icon: Users,
      title: "Cohort-Based Learning",
      description: "Learn alongside peer startups in structured cohorts.",
      details: "12-15 startups per cohort with weekly group sessions."
    },
    {
      icon: BookOpen,
      title: "Structured Curriculum",
      description: "Proven framework covering all aspects of startup building.",
      details: "12-week program with weekly modules and assignments."
    },
    {
      icon: Mic,
      title: "World-Class Mentorship",
      description: "Access to a network of successful founders and industry experts.",
      details: "Weekly 1-on-1s and office hours with dedicated mentors."
    },
    {
      icon: Wallet,
      title: "Seed Funding",
      description: "Initial capital to fuel your growth and extend your runway.",
      details: "$150k investment for 7% equity."
    },
    {
      icon: TrendingUp,
      title: "Investor Network",
      description: "Connections to top-tier VCs and angel investors at Demo Day.",
      details: "Curated investor list and post-program fundraising support."
    }
  ];

  const schedule = [
    { week: "Week 1-2", title: "Foundation & Vision", deliverable: "Customer Interview Summary" },
    { week: "Week 3-4", title: "Product Development", deliverable: "Product Roadmap" },
    { week: "Week 5-6", title: "Go-to-Market", deliverable: "Initial GTM Plan" },
    { week: "Week 7-8", title: "Metrics & Growth", deliverable: "Growth Dashboard" },
    { week: "Week 9-10", title: "Fundraising Prep", deliverable: "Final Pitch Deck" },
    { week: "Week 11-12", title: "Demo Day & Beyond", deliverable: "Demo Day Pitch" },
  ];

  return (
    <div className="space-y-8">
      <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-600 rounded-2xl shadow-2xl p-12 text-white text-center">
        <h2 className="text-5xl font-bold mb-4">Build, Grow, and Scale Faster</h2>
        <p className="text-xl text-white/90 mb-6 max-w-3xl mx-auto">
          Our accelerator provides the capital, mentorship, and network to help early-stage startups achieve rapid growth and secure follow-on funding.
        </p>
        <div className="flex flex-wrap items-center justify-center gap-4 mb-8">
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Investment</div>
            <div className="text-3xl font-bold">$150K</div>
            <div className="text-sm">For 7% Equity</div>
          </div>
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Duration</div>
            <div className="text-3xl font-bold">12 Weeks</div>
            <div className="text-sm">Intensive Program</div>
          </div>
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Success Rate</div>
            <div className="text-3xl font-bold">85%</div>
            <div className="text-sm">Raise Follow-On</div>
          </div>
        </div>
        <button 
          onClick={() => addToast('Applications opening soon!', 'info')}
          className="bg-white text-purple-600 font-bold py-4 px-8 rounded-xl hover:bg-slate-50 transition-all text-lg shadow-lg inline-flex items-center gap-2"
        >
          <Rocket className="w-6 h-6" />
          Apply Now
        </button>
      </div>

      <div className="bg-white rounded-xl shadow-md p-8">
        <h3 className="text-3xl font-bold text-slate-800 mb-6">12-Week Program Schedule</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {schedule.map((phase) => (
            <div key={phase.week} className="bg-slate-50 p-4 rounded-lg border border-slate-200">
              <p className="text-sm font-semibold text-purple-600">{phase.week}</p>
              <h4 className="font-bold text-slate-800 mt-1">{phase.title}</h4>
              <p className="text-xs font-semibold text-slate-700 mt-3 pt-3 border-t border-slate-200">
                DELIVERABLE: {phase.deliverable}
              </p>
            </div>
          ))}
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-md p-8">
        <h3 className="text-3xl font-bold text-slate-800 mb-6">What We Provide</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {features.map(feature => {
            const Icon = feature.icon;
            return (
              <div key={feature.title} className="bg-white p-6 rounded-lg border-2 border-slate-200 hover:border-purple-400 transition-all">
                <div className="flex items-center gap-3 mb-3">
                  <div className="bg-purple-100 p-2 rounded-lg">
                    <Icon className="w-6 h-6 text-purple-600" />
                  </div>
                  <h3 className="text-xl font-bold text-slate-800">{feature.title}</h3>
                </div>
                <p className="text-slate-600 mb-2">{feature.description}</p>
                <p className="text-sm text-slate-500">{feature.details}</p>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default AcceleratorsApp;


=== FILE: client/src/features/ecosystem-hub/modules/competitions/CompetitionsApp.tsx ===

import React from 'react';
import { Trophy, DollarSign, Users, Award, Target, CheckCircle } from 'lucide-react';
import { ToastType } from '../../types';

interface CompetitionsAppProps {
  addToast: (message: string, type: ToastType) => void;
}

const CompetitionsApp: React.FC<CompetitionsAppProps> = ({ addToast }) => {
  const activeCompetitions = [
    {
      id: 1,
      name: "AI Innovation Challenge 2025",
      prize: "$100,000",
      deadline: "2025-06-30",
      category: "Artificial Intelligence",
      participants: 247,
      status: "Open",
      requirements: ["Working MVP", "AI/ML Focus", "Pitch Deck"],
      benefits: ["Cash Prize", "Mentorship", "Investor Introductions"]
    },
    {
      id: 2,
      name: "Sustainable Tech Grand Prix",
      prize: "$75,000",
      deadline: "2025-05-15",
      category: "Climate Tech",
      participants: 189,
      status: "Open",
      requirements: ["Pre-seed Stage", "Climate Impact", "Team of 2+"],
      benefits: ["Cash Prize", "Accelerator Spot", "Media Coverage"]
    },
    {
      id: 3,
      name: "HealthTech Innovators Cup",
      prize: "$50,000",
      deadline: "2025-07-20",
      category: "Healthcare",
      participants: 156,
      status: "Open",
      requirements: ["Healthcare Focus", "Prototype Ready", "Business Model"],
      benefits: ["Cash Prize", "Pilot Partners", "Regulatory Guidance"]
    }
  ];

  const pastWinners = [
    { year: 2024, company: "NeuralFlow AI", category: "AI/ML", outcome: "Raised $5M Series A" },
    { year: 2024, company: "GreenGrid Energy", category: "Climate", outcome: "Acquired by Tesla" },
    { year: 2023, company: "HealthSync", category: "Healthcare", outcome: "$3M Seed Round" },
  ];

  const benefits = [
    { icon: DollarSign, title: "Cash Prizes", description: "Win up to $100,000 in non-dilutive capital" },
    { icon: Users, title: "Expert Judging", description: "Get feedback from top VCs and industry leaders" },
    { icon: Target, title: "Exposure", description: "Showcase your startup to investors and media" },
    { icon: Award, title: "Accelerator Access", description: "Fast-track admission to our accelerator program" },
  ];

  const formatDeadline = (deadline: string) => {
    const diffDays = Math.ceil((new Date(deadline).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
    if (diffDays < 0) return 'Closed';
    if (diffDays <= 30) return `${diffDays} days left`;
    return `${Math.ceil(diffDays / 30)} months left`;
  };

  return (
    <div className="space-y-8">
      <div className="bg-gradient-to-br from-amber-600 via-orange-600 to-red-600 rounded-2xl shadow-2xl p-12 text-white text-center">
        <h2 className="text-5xl font-bold mb-4">Compete, Win, and Get Discovered</h2>
        <p className="text-xl text-white/90 mb-6 max-w-3xl mx-auto">
          Participate in startup competitions to win cash prizes, gain exposure, and connect with investors and industry leaders.
        </p>
        <div className="flex flex-wrap items-center justify-center gap-4 mb-8">
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Total Prizes</div>
            <div className="text-3xl font-bold">$500K+</div>
            <div className="text-sm">Annually</div>
          </div>
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Active Competitions</div>
            <div className="text-3xl font-bold">12</div>
            <div className="text-sm">This Year</div>
          </div>
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Success Rate</div>
            <div className="text-3xl font-bold">45%</div>
            <div className="text-sm">Raise Capital</div>
          </div>
        </div>
        <button 
          onClick={() => addToast('Browse all competitions!', 'info')}
          className="bg-white text-orange-600 font-bold py-4 px-8 rounded-xl hover:bg-slate-50 transition-all text-lg shadow-lg inline-flex items-center gap-2"
        >
          <Trophy className="w-6 h-6" />
          View All Competitions
        </button>
      </div>

      <div className="bg-white rounded-xl shadow-md p-8">
        <h3 className="text-3xl font-bold text-slate-800 mb-6">Active Competitions</h3>
        <div className="space-y-4">
          {activeCompetitions.map(comp => (
            <div key={comp.id} className="border-2 border-slate-200 rounded-lg p-6 hover:border-orange-400 transition-all">
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h4 className="text-2xl font-bold text-slate-800">{comp.name}</h4>
                    <span className="bg-green-100 text-green-700 text-xs font-semibold px-3 py-1 rounded-full">
                      {comp.status}
                    </span>
                  </div>
                  <p className="text-sm text-slate-500 mb-3">{comp.category}</p>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                    <div>
                      <p className="text-sm font-medium text-slate-700">Prize Pool</p>
                      <p className="text-xl font-bold text-orange-600">{comp.prize}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-slate-700">Deadline</p>
                      <p className="text-sm text-slate-600">{formatDeadline(comp.deadline)}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-slate-700">Participants</p>
                      <p className="text-sm text-slate-600">{comp.participants} teams</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-slate-700">Status</p>
                      <p className="text-sm text-green-600 font-semibold">Applications Open</p>
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm font-medium text-slate-700 mb-2">Requirements:</p>
                      <div className="flex flex-wrap gap-1">
                        {comp.requirements.map(req => (
                          <span key={req} className="text-xs bg-slate-100 text-slate-700 px-2 py-1 rounded-full">
                            {req}
                          </span>
                        ))}
                      </div>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-slate-700 mb-2">Benefits:</p>
                      <div className="flex flex-wrap gap-1">
                        {comp.benefits.map(benefit => (
                          <span key={benefit} className="text-xs bg-orange-100 text-orange-700 px-2 py-1 rounded-full flex items-center gap-1">
                            <CheckCircle className="w-3 h-3" />
                            {benefit}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <button 
                onClick={() => addToast(`Application submitted for ${comp.name}!`, 'success')}
                className="w-full bg-orange-600 text-white font-semibold py-3 rounded-lg hover:bg-orange-700 transition-all flex items-center justify-center gap-2"
              >
                <Trophy className="w-5 h-5" />
                Apply Now
              </button>
            </div>
          ))}
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-md p-8">
        <h3 className="text-3xl font-bold text-slate-800 mb-6">Why Compete?</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {benefits.map(benefit => {
            const Icon = benefit.icon;
            return (
              <div key={benefit.title} className="text-center p-6 bg-slate-50 rounded-lg hover:shadow-md transition-all">
                <div className="bg-orange-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Icon className="w-8 h-8 text-orange-600" />
                </div>
                <h4 className="font-bold text-slate-800 mb-2">{benefit.title}</h4>
                <p className="text-sm text-slate-600">{benefit.description}</p>
              </div>
            );
          })}
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-md p-8">
        <h3 className="text-3xl font-bold text-slate-800 mb-6">Past Winners</h3>
        <div className="space-y-3">
          {pastWinners.map((winner, idx) => (
            <div key={idx} className="flex items-center justify-between p-4 bg-slate-50 rounded-lg">
              <div className="flex items-center gap-4">
                <div className="bg-orange-100 p-3 rounded-lg">
                  <Trophy className="w-6 h-6 text-orange-600" />
                </div>
                <div>
                  <h4 className="font-bold text-slate-800">{winner.company}</h4>
                  <p className="text-sm text-slate-500">{winner.year} ‚Ä¢ {winner.category}</p>
                </div>
              </div>
              <div className="text-right">
                <span className="text-sm font-semibold text-green-600">{winner.outcome}</span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default CompetitionsApp;


=== FILE: client/src/features/ecosystem-hub/modules/incubators/IncubatorsApp.tsx ===

import React from 'react';
import { Building2, Users, Briefcase, FileText, DollarSign, Brain, MapPin, Wifi } from 'lucide-react';
import { ToastType } from '../../types';

interface IncubatorsAppProps {
  addToast: (message: string, type: ToastType) => void;
}

const IncubatorsApp: React.FC<IncubatorsAppProps> = ({ addToast }) => {
  const services = [
    { icon: Building2, title: "Flexible Workspace", description: "Dedicated desks, meeting rooms, and collaborative spaces", included: true },
    { icon: Users, title: "Mentorship Program", description: "Industry experts and successful entrepreneurs", included: true },
    { icon: Briefcase, title: "Business Support", description: "Legal, accounting, and HR services", included: true },
    { icon: FileText, title: "Grant Writing", description: "Assistance with finding and applying for grants", included: false },
    { icon: DollarSign, title: "Investor Network", description: "Introductions to our network of angel investors and VCs", included: false },
    { icon: Brain, title: "Workshops & Training", description: "Regular workshops on various business topics", included: true },
  ];

  const spaces = [
    {
      name: "Main Campus",
      location: "Downtown Tech District",
      capacity: 50,
      currentOccupancy: 38,
      amenities: ["High-speed WiFi", "Meeting Rooms", "Coffee Bar", "Event Space"],
      type: "Co-working Hub"
    },
    {
      name: "BioTech Labs",
      location: "University Research Park",
      capacity: 20,
      currentOccupancy: 15,
      amenities: ["Wet Labs", "Specialized Equipment", "Clean Rooms", "Shared Office"],
      type: "Specialized Lab"
    }
  ];

  const pricingTiers = [
    {
      name: 'Community',
      price: '$99/mo',
      description: 'For individuals needing network and event access',
      features: ['Virtual membership', 'Access to workshops', 'Community Slack channel', 'Event discounts']
    },
    {
      name: 'Resident',
      price: '$499/mo',
      description: 'For startups needing space and core resources',
      features: ['Everything in Community', '24/7 Workspace access', 'Meeting room credits', 'Basic mentorship'],
      highlighted: true
    },
    {
      name: 'Incubate',
      price: 'Custom Equity',
      description: 'For high-potential startups seeking deep support',
      features: ['Everything in Resident', 'Dedicated lead mentor', 'Business support services', 'Investor introductions']
    }
  ];

  return (
    <div className="space-y-8">
      <div className="bg-gradient-to-br from-emerald-600 via-teal-600 to-cyan-600 rounded-2xl shadow-2xl p-12 text-white text-center">
        <h2 className="text-5xl font-bold mb-4">Long-Term Support for Early-Stage Startups</h2>
        <p className="text-xl text-white/90 mb-6 max-w-3xl mx-auto">
          Our incubators provide flexible workspace, mentorship, and business support services to help you build sustainable foundations for growth.
        </p>
        <div className="flex flex-wrap items-center justify-center gap-4 mb-8">
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Duration</div>
            <div className="text-3xl font-bold">6-24 mo</div>
            <div className="text-sm">Flexible Terms</div>
          </div>
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Members</div>
            <div className="text-3xl font-bold">180+</div>
            <div className="text-sm">Active Startups</div>
          </div>
          <div className="bg-white/20 backdrop-blur px-6 py-3 rounded-lg">
            <div className="text-sm text-white/80">Success</div>
            <div className="text-3xl font-bold">68%</div>
            <div className="text-sm">Still Operating</div>
          </div>
        </div>
        <button 
          onClick={() => addToast('Membership applications opening soon!', 'info')}
          className="bg-white text-emerald-600 font-bold py-4 px-8 rounded-xl hover:bg-slate-50 transition-all text-lg shadow-lg"
        >
          Become a Member
        </button>
      </div>

      <div className="bg-white rounded-xl shadow-md p-8">
        <h3 className="text-3xl font-bold text-slate-800 mb-6">Support Services</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {services.map(service => {
            const Icon = service.icon;
            return (
              <div 
                key={service.title} 
                className={`p-6 rounded-lg border-2 ${service.included ? 'border-emerald-200 bg-emerald-50' : 'border-slate-200 bg-slate-50'}`}
              >
                <div className="flex items-center gap-3 mb-3">
                  <Icon className={`w-6 h-6 ${service.included ? 'text-emerald-600' : 'text-slate-400'}`} />
                  <h4 className="font-bold text-slate-800">{service.title}</h4>
                </div>
                <p className="text-sm text-slate-600">{service.description}</p>
                {service.included && (
                  <div className="mt-2 text-xs font-semibold text-emerald-600">‚úì Included</div>
                )}
                {!service.included && (
                  <div className="mt-2 text-xs font-semibold text-slate-500">Available in Premium</div>
                )}
              </div>
            );
          })}
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-md p-8">
        <h3 className="text-3xl font-bold text-slate-800 mb-6">Our Spaces</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {spaces.map(space => (
            <div key={space.name} className="border-2 border-slate-200 rounded-lg p-6 hover:border-emerald-400 transition-all">
              <div className="flex items-start justify-between mb-4">
                <div>
                  <h4 className="text-xl font-bold text-slate-800">{space.name}</h4>
                  <p className="text-sm text-slate-500 flex items-center gap-1 mt-1">
                    <MapPin className="w-4 h-4" />
                    {space.location}
                  </p>
                </div>
                <span className="bg-emerald-100 text-emerald-700 text-xs font-semibold px-3 py-1 rounded-full">
                  {space.type}
                </span>
              </div>
              <div className="mb-4">
                <div className="flex justify-between text-sm mb-2">
                  <span className="text-slate-600">Occupancy</span>
                  <span className="font-semibold">{space.currentOccupancy} / {space.capacity}</span>
                </div>
                <div className="w-full bg-slate-200 rounded-full h-2">
                  <div 
                    className="bg-emerald-500 h-2 rounded-full transition-all" 
                    style={{ width: `${(space.currentOccupancy / space.capacity) * 100}%` }}
                  />
                </div>
              </div>
              <div>
                <p className="text-sm font-medium text-slate-700 mb-2">Amenities:</p>
                <div className="flex flex-wrap gap-2">
                  {space.amenities.map(amenity => (
                    <span key={amenity} className="text-xs bg-slate-100 text-slate-700 px-2 py-1 rounded-full flex items-center gap-1">
                      {amenity === "High-speed WiFi" && <Wifi className="w-3 h-3" />}
                      {amenity}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-md p-8">
        <h3 className="text-3xl font-bold text-slate-800 mb-6 text-center">Membership Tiers</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {pricingTiers.map((tier) => (
            <div 
              key={tier.name} 
              className={`rounded-xl p-6 border-2 transition-all ${tier.highlighted ? 'border-emerald-500 shadow-lg scale-105' : 'border-slate-200'}`}
            >
              {tier.highlighted && (
                <div className="bg-emerald-500 text-white text-xs font-bold px-3 py-1 rounded-full w-fit mb-3">
                  MOST POPULAR
                </div>
              )}
              <h4 className="text-2xl font-bold text-slate-800 mb-2">{tier.name}</h4>
              <div className="text-3xl font-bold text-emerald-600 mb-2">{tier.price}</div>
              <p className="text-sm text-slate-600 mb-4">{tier.description}</p>
              <ul className="space-y-2 mb-6">
                {tier.features.map((feature, i) => (
                  <li key={i} className="text-sm text-slate-700 flex items-start gap-2">
                    <span className="text-emerald-500 mt-0.5">‚úì</span>
                    {feature}
                  </li>
                ))}
              </ul>
              <button 
                onClick={() => addToast(`${tier.name} membership inquiry submitted!`, 'success')}
                className={`w-full py-3 rounded-lg font-semibold transition-all ${tier.highlighted ? 'bg-emerald-600 text-white hover:bg-emerald-700' : 'bg-slate-100 text-slate-700 hover:bg-slate-200'}`}
              >
                {tier.name === 'Community' ? 'Join Now' : tier.name === 'Resident' ? 'Apply' : 'Contact Us'}
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default IncubatorsApp;


=== FILE: client/src/features/documents/ui/MobileResponsiveUI.tsx ===

import React, { useState, useEffect, useCallback } from 'react';
import { BaseDocument } from '../types/document.types';

/**
 * Mobile Responsive UI - Advanced mobile-responsive interface with focus mode
 * 
 * This component provides:
 * - Mobile-responsive design with adaptive layouts
 * - Focus mode for distraction-free editing
 * - Customizable views and themes
 * - Touch-optimized interactions
 * - Progressive web app features
 */
interface MobileResponsiveUIProps {
  document: BaseDocument;
  onDocumentUpdate?: (document: BaseDocument) => void;
  onViewChange?: (view: ViewMode) => void;
  onThemeChange?: (theme: Theme) => void;
  onFocusModeToggle?: (enabled: boolean) => void;
  initialView?: ViewMode;
  initialTheme?: Theme;
  enableFocusMode?: boolean;
  enableCustomization?: boolean;
}

export const MobileResponsiveUI: React.FC<MobileResponsiveUIProps> = ({
  document,
  onDocumentUpdate,
  onViewChange,
  onThemeChange,
  onFocusModeToggle,
  initialView = 'desktop',
  initialTheme = 'light',
  enableFocusMode = true,
  enableCustomization = true
}) => {
  const [viewMode, setViewMode] = useState<ViewMode>(initialView);
  const [theme, setTheme] = useState<Theme>(initialTheme);
  const [focusMode, setFocusMode] = useState(false);
  const [customization, setCustomization] = useState<UICustomization>({
    fontSize: 'medium',
    lineHeight: 'normal',
    spacing: 'normal',
    colors: 'default'
  });
  const [isMobile, setIsMobile] = useState(false);
  const [orientation, setOrientation] = useState<'portrait' | 'landscape'>('portrait');

  // Detect mobile device and orientation
  useEffect(() => {
    const checkDevice = () => {
      const mobile = window.innerWidth <= 768;
      const newOrientation = window.innerHeight > window.innerWidth ? 'portrait' : 'landscape';
      
      setIsMobile(mobile);
      setOrientation(newOrientation);
      
      // Auto-adjust view mode for mobile
      if (mobile && viewMode === 'desktop') {
        setViewMode('mobile');
        onViewChange?.('mobile');
      }
    };

    checkDevice();
    window.addEventListener('resize', checkDevice);
    window.addEventListener('orientationchange', checkDevice);

    return () => {
      window.removeEventListener('resize', checkDevice);
      window.removeEventListener('orientationchange', checkDevice);
    };
  }, [viewMode, onViewChange]);

  // Handle view mode change
  const handleViewModeChange = useCallback((newView: ViewMode) => {
    setViewMode(newView);
    onViewChange?.(newView);
  }, [onViewChange]);

  // Handle theme change
  const handleThemeChange = useCallback((newTheme: Theme) => {
    setTheme(newTheme);
    onThemeChange?.(newTheme);
  }, [onThemeChange]);

  // Handle focus mode toggle
  const handleFocusModeToggle = useCallback(() => {
    const newFocusMode = !focusMode;
    setFocusMode(newFocusMode);
    onFocusModeToggle?.(newFocusMode);
  }, [focusMode, onFocusModeToggle]);

  // Handle customization change
  const handleCustomizationChange = useCallback((newCustomization: Partial<UICustomization>) => {
    setCustomization(prev => ({ ...prev, ...newCustomization }));
  }, []);

  return (
    <div className={`mobile-responsive-ui ${viewMode} ${theme} ${focusMode ? 'focus-mode' : ''}`}>
      {/* Header */}
      <ResponsiveHeader
        document={document}
        viewMode={viewMode}
        theme={theme}
        focusMode={focusMode}
        onViewModeChange={handleViewModeChange}
        onThemeChange={handleThemeChange}
        onFocusModeToggle={handleFocusModeToggle}
        enableFocusMode={enableFocusMode}
        enableCustomization={enableCustomization}
      />

      {/* Main Content */}
      <div className="main-content">
        {focusMode ? (
          <FocusModeEditor
            document={document}
            customization={customization}
            onDocumentUpdate={onDocumentUpdate}
          />
        ) : (
          <ResponsiveEditor
            document={document}
            viewMode={viewMode}
            theme={theme}
            customization={customization}
            onDocumentUpdate={onDocumentUpdate}
            onCustomizationChange={handleCustomizationChange}
            enableCustomization={enableCustomization}
          />
        )}
      </div>

      {/* Mobile Navigation */}
      {isMobile && (
        <MobileNavigation
          viewMode={viewMode}
          onViewModeChange={handleViewModeChange}
        />
      )}

      {/* Customization Panel */}
      {enableCustomization && !focusMode && (
        <CustomizationPanel
          customization={customization}
          onCustomizationChange={handleCustomizationChange}
          theme={theme}
          onThemeChange={handleThemeChange}
        />
      )}
    </div>
  );
};

// Responsive Header Component
interface ResponsiveHeaderProps {
  document: BaseDocument;
  viewMode: ViewMode;
  theme: Theme;
  focusMode: boolean;
  onViewModeChange: (view: ViewMode) => void;
  onThemeChange: (theme: Theme) => void;
  onFocusModeToggle: () => void;
  enableFocusMode: boolean;
  enableCustomization: boolean;
}

const ResponsiveHeader: React.FC<ResponsiveHeaderProps> = ({
  document,
  viewMode,
  theme,
  focusMode,
  onViewModeChange,
  onThemeChange,
  onFocusModeToggle,
  enableFocusMode,
  enableCustomization
}) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  return (
    <header className="responsive-header">
      <div className="header-content">
        {/* Document Title */}
        <div className="document-title">
          <h1>{document.title}</h1>
          <span className="document-type">{document.type}</span>
        </div>

        {/* Header Actions */}
        <div className="header-actions">
          {/* View Mode Selector */}
          <ViewModeSelector
            currentView={viewMode}
            onViewChange={onViewModeChange}
          />

          {/* Theme Selector */}
          <ThemeSelector
            currentTheme={theme}
            onThemeChange={onThemeChange}
          />

          {/* Focus Mode Toggle */}
          {enableFocusMode && (
            <button
              className={`focus-mode-toggle ${focusMode ? 'active' : ''}`}
              onClick={onFocusModeToggle}
              title={focusMode ? 'Exit Focus Mode' : 'Enter Focus Mode'}
            >
              {focusMode ? 'üîç' : 'üìù'}
            </button>
          )}

          {/* Mobile Menu */}
          <button
            className="mobile-menu-toggle"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            ‚ò∞
          </button>
        </div>
      </div>

      {/* Mobile Menu */}
      {isMenuOpen && (
        <MobileMenu
          onClose={() => setIsMenuOpen(false)}
          onViewModeChange={onViewModeChange}
          onThemeChange={onThemeChange}
          onFocusModeToggle={onFocusModeToggle}
          enableFocusMode={enableFocusMode}
          enableCustomization={enableCustomization}
        />
      )}
    </header>
  );
};

// View Mode Selector Component
interface ViewModeSelectorProps {
  currentView: ViewMode;
  onViewChange: (view: ViewMode) => void;
}

const ViewModeSelector: React.FC<ViewModeSelectorProps> = ({
  currentView,
  onViewChange
}) => {
  const viewModes: ViewMode[] = ['desktop', 'tablet', 'mobile'];

  return (
    <div className="view-mode-selector">
      <label>View:</label>
      <select
        value={currentView}
        onChange={(e) => onViewChange(e.target.value as ViewMode)}
      >
        {viewModes.map(view => (
          <option key={view} value={view}>
            {view.charAt(0).toUpperCase() + view.slice(1)}
          </option>
        ))}
      </select>
    </div>
  );
};

// Theme Selector Component
interface ThemeSelectorProps {
  currentTheme: Theme;
  onThemeChange: (theme: Theme) => void;
}

const ThemeSelector: React.FC<ThemeSelectorProps> = ({
  currentTheme,
  onThemeChange
}) => {
  const themes: Theme[] = ['light', 'dark', 'auto'];

  return (
    <div className="theme-selector">
      <label>Theme:</label>
      <select
        value={currentTheme}
        onChange={(e) => onThemeChange(e.target.value as Theme)}
      >
        {themes.map(theme => (
          <option key={theme} value={theme}>
            {theme.charAt(0).toUpperCase() + theme.slice(1)}
          </option>
        ))}
      </select>
    </div>
  );
};

// Mobile Menu Component
interface MobileMenuProps {
  onClose: () => void;
  onViewModeChange: (view: ViewMode) => void;
  onThemeChange: (theme: Theme) => void;
  onFocusModeToggle: () => void;
  enableFocusMode: boolean;
  enableCustomization: boolean;
}

const MobileMenu: React.FC<MobileMenuProps> = ({
  onClose,
  onViewModeChange,
  onThemeChange,
  onFocusModeToggle,
  enableFocusMode,
  enableCustomization
}) => {
  return (
    <div className="mobile-menu">
      <div className="mobile-menu-content">
        <button className="close-button" onClick={onClose}>‚úï</button>
        
        <div className="menu-section">
          <h3>View Mode</h3>
          <ViewModeSelector currentView="desktop" onViewChange={onViewModeChange} />
        </div>

        <div className="menu-section">
          <h3>Theme</h3>
          <ThemeSelector currentTheme="light" onThemeChange={onThemeChange} />
        </div>

        {enableFocusMode && (
          <div className="menu-section">
            <h3>Focus Mode</h3>
            <button onClick={onFocusModeToggle}>Toggle Focus Mode</button>
          </div>
        )}

        {enableCustomization && (
          <div className="menu-section">
            <h3>Customization</h3>
            <p>Customization options available</p>
          </div>
        )}
      </div>
    </div>
  );
};

// Responsive Editor Component
interface ResponsiveEditorProps {
  document: BaseDocument;
  viewMode: ViewMode;
  theme: Theme;
  customization: UICustomization;
  onDocumentUpdate: (document: BaseDocument) => void;
  onCustomizationChange: (customization: Partial<UICustomization>) => void;
  enableCustomization: boolean;
}

const ResponsiveEditor: React.FC<ResponsiveEditorProps> = ({
  document,
  viewMode,
  theme,
  customization,
  onDocumentUpdate,
  onCustomizationChange,
  enableCustomization
}) => {
  return (
    <div className={`responsive-editor ${viewMode} ${theme}`}>
      {/* Editor Toolbar */}
      <EditorToolbar
        document={document}
        onDocumentUpdate={onDocumentUpdate}
        customization={customization}
        onCustomizationChange={onCustomizationChange}
        enableCustomization={enableCustomization}
      />

      {/* Editor Content */}
      <div className="editor-content" style={getCustomizationStyles(customization)}>
        <DocumentEditor
          document={document}
          onDocumentUpdate={onDocumentUpdate}
          viewMode={viewMode}
        />
      </div>

      {/* Sidebar */}
      {viewMode !== 'mobile' && (
        <EditorSidebar
          document={document}
          viewMode={viewMode}
        />
      )}
    </div>
  );
};

// Focus Mode Editor Component
interface FocusModeEditorProps {
  document: BaseDocument;
  customization: UICustomization;
  onDocumentUpdate: (document: BaseDocument) => void;
}

const FocusModeEditor: React.FC<FocusModeEditorProps> = ({
  document,
  customization,
  onDocumentUpdate
}) => {
  return (
    <div className="focus-mode-editor" style={getCustomizationStyles(customization)}>
      <div className="focus-mode-header">
        <h2>{document.title}</h2>
        <div className="focus-mode-stats">
          <span>Words: {getWordCount(document)}</span>
          <span>Characters: {getCharacterCount(document)}</span>
        </div>
      </div>

      <div className="focus-mode-content">
        <DocumentEditor
          document={document}
          onDocumentUpdate={onDocumentUpdate}
          viewMode="focus"
        />
      </div>
    </div>
  );
};

// Editor Toolbar Component
interface EditorToolbarProps {
  document: BaseDocument;
  onDocumentUpdate: (document: BaseDocument) => void;
  customization: UICustomization;
  onCustomizationChange: (customization: Partial<UICustomization>) => void;
  enableCustomization: boolean;
}

const EditorToolbar: React.FC<EditorToolbarProps> = ({
  document,
  onDocumentUpdate,
  customization,
  onCustomizationChange,
  enableCustomization
}) => {
  return (
    <div className="editor-toolbar">
      <div className="toolbar-section">
        <button>Bold</button>
        <button>Italic</button>
        <button>Underline</button>
      </div>

      <div className="toolbar-section">
        <button>Heading 1</button>
        <button>Heading 2</button>
        <button>Paragraph</button>
      </div>

      {enableCustomization && (
        <div className="toolbar-section">
          <CustomizationControls
            customization={customization}
            onCustomizationChange={onCustomizationChange}
          />
        </div>
      )}
    </div>
  );
};

// Customization Controls Component
interface CustomizationControlsProps {
  customization: UICustomization;
  onCustomizationChange: (customization: Partial<UICustomization>) => void;
}

const CustomizationControls: React.FC<CustomizationControlsProps> = ({
  customization,
  onCustomizationChange
}) => {
  return (
    <div className="customization-controls">
      <label>
        Font Size:
        <select
          value={customization.fontSize}
          onChange={(e) => onCustomizationChange({ fontSize: e.target.value as FontSize })}
        >
          <option value="small">Small</option>
          <option value="medium">Medium</option>
          <option value="large">Large</option>
        </select>
      </label>

      <label>
        Line Height:
        <select
          value={customization.lineHeight}
          onChange={(e) => onCustomizationChange({ lineHeight: e.target.value as LineHeight })}
        >
          <option value="tight">Tight</option>
          <option value="normal">Normal</option>
          <option value="loose">Loose</option>
        </select>
      </label>
    </div>
  );
};

// Document Editor Component
interface DocumentEditorProps {
  document: BaseDocument;
  onDocumentUpdate: (document: BaseDocument) => void;
  viewMode: ViewMode;
}

const DocumentEditor: React.FC<DocumentEditorProps> = ({
  document,
  onDocumentUpdate,
  viewMode
}) => {
  const handleContentChange = (content: any) => {
    onDocumentUpdate({
      ...document,
      content,
      updatedAt: new Date()
    });
  };

  return (
    <div className="document-editor">
      <textarea
        value={document.content.data?.content || ''}
        onChange={(e) => handleContentChange({ data: { content: e.target.value } })}
        className={`editor-textarea ${viewMode}`}
        placeholder="Start writing..."
      />
    </div>
  );
};

// Editor Sidebar Component
interface EditorSidebarProps {
  document: BaseDocument;
  viewMode: ViewMode;
}

const EditorSidebar: React.FC<EditorSidebarProps> = ({
  document,
  viewMode
}) => {
  return (
    <div className="editor-sidebar">
      <div className="sidebar-section">
        <h3>Document Info</h3>
        <p>Type: {document.type}</p>
        <p>Status: {document.metadata.status}</p>
        <p>Created: {new Date(document.createdAt).toLocaleDateString()}</p>
        <p>Updated: {new Date(document.updatedAt).toLocaleDateString()}</p>
      </div>

      <div className="sidebar-section">
        <h3>Collaboration</h3>
        <p>Active Users: {document.collaboration.activeUsers.length}</p>
        <p>Comments: {document.collaboration.comments.length}</p>
        <p>Suggestions: {document.collaboration.suggestions.length}</p>
      </div>
    </div>
  );
};

// Mobile Navigation Component
interface MobileNavigationProps {
  viewMode: ViewMode;
  onViewModeChange: (view: ViewMode) => void;
}

const MobileNavigation: React.FC<MobileNavigationProps> = ({
  viewMode,
  onViewModeChange
}) => {
  return (
    <div className="mobile-navigation">
      <button>üìù Edit</button>
      <button>üí¨ Comments</button>
      <button>üë• Share</button>
      <button>‚öôÔ∏è Settings</button>
    </div>
  );
};

// Customization Panel Component
interface CustomizationPanelProps {
  customization: UICustomization;
  onCustomizationChange: (customization: Partial<UICustomization>) => void;
  theme: Theme;
  onThemeChange: (theme: Theme) => void;
}

const CustomizationPanel: React.FC<CustomizationPanelProps> = ({
  customization,
  onCustomizationChange,
  theme,
  onThemeChange
}) => {
  return (
    <div className="customization-panel">
      <h3>Customization</h3>
      
      <div className="customization-group">
        <label>Font Size</label>
        <select
          value={customization.fontSize}
          onChange={(e) => onCustomizationChange({ fontSize: e.target.value as FontSize })}
        >
          <option value="small">Small</option>
          <option value="medium">Medium</option>
          <option value="large">Large</option>
        </select>
      </div>

      <div className="customization-group">
        <label>Line Height</label>
        <select
          value={customization.lineHeight}
          onChange={(e) => onCustomizationChange({ lineHeight: e.target.value as LineHeight })}
        >
          <option value="tight">Tight</option>
          <option value="normal">Normal</option>
          <option value="loose">Loose</option>
        </select>
      </div>

      <div className="customization-group">
        <label>Spacing</label>
        <select
          value={customization.spacing}
          onChange={(e) => onCustomizationChange({ spacing: e.target.value as Spacing })}
        >
          <option value="compact">Compact</option>
          <option value="normal">Normal</option>
          <option value="spacious">Spacious</option>
        </select>
      </div>

      <div className="customization-group">
        <label>Colors</label>
        <select
          value={customization.colors}
          onChange={(e) => onCustomizationChange({ colors: e.target.value as ColorScheme })}
        >
          <option value="default">Default</option>
          <option value="high-contrast">High Contrast</option>
          <option value="sepia">Sepia</option>
        </select>
      </div>
    </div>
  );
};

// Helper functions
const getCustomizationStyles = (customization: UICustomization): React.CSSProperties => {
  return {
    fontSize: customization.fontSize === 'small' ? '14px' : 
              customization.fontSize === 'large' ? '18px' : '16px',
    lineHeight: customization.lineHeight === 'tight' ? '1.2' :
                customization.lineHeight === 'loose' ? '1.8' : '1.5',
    padding: customization.spacing === 'compact' ? '8px' :
             customization.spacing === 'spacious' ? '24px' : '16px'
  };
};

const getWordCount = (document: BaseDocument): number => {
  const content = document.content.data?.content || '';
  return content.split(/\s+/).filter(word => word.length > 0).length;
};

const getCharacterCount = (document: BaseDocument): number => {
  const content = document.content.data?.content || '';
  return content.length;
};

// Type definitions
type ViewMode = 'desktop' | 'tablet' | 'mobile' | 'focus';
type Theme = 'light' | 'dark' | 'auto';
type FontSize = 'small' | 'medium' | 'large';
type LineHeight = 'tight' | 'normal' | 'loose';
type Spacing = 'compact' | 'normal' | 'spacious';
type ColorScheme = 'default' | 'high-contrast' | 'sepia';

interface UICustomization {
  fontSize: FontSize;
  lineHeight: LineHeight;
  spacing: Spacing;
  colors: ColorScheme;
}

export default MobileResponsiveUI;


=== FILE: client/src/features/documents/collaboration/CollaborationEngine.ts ===

import { 
  CollaborationEngine as ICollaborationEngine,
  PresenceManager,
  CommentSystem,
  NotificationService,
  ActivityTracker,
  ActiveUser,
  Comment,
  Suggestion,
  Mention,
  Notification,
  Activity,
  CollaborationSettings,
  CollaborationSession,
  CollaborationEvent,
  CollaborationState,
  ConflictResolution,
  CollaborationAnalytics
} from '../types/collaboration.types';

/**
 * Collaboration Engine - Real-time collaboration for documents
 * 
 * This engine provides:
 * - Real-time presence tracking
 * - Live commenting and suggestions
 * - Conflict resolution
 * - Activity tracking
 * - Notification management
 */
export class CollaborationEngine implements ICollaborationEngine {
  private presenceManager: PresenceManager;
  private commentSystem: CommentSystem;
  private notificationService: NotificationService;
  private activityTracker: ActivityTracker;
  private sessions: Map<string, CollaborationSession> = new Map();
  private eventListeners: Map<string, Function[]> = new Map();
  private settings: CollaborationSettings;

  constructor(
    presenceManager: PresenceManager,
    commentSystem: CommentSystem,
    notificationService: NotificationService,
    activityTracker: ActivityTracker,
    settings: CollaborationSettings
  ) {
    this.presenceManager = presenceManager;
    this.commentSystem = commentSystem;
    this.notificationService = notificationService;
    this.activityTracker = activityTracker;
    this.settings = settings;
  }

  /**
   * Join a document for collaboration
   */
  async joinDocument(documentId: string, userId: string): Promise<void> {
    try {
      // Create collaboration session
      const session: CollaborationSession = {
        id: this.generateSessionId(),
        documentId,
        userId,
        joinedAt: new Date(),
        lastActivity: new Date(),
        cursor: undefined,
        permissions: await this.getUserPermissions(documentId, userId)
      };

      this.sessions.set(session.id, session);

      // Update presence
      await this.presenceManager.updatePresence(userId, documentId, 'online');

      // Track activity
      await this.activityTracker.trackActivity({
        id: this.generateActivityId(),
        type: 'join',
        userId,
        documentId,
        timestamp: new Date(),
        description: 'User joined document',
        metadata: {
          sessionId: session.id
        }
      });

      // Emit join event
      this.emitEvent('user:joined', {
        documentId,
        userId,
        sessionId: session.id,
        timestamp: new Date()
      });

    } catch (error) {
      throw new Error(`Failed to join document: ${error.message}`);
    }
  }

  /**
   * Leave a document
   */
  async leaveDocument(documentId: string, userId: string): Promise<void> {
    try {
      // Find and remove session
      const session = Array.from(this.sessions.values())
        .find(s => s.documentId === documentId && s.userId === userId);

      if (session) {
        this.sessions.delete(session.id);
      }

      // Update presence
      await this.presenceManager.updatePresence(userId, documentId, 'offline');

      // Track activity
      await this.activityTracker.trackActivity({
        id: this.generateActivityId(),
        type: 'leave',
        userId,
        documentId,
        timestamp: new Date(),
        description: 'User left document',
        metadata: {
          sessionId: session?.id
        }
      });

      // Emit leave event
      this.emitEvent('user:left', {
        documentId,
        userId,
        timestamp: new Date()
      });

    } catch (error) {
      throw new Error(`Failed to leave document: ${error.message}`);
    }
  }

  /**
   * Update cursor position
   */
  async updateCursor(
    documentId: string,
    userId: string,
    position: { sectionId: string; offset: number; selection?: any }
  ): Promise<void> {
    try {
      // Find user session
      const session = Array.from(this.sessions.values())
        .find(s => s.documentId === documentId && s.userId === userId);

      if (session) {
        session.cursor = {
          sectionId: position.sectionId,
          offset: position.offset,
          timestamp: new Date(),
          selection: position.selection
        };
        session.lastActivity = new Date();
      }

      // Update presence with cursor
      await this.presenceManager.updatePresence(userId, documentId, 'online');

      // Emit cursor update event
      this.emitEvent('cursor:updated', {
        documentId,
        userId,
        position,
        timestamp: new Date()
      });

    } catch (error) {
      throw new Error(`Failed to update cursor: ${error.message}`);
    }
  }

  /**
   * Add a comment
   */
  async addComment(documentId: string, comment: Comment): Promise<void> {
    try {
      // Validate comment
      if (!comment.content || !comment.author) {
        throw new Error('Comment must have content and author');
      }

      // Add comment
      await this.commentSystem.addComment(comment);

      // Track activity
      await this.activityTracker.trackActivity({
        id: this.generateActivityId(),
        type: 'commented',
        userId: comment.author,
        documentId,
        timestamp: new Date(),
        description: 'User added a comment',
        metadata: {
          commentId: comment.id,
          sectionId: comment.sectionId
        }
      });

      // Send notifications to mentioned users
      if (comment.mentions && comment.mentions.length > 0) {
        for (const mentionedUserId of comment.mentions) {
          await this.notificationService.sendNotification({
            id: this.generateNotificationId(),
            type: 'mention',
            title: 'You were mentioned in a comment',
            message: `${comment.author} mentioned you in a comment`,
            userId: mentionedUserId,
            documentId,
            read: false,
            timestamp: new Date(),
            data: {
              commentId: comment.id,
              author: comment.author
            }
          });
        }
      }

      // Emit comment event
      this.emitEvent('comment:added', {
        documentId,
        comment,
        timestamp: new Date()
      });

    } catch (error) {
      throw new Error(`Failed to add comment: ${error.message}`);
    }
  }

  /**
   * Update a comment
   */
  async updateComment(
    documentId: string,
    commentId: string,
    updates: Partial<Comment>
  ): Promise<void> {
    try {
      await this.commentSystem.updateComment(commentId, updates);

      // Track activity
      await this.activityTracker.trackActivity({
        id: this.generateActivityId(),
        type: 'comment_updated',
        userId: updates.author || '',
        documentId,
        timestamp: new Date(),
        description: 'User updated a comment',
        metadata: {
          commentId,
          changes: Object.keys(updates)
        }
      });

      // Emit comment update event
      this.emitEvent('comment:updated', {
        documentId,
        commentId,
        updates,
        timestamp: new Date()
      });

    } catch (error) {
      throw new Error(`Failed to update comment: ${error.message}`);
    }
  }

  /**
   * Delete a comment
   */
  async deleteComment(documentId: string, commentId: string): Promise<void> {
    try {
      await this.commentSystem.deleteComment(commentId);

      // Track activity
      await this.activityTracker.trackActivity({
        id: this.generateActivityId(),
        type: 'comment_deleted',
        userId: '', // Would need to get from comment
        documentId,
        timestamp: new Date(),
        description: 'User deleted a comment',
        metadata: {
          commentId
        }
      });

      // Emit comment delete event
      this.emitEvent('comment:deleted', {
        documentId,
        commentId,
        timestamp: new Date()
      });

    } catch (error) {
      throw new Error(`Failed to delete comment: ${error.message}`);
    }
  }

  /**
   * Add a suggestion
   */
  async addSuggestion(documentId: string, suggestion: Suggestion): Promise<void> {
    try {
      // Validate suggestion
      if (!suggestion.content || !suggestion.author) {
        throw new Error('Suggestion must have content and author');
      }

      // Add suggestion (would be implemented in suggestion system)
      // await this.suggestionSystem.addSuggestion(suggestion);

      // Track activity
      await this.activityTracker.trackActivity({
        id: this.generateActivityId(),
        type: 'suggested',
        userId: suggestion.author,
        documentId,
        timestamp: new Date(),
        description: 'User added a suggestion',
        metadata: {
          suggestionId: suggestion.id,
          sectionId: suggestion.sectionId
        }
      });

      // Emit suggestion event
      this.emitEvent('suggestion:added', {
        documentId,
        suggestion,
        timestamp: new Date()
      });

    } catch (error) {
      throw new Error(`Failed to add suggestion: ${error.message}`);
    }
  }

  /**
   * Accept a suggestion
   */
  async acceptSuggestion(
    documentId: string,
    suggestionId: string,
    userId: string
  ): Promise<void> {
    try {
      // Accept suggestion (would be implemented in suggestion system)
      // await this.suggestionSystem.acceptSuggestion(suggestionId, userId);

      // Track activity
      await this.activityTracker.trackActivity({
        id: this.generateActivityId(),
        type: 'suggestion_accepted',
        userId,
        documentId,
        timestamp: new Date(),
        description: 'User accepted a suggestion',
        metadata: {
          suggestionId
        }
      });

      // Emit suggestion accept event
      this.emitEvent('suggestion:accepted', {
        documentId,
        suggestionId,
        userId,
        timestamp: new Date()
      });

    } catch (error) {
      throw new Error(`Failed to accept suggestion: ${error.message}`);
    }
  }

  /**
   * Reject a suggestion
   */
  async rejectSuggestion(
    documentId: string,
    suggestionId: string,
    userId: string
  ): Promise<void> {
    try {
      // Reject suggestion (would be implemented in suggestion system)
      // await this.suggestionSystem.rejectSuggestion(suggestionId, userId);

      // Track activity
      await this.activityTracker.trackActivity({
        id: this.generateActivityId(),
        type: 'suggestion_rejected',
        userId,
        documentId,
        timestamp: new Date(),
        description: 'User rejected a suggestion',
        metadata: {
          suggestionId
        }
      });

      // Emit suggestion reject event
      this.emitEvent('suggestion:rejected', {
        documentId,
        suggestionId,
        userId,
        timestamp: new Date()
      });

    } catch (error) {
      throw new Error(`Failed to reject suggestion: ${error.message}`);
    }
  }

  /**
   * Add a mention
   */
  async addMention(documentId: string, mention: Mention): Promise<void> {
    try {
      // Add mention (would be implemented in mention system)
      // await this.mentionSystem.addMention(mention);

      // Send notification
      await this.notificationService.sendNotification({
        id: this.generateNotificationId(),
        type: 'mention',
        title: 'You were mentioned',
        message: `${mention.content}`,
        userId: mention.userId,
        documentId,
        read: false,
        timestamp: new Date(),
        data: {
          mentionId: mention.id
        }
      });

      // Track activity
      await this.activityTracker.trackActivity({
        id: this.generateActivityId(),
        type: 'mentioned',
        userId: mention.userId,
        documentId,
        timestamp: new Date(),
        description: 'User was mentioned',
        metadata: {
          mentionId: mention.id
        }
      });

      // Emit mention event
      this.emitEvent('mention:added', {
        documentId,
        mention,
        timestamp: new Date()
      });

    } catch (error) {
      throw new Error(`Failed to add mention: ${error.message}`);
    }
  }

  /**
   * Mark mention as read
   */
  async markMentionRead(
    documentId: string,
    mentionId: string,
    userId: string
  ): Promise<void> {
    try {
      // Mark mention as read (would be implemented in mention system)
      // await this.mentionSystem.markMentionRead(mentionId, userId);

      // Emit mention read event
      this.emitEvent('mention:read', {
        documentId,
        mentionId,
        userId,
        timestamp: new Date()
      });

    } catch (error) {
      throw new Error(`Failed to mark mention as read: ${error.message}`);
    }
  }

  /**
   * Get active users for a document
   */
  async getActiveUsers(documentId: string): Promise<ActiveUser[]> {
    try {
      return await this.presenceManager.getPresence(documentId);
    } catch (error) {
      throw new Error(`Failed to get active users: ${error.message}`);
    }
  }

  /**
   * Get comments for a document
   */
  async getComments(documentId: string): Promise<Comment[]> {
    try {
      return await this.commentSystem.getComments(documentId);
    } catch (error) {
      throw new Error(`Failed to get comments: ${error.message}`);
    }
  }

  /**
   * Get suggestions for a document
   */
  async getSuggestions(documentId: string): Promise<Suggestion[]> {
    try {
      // Would be implemented in suggestion system
      return [];
    } catch (error) {
      throw new Error(`Failed to get suggestions: ${error.message}`);
    }
  }

  /**
   * Get mentions for a user
   */
  async getMentions(documentId: string, userId: string): Promise<Mention[]> {
    try {
      // Would be implemented in mention system
      return [];
    } catch (error) {
      throw new Error(`Failed to get mentions: ${error.message}`);
    }
  }

  /**
   * Subscribe to collaboration events
   */
  subscribeToEvents(
    documentId: string,
    eventTypes: string[],
    callback: (event: CollaborationEvent) => void
  ): void {
    for (const eventType of eventTypes) {
      const key = `${documentId}:${eventType}`;
      if (!this.eventListeners.has(key)) {
        this.eventListeners.set(key, []);
      }
      this.eventListeners.get(key)!.push(callback);
    }
  }

  /**
   * Unsubscribe from collaboration events
   */
  unsubscribeFromEvents(
    documentId: string,
    eventTypes: string[],
    callback: (event: CollaborationEvent) => void
  ): void {
    for (const eventType of eventTypes) {
      const key = `${documentId}:${eventType}`;
      const listeners = this.eventListeners.get(key);
      if (listeners) {
        const index = listeners.indexOf(callback);
        if (index > -1) {
          listeners.splice(index, 1);
        }
      }
    }
  }

  /**
   * Get collaboration analytics
   */
  async getAnalytics(documentId: string): Promise<CollaborationAnalytics> {
    try {
      const activities = await this.activityTracker.getActivities(documentId);
      const comments = await this.commentSystem.getComments(documentId);
      const suggestions = await this.getSuggestions(documentId);
      const mentions = await this.getMentions(documentId, ''); // Would need user context

      // Calculate analytics
      const totalUsers = new Set(activities.map(a => a.userId)).size;
      const activeUsers = await this.getActiveUsers(documentId);
      
      const userActivity = new Map<string, number>();
      for (const activity of activities) {
        const count = userActivity.get(activity.userId) || 0;
        userActivity.set(activity.userId, count + 1);
      }

      const mostActiveUsers = Array.from(userActivity.entries())
        .map(([userId, activities]) => ({
          userId,
          name: '', // Would need to get from user service
          activities,
          comments: comments.filter(c => c.author === userId).length,
          suggestions: suggestions.filter(s => s.author === userId).length,
          timeSpent: 0, // Would need to calculate from session data
          lastActivity: new Date() // Would need to get from activity data
        }))
        .sort((a, b) => b.activities - a.activities)
        .slice(0, 10);

      const averageSessionTime = this.calculateAverageSessionTime(documentId);
      const collaborationScore = this.calculateCollaborationScore(activities, comments, suggestions);

      return {
        totalUsers,
        activeUsers: activeUsers.length,
        comments: comments.length,
        suggestions: suggestions.length,
        mentions: mentions.length,
        activities: activities.length,
        averageSessionTime,
        mostActiveUsers,
        collaborationScore,
        lastActivity: activities.length > 0 ? activities[activities.length - 1].timestamp : new Date()
      };

    } catch (error) {
      throw new Error(`Failed to get collaboration analytics: ${error.message}`);
    }
  }

  /**
   * Resolve conflicts
   */
  async resolveConflicts(
    documentId: string,
    conflicts: ConflictResolution[]
  ): Promise<void> {
    try {
      for (const conflict of conflicts) {
        // Implement conflict resolution logic
        // This would depend on the specific conflict type and resolution strategy
        
        // Track conflict resolution activity
        await this.activityTracker.trackActivity({
          id: this.generateActivityId(),
          type: 'conflict_resolved',
          userId: conflict.resolvedBy,
          documentId,
          timestamp: new Date(),
          description: 'Conflict resolved',
          metadata: {
            conflictId: conflict.documentId,
            resolution: conflict.resolution
          }
        });

        // Emit conflict resolution event
        this.emitEvent('conflict:resolved', {
          documentId,
          conflict,
          timestamp: new Date()
        });
      }

    } catch (error) {
      throw new Error(`Failed to resolve conflicts: ${error.message}`);
    }
  }

  // Private helper methods
  private async getUserPermissions(documentId: string, userId: string): Promise<string[]> {
    // Would implement permission checking logic
    return ['view', 'comment', 'suggest'];
  }

  private generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateActivityId(): string {
    return `activity_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateNotificationId(): string {
    return `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private emitEvent(eventType: string, data: any): void {
    const listeners = this.eventListeners.get(eventType);
    if (listeners) {
      for (const listener of listeners) {
        try {
          listener({
            type: eventType,
            documentId: data.documentId,
            userId: data.userId,
            timestamp: data.timestamp,
            data
          });
        } catch (error) {
          console.error('Error in event listener:', error);
        }
      }
    }
  }

  private calculateAverageSessionTime(documentId: string): number {
    // Would calculate from session data
    return 0;
  }

  private calculateCollaborationScore(
    activities: Activity[],
    comments: Comment[],
    suggestions: Suggestion[]
  ): number {
    // Simple scoring algorithm
    const activityScore = Math.min(activities.length * 2, 50);
    const commentScore = Math.min(comments.length * 5, 30);
    const suggestionScore = Math.min(suggestions.length * 10, 20);
    
    return Math.min(activityScore + commentScore + suggestionScore, 100);
  }
}


=== FILE: client/src/features/documents/types/workflow.types.ts ===

// Workflow-specific types for document system

export interface WorkflowEngine {
  createWorkflow(workflow: Workflow): Promise<Workflow>;
  updateWorkflow(workflowId: string, updates: Partial<Workflow>): Promise<Workflow>;
  deleteWorkflow(workflowId: string): Promise<void>;
  startWorkflow(workflowId: string, documentId: string, userId: string): Promise<WorkflowInstance>;
  completeStep(instanceId: string, stepId: string, userId: string, data?: any): Promise<void>;
  skipStep(instanceId: string, stepId: string, userId: string, reason?: string): Promise<void>;
  cancelWorkflow(instanceId: string, userId: string, reason?: string): Promise<void>;
  getWorkflow(workflowId: string): Promise<Workflow>;
  getWorkflowInstance(instanceId: string): Promise<WorkflowInstance>;
  getUserWorkflows(userId: string): Promise<Workflow[]>;
  getActiveInstances(documentId: string): Promise<WorkflowInstance[]>;
  getWorkflowTemplates(): Promise<WorkflowTemplate[]>;
  createWorkflowTemplate(template: WorkflowTemplate): Promise<WorkflowTemplate>;
}

export interface Workflow {
  id: string;
  name: string;
  description: string;
  type: WorkflowType;
  steps: WorkflowStep[];
  triggers: WorkflowTrigger[];
  settings: WorkflowSettings;
  isActive: boolean;
  createdBy: string;
  createdAt: Date;
  updatedAt: Date;
  version: string;
}

export interface WorkflowStep {
  id: string;
  name: string;
  description: string;
  type: StepType;
  assignee: StepAssignee;
  dueDate: Date | null;
  required: boolean;
  parallel: boolean;
  conditions: WorkflowCondition[];
  actions: WorkflowAction[];
  notifications: NotificationConfig[];
  settings: StepSettings;
  order: number;
}

export type WorkflowType = 
  | 'approval' 
  | 'review' 
  | 'signature' 
  | 'notification' 
  | 'ai-analysis' 
  | 'custom';

export type StepType = 
  | 'review' 
  | 'approval' 
  | 'signature' 
  | 'notification' 
  | 'ai-analysis' 
  | 'data-collection' 
  | 'decision' 
  | 'parallel' 
  | 'merge';

export interface StepAssignee {
  type: 'user' | 'role' | 'group' | 'dynamic';
  value: string;
  fallback?: string;
}

export interface WorkflowCondition {
  id: string;
  field: string;
  operator: ConditionOperator;
  value: any;
  logicalOperator?: 'AND' | 'OR';
}

export type ConditionOperator = 
  | 'equals' 
  | 'not_equals' 
  | 'contains' 
  | 'not_contains' 
  | 'greater_than' 
  | 'less_than' 
  | 'greater_than_or_equal' 
  | 'less_than_or_equal' 
  | 'in' 
  | 'not_in' 
  | 'is_empty' 
  | 'is_not_empty';

export interface WorkflowAction {
  id: string;
  type: ActionType;
  name: string;
  description: string;
  parameters: Record<string, any>;
  conditions?: WorkflowCondition[];
}

export type ActionType = 
  | 'update_field' 
  | 'send_notification' 
  | 'create_task' 
  | 'update_status' 
  | 'assign_user' 
  | 'send_email' 
  | 'webhook' 
  | 'ai_analysis' 
  | 'approval' 
  | 'rejection';

export interface NotificationConfig {
  type: 'email' | 'push' | 'in-app';
  template: string;
  recipients: string[];
  conditions?: WorkflowCondition[];
}

export interface StepSettings {
  allowDelegation: boolean;
  allowComments: boolean;
  allowAttachments: boolean;
  requireJustification: boolean;
  autoAdvance: boolean;
  timeout?: number;
  retryCount?: number;
}

export interface WorkflowTrigger {
  id: string;
  type: TriggerType;
  conditions: WorkflowCondition[];
  actions: WorkflowAction[];
}

export type TriggerType = 
  | 'manual' 
  | 'automatic' 
  | 'scheduled' 
  | 'event' 
  | 'webhook';

export interface WorkflowSettings {
  allowParallel: boolean;
  allowSkipping: boolean;
  allowCancellation: boolean;
  timeout: number;
  retryCount: number;
  escalation: EscalationConfig;
  notifications: NotificationSettings;
  permissions: WorkflowPermissions;
}

export interface EscalationConfig {
  enabled: boolean;
  delay: number;
  action: 'reassign' | 'notify' | 'escalate' | 'cancel';
  recipients: string[];
}

export interface NotificationSettings {
  enabled: boolean;
  types: NotificationType[];
  frequency: 'immediate' | 'hourly' | 'daily';
  templates: Record<string, string>;
}

export interface WorkflowPermissions {
  canStart: string[];
  canApprove: string[];
  canReject: string[];
  canDelegate: string[];
  canCancel: string[];
  canView: string[];
}

export type NotificationType = 
  | 'workflow_started' 
  | 'step_assigned' 
  | 'step_completed' 
  | 'workflow_completed' 
  | 'workflow_cancelled' 
  | 'step_overdue' 
  | 'escalation';

// Workflow instances
export interface WorkflowInstance {
  id: string;
  workflowId: string;
  documentId: string;
  status: WorkflowStatus;
  currentStep: string;
  startedBy: string;
  startedAt: Date;
  completedAt?: Date;
  cancelledAt?: Date;
  cancelledBy?: string;
  cancellationReason?: string;
  steps: WorkflowStepInstance[];
  data: Record<string, any>;
  history: WorkflowHistory[];
}

export type WorkflowStatus = 
  | 'pending' 
  | 'in-progress' 
  | 'completed' 
  | 'cancelled' 
  | 'failed' 
  | 'paused';

export interface WorkflowStepInstance {
  id: string;
  stepId: string;
  status: StepStatus;
  assignee: string;
  assignedAt: Date;
  startedAt?: Date;
  completedAt?: Date;
  dueDate?: Date;
  data: Record<string, any>;
  comments: StepComment[];
  attachments: string[];
  actions: StepAction[];
}

export type StepStatus = 
  | 'pending' 
  | 'in-progress' 
  | 'completed' 
  | 'skipped' 
  | 'overdue' 
  | 'failed';

export interface StepComment {
  id: string;
  content: string;
  author: string;
  timestamp: Date;
  type: 'comment' | 'approval' | 'rejection' | 'delegation';
}

export interface StepAction {
  id: string;
  type: string;
  data: any;
  timestamp: Date;
  userId: string;
}

export interface WorkflowHistory {
  id: string;
  action: string;
  userId: string;
  timestamp: Date;
  data: any;
  description: string;
}

// Workflow templates
export interface WorkflowTemplate {
  id: string;
  name: string;
  description: string;
  type: WorkflowType;
  category: string;
  steps: WorkflowStepTemplate[];
  settings: WorkflowSettings;
  isPublic: boolean;
  createdBy: string;
  createdAt: Date;
  updatedAt: Date;
  usageCount: number;
  rating: number;
  tags: string[];
}

export interface WorkflowStepTemplate {
  id: string;
  name: string;
  description: string;
  type: StepType;
  assigneeRole: string;
  dueDateOffset: number;
  required: boolean;
  parallel: boolean;
  conditions: WorkflowCondition[];
  actions: WorkflowAction[];
  notifications: NotificationConfig[];
  settings: StepSettings;
  order: number;
}

// Workflow analytics
export interface WorkflowAnalytics {
  totalWorkflows: number;
  activeInstances: number;
  completedInstances: number;
  cancelledInstances: number;
  averageCompletionTime: number;
  stepAnalytics: StepAnalytics[];
  userAnalytics: UserWorkflowAnalytics[];
  performanceMetrics: PerformanceMetrics;
}

export interface StepAnalytics {
  stepId: string;
  stepName: string;
  totalInstances: number;
  completedInstances: number;
  averageCompletionTime: number;
  overdueCount: number;
  skippedCount: number;
  failureRate: number;
}

export interface UserWorkflowAnalytics {
  userId: string;
  name: string;
  workflowsStarted: number;
  workflowsCompleted: number;
  stepsCompleted: number;
  averageCompletionTime: number;
  overdueCount: number;
  efficiencyScore: number;
}

export interface PerformanceMetrics {
  averageWorkflowTime: number;
  completionRate: number;
  overdueRate: number;
  cancellationRate: number;
  userSatisfaction: number;
  systemUptime: number;
}

// Workflow events
export interface WorkflowEvent {
  id: string;
  type: WorkflowEventType;
  workflowId: string;
  instanceId?: string;
  stepId?: string;
  userId: string;
  timestamp: Date;
  data: any;
  description: string;
}

export type WorkflowEventType = 
  | 'workflow_created' 
  | 'workflow_updated' 
  | 'workflow_deleted' 
  | 'workflow_started' 
  | 'workflow_completed' 
  | 'workflow_cancelled' 
  | 'step_started' 
  | 'step_completed' 
  | 'step_skipped' 
  | 'step_overdue' 
  | 'step_delegated' 
  | 'escalation_triggered';

// Workflow validation
export interface WorkflowValidation {
  valid: boolean;
  errors: ValidationError[];
  warnings: ValidationWarning[];
}

export interface ValidationError {
  field: string;
  message: string;
  severity: 'error' | 'warning';
}

export interface ValidationWarning {
  field: string;
  message: string;
  suggestion: string;
}

// Workflow permissions
export interface WorkflowPermission {
  id: string;
  userId: string;
  workflowId: string;
  permissions: string[];
  grantedBy: string;
  grantedAt: Date;
  expiresAt?: Date;
}

export type WorkflowPermissionType = 
  | 'view' 
  | 'edit' 
  | 'start' 
  | 'approve' 
  | 'reject' 
  | 'delegate' 
  | 'cancel' 
  | 'admin';


=== FILE: client/src/features/documents/types/search.types.ts ===

import { BaseDocument, DocumentType } from './document.types';

/**
 * Search Types - Comprehensive type definitions for search functionality
 */

export interface SearchQuery {
  text: string;
  filters?: DocumentFilters;
  options?: SearchOptions;
}

export interface SearchOptions {
  limit?: number;
  fields?: string[];
  fuzzy?: boolean;
  highlight?: boolean;
  similarityThreshold?: number;
  includeMetadata?: boolean;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

export interface SearchResult {
  documents: BaseDocument[];
  total: number;
  facets: SearchFacets;
  suggestions: SearchSuggestion[];
  query: string;
  processingTime: number;
  metadata: SearchMetadata;
}

export interface SearchFacets {
  documentTypes: Record<string, number>;
  dateRanges: Record<string, number>;
  authors: Record<string, number>;
  tags: Record<string, number>;
  categories: Record<string, number>;
  status: Record<string, number>;
  visibility: Record<string, number>;
}

export interface SearchSuggestion {
  text: string;
  type: 'query' | 'filter' | 'facet' | 'entity';
  confidence: number;
  metadata?: SuggestionMetadata;
}

export interface SuggestionMetadata {
  category?: string;
  entityType?: string;
  popularity?: number;
  lastUsed?: Date;
}

export interface DocumentFilters {
  documentTypes?: DocumentType[];
  dateRange?: DateRange;
  content?: ContentFilter;
  metadata?: MetadataFilter;
  permissions?: PermissionFilter;
  aiGenerated?: boolean;
  collaboration?: CollaborationFilter;
  custom?: CustomFilter[];
}

export interface DateRange {
  start: Date;
  end: Date;
}

export interface ContentFilter {
  contains?: string;
  notContains?: string;
  minLength?: number;
  maxLength?: number;
  language?: string;
  format?: string;
}

export interface MetadataFilter {
  category?: string;
  tags?: string[];
  status?: string;
  visibility?: string;
  priority?: string;
  department?: string;
}

export interface PermissionFilter {
  userId?: string;
  role?: string;
  permission?: string;
  group?: string;
}

export interface CollaborationFilter {
  hasComments?: boolean;
  hasSuggestions?: boolean;
  activeUsers?: string[];
  lastActivity?: DateRange;
  commentCount?: NumberRange;
}

export interface NumberRange {
  min: number;
  max: number;
}

export interface CustomFilter {
  field: string;
  operator: FilterOperator;
  value: any;
  caseSensitive?: boolean;
}

export type FilterOperator = 
  | 'equals' 
  | 'notEquals'
  | 'contains' 
  | 'notContains'
  | 'startsWith'
  | 'endsWith'
  | 'greaterThan' 
  | 'lessThan'
  | 'greaterThanOrEqual'
  | 'lessThanOrEqual'
  | 'in'
  | 'notIn'
  | 'exists'
  | 'notExists';

export interface SearchMetadata {
  vectorResults: number;
  textResults: number;
  queryAnalysis: QueryAnalysis;
  searchStrategy: string;
  cacheHit?: boolean;
  indexVersion?: string;
}

export interface QueryAnalysis {
  intent: string;
  entities: string[];
  synonyms: string[];
  confidence: number;
  language?: string;
  sentiment?: 'positive' | 'negative' | 'neutral';
  complexity?: 'simple' | 'moderate' | 'complex';
}

export interface SearchInsight {
  type: InsightType;
  description: string;
  confidence: number;
  metadata?: InsightMetadata;
}

export type InsightType = 
  | 'trend'
  | 'pattern'
  | 'anomaly'
  | 'recommendation'
  | 'warning'
  | 'opportunity';

export interface InsightMetadata {
  category?: string;
  severity?: 'low' | 'medium' | 'high';
  actionable?: boolean;
  relatedQueries?: string[];
}

export interface SearchRecommendation {
  type: RecommendationType;
  suggestion: string;
  confidence: number;
  metadata?: RecommendationMetadata;
}

export type RecommendationType = 
  | 'query_refinement'
  | 'filter_suggestion'
  | 'related_search'
  | 'content_suggestion'
  | 'workflow_suggestion';

export interface RecommendationMetadata {
  category?: string;
  priority?: number;
  relatedQueries?: string[];
  userHistory?: boolean;
}

export interface SearchAnalytics {
  totalSearches: number;
  averageResponseTime: number;
  popularQueries: PopularQuery[];
  searchTrends: SearchTrend[];
  userBehavior: UserBehavior;
  performanceMetrics: PerformanceMetrics;
  recommendations: string[];
}

export interface PopularQuery {
  query: string;
  count: number;
  lastUsed: Date;
  successRate: number;
  averageResponseTime: number;
}

export interface SearchTrend {
  date: Date;
  searches: number;
  uniqueUsers: number;
  averageResponseTime: number;
  topQueries: string[];
}

export interface UserBehavior {
  searchFrequency: number;
  averageSessionLength: number;
  preferredFilters: string[];
  commonQueries: string[];
  searchPatterns: SearchPattern[];
}

export interface SearchPattern {
  pattern: string;
  frequency: number;
  successRate: number;
  userCount: number;
}

export interface PerformanceMetrics {
  averageResponseTime: number;
  cacheHitRate: number;
  indexSize: number;
  queryComplexity: QueryComplexity;
  optimizationOpportunities: OptimizationOpportunity[];
}

export interface QueryComplexity {
  simple: number;
  moderate: number;
  complex: number;
  averageComplexity: number;
}

export interface OptimizationOpportunity {
  type: OptimizationType;
  description: string;
  potentialImprovement: number;
  effort: 'low' | 'medium' | 'high';
}

export type OptimizationType = 
  | 'index_optimization'
  | 'cache_optimization'
  | 'query_optimization'
  | 'result_ranking'
  | 'facet_optimization';

export interface SearchIndex {
  id: string;
  name: string;
  type: IndexType;
  status: IndexStatus;
  createdAt: Date;
  updatedAt: Date;
  documentCount: number;
  size: number;
  metadata: IndexMetadata;
}

export type IndexType = 
  | 'vector'
  | 'text'
  | 'hybrid'
  | 'semantic'
  | 'fulltext';

export type IndexStatus = 
  | 'active'
  | 'building'
  | 'paused'
  | 'error'
  | 'maintenance';

export interface IndexMetadata {
  version: string;
  configuration: IndexConfiguration;
  statistics: IndexStatistics;
  health: IndexHealth;
}

export interface IndexConfiguration {
  fields: IndexField[];
  analyzers: AnalyzerConfiguration[];
  filters: FilterConfiguration[];
  boost: BoostConfiguration;
}

export interface IndexField {
  name: string;
  type: FieldType;
  indexed: boolean;
  stored: boolean;
  analyzed: boolean;
  boost: number;
}

export type FieldType = 
  | 'text'
  | 'keyword'
  | 'number'
  | 'date'
  | 'boolean'
  | 'geo'
  | 'vector';

export interface AnalyzerConfiguration {
  name: string;
  type: AnalyzerType;
  configuration: any;
}

export type AnalyzerType = 
  | 'standard'
  | 'keyword'
  | 'whitespace'
  | 'stop'
  | 'stemmer'
  | 'custom';

export interface FilterConfiguration {
  name: string;
  type: FilterType;
  configuration: any;
}

export type FilterType = 
  | 'lowercase'
  | 'uppercase'
  | 'trim'
  | 'stop'
  | 'stemmer'
  | 'synonym'
  | 'custom';

export interface BoostConfiguration {
  fieldBoosts: Record<string, number>;
  queryBoosts: Record<string, number>;
  functionBoosts: FunctionBoost[];
}

export interface FunctionBoost {
  function: BoostFunction;
  weight: number;
  parameters: any;
}

export type BoostFunction = 
  | 'recency'
  | 'popularity'
  | 'relevance'
  | 'custom';

export interface IndexStatistics {
  documentCount: number;
  fieldCount: number;
  termCount: number;
  size: number;
  lastUpdated: Date;
  updateFrequency: number;
}

export interface IndexHealth {
  status: HealthStatus;
  score: number;
  issues: HealthIssue[];
  recommendations: string[];
}

export type HealthStatus = 
  | 'healthy'
  | 'warning'
  | 'critical'
  | 'unknown';

export interface HealthIssue {
  type: IssueType;
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  impact: string;
  resolution: string;
}

export type IssueType = 
  | 'performance'
  | 'storage'
  | 'configuration'
  | 'data_quality'
  | 'security';

export interface SearchConfiguration {
  defaultLimit: number;
  maxLimit: number;
  defaultFields: string[];
  highlightFields: string[];
  suggestFields: string[];
  facetFields: string[];
  sortOptions: SortOption[];
  filterOptions: FilterOption[];
}

export interface SortOption {
  field: string;
  label: string;
  direction: 'asc' | 'desc';
  default?: boolean;
}

export interface FilterOption {
  field: string;
  label: string;
  type: FilterOptionType;
  options?: any;
}

export type FilterOptionType = 
  | 'text'
  | 'select'
  | 'multiselect'
  | 'date'
  | 'daterange'
  | 'number'
  | 'boolean'
  | 'custom';

export interface SearchSession {
  id: string;
  userId: string;
  startTime: Date;
  endTime?: Date;
  queries: SearchQuery[];
  results: SearchResult[];
  filters: DocumentFilters;
  analytics: SessionAnalytics;
}

export interface SessionAnalytics {
  queryCount: number;
  resultCount: number;
  averageResponseTime: number;
  clickThroughRate: number;
  bounceRate: number;
  sessionDuration: number;
}

export interface SearchHistory {
  id: string;
  userId: string;
  query: string;
  timestamp: Date;
  results: number;
  clicked: boolean;
  filters: DocumentFilters;
  responseTime: number;
}

export interface SearchSuggestion {
  text: string;
  type: SuggestionType;
  confidence: number;
  metadata?: SuggestionMetadata;
}

export type SuggestionType = 
  | 'query'
  | 'filter'
  | 'facet'
  | 'entity'
  | 'spelling'
  | 'autocomplete';

export interface SearchError {
  code: ErrorCode;
  message: string;
  details?: any;
  timestamp: Date;
  userId?: string;
  query?: string;
}

export type ErrorCode = 
  | 'INVALID_QUERY'
  | 'INVALID_FILTER'
  | 'INVALID_SORT'
  | 'INDEX_ERROR'
  | 'TIMEOUT'
  | 'RATE_LIMIT'
  | 'PERMISSION_DENIED'
  | 'SYSTEM_ERROR';

export interface SearchMetrics {
  totalQueries: number;
  successfulQueries: number;
  failedQueries: number;
  averageResponseTime: number;
  cacheHitRate: number;
  indexSize: number;
  documentCount: number;
  lastUpdated: Date;
}

export interface SearchOptimization {
  type: OptimizationType;
  description: string;
  impact: OptimizationImpact;
  effort: OptimizationEffort;
  status: OptimizationStatus;
}

export interface OptimizationImpact {
  performance: number;
  accuracy: number;
  userExperience: number;
  cost: number;
}

export interface OptimizationEffort {
  development: number;
  testing: number;
  deployment: number;
  maintenance: number;
}

export type OptimizationStatus = 
  | 'pending'
  | 'in_progress'
  | 'completed'
  | 'failed'
  | 'cancelled';

export interface SearchBenchmark {
  name: string;
  description: string;
  queries: BenchmarkQuery[];
  metrics: BenchmarkMetrics;
  results: BenchmarkResult[];
}

export interface BenchmarkQuery {
  id: string;
  query: string;
  expectedResults: number;
  filters?: DocumentFilters;
  options?: SearchOptions;
}

export interface BenchmarkMetrics {
  responseTime: number;
  accuracy: number;
  recall: number;
  precision: number;
  f1Score: number;
}

export interface BenchmarkResult {
  queryId: string;
  actualResults: number;
  responseTime: number;
  accuracy: number;
  passed: boolean;
  details?: any;
}


=== FILE: client/src/features/documents/types/infographic/InfographicDocument.ts ===

import { BaseDocument, DocumentType, DocumentContent, DocumentMetadata, DocumentSection } from '../document.types';

export interface InfographicData {
  id: string;
  title: string;
  description: string;
  type: 'bar' | 'line' | 'pie' | 'area' | 'scatter' | 'radar' | 'funnel' | 'sankey' | 'treemap' | 'heatmap' | 'gauge' | 'waterfall';
  data: any[];
  config: {
    colors?: string[];
    theme?: 'light' | 'dark' | 'corporate' | 'creative' | 'minimal' | 'vibrant';
    layout?: 'vertical' | 'horizontal' | 'grid' | 'flow' | 'circular';
    annotations?: string[];
    insights?: string[];
    title?: string;
    subtitle?: string;
    footer?: string;
    legend?: boolean;
    grid?: boolean;
    tooltips?: boolean;
    animations?: boolean;
  };
  metadata: {
    source: string;
    generatedAt: Date;
    aiConfidence: number;
    version: string;
    userId: string;
    category: string;
    tags: string[];
    usage: {
      views: number;
      exports: number;
      shares: number;
    };
  };
}

export interface InfographicTemplate {
  id: string;
  name: string;
  description: string;
  category: 'business' | 'marketing' | 'financial' | 'analytics' | 'social' | 'presentation' | 'report';
  preview: string;
  config: Partial<InfographicData['config']>;
  dataStructure: any;
  sampleData: any[];
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  estimatedTime: number; // in minutes
  industry: string[];
}

export interface InfographicDocument extends BaseDocument {
  type: 'infographic';
  content: InfographicContent;
  metadata: InfographicMetadata;
}

export interface InfographicContent extends DocumentContent {
  format: 'json';
  data: {
    infographic: InfographicData;
    templates?: InfographicTemplate[];
    customizations?: {
      theme: string;
      layout: string;
      colors: string[];
      showLegend: boolean;
      showGrid: boolean;
      showTooltips: boolean;
      enableAnimations: boolean;
      title: string;
      subtitle: string;
      footer: string;
    };
    exportSettings?: {
      formats: string[];
      quality: number;
      dimensions: { width: number; height: number };
    };
  };
  sections?: InfographicSection[];
}

export interface InfographicSection extends DocumentSection {
  type: 'chart' | 'insights' | 'data' | 'customization';
  chartType?: string;
  data?: any[];
  config?: any;
  insights?: string[];
}

export interface InfographicMetadata extends DocumentMetadata {
  category: 'infographic';
  chartType: string;
  dataPoints: number;
  complexity: 'low' | 'medium' | 'high';
  aiGenerated: boolean;
  template?: string;
  exportFormats: string[];
  lastExported?: Date;
  exportCount: number;
  shareCount: number;
  viewCount: number;
}

export interface InfographicAnalytics {
  views: number;
  exports: number;
  shares: number;
  lastViewed?: Date;
  lastExported?: Date;
  lastShared?: Date;
  popularFormats: Array<{ format: string; count: number }>;
  userEngagement: {
    averageViewDuration: number;
    bounceRate: number;
    returnRate: number;
  };
}

export interface InfographicEnhancement {
  type: 'visual' | 'data' | 'layout' | 'insights' | 'accessibility';
  description: string;
  impact: 'low' | 'medium' | 'high';
  effort: 'low' | 'medium' | 'high';
  applied: boolean;
  appliedAt?: Date;
  appliedBy?: string;
}

export interface InfographicExportOptions {
  format: 'png' | 'svg' | 'pdf' | 'jpg';
  quality?: number;
  width?: number;
  height?: number;
  dpi?: number;
  backgroundColor?: string;
  includeMetadata?: boolean;
}

export interface InfographicExportResult {
  success: boolean;
  filePath?: string;
  buffer?: Buffer;
  error?: string;
  metadata?: {
    size: number;
    format: string;
    dimensions: { width: number; height: number };
    generatedAt: Date;
  };
}

// Factory function for creating infographic documents
export function createInfographicDocument(data: Partial<InfographicDocument>): InfographicDocument {
  const now = new Date();
  
  return {
    id: data.id || `infographic_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    type: 'infographic',
    title: data.title || 'Untitled Infographic',
    description: data.description || '',
    content: {
      format: 'json',
      data: {
        infographic: data.content?.data?.infographic || {
          id: '',
          title: '',
          description: '',
          type: 'bar',
          data: [],
          config: {
            theme: 'corporate',
            layout: 'vertical',
            colors: ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'],
            showLegend: true,
            showGrid: true,
            showTooltips: true,
            enableAnimations: true
          },
          metadata: {
            source: 'manual',
            generatedAt: now,
            aiConfidence: 0.85,
            version: '1.0.0',
            userId: '',
            category: 'general',
            tags: [],
            usage: { views: 0, exports: 0, shares: 0 }
          }
        },
        customizations: {
          theme: 'corporate',
          layout: 'vertical',
          colors: ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'],
          showLegend: true,
          showGrid: true,
          showTooltips: true,
          enableAnimations: true,
          title: '',
          subtitle: '',
          footer: ''
        }
      },
      sections: data.content?.sections || []
    },
    metadata: {
      category: 'infographic',
      tags: data.metadata?.tags || [],
      status: 'draft',
      visibility: 'private',
      language: 'en',
      wordCount: 0,
      pageCount: 1,
      readingTime: 1,
      complexity: 'low',
      creationMethod: 'manual',
      chartType: 'bar',
      dataPoints: 0,
      aiGenerated: false,
      exportFormats: ['png'],
      exportCount: 0,
      shareCount: 0,
      viewCount: 0,
      ...data.metadata
    },
    version: {
      current: '1.0.0',
      history: [],
      locked: false
    },
    permissions: {
      owner: data.permissions?.owner || '',
      editors: data.permissions?.editors || [],
      viewers: data.permissions?.viewers || [],
      commenters: data.permissions?.commenters || [],
      public: false
    },
    collaboration: {
      activeUsers: [],
      comments: [],
      suggestions: [],
      mentions: [],
      lastActivity: now
    },
    ai: {
      analyzed: false,
      overallScore: 0,
      qualityScore: 0,
      completenessScore: 0,
      readabilityScore: 0,
      insights: [],
      suggestions: [],
      autoGenerated: false,
      aiAssisted: false,
      confidence: 0
    },
    createdAt: now,
    updatedAt: now,
    createdBy: data.createdBy || '',
    lastModifiedBy: data.createdBy || ''
  };
}

// Validation function for infographic documents
export function validateInfographicDocument(document: InfographicDocument): {
  valid: boolean;
  errors: string[];
  warnings: string[];
} {
  const errors: string[] = [];
  const warnings: string[] = [];

  // Check required fields
  if (!document.title || document.title.trim() === '') {
    errors.push('Title is required');
  }

  if (!document.content.data.infographic) {
    errors.push('Infographic data is required');
  } else {
    const infographic = document.content.data.infographic;
    
    if (!infographic.type) {
      errors.push('Chart type is required');
    }

    if (!infographic.data || infographic.data.length === 0) {
      warnings.push('No data points provided');
    }

    if (!infographic.config) {
      warnings.push('No configuration provided');
    }
  }

  // Check metadata
  if (!document.metadata.chartType) {
    warnings.push('Chart type not specified in metadata');
  }

  if (document.metadata.dataPoints === 0) {
    warnings.push('No data points in metadata');
  }

  return {
    valid: errors.length === 0,
    errors,
    warnings
  };
}


=== FILE: client/src/features/documents/types/infographic/InfographicDocumentType.ts ===

import React from 'react';
import { DocumentTypeDefinition, DocumentTemplate, AIConfiguration, WorkflowTemplate } from '../document.types';
import { InfographicDocument, createInfographicDocument, validateInfographicDocument } from './InfographicDocument';
import { InfographicDocumentEditor } from '../../components/infographic/InfographicDocumentEditor';
import { InfographicDocumentRenderer } from '../../components/infographic/InfographicDocumentRenderer';
import { BarChart3 } from 'lucide-react';

// Infographic document templates
const infographicTemplates: DocumentTemplate[] = [
  {
    id: 'revenue-trends',
    name: 'Revenue Growth Trends',
    description: 'Track revenue growth over time with trend analysis and forecasting',
    type: 'infographic',
    content: {
      format: 'json',
      data: {
        infographic: {
          id: 'revenue-trends-template',
          title: 'Revenue Growth Trends',
          description: 'Track revenue growth over time with trend analysis',
          type: 'line',
          data: [
            { period: 'Q1 2023', revenue: 120000, target: 100000, growth: 20 },
            { period: 'Q2 2023', revenue: 135000, target: 120000, growth: 12.5 },
            { period: 'Q3 2023', revenue: 150000, target: 140000, growth: 11.1 },
            { period: 'Q4 2023', revenue: 175000, target: 160000, growth: 16.7 }
          ],
          config: {
            theme: 'corporate',
            layout: 'vertical',
            colors: ['#3b82f6', '#10b981', '#f59e0b'],
            showLegend: true,
            showGrid: true,
            showTooltips: true,
            enableAnimations: true,
            title: 'Revenue Growth Trends',
            subtitle: 'Quarterly Performance Analysis',
            footer: 'Generated by AI Document System'
          },
          metadata: {
            source: 'template',
            generatedAt: new Date(),
            aiConfidence: 0.9,
            version: '1.0.0',
            userId: '',
            category: 'financial',
            tags: ['revenue', 'growth', 'trends'],
            usage: { views: 0, exports: 0, shares: 0 }
          }
        }
      }
    },
    metadata: {
      category: 'infographic',
      tags: ['revenue', 'growth', 'financial'],
      status: 'draft',
      visibility: 'public',
      language: 'en',
      wordCount: 0,
      pageCount: 1,
      readingTime: 1,
      complexity: 'low',
      creationMethod: 'manual'
    },
    isPublic: true,
    createdBy: 'system',
    createdAt: new Date(),
    usageCount: 0,
    rating: 4.5
  },
  {
    id: 'market-share',
    name: 'Market Share Analysis',
    description: 'Visualize market share distribution with competitive positioning',
    type: 'infographic',
    content: {
      format: 'json',
      data: {
        infographic: {
          id: 'market-share-template',
          title: 'Market Share Analysis',
          description: 'Visualize market share distribution with competitive positioning',
          type: 'pie',
          data: [
            { company: 'Our Company', marketShare: 35, revenue: 2500000, growth: 15 },
            { company: 'Competitor A', marketShare: 25, revenue: 1800000, growth: 8 },
            { company: 'Competitor B', marketShare: 20, revenue: 1400000, growth: 5 },
            { company: 'Others', marketShare: 20, revenue: 1000000, growth: 2 }
          ],
          config: {
            theme: 'corporate',
            layout: 'grid',
            colors: ['#3b82f6', '#10b981', '#f59e0b', '#ef4444'],
            showLegend: true,
            showTooltips: true,
            enableAnimations: true,
            title: 'Market Share Analysis',
            subtitle: 'Competitive Landscape Overview',
            footer: 'Generated by AI Document System'
          },
          metadata: {
            source: 'template',
            generatedAt: new Date(),
            aiConfidence: 0.9,
            version: '1.0.0',
            userId: '',
            category: 'business',
            tags: ['market', 'share', 'competition'],
            usage: { views: 0, exports: 0, shares: 0 }
          }
        }
      }
    },
    metadata: {
      category: 'infographic',
      tags: ['market', 'share', 'business'],
      status: 'draft',
      visibility: 'public',
      language: 'en',
      wordCount: 0,
      pageCount: 1,
      readingTime: 1,
      complexity: 'low',
      creationMethod: 'manual'
    },
    isPublic: true,
    createdBy: 'system',
    createdAt: new Date(),
    usageCount: 0,
    rating: 4.3
  },
  {
    id: 'customer-segmentation',
    name: 'Customer Segmentation',
    description: 'Analyze customer demographics and behavior patterns',
    type: 'infographic',
    content: {
      format: 'json',
      data: {
        infographic: {
          id: 'customer-segmentation-template',
          title: 'Customer Segmentation',
          description: 'Analyze customer demographics and behavior patterns',
          type: 'scatter',
          data: [
            { segment: 'Enterprise', value: 50000, frequency: 12, satisfaction: 4.5 },
            { segment: 'SMB', value: 15000, frequency: 24, satisfaction: 4.2 },
            { segment: 'Startup', value: 5000, frequency: 36, satisfaction: 4.0 },
            { segment: 'Individual', value: 1000, frequency: 48, satisfaction: 3.8 }
          ],
          config: {
            theme: 'creative',
            layout: 'grid',
            colors: ['#8b5cf6', '#06b6d4', '#10b981', '#f59e0b'],
            showLegend: true,
            showTooltips: true,
            enableAnimations: true,
            title: 'Customer Segmentation',
            subtitle: 'Demographics and Behavior Analysis',
            footer: 'Generated by AI Document System'
          },
          metadata: {
            source: 'template',
            generatedAt: new Date(),
            aiConfidence: 0.9,
            version: '1.0.0',
            userId: '',
            category: 'marketing',
            tags: ['customer', 'segmentation', 'demographics'],
            usage: { views: 0, exports: 0, shares: 0 }
          }
        }
      }
    },
    metadata: {
      category: 'infographic',
      tags: ['customer', 'segmentation', 'marketing'],
      status: 'draft',
      visibility: 'public',
      language: 'en',
      wordCount: 0,
      pageCount: 1,
      readingTime: 1,
      complexity: 'medium',
      creationMethod: 'manual'
    },
    isPublic: true,
    createdBy: 'system',
    createdAt: new Date(),
    usageCount: 0,
    rating: 4.7
  }
];

// AI Configuration for infographics
const aiConfig: AIConfiguration = {
  enabled: true,
  autoAnalyze: true,
  autoSuggest: true,
  qualityThreshold: 80,
  customPrompts: {
    generate: 'Create a professional infographic that clearly visualizes the provided data with appropriate chart types, colors, and layout.',
    enhance: 'Improve this infographic by enhancing visual appeal, data clarity, and overall design quality.',
    analyze: 'Analyze this infographic for data accuracy, visual effectiveness, and design best practices.'
  },
  analysisDepth: 'comprehensive'
};

// Workflow templates for infographics
const workflowTemplates: WorkflowTemplate[] = [
  {
    id: 'infographic-review',
    name: 'Infographic Review Process',
    description: 'Standard review process for infographic documents',
    steps: [
      {
        id: 'data-validation',
        name: 'Data Validation',
        type: 'ai-analysis',
        assigneeRole: 'ai-assistant',
        dueDateOffset: 0,
        required: true,
        parallel: false
      },
      {
        id: 'design-review',
        name: 'Design Review',
        type: 'review',
        assigneeRole: 'designer',
        dueDateOffset: 1,
        required: true,
        parallel: false
      },
      {
        id: 'content-approval',
        name: 'Content Approval',
        type: 'approval',
        assigneeRole: 'manager',
        dueDateOffset: 2,
        required: true,
        parallel: false
      }
    ],
    isPublic: true,
    createdBy: 'system',
    createdAt: new Date()
  }
];

// JSON Schema for infographic documents
const infographicSchema = {
  type: 'object',
  properties: {
    id: { type: 'string' },
    type: { type: 'string', enum: ['infographic'] },
    title: { type: 'string' },
    description: { type: 'string' },
    content: {
      type: 'object',
      properties: {
        format: { type: 'string', enum: ['json'] },
        data: {
          type: 'object',
          properties: {
            infographic: {
              type: 'object',
              properties: {
                id: { type: 'string' },
                title: { type: 'string' },
                description: { type: 'string' },
                type: { 
                  type: 'string', 
                  enum: ['bar', 'line', 'pie', 'area', 'scatter', 'radar', 'funnel', 'sankey', 'treemap', 'heatmap', 'gauge', 'waterfall'] 
                },
                data: { type: 'array' },
                config: { type: 'object' },
                metadata: { type: 'object' }
              },
              required: ['id', 'title', 'type', 'data', 'config', 'metadata']
            }
          },
          required: ['infographic']
        }
      },
      required: ['format', 'data']
    },
    metadata: {
      type: 'object',
      properties: {
        category: { type: 'string', enum: ['infographic'] },
        chartType: { type: 'string' },
        dataPoints: { type: 'number' },
        complexity: { type: 'string', enum: ['low', 'medium', 'high'] },
        aiGenerated: { type: 'boolean' },
        exportFormats: { type: 'array', items: { type: 'string' } }
      },
      required: ['category', 'chartType', 'dataPoints', 'complexity', 'aiGenerated', 'exportFormats']
    }
  },
  required: ['id', 'type', 'title', 'content', 'metadata']
};

// Infographic Document Type Definition
export const infographicDocumentType: DocumentTypeDefinition = {
  type: 'infographic',
  name: 'Infographic',
  description: 'AI-powered data visualization and infographic creation',
  icon: BarChart3,
  schema: infographicSchema,
  factory: (data: Partial<InfographicDocument>) => createInfographicDocument(data),
  validator: (document: InfographicDocument) => validateInfographicDocument(document),
  renderer: InfographicDocumentRenderer,
  editor: InfographicDocumentEditor,
  templates: infographicTemplates,
  aiConfig,
  workflowTemplates
};

export default infographicDocumentType;


=== FILE: client/src/features/documents/types/collaboration.types.ts ===

// Collaboration-specific types for document system

export interface CollaborationEngine {
  joinDocument(documentId: string, userId: string): Promise<void>;
  leaveDocument(documentId: string, userId: string): Promise<void>;
  updateCursor(documentId: string, userId: string, position: CursorPosition): Promise<void>;
  addComment(documentId: string, comment: Comment): Promise<void>;
  updateComment(documentId: string, commentId: string, updates: Partial<Comment>): Promise<void>;
  deleteComment(documentId: string, commentId: string): Promise<void>;
  addSuggestion(documentId: string, suggestion: Suggestion): Promise<void>;
  acceptSuggestion(documentId: string, suggestionId: string, userId: string): Promise<void>;
  rejectSuggestion(documentId: string, suggestionId: string, userId: string): Promise<void>;
  addMention(documentId: string, mention: Mention): Promise<void>;
  markMentionRead(documentId: string, mentionId: string, userId: string): Promise<void>;
  getActiveUsers(documentId: string): Promise<ActiveUser[]>;
  getComments(documentId: string): Promise<Comment[]>;
  getSuggestions(documentId: string): Promise<Suggestion[]>;
  getMentions(documentId: string, userId: string): Promise<Mention[]>;
}

export interface PresenceManager {
  updatePresence(userId: string, documentId: string, status: PresenceStatus): Promise<void>;
  getPresence(documentId: string): Promise<PresenceMap>;
  subscribeToPresence(documentId: string, callback: PresenceCallback): Promise<void>;
  unsubscribeFromPresence(documentId: string, callback: PresenceCallback): Promise<void>;
}

export interface CommentSystem {
  addComment(comment: Comment): Promise<void>;
  updateComment(commentId: string, updates: Partial<Comment>): Promise<void>;
  deleteComment(commentId: string): Promise<void>;
  resolveComment(commentId: string, userId: string): Promise<void>;
  addReply(commentId: string, reply: CommentReply): Promise<void>;
  getComments(documentId: string, sectionId?: string): Promise<Comment[]>;
  subscribeToComments(documentId: string, callback: CommentCallback): Promise<void>;
  unsubscribeFromComments(documentId: string, callback: CommentCallback): Promise<void>;
}

export interface NotificationService {
  sendNotification(notification: Notification): Promise<void>;
  getNotifications(userId: string, limit?: number, offset?: number): Promise<Notification[]>;
  markNotificationRead(notificationId: string, userId: string): Promise<void>;
  markAllNotificationsRead(userId: string): Promise<void>;
  subscribeToNotifications(userId: string, callback: NotificationCallback): Promise<void>;
  unsubscribeFromNotifications(userId: string, callback: NotificationCallback): Promise<void>;
}

export interface ActivityTracker {
  trackActivity(activity: Activity): Promise<void>;
  getActivities(documentId: string, limit?: number, offset?: number): Promise<Activity[]>;
  getUserActivities(userId: string, limit?: number, offset?: number): Promise<Activity[]>;
  subscribeToActivities(documentId: string, callback: ActivityCallback): Promise<void>;
  unsubscribeFromActivities(documentId: string, callback: ActivityCallback): Promise<void>;
}

// Core collaboration types
export interface ActiveUser {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  cursor?: CursorPosition;
  lastSeen: Date;
  permissions: string[];
  status: PresenceStatus;
}

export interface CursorPosition {
  sectionId: string;
  offset: number;
  timestamp: Date;
  selection?: TextSelection;
}

export interface TextSelection {
  start: number;
  end: number;
  text: string;
}

export type PresenceStatus = 'online' | 'away' | 'busy' | 'offline';

export interface PresenceMap {
  [userId: string]: {
    status: PresenceStatus;
    lastSeen: Date;
    cursor?: CursorPosition;
  };
}

export interface Comment {
  id: string;
  content: string;
  author: string;
  timestamp: Date;
  sectionId?: string;
  resolved: boolean;
  resolvedBy?: string;
  resolvedAt?: Date;
  replies: CommentReply[];
  mentions: string[];
  attachments: string[];
  reactions: Reaction[];
}

export interface CommentReply {
  id: string;
  content: string;
  author: string;
  timestamp: Date;
  mentions: string[];
  reactions: Reaction[];
}

export interface Reaction {
  emoji: string;
  users: string[];
  count: number;
}

export interface Suggestion {
  id: string;
  type: 'insert' | 'delete' | 'replace';
  content: string;
  author: string;
  timestamp: Date;
  sectionId: string;
  accepted: boolean;
  acceptedBy?: string;
  acceptedAt?: Date;
  originalContent?: string;
  position: number;
  length: number;
}

export interface Mention {
  id: string;
  userId: string;
  content: string;
  timestamp: Date;
  read: boolean;
  documentId: string;
  sectionId?: string;
  commentId?: string;
}

export interface Notification {
  id: string;
  type: NotificationType;
  title: string;
  message: string;
  userId: string;
  documentId?: string;
  read: boolean;
  timestamp: Date;
  data?: any;
  actions?: NotificationAction[];
}

export type NotificationType = 
  | 'comment' 
  | 'mention' 
  | 'suggestion' 
  | 'approval' 
  | 'rejection' 
  | 'invitation' 
  | 'reminder' 
  | 'system';

export interface NotificationAction {
  id: string;
  label: string;
  action: string;
  style: 'primary' | 'secondary' | 'danger';
}

export interface Activity {
  id: string;
  type: ActivityType;
  userId: string;
  documentId: string;
  timestamp: Date;
  description: string;
  data?: any;
  metadata?: ActivityMetadata;
}

export type ActivityType = 
  | 'created' 
  | 'updated' 
  | 'deleted' 
  | 'shared' 
  | 'commented' 
  | 'suggested' 
  | 'approved' 
  | 'rejected' 
  | 'viewed' 
  | 'downloaded'
  | 'join'
  | 'leave'
  | 'comment_updated'
  | 'comment_deleted'
  | 'suggestion_accepted'
  | 'suggestion_rejected'
  | 'mentioned';

export interface ActivityMetadata {
  sectionId?: string;
  commentId?: string;
  suggestionId?: string;
  changes?: ChangeSet[];
  duration?: number;
  ipAddress?: string;
  userAgent?: string;
  sessionId?: string;
  mentionId?: string;
}

export interface ChangeSet {
  type: 'add' | 'modify' | 'delete';
  path: string;
  oldValue?: any;
  newValue?: any;
  description?: string;
}

// Callback types
export type PresenceCallback = (presence: PresenceMap) => void;
export type CommentCallback = (comments: Comment[]) => void;
export type NotificationCallback = (notification: Notification) => void;
export type ActivityCallback = (activity: Activity) => void;

// Collaboration settings
export interface CollaborationSettings {
  allowComments: boolean;
  allowSuggestions: boolean;
  allowMentions: boolean;
  allowReactions: boolean;
  requireApproval: boolean;
  autoSave: boolean;
  autoSaveInterval: number;
  conflictResolution: 'last-writer-wins' | 'merge' | 'manual';
  notifications: NotificationSettings;
  permissions: PermissionSettings;
}

export interface NotificationSettings {
  email: boolean;
  push: boolean;
  inApp: boolean;
  frequency: 'immediate' | 'hourly' | 'daily' | 'weekly';
  types: NotificationType[];
}

export interface PermissionSettings {
  canEdit: string[];
  canComment: string[];
  canView: string[];
  canShare: string[];
  canDelete: string[];
  canApprove: string[];
}

// Real-time collaboration
export interface CollaborationSession {
  id: string;
  documentId: string;
  userId: string;
  joinedAt: Date;
  lastActivity: Date;
  cursor?: CursorPosition;
  permissions: string[];
}

export interface CollaborationEvent {
  type: 'join' | 'leave' | 'cursor' | 'comment' | 'suggestion' | 'mention' | 'activity';
  documentId: string;
  userId: string;
  timestamp: Date;
  data: any;
}

export interface CollaborationState {
  activeUsers: ActiveUser[];
  comments: Comment[];
  suggestions: Suggestion[];
  mentions: Mention[];
  lastActivity: Date;
  session: CollaborationSession;
}

// Conflict resolution
export interface ConflictResolution {
  type: 'content' | 'metadata' | 'permissions';
  documentId: string;
  conflicts: Conflict[];
  resolution: ConflictResolutionStrategy;
  resolvedBy: string;
  resolvedAt: Date;
}

export interface Conflict {
  field: string;
  localValue: any;
  remoteValue: any;
  timestamp: Date;
  userId: string;
}

export type ConflictResolutionStrategy = 
  | 'local-wins' 
  | 'remote-wins' 
  | 'merge' 
  | 'manual' 
  | 'last-writer-wins';

// Collaboration analytics
export interface CollaborationAnalytics {
  totalUsers: number;
  activeUsers: number;
  comments: number;
  suggestions: number;
  mentions: number;
  activities: number;
  averageSessionTime: number;
  mostActiveUsers: UserActivity[];
  collaborationScore: number;
  lastActivity: Date;
}

export interface UserActivity {
  userId: string;
  name: string;
  activities: number;
  comments: number;
  suggestions: number;
  timeSpent: number;
  lastActivity: Date;
}


=== FILE: client/src/features/documents/types/pitch-deck/PitchDeckDocument.ts ===

import { BaseDocument, DocumentType, DocumentContent, DocumentMetadata } from '../document.types';

/**
 * Pitch Deck Document Type
 * 
 * This document type handles pitch deck creation, management, and presentation.
 * It includes structured slides for investor presentations, demos, and storytelling.
 */
export interface PitchDeckDocument extends BaseDocument {
  type: 'pitch-deck';
  content: PitchDeckContent;
  metadata: PitchDeckMetadata;
}

export interface PitchDeckContent extends DocumentContent {
  format: 'structured';
  data: {
    slides: PitchSlide[];
    theme: PitchTheme;
    animations: Animation[];
    notes: SpeakerNotes[];
    timing: PresentationTiming;
  };
}

export interface PitchSlide {
  id: string;
  title: string;
  type: SlideType;
  content: SlideContent;
  order: number;
  visible: boolean;
  duration: number;
  aiGenerated: boolean;
  aiScore?: number;
  suggestions?: string[];
  lastModified: Date;
}

export type SlideType = 
  | 'title' 
  | 'problem' 
  | 'solution' 
  | 'market' 
  | 'business-model' 
  | 'traction' 
  | 'team' 
  | 'financials' 
  | 'ask' 
  | 'contact' 
  | 'custom';

export interface SlideContent {
  text: SlideText[];
  images: SlideImage[];
  charts: SlideChart[];
  videos: SlideVideo[];
  layout: SlideLayout;
  background: SlideBackground;
}

export interface SlideText {
  id: string;
  content: string;
  style: TextStyle;
  position: Position;
  animation?: Animation;
}

export interface TextStyle {
  fontSize: number;
  fontFamily: string;
  fontWeight: 'normal' | 'bold' | 'light';
  color: string;
  alignment: 'left' | 'center' | 'right' | 'justify';
  lineHeight: number;
}

export interface Position {
  x: number;
  y: number;
  width: number;
  height: number;
  zIndex: number;
}

export interface SlideImage {
  id: string;
  src: string;
  alt: string;
  position: Position;
  style: ImageStyle;
  animation?: Animation;
}

export interface ImageStyle {
  borderRadius: number;
  opacity: number;
  filter?: string;
  transform?: string;
}

export interface SlideChart {
  id: string;
  type: ChartType;
  data: ChartData;
  position: Position;
  style: ChartStyle;
  animation?: Animation;
}

export type ChartType = 
  | 'line' 
  | 'bar' 
  | 'pie' 
  | 'area' 
  | 'scatter' 
  | 'radar' 
  | 'gauge' 
  | 'funnel';

export interface ChartData {
  labels: string[];
  datasets: ChartDataset[];
  options: ChartOptions;
}

export interface ChartDataset {
  label: string;
  data: number[];
  backgroundColor?: string;
  borderColor?: string;
  borderWidth?: number;
}

export interface ChartOptions {
  responsive: boolean;
  maintainAspectRatio: boolean;
  scales?: any;
  plugins?: any;
}

export interface ChartStyle {
  width: number;
  height: number;
  backgroundColor: string;
  borderColor: string;
  borderWidth: number;
}

export interface SlideVideo {
  id: string;
  src: string;
  type: 'mp4' | 'webm' | 'ogg';
  position: Position;
  controls: boolean;
  autoplay: boolean;
  loop: boolean;
  muted: boolean;
}

export interface SlideLayout {
  type: 'single' | 'two-column' | 'three-column' | 'grid' | 'custom';
  columns: number;
  spacing: number;
  padding: number;
  alignment: 'left' | 'center' | 'right';
}

export interface SlideBackground {
  type: 'color' | 'gradient' | 'image' | 'pattern';
  color?: string;
  gradient?: Gradient;
  image?: string;
  pattern?: string;
  opacity: number;
}

export interface Gradient {
  type: 'linear' | 'radial';
  direction?: string;
  stops: GradientStop[];
}

export interface GradientStop {
  color: string;
  position: number;
}

export interface PitchTheme {
  name: string;
  colors: ThemeColors;
  fonts: ThemeFonts;
  spacing: ThemeSpacing;
  effects: ThemeEffects;
}

export interface ThemeColors {
  primary: string;
  secondary: string;
  accent: string;
  background: string;
  text: string;
  textSecondary: string;
  success: string;
  warning: string;
  error: string;
}

export interface ThemeFonts {
  heading: string;
  body: string;
  caption: string;
  code: string;
}

export interface ThemeSpacing {
  xs: number;
  sm: number;
  md: number;
  lg: number;
  xl: number;
}

export interface ThemeEffects {
  shadows: boolean;
  borders: boolean;
  rounded: boolean;
  animations: boolean;
}

export interface Animation {
  id: string;
  type: AnimationType;
  duration: number;
  delay: number;
  easing: string;
  direction: 'forward' | 'reverse' | 'alternate';
  iteration: number;
}

export type AnimationType = 
  | 'fade' 
  | 'slide' 
  | 'zoom' 
  | 'rotate' 
  | 'bounce' 
  | 'pulse' 
  | 'shake' 
  | 'custom';

export interface SpeakerNotes {
  slideId: string;
  content: string;
  timing: number;
  cues: string[];
  lastModified: Date;
}

export interface PresentationTiming {
  totalDuration: number;
  slideTimings: SlideTiming[];
  transitions: Transition[];
  autoAdvance: boolean;
  loop: boolean;
}

export interface SlideTiming {
  slideId: string;
  duration: number;
  startTime: number;
  endTime: number;
}

export interface Transition {
  fromSlideId: string;
  toSlideId: string;
  type: TransitionType;
  duration: number;
  easing: string;
}

export type TransitionType = 
  | 'none' 
  | 'fade' 
  | 'slide' 
  | 'zoom' 
  | 'flip' 
  | 'cube' 
  | 'cover' 
  | 'uncover';

export interface PitchDeckMetadata extends DocumentMetadata {
  presentationType: PresentationType;
  audience: AudienceType;
  duration: number;
  slides: number;
  theme: string;
  language: string;
  accessibility: AccessibilitySettings;
  sharing: SharingSettings;
}

export type PresentationType = 
  | 'investor-pitch' 
  | 'demo' 
  | 'sales-presentation' 
  | 'training' 
  | 'conference' 
  | 'webinar' 
  | 'custom';

export type AudienceType = 
  | 'investors' 
  | 'customers' 
  | 'partners' 
  | 'employees' 
  | 'public' 
  | 'mixed';

export interface AccessibilitySettings {
  altText: boolean;
  captions: boolean;
  highContrast: boolean;
  screenReader: boolean;
  keyboardNavigation: boolean;
}

export interface SharingSettings {
  public: boolean;
  password?: string;
  expiresAt?: Date;
  allowDownload: boolean;
  allowComments: boolean;
  allowEdit: boolean;
  watermark?: string;
}

// Factory function
export function createPitchDeck(data: Partial<PitchDeckDocument>): PitchDeckDocument {
  const now = new Date();
  
  return {
    id: data.id || `pitch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    type: 'pitch-deck',
    title: data.title || 'Pitch Deck',
    description: data.description || 'Investor pitch presentation',
    content: data.content || createDefaultPitchDeckContent(),
    metadata: {
      category: 'pitch-deck',
      tags: ['pitch', 'presentation', 'investors'],
      status: 'draft',
      visibility: 'private',
      language: 'en',
      wordCount: 0,
      pageCount: 0,
      readingTime: 0,
      complexity: 'medium',
      presentationType: 'investor-pitch',
      audience: 'investors',
      duration: 0,
      slides: 0,
      theme: 'default',
      accessibility: {
        altText: true,
        captions: false,
        highContrast: false,
        screenReader: false,
        keyboardNavigation: true
      },
      sharing: {
        public: false,
        allowDownload: false,
        allowComments: false,
        allowEdit: false
      },
      creationMethod: 'manual',
      ...data.metadata
    },
    version: {
      current: '1.0.0',
      history: [],
      locked: false
    },
    permissions: {
      owner: data.permissions?.owner || '',
      editors: data.permissions?.editors || [],
      viewers: data.permissions?.viewers || [],
      commenters: data.permissions?.commenters || [],
      public: false
    },
    collaboration: {
      activeUsers: [],
      comments: [],
      suggestions: [],
      mentions: [],
      lastActivity: now
    },
    ai: {
      analyzed: false,
      overallScore: 0,
      qualityScore: 0,
      completenessScore: 0,
      readabilityScore: 0,
      insights: [],
      suggestions: [],
      autoGenerated: false,
      aiAssisted: false,
      confidence: 0
    },
    createdAt: now,
    updatedAt: now,
    createdBy: data.createdBy || '',
    lastModifiedBy: data.createdBy || ''
  };
}

// Default content creator
function createDefaultPitchDeckContent(): PitchDeckContent {
  return {
    format: 'structured',
    data: {
      slides: [
        {
          id: 'slide-1',
          title: 'Title Slide',
          type: 'title',
          content: {
            text: [
              {
                id: 'text-1',
                content: 'Your Company Name',
                style: {
                  fontSize: 48,
                  fontFamily: 'Arial',
                  fontWeight: 'bold',
                  color: '#000000',
                  alignment: 'center',
                  lineHeight: 1.2
                },
                position: { x: 50, y: 200, width: 700, height: 100, zIndex: 1 }
              },
              {
                id: 'text-2',
                content: 'Tagline or Value Proposition',
                style: {
                  fontSize: 24,
                  fontFamily: 'Arial',
                  fontWeight: 'normal',
                  color: '#666666',
                  alignment: 'center',
                  lineHeight: 1.2
                },
                position: { x: 50, y: 320, width: 700, height: 50, zIndex: 1 }
              }
            ],
            images: [],
            charts: [],
            videos: [],
            layout: {
              type: 'single',
              columns: 1,
              spacing: 20,
              padding: 50,
              alignment: 'center'
            },
            background: {
              type: 'color',
              color: '#ffffff',
              opacity: 1
            }
          },
          order: 1,
          visible: true,
          duration: 10,
          aiGenerated: false,
          lastModified: new Date()
        },
        {
          id: 'slide-2',
          title: 'Problem',
          type: 'problem',
          content: {
            text: [
              {
                id: 'text-1',
                content: 'The Problem',
                style: {
                  fontSize: 36,
                  fontFamily: 'Arial',
                  fontWeight: 'bold',
                  color: '#000000',
                  alignment: 'left',
                  lineHeight: 1.2
                },
                position: { x: 50, y: 50, width: 300, height: 50, zIndex: 1 }
              },
              {
                id: 'text-2',
                content: 'Describe the problem your solution addresses...',
                style: {
                  fontSize: 18,
                  fontFamily: 'Arial',
                  fontWeight: 'normal',
                  color: '#333333',
                  alignment: 'left',
                  lineHeight: 1.5
                },
                position: { x: 50, y: 120, width: 600, height: 200, zIndex: 1 }
              }
            ],
            images: [],
            charts: [],
            videos: [],
            layout: {
              type: 'single',
              columns: 1,
              spacing: 20,
              padding: 50,
              alignment: 'left'
            },
            background: {
              type: 'color',
              color: '#ffffff',
              opacity: 1
            }
          },
          order: 2,
          visible: true,
          duration: 15,
          aiGenerated: false,
          lastModified: new Date()
        },
        {
          id: 'slide-3',
          title: 'Solution',
          type: 'solution',
          content: {
            text: [
              {
                id: 'text-1',
                content: 'Our Solution',
                style: {
                  fontSize: 36,
                  fontFamily: 'Arial',
                  fontWeight: 'bold',
                  color: '#000000',
                  alignment: 'left',
                  lineHeight: 1.2
                },
                position: { x: 50, y: 50, width: 300, height: 50, zIndex: 1 }
              },
              {
                id: 'text-2',
                content: 'Describe your solution and how it solves the problem...',
                style: {
                  fontSize: 18,
                  fontFamily: 'Arial',
                  fontWeight: 'normal',
                  color: '#333333',
                  alignment: 'left',
                  lineHeight: 1.5
                },
                position: { x: 50, y: 120, width: 600, height: 200, zIndex: 1 }
              }
            ],
            images: [],
            charts: [],
            videos: [],
            layout: {
              type: 'single',
              columns: 1,
              spacing: 20,
              padding: 50,
              alignment: 'left'
            },
            background: {
              type: 'color',
              color: '#ffffff',
              opacity: 1
            }
          },
          order: 3,
          visible: true,
          duration: 15,
          aiGenerated: false,
          lastModified: new Date()
        }
      ],
      theme: {
        name: 'default',
        colors: {
          primary: '#007bff',
          secondary: '#6c757d',
          accent: '#28a745',
          background: '#ffffff',
          text: '#000000',
          textSecondary: '#666666',
          success: '#28a745',
          warning: '#ffc107',
          error: '#dc3545'
        },
        fonts: {
          heading: 'Arial',
          body: 'Arial',
          caption: 'Arial',
          code: 'Courier New'
        },
        spacing: {
          xs: 4,
          sm: 8,
          md: 16,
          lg: 24,
          xl: 32
        },
        effects: {
          shadows: false,
          borders: false,
          rounded: false,
          animations: false
        }
      },
      animations: [],
      notes: [],
      timing: {
        totalDuration: 0,
        slideTimings: [],
        transitions: [],
        autoAdvance: false,
        loop: false
      }
    }
  };
}


=== FILE: client/src/features/documents/types/proposal/ProposalDocument.ts ===

import { BaseDocument, DocumentType, DocumentContent, DocumentMetadata } from '../document.types';

/**
 * Proposal Document Type with Subtypes
 * 
 * This document type handles various proposal types including:
 * - RFP (Request for Proposal) responses
 * - RFI (Request for Information) responses  
 * - RFQ (Request for Quote) responses
 * - Grant proposals
 * - Investment proposals
 * - Partnership proposals
 */
export interface ProposalDocument extends BaseDocument {
  type: 'proposal';
  content: ProposalContent;
  metadata: ProposalMetadata;
  subtype?: ProposalSubtype;
}

export type ProposalSubtype = 'rfp' | 'rfi' | 'rfq' | 'grant' | 'investment' | 'partnership';

export interface ProposalContent extends DocumentContent {
  format: 'structured';
  data: {
    sections: ProposalSection[];
    requirements: ProposalRequirement[];
    responses: ProposalResponse[];
    attachments: ProposalAttachment[];
    compliance: ComplianceCheck[];
  };
}

export interface ProposalSection {
  id: string;
  title: string;
  content: string;
  order: number;
  required: boolean;
  completed: boolean;
  wordCount: number;
  lastModified: Date;
  aiGenerated: boolean;
  aiScore?: number;
  suggestions?: string[];
  requirements?: string[];
}

export interface ProposalRequirement {
  id: string;
  title: string;
  description: string;
  category: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  required: boolean;
  response?: string;
  status: 'pending' | 'in-progress' | 'completed' | 'reviewed';
  dueDate?: Date;
  assignee?: string;
  aiGenerated?: boolean;
  confidence?: number;
}

export interface ProposalResponse {
  id: string;
  requirementId: string;
  content: string;
  status: 'draft' | 'review' | 'approved' | 'rejected';
  quality: number;
  completeness: number;
  compliance: number;
  aiGenerated: boolean;
  lastModified: Date;
  reviewer?: string;
  feedback?: string;
}

export interface ProposalAttachment {
  id: string;
  name: string;
  type: string;
  size: number;
  url: string;
  category: string;
  required: boolean;
  uploadedAt: Date;
  uploadedBy: string;
  description?: string;
}

export interface ComplianceCheck {
  id: string;
  requirement: string;
  status: 'compliant' | 'non-compliant' | 'partial' | 'not-applicable';
  evidence: string;
  notes?: string;
  checkedBy?: string;
  checkedAt?: Date;
  confidence: number;
}

export interface ProposalMetadata extends DocumentMetadata {
  proposalType: ProposalSubtype;
  organization: string;
  deadline: Date;
  budget?: number;
  currency?: string;
  status: ProposalStatus;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  winProbability: number;
  competitionLevel: 'low' | 'medium' | 'high';
  keyStakeholders: Stakeholder[];
  evaluationCriteria: EvaluationCriteria[];
  submissionRequirements: SubmissionRequirement[];
}

export type ProposalStatus = 
  | 'draft' 
  | 'in-progress' 
  | 'under-review' 
  | 'submitted' 
  | 'under-evaluation' 
  | 'shortlisted' 
  | 'won' 
  | 'lost' 
  | 'cancelled';

export interface Stakeholder {
  id: string;
  name: string;
  role: string;
  organization: string;
  email: string;
  influence: 'low' | 'medium' | 'high';
  attitude: 'supportive' | 'neutral' | 'opposed';
  notes?: string;
}

export interface EvaluationCriteria {
  id: string;
  name: string;
  description: string;
  weight: number;
  score?: number;
  maxScore: number;
  notes?: string;
}

export interface SubmissionRequirement {
  id: string;
  name: string;
  description: string;
  required: boolean;
  format?: string;
  maxSize?: number;
  deadline?: Date;
  submitted: boolean;
  submittedAt?: Date;
}

// RFP-specific interfaces
export interface RFPProposal extends ProposalDocument {
  subtype: 'rfp';
  content: RFPProposalContent;
  metadata: RFPProposalMetadata;
}

export interface RFPProposalContent extends ProposalContent {
  data: ProposalContent['data'] & {
    technicalProposal: TechnicalProposal;
    commercialProposal: CommercialProposal;
    managementProposal: ManagementProposal;
    pastPerformance: PastPerformance[];
  };
}

export interface TechnicalProposal {
  approach: string;
  methodology: string;
  timeline: ProjectTimeline;
  deliverables: Deliverable[];
  risks: Risk[];
  mitigation: string[];
}

export interface CommercialProposal {
  pricing: PricingStructure;
  paymentTerms: string;
  warranties: string[];
  support: SupportStructure;
  terms: string[];
}

export interface ManagementProposal {
  team: TeamMember[];
  organization: OrganizationStructure;
  communication: CommunicationPlan;
  quality: QualityAssurance;
}

export interface ProjectTimeline {
  phases: ProjectPhase[];
  milestones: Milestone[];
  dependencies: Dependency[];
  criticalPath: string[];
}

export interface ProjectPhase {
  id: string;
  name: string;
  description: string;
  startDate: Date;
  endDate: Date;
  duration: number;
  deliverables: string[];
  resources: string[];
}

export interface Milestone {
  id: string;
  name: string;
  description: string;
  date: Date;
  deliverables: string[];
  acceptance: string[];
}

export interface Dependency {
  id: string;
  name: string;
  type: 'internal' | 'external';
  description: string;
  impact: 'low' | 'medium' | 'high';
}

export interface Deliverable {
  id: string;
  name: string;
  description: string;
  format: string;
  dueDate: Date;
  acceptance: string[];
}

export interface Risk {
  id: string;
  category: string;
  description: string;
  probability: 'low' | 'medium' | 'high';
  impact: 'low' | 'medium' | 'high';
  mitigation: string;
  contingency: string;
}

export interface PricingStructure {
  basePrice: number;
  currency: string;
  breakdown: PricingBreakdown[];
  assumptions: string[];
  exclusions: string[];
}

export interface PricingBreakdown {
  category: string;
  description: string;
  amount: number;
  unit: string;
  quantity: number;
  total: number;
}

export interface SupportStructure {
  level: string;
  description: string;
  hours: number;
  responseTime: string;
  availability: string;
  cost: number;
}

export interface TeamMember {
  id: string;
  name: string;
  role: string;
  experience: number;
  qualifications: string[];
  availability: number;
  cost: number;
}

export interface OrganizationStructure {
  hierarchy: string;
  reporting: string;
  governance: string;
  escalation: string;
}

export interface CommunicationPlan {
  frequency: string;
  format: string;
  participants: string[];
  agenda: string[];
  reporting: string;
}

export interface QualityAssurance {
  standards: string[];
  processes: string[];
  reviews: string[];
  testing: string[];
  metrics: string[];
}

export interface PastPerformance {
  id: string;
  project: string;
  client: string;
  value: number;
  duration: number;
  outcome: string;
  reference: string;
  lessons: string[];
}

export interface RFPProposalMetadata extends ProposalMetadata {
  proposalType: 'rfp';
  rfpNumber: string;
  rfpTitle: string;
  issuingOrganization: string;
  contractValue?: number;
  contractDuration?: number;
  evaluationMethod: string;
  evaluationCriteria: EvaluationCriteria[];
  submissionFormat: string;
  pageLimit?: number;
  wordLimit?: number;
}

// RFI-specific interfaces
export interface RFIProposal extends ProposalDocument {
  subtype: 'rfi';
  content: RFIProposalContent;
  metadata: RFIProposalMetadata;
}

export interface RFIProposalContent extends ProposalContent {
  data: ProposalContent['data'] & {
    informationResponses: InformationResponse[];
    capabilities: Capability[];
    qualifications: Qualification[];
  };
}

export interface InformationResponse {
  id: string;
  question: string;
  answer: string;
  category: string;
  confidence: number;
  sources: string[];
  attachments: string[];
}

export interface Capability {
  id: string;
  name: string;
  description: string;
  level: 'basic' | 'intermediate' | 'advanced' | 'expert';
  evidence: string[];
  certifications: string[];
}

export interface Qualification {
  id: string;
  type: string;
  description: string;
  level: string;
  issuer: string;
  date: Date;
  expiry?: Date;
  verification: string;
}

export interface RFIProposalMetadata extends ProposalMetadata {
  proposalType: 'rfi';
  rfiNumber: string;
  rfiTitle: string;
  issuingOrganization: string;
  informationType: string;
  responseFormat: string;
  confidentiality: string;
}

// RFQ-specific interfaces
export interface RFQProposal extends ProposalDocument {
  subtype: 'rfq';
  content: RFQProposalContent;
  metadata: RFQProposalMetadata;
}

export interface RFQProposalContent extends ProposalContent {
  data: ProposalContent['data'] & {
    quote: QuoteDetails;
    specifications: Specification[];
    terms: TermsAndConditions;
  };
}

export interface QuoteDetails {
  totalPrice: number;
  currency: string;
  validUntil: Date;
  breakdown: QuoteBreakdown[];
  assumptions: string[];
  exclusions: string[];
}

export interface QuoteBreakdown {
  item: string;
  description: string;
  quantity: number;
  unitPrice: number;
  total: number;
  notes?: string;
}

export interface Specification {
  id: string;
  name: string;
  description: string;
  value: string;
  unit?: string;
  tolerance?: string;
  compliance: boolean;
}

export interface TermsAndConditions {
  payment: string;
  delivery: string;
  warranty: string;
  liability: string;
  termination: string;
  dispute: string;
}

export interface RFQProposalMetadata extends ProposalMetadata {
  proposalType: 'rfq';
  rfqNumber: string;
  rfqTitle: string;
  issuingOrganization: string;
  quoteType: string;
  currency: string;
  validUntil: Date;
  terms: string[];
}

// Factory functions
export function createProposal(data: Partial<ProposalDocument>): ProposalDocument {
  const now = new Date();
  
  return {
    id: data.id || `prop_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    type: 'proposal',
    title: data.title || 'Proposal',
    description: data.description || 'Proposal document',
    content: data.content || createDefaultProposalContent(),
    metadata: {
      category: 'proposal',
      tags: ['proposal', 'response'],
      status: 'draft',
      visibility: 'private',
      language: 'en',
      wordCount: 0,
      pageCount: 0,
      readingTime: 0,
      complexity: 'medium',
      proposalType: 'rfp',
      organization: '',
      deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
      status: 'draft',
      priority: 'medium',
      winProbability: 0,
      competitionLevel: 'medium',
      keyStakeholders: [],
      evaluationCriteria: [],
      submissionRequirements: [],
      creationMethod: 'manual',
      ...data.metadata
    },
    version: {
      current: '1.0.0',
      history: [],
      locked: false
    },
    permissions: {
      owner: data.permissions?.owner || '',
      editors: data.permissions?.editors || [],
      viewers: data.permissions?.viewers || [],
      commenters: data.permissions?.commenters || [],
      public: false
    },
    collaboration: {
      activeUsers: [],
      comments: [],
      suggestions: [],
      mentions: [],
      lastActivity: now
    },
    ai: {
      analyzed: false,
      overallScore: 0,
      qualityScore: 0,
      completenessScore: 0,
      readabilityScore: 0,
      insights: [],
      suggestions: [],
      autoGenerated: false,
      aiAssisted: false,
      confidence: 0
    },
    createdAt: now,
    updatedAt: now,
    createdBy: data.createdBy || '',
    lastModifiedBy: data.createdBy || ''
  };
}

export function createRFPProposal(data: Partial<RFPProposal>): RFPProposal {
  const baseProposal = createProposal(data);
  
  return {
    ...baseProposal,
    subtype: 'rfp',
    content: data.content || createDefaultRFPContent(),
    metadata: {
      ...baseProposal.metadata,
      proposalType: 'rfp',
      rfpNumber: '',
      rfpTitle: '',
      issuingOrganization: '',
      evaluationMethod: '',
      evaluationCriteria: [],
      submissionFormat: 'pdf',
      ...data.metadata
    }
  };
}

export function createRFIProposal(data: Partial<RFIProposal>): RFIProposal {
  const baseProposal = createProposal(data);
  
  return {
    ...baseProposal,
    subtype: 'rfi',
    content: data.content || createDefaultRFIContent(),
    metadata: {
      ...baseProposal.metadata,
      proposalType: 'rfi',
      rfiNumber: '',
      rfiTitle: '',
      issuingOrganization: '',
      informationType: '',
      responseFormat: 'pdf',
      confidentiality: 'standard',
      ...data.metadata
    }
  };
}

export function createRFQProposal(data: Partial<RFQProposal>): RFQProposal {
  const baseProposal = createProposal(data);
  
  return {
    ...baseProposal,
    subtype: 'rfq',
    content: data.content || createDefaultRFQContent(),
    metadata: {
      ...baseProposal.metadata,
      proposalType: 'rfq',
      rfqNumber: '',
      rfqTitle: '',
      issuingOrganization: '',
      quoteType: 'fixed-price',
      currency: 'USD',
      validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
      terms: [],
      ...data.metadata
    }
  };
}

// Default content creators
function createDefaultProposalContent(): ProposalContent {
  return {
    format: 'structured',
    data: {
      sections: [
        {
          id: 'executive-summary',
          title: 'Executive Summary',
          content: '',
          order: 1,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'understanding',
          title: 'Understanding of Requirements',
          content: '',
          order: 2,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'approach',
          title: 'Proposed Approach',
          content: '',
          order: 3,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'team',
          title: 'Team & Resources',
          content: '',
          order: 4,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'timeline',
          title: 'Project Timeline',
          content: '',
          order: 5,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'pricing',
          title: 'Pricing & Commercial Terms',
          content: '',
          order: 6,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        }
      ],
      requirements: [],
      responses: [],
      attachments: [],
      compliance: []
    }
  };
}

function createDefaultRFPContent(): RFPProposalContent {
  return {
    ...createDefaultProposalContent(),
    data: {
      ...createDefaultProposalContent().data,
      technicalProposal: {
        approach: '',
        methodology: '',
        timeline: {
          phases: [],
          milestones: [],
          dependencies: [],
          criticalPath: []
        },
        deliverables: [],
        risks: [],
        mitigation: []
      },
      commercialProposal: {
        pricing: {
          basePrice: 0,
          currency: 'USD',
          breakdown: [],
          assumptions: [],
          exclusions: []
        },
        paymentTerms: '',
        warranties: [],
        support: {
          level: '',
          description: '',
          hours: 0,
          responseTime: '',
          availability: '',
          cost: 0
        },
        terms: []
      },
      managementProposal: {
        team: [],
        organization: {
          hierarchy: '',
          reporting: '',
          governance: '',
          escalation: ''
        },
        communication: {
          frequency: '',
          format: '',
          participants: [],
          agenda: [],
          reporting: ''
        },
        quality: {
          standards: [],
          processes: [],
          reviews: [],
          testing: [],
          metrics: []
        }
      },
      pastPerformance: []
    }
  };
}

function createDefaultRFIContent(): RFIProposalContent {
  return {
    ...createDefaultProposalContent(),
    data: {
      ...createDefaultProposalContent().data,
      informationResponses: [],
      capabilities: [],
      qualifications: []
    }
  };
}

function createDefaultRFQContent(): RFQProposalContent {
  return {
    ...createDefaultProposalContent(),
    data: {
      ...createDefaultProposalContent().data,
      quote: {
        totalPrice: 0,
        currency: 'USD',
        validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
        breakdown: [],
        assumptions: [],
        exclusions: []
      },
      specifications: [],
      terms: {
        payment: '',
        delivery: '',
        warranty: '',
        liability: '',
        termination: '',
        dispute: ''
      }
    }
  };
}


=== FILE: client/src/features/documents/types/document.types.ts ===

import React from 'react';

// Base document types
export type DocumentType = 
  | 'business-plan' 
  | 'proposal' 
  | 'pitch-deck' 
  | 'application' 
  | 'contract' 
  | 'report' 
  | 'infographic'
  | 'other';

export type DocumentStatus = 
  | 'draft' 
  | 'review' 
  | 'approved' 
  | 'published' 
  | 'archived' 
  | 'deleted';

export type DocumentVisibility = 
  | 'private' 
  | 'team' 
  | 'organization' 
  | 'public';

export type DocumentComplexity = 
  | 'low' 
  | 'medium' 
  | 'high';

export type CreationMethod = 
  | 'upload' 
  | 'manual' 
  | 'ai-generated' 
  | 'hybrid';

// Base document interface
export interface BaseDocument {
  id: string;
  type: DocumentType;
  title: string;
  description?: string;
  content: DocumentContent;
  metadata: DocumentMetadata;
  version: DocumentVersion;
  permissions: DocumentPermissions;
  collaboration: CollaborationState;
  ai: AIState;
  workflow?: WorkflowState;
  createdAt: Date;
  updatedAt: Date;
  createdBy: string;
  lastModifiedBy: string;
}

// Document content (flexible structure)
export interface DocumentContent {
  format: 'json' | 'markdown' | 'html' | 'structured';
  data: any; // Type-specific content
  sections?: DocumentSection[];
  attachments?: Attachment[];
}

export interface DocumentSection {
  id: string;
  title: string;
  content: string;
  order: number;
  required: boolean;
  aiGenerated?: boolean;
  wordCount?: number;
  lastModified?: Date;
}

export interface Attachment {
  id: string;
  name: string;
  type: string;
  size: number;
  url: string;
  uploadedAt: Date;
  uploadedBy: string;
}

// Document metadata
export interface DocumentMetadata {
  category: string;
  tags: string[];
  status: DocumentStatus;
  visibility: DocumentVisibility;
  language: string;
  wordCount: number;
  pageCount: number;
  readingTime: number;
  complexity: DocumentComplexity;
  industry?: string;
  creationMethod: CreationMethod;
  sourceFile?: UploadedFile;
  customFields?: Record<string, any>;
}

export interface UploadedFile {
  originalName: string;
  mimeType: string;
  size: number;
  uploadedAt: Date;
  extractedContent?: boolean;
}

// Version control
export interface DocumentVersion {
  current: string;
  history: VersionHistory[];
  branches?: VersionBranch[];
  locked: boolean;
  lockedBy?: string;
  lockedAt?: Date;
}

export interface VersionHistory {
  version: string;
  timestamp: Date;
  author: string;
  changes: ChangeSet[];
  message?: string;
  snapshot: any;
}

export interface VersionBranch {
  name: string;
  baseVersion: string;
  createdAt: Date;
  createdBy: string;
  merged?: boolean;
  mergedAt?: Date;
  mergedBy?: string;
}

export interface ChangeSet {
  type: 'add' | 'modify' | 'delete';
  path: string;
  oldValue?: any;
  newValue?: any;
  description?: string;
}

// Permissions
export interface DocumentPermissions {
  owner: string;
  editors: string[];
  viewers: string[];
  commenters: string[];
  public: boolean;
  shareLink?: string;
  expiresAt?: Date;
}

// Collaboration state
export interface CollaborationState {
  activeUsers: ActiveUser[];
  comments: Comment[];
  suggestions: Suggestion[];
  mentions: Mention[];
  lastActivity: Date;
}

export interface ActiveUser {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  cursor?: CursorPosition;
  lastSeen: Date;
  permissions: string[];
}

export interface CursorPosition {
  sectionId: string;
  offset: number;
  timestamp: Date;
}

export interface Comment {
  id: string;
  content: string;
  author: string;
  timestamp: Date;
  sectionId?: string;
  resolved: boolean;
  resolvedBy?: string;
  resolvedAt?: Date;
  replies: CommentReply[];
}

export interface CommentReply {
  id: string;
  content: string;
  author: string;
  timestamp: Date;
}

export interface Suggestion {
  id: string;
  type: 'insert' | 'delete' | 'replace';
  content: string;
  author: string;
  timestamp: Date;
  sectionId: string;
  accepted: boolean;
  acceptedBy?: string;
  acceptedAt?: Date;
}

export interface Mention {
  id: string;
  userId: string;
  content: string;
  timestamp: Date;
  read: boolean;
}

// AI state
export interface AIState {
  analyzed: boolean;
  lastAnalyzed?: Date;
  overallScore: number;
  qualityScore: number;
  completenessScore: number;
  readabilityScore: number;
  insights: AIInsight[];
  suggestions: AISuggestion[];
  autoGenerated: boolean;
  aiAssisted: boolean;
  confidence: number;
  generationPrompt?: string;
  aiSections?: string[];
}

export interface AIInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'opportunity' | 'compliance' | 'quality';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  confidence: number;
  category: string;
  sectionId?: string;
  timestamp: Date;
}

export interface AISuggestion {
  id: string;
  type: 'content' | 'structure' | 'style' | 'compliance';
  title: string;
  description: string;
  content: string;
  sectionId?: string;
  priority: 'low' | 'medium' | 'high';
  accepted: boolean;
  acceptedBy?: string;
  acceptedAt?: Date;
  timestamp: Date;
}

// Workflow state
export interface WorkflowState {
  id: string;
  name: string;
  currentStep: string;
  steps: WorkflowStep[];
  status: 'pending' | 'in-progress' | 'completed' | 'cancelled';
  startedAt: Date;
  completedAt?: Date;
}

export interface WorkflowStep {
  id: string;
  name: string;
  type: 'review' | 'approval' | 'signature' | 'notification' | 'ai-analysis';
  assignee: string;
  dueDate: Date;
  completed: boolean;
  completedAt?: Date;
  comments: string[];
  attachments: string[];
  aiInsights?: AIInsight[];
  status: 'pending' | 'in-progress' | 'completed' | 'overdue';
  priority: 'low' | 'medium' | 'high';
}

// Document type definitions
export interface DocumentTypeDefinition {
  type: DocumentType;
  name: string;
  description: string;
  icon: React.ComponentType;
  schema: JSONSchema;
  factory: (data: Partial<BaseDocument>) => BaseDocument;
  validator: (document: BaseDocument) => ValidationResult;
  renderer: React.ComponentType<DocumentRendererProps>;
  editor: React.ComponentType<DocumentEditorProps>;
  templates: DocumentTemplate[];
  aiConfig: AIConfiguration;
  workflowTemplates: WorkflowTemplate[];
  subtypes?: Record<string, DocumentSubtypeDefinition>;
}

export interface DocumentSubtypeDefinition {
  name: string;
  description: string;
  schema: JSONSchema;
  templates: DocumentTemplate[];
  automation: AutomationConfig;
}

export interface JSONSchema {
  type: string;
  properties: Record<string, any>;
  required?: string[];
  additionalProperties?: boolean;
}

export interface ValidationResult {
  valid: boolean;
  errors: string[];
  warnings: string[];
}

export interface DocumentTemplate {
  id: string;
  name: string;
  description: string;
  type: DocumentType;
  subtype?: string;
  content: DocumentContent;
  metadata: Partial<DocumentMetadata>;
  aiConfig?: AIConfiguration;
  workflowTemplate?: string;
  isPublic: boolean;
  createdBy: string;
  createdAt: Date;
  usageCount: number;
  rating: number;
}

export interface AIConfiguration {
  enabled: boolean;
  autoAnalyze: boolean;
  autoSuggest: boolean;
  qualityThreshold: number;
  customPrompts?: Record<string, string>;
  analysisDepth: 'basic' | 'standard' | 'comprehensive';
}

export interface WorkflowTemplate {
  id: string;
  name: string;
  description: string;
  steps: WorkflowStepTemplate[];
  isPublic: boolean;
  createdBy: string;
  createdAt: Date;
}

export interface WorkflowStepTemplate {
  id: string;
  name: string;
  type: 'review' | 'approval' | 'signature' | 'notification' | 'ai-analysis';
  assigneeRole: string;
  dueDateOffset: number; // days from start
  required: boolean;
  parallel: boolean;
  conditions?: WorkflowCondition[];
}

export interface WorkflowCondition {
  field: string;
  operator: 'equals' | 'not_equals' | 'contains' | 'greater_than' | 'less_than';
  value: any;
}

export interface AutomationConfig {
  enabled: boolean;
  autoGenerate: boolean;
  autoAnalyze: boolean;
  autoSuggest: boolean;
  templates: string[];
  rules: AutomationRule[];
}

export interface AutomationRule {
  id: string;
  name: string;
  condition: string;
  action: string;
  enabled: boolean;
}

// Component props
export interface DocumentRendererProps {
  document: BaseDocument;
  mode?: 'view' | 'edit' | 'preview';
  onUpdate?: (updates: Partial<BaseDocument>) => void;
  onComment?: (comment: Comment) => void;
  onSuggest?: (suggestion: Suggestion) => void;
}

export interface DocumentEditorProps {
  document: BaseDocument;
  onSave: (document: BaseDocument) => void;
  onCancel: () => void;
  readOnly?: boolean;
  showAI?: boolean;
  showCollaboration?: boolean;
}

// Search and filtering
export interface DocumentSearchQuery {
  text?: string;
  type?: DocumentType;
  category?: string;
  tags?: string[];
  status?: DocumentStatus;
  createdBy?: string;
  dateRange?: { start: Date; end: Date };
  aiGenerated?: boolean;
  limit?: number;
  offset?: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

export interface DocumentSearchResult {
  documents: BaseDocument[];
  total: number;
  facets: SearchFacets;
  suggestions: string[];
}

export interface SearchFacets {
  types: Record<DocumentType, number>;
  categories: Record<string, number>;
  tags: Record<string, number>;
  statuses: Record<DocumentStatus, number>;
  dateRanges: Record<string, number>;
}

// Analytics
export interface DocumentAnalytics {
  views: number;
  edits: number;
  collaborators: number;
  comments: number;
  suggestions: number;
  lastActivity: Date;
  aiScore: number;
  completionRate: number;
  timeSpent: number;
  shareCount: number;
  downloadCount: number;
}

// Events
export interface DocumentEvent {
  id: string;
  type: 'created' | 'updated' | 'deleted' | 'shared' | 'commented' | 'suggested' | 'approved' | 'rejected';
  documentId: string;
  userId: string;
  timestamp: Date;
  data: any;
}

// Export all types
export * from './ai.types';
export * from './collaboration.types';
export * from './workflow.types';


=== FILE: client/src/features/documents/types/analytics.types.ts ===

export interface UsagePattern {
  id: string;
  userId: string;
  documentId: string;
  action: string;
  timestamp: Date;
  duration?: number;
  metadata?: Record<string, any>;
}

export interface CollaborationMetrics {
  activeCollaborators: number;
  commentsPerDocument: number;
  suggestionsPerDocument: number;
  averageSessionTime: number;
  realTimeEdits: number;
  mentionsPerDocument: number;
}

export interface PerformanceMetrics {
  loadTime: number;
  renderTime: number;
  memoryUsage: number;
  cachePerformance: number;
  apiResponseTime: number;
  errorRate: number;
}

export interface MetricValue {
  value: number;
  unit: string;
  trend: 'up' | 'down' | 'stable';
  change: number;
}

export interface DocumentAnalytics {
  documentId: string;
  views: number;
  edits: number;
  comments: number;
  shares: number;
  lastAccessed: Date;
  averageSessionTime: number;
  userEngagement: number;
}

export interface UserAnalytics {
  userId: string;
  documentsCreated: number;
  documentsEdited: number;
  commentsMade: number;
  timeSpent: number;
  lastActive: Date;
  preferredFeatures: string[];
}

export interface AnalyticsDashboard {
  usagePatterns: UsagePattern[];
  collaborationMetrics: CollaborationMetrics;
  performanceMetrics: PerformanceMetrics;
  documentAnalytics: DocumentAnalytics[];
  userAnalytics: UserAnalytics[];
  totalUsers: number;
  totalDocuments: number;
  averageSessionTime: number;
  topFeatures: string[];
}


=== FILE: client/src/features/documents/types/ai.types.ts ===

// AI-specific types for document system

export interface AIService {
  analyzeDocument(document: any): Promise<AIAnalysisResult>;
  generateContent(prompt: string, context: any): Promise<AIGenerationResult>;
  suggestImprovements(document: any): Promise<AISuggestion[]>;
  checkCompliance(document: any, rules: ComplianceRule[]): Promise<ComplianceResult>;
  summarizeDocument(document: any): Promise<AISummary>;
  extractKeywords(document: any): Promise<string[]>;
  detectLanguage(document: any): Promise<string>;
  calculateReadability(document: any): Promise<ReadabilityScore>;
}

export interface AIAnalysisResult {
  overallScore: number;
  qualityScore: number;
  completenessScore: number;
  readabilityScore: number;
  insights: AIInsight[];
  suggestions: AISuggestion[];
  confidence: number;
  processingTime: number;
  timestamp: Date;
  metadata?: {
    tokens?: number;
    model?: string;
    version?: string;
    [key: string]: any;
  };
}

export interface AIGenerationResult {
  content: string;
  confidence: number;
  sections: GeneratedSection[];
  metadata: GenerationMetadata;
  suggestions: string[];
  timestamp: Date;
}

export interface GeneratedSection {
  id: string;
  title: string;
  content: string;
  type: 'text' | 'list' | 'table' | 'chart';
  confidence: number;
  aiGenerated: boolean;
}

export interface GenerationMetadata {
  model: string;
  prompt: string;
  context: any;
  parameters: GenerationParameters;
  tokens: number;
  cost: number;
}

export interface GenerationParameters {
  temperature: number;
  maxTokens: number;
  topP: number;
  frequencyPenalty: number;
  presencePenalty: number;
}

export interface ComplianceResult {
  compliant: boolean;
  score: number;
  violations: ComplianceViolation[];
  recommendations: string[];
  timestamp: Date;
}

export interface ComplianceViolation {
  rule: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  location: string;
  suggestion: string;
}

export interface ComplianceRule {
  id: string;
  name: string;
  description: string;
  category: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  pattern: string;
  action: 'warn' | 'error' | 'block';
}

export interface AISummary {
  text: string;
  keyPoints: string[];
  sentiment: 'positive' | 'negative' | 'neutral';
  confidence: number;
  wordCount: number;
  timestamp: Date;
}

export interface ReadabilityScore {
  score: number;
  level: 'elementary' | 'middle' | 'high' | 'college' | 'graduate';
  metrics: ReadabilityMetrics;
  suggestions: string[];
}

export interface ReadabilityMetrics {
  averageWordsPerSentence: number;
  averageSyllablesPerWord: number;
  complexWords: number;
  totalWords: number;
  totalSentences: number;
}

export interface AIInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'opportunity' | 'compliance' | 'quality';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  confidence: number;
  category: string;
  sectionId?: string;
  timestamp: Date;
  metadata?: Record<string, any>;
}

export interface AISuggestion {
  id: string;
  type: 'content' | 'structure' | 'style' | 'compliance' | 'grammar' | 'tone';
  title: string;
  description: string;
  content: string;
  sectionId?: string;
  priority: 'low' | 'medium' | 'high';
  accepted: boolean;
  acceptedBy?: string;
  acceptedAt?: Date;
  timestamp: Date;
  confidence: number;
  metadata?: Record<string, any>;
}

export interface AIConfiguration {
  enabled: boolean;
  autoAnalyze: boolean;
  autoSuggest: boolean;
  qualityThreshold: number;
  customPrompts?: Record<string, string>;
  analysisDepth: 'basic' | 'standard' | 'comprehensive';
  model: string;
  parameters: GenerationParameters;
  rateLimit: number;
  costLimit: number;
}

export interface AIUsageStats {
  totalRequests: number;
  totalTokens: number;
  totalCost: number;
  averageResponseTime: number;
  successRate: number;
  errorRate: number;
  lastUsed: Date;
  dailyUsage: Record<string, number>;
  monthlyUsage: Record<string, number>;
}

export interface AIError {
  code: string;
  message: string;
  details?: any;
  timestamp: Date;
  retryable: boolean;
}

export interface AIPrompt {
  id: string;
  name: string;
  description: string;
  template: string;
  variables: string[];
  category: string;
  isPublic: boolean;
  createdBy: string;
  createdAt: Date;
  usageCount: number;
  rating: number;
}

export interface AIPromptVariable {
  name: string;
  type: 'text' | 'number' | 'boolean' | 'select' | 'multiselect';
  required: boolean;
  defaultValue?: any;
  options?: string[];
  description: string;
}

export interface AIContext {
  document: any;
  user: any;
  organization: any;
  previousDocuments: any[];
  templates: any[];
  rules: ComplianceRule[];
  preferences: any;
}

export interface AIResponse {
  success: boolean;
  data?: any;
  error?: AIError;
  metadata: {
    model: string;
    tokens: number;
    cost: number;
    processingTime: number;
    timestamp: Date;
  };
}


=== FILE: client/src/features/documents/types/business-plan/BusinessPlanDocument.ts ===

import { BaseDocument, DocumentType, DocumentContent, DocumentMetadata } from '../document.types';

/**
 * Business Plan Document Type
 * 
 * This document type handles business plan creation, management, and analysis.
 * It includes structured sections for executive summary, market analysis,
 * financial projections, and more.
 */
export interface BusinessPlanDocument extends BaseDocument {
  type: 'business-plan';
  content: BusinessPlanContent;
  metadata: BusinessPlanMetadata;
}

export interface BusinessPlanContent extends DocumentContent {
  format: 'structured';
  data: {
    sections: BusinessPlanSection[];
    financialProjections: FinancialProjections;
    marketAnalysis: MarketAnalysis;
    competitiveAnalysis: CompetitiveAnalysis;
    riskAssessment: RiskAssessment;
  };
}

export interface BusinessPlanSection {
  id: string;
  title: string;
  content: string;
  order: number;
  required: boolean;
  completed: boolean;
  wordCount: number;
  lastModified: Date;
  aiGenerated: boolean;
  aiScore?: number;
  suggestions?: string[];
}

export interface FinancialProjections {
  revenue: RevenueProjection[];
  expenses: ExpenseProjection[];
  cashFlow: CashFlowProjection[];
  breakEven: BreakEvenAnalysis;
  funding: FundingRequirements;
}

export interface RevenueProjection {
  year: number;
  quarter: number;
  revenue: number;
  growthRate: number;
  assumptions: string[];
}

export interface ExpenseProjection {
  year: number;
  quarter: number;
  category: string;
  amount: number;
  percentage: number;
}

export interface CashFlowProjection {
  year: number;
  quarter: number;
  operatingCashFlow: number;
  investingCashFlow: number;
  financingCashFlow: number;
  netCashFlow: number;
}

export interface BreakEvenAnalysis {
  breakEvenPoint: number;
  breakEvenTime: string;
  assumptions: string[];
  sensitivity: SensitivityAnalysis[];
}

export interface SensitivityAnalysis {
  variable: string;
  baseCase: number;
  optimistic: number;
  pessimistic: number;
  impact: number;
}

export interface FundingRequirements {
  totalAmount: number;
  useOfFunds: UseOfFunds[];
  fundingRounds: FundingRound[];
  exitStrategy: string;
}

export interface UseOfFunds {
  category: string;
  amount: number;
  percentage: number;
  description: string;
}

export interface FundingRound {
  round: string;
  amount: number;
  valuation: number;
  investors: string[];
  timeline: string;
}

export interface MarketAnalysis {
  marketSize: MarketSize;
  targetMarket: TargetMarket;
  marketTrends: MarketTrend[];
  customerSegments: CustomerSegment[];
}

export interface MarketSize {
  totalAddressableMarket: number;
  serviceableAddressableMarket: number;
  serviceableObtainableMarket: number;
  growthRate: number;
  assumptions: string[];
}

export interface TargetMarket {
  description: string;
  size: number;
  characteristics: string[];
  needs: string[];
  painPoints: string[];
}

export interface MarketTrend {
  trend: string;
  impact: 'positive' | 'negative' | 'neutral';
  timeframe: string;
  confidence: number;
  sources: string[];
}

export interface CustomerSegment {
  name: string;
  description: string;
  size: number;
  characteristics: string[];
  needs: string[];
  acquisitionCost: number;
  lifetimeValue: number;
}

export interface CompetitiveAnalysis {
  competitors: Competitor[];
  competitiveAdvantages: string[];
  marketPosition: string;
  differentiation: string[];
}

export interface Competitor {
  name: string;
  description: string;
  strengths: string[];
  weaknesses: string[];
  marketShare: number;
  pricing: string;
  positioning: string;
}

export interface RiskAssessment {
  risks: Risk[];
  mitigationStrategies: MitigationStrategy[];
  contingencyPlans: ContingencyPlan[];
}

export interface Risk {
  category: string;
  description: string;
  probability: 'low' | 'medium' | 'high';
  impact: 'low' | 'medium' | 'high';
  severity: 'low' | 'medium' | 'high';
  mitigation: string;
}

export interface MitigationStrategy {
  risk: string;
  strategy: string;
  owner: string;
  timeline: string;
  cost: number;
  effectiveness: number;
}

export interface ContingencyPlan {
  scenario: string;
  plan: string;
  triggers: string[];
  actions: string[];
  timeline: string;
}

export interface BusinessPlanMetadata extends DocumentMetadata {
  industry: string;
  businessStage: 'idea' | 'startup' | 'growth' | 'mature' | 'exit';
  fundingStage: 'pre-seed' | 'seed' | 'series-a' | 'series-b' | 'series-c' | 'ipo';
  targetAudience: string[];
  businessModel: string;
  revenueModel: string;
  keyMetrics: KeyMetric[];
}

export interface KeyMetric {
  name: string;
  value: number;
  unit: string;
  target: number;
  timeframe: string;
  importance: 'low' | 'medium' | 'high';
}

// Business Plan Factory
export function createBusinessPlan(data: Partial<BusinessPlanDocument>): BusinessPlanDocument {
  const now = new Date();
  
  return {
    id: data.id || `bp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    type: 'business-plan',
    title: data.title || 'Business Plan',
    description: data.description || 'Comprehensive business plan document',
    content: data.content || createDefaultBusinessPlanContent(),
    metadata: {
      category: 'business-plan',
      tags: ['business-plan', 'strategy', 'planning'],
      status: 'draft',
      visibility: 'private',
      language: 'en',
      wordCount: 0,
      pageCount: 0,
      readingTime: 0,
      complexity: 'high',
      industry: 'technology',
      businessStage: 'startup',
      fundingStage: 'pre-seed',
      targetAudience: ['investors', 'stakeholders'],
      businessModel: 'B2B',
      revenueModel: 'subscription',
      keyMetrics: [],
      creationMethod: 'manual',
      ...data.metadata
    },
    version: {
      current: '1.0.0',
      history: [],
      locked: false
    },
    permissions: {
      owner: data.permissions?.owner || '',
      editors: data.permissions?.editors || [],
      viewers: data.permissions?.viewers || [],
      commenters: data.permissions?.commenters || [],
      public: false
    },
    collaboration: {
      activeUsers: [],
      comments: [],
      suggestions: [],
      mentions: [],
      lastActivity: now
    },
    ai: {
      analyzed: false,
      overallScore: 0,
      qualityScore: 0,
      completenessScore: 0,
      readabilityScore: 0,
      insights: [],
      suggestions: [],
      autoGenerated: false,
      aiAssisted: false,
      confidence: 0
    },
    createdAt: now,
    updatedAt: now,
    createdBy: data.createdBy || '',
    lastModifiedBy: data.createdBy || ''
  };
}

// Default business plan content
function createDefaultBusinessPlanContent(): BusinessPlanContent {
  return {
    format: 'structured',
    data: {
      sections: [
        {
          id: 'executive-summary',
          title: 'Executive Summary',
          content: '',
          order: 1,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'company-description',
          title: 'Company Description',
          content: '',
          order: 2,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'market-analysis',
          title: 'Market Analysis',
          content: '',
          order: 3,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'organization-management',
          title: 'Organization & Management',
          content: '',
          order: 4,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'service-product-line',
          title: 'Service or Product Line',
          content: '',
          order: 5,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'marketing-sales',
          title: 'Marketing & Sales',
          content: '',
          order: 6,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'funding-request',
          title: 'Funding Request',
          content: '',
          order: 7,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'financial-projections',
          title: 'Financial Projections',
          content: '',
          order: 8,
          required: true,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        },
        {
          id: 'appendix',
          title: 'Appendix',
          content: '',
          order: 9,
          required: false,
          completed: false,
          wordCount: 0,
          lastModified: new Date(),
          aiGenerated: false
        }
      ],
      financialProjections: {
        revenue: [],
        expenses: [],
        cashFlow: [],
        breakEven: {
          breakEvenPoint: 0,
          breakEvenTime: '',
          assumptions: [],
          sensitivity: []
        },
        funding: {
          totalAmount: 0,
          useOfFunds: [],
          fundingRounds: [],
          exitStrategy: ''
        }
      },
      marketAnalysis: {
        marketSize: {
          totalAddressableMarket: 0,
          serviceableAddressableMarket: 0,
          serviceableObtainableMarket: 0,
          growthRate: 0,
          assumptions: []
        },
        targetMarket: {
          description: '',
          size: 0,
          characteristics: [],
          needs: [],
          painPoints: []
        },
        marketTrends: [],
        customerSegments: []
      },
      competitiveAnalysis: {
        competitors: [],
        competitiveAdvantages: [],
        marketPosition: '',
        differentiation: []
      },
      riskAssessment: {
        risks: [],
        mitigationStrategies: [],
        contingencyPlans: []
      }
    }
  };
}


=== FILE: client/src/features/documents/core/DocumentVersioning.ts ===

import { BaseDocument, VersionHistory, VersionBranch, ChangeSet } from '../types/document.types';

/**
 * Document Versioning - Handles document version control and history
 * 
 * This versioning system provides:
 * - Version creation and management
 * - Change tracking and diff generation
 * - Branch management
 * - Version restoration
 * - Conflict resolution
 */
export class DocumentVersioning {
  private versions: Map<string, VersionHistory[]> = new Map();
  private branches: Map<string, VersionBranch[]> = new Map();

  /**
   * Create initial version for a document
   */
  async createInitialVersion(document: BaseDocument): Promise<void> {
    const initialVersion: VersionHistory = {
      version: '1.0.0',
      timestamp: new Date(),
      author: document.createdBy,
      changes: [],
      message: 'Initial version',
      snapshot: this.createSnapshot(document)
    };

    this.versions.set(document.id, [initialVersion]);
  }

  /**
   * Create a new version
   */
  async createVersion(
    document: BaseDocument,
    updates: Partial<BaseDocument>,
    message?: string
  ): Promise<VersionHistory> {
    const currentVersion = document.version.current;
    const newVersion = this.incrementVersion(currentVersion);

    // Generate changes
    const changes = this.generateChanges(document, updates);

    const versionHistory: VersionHistory = {
      version: newVersion,
      timestamp: new Date(),
      author: updates.lastModifiedBy || document.lastModifiedBy,
      changes,
      message: message || 'Document updated',
      snapshot: this.createSnapshot({ ...document, ...updates })
    };

    // Add to version history
    const history = this.versions.get(document.id) || [];
    history.push(versionHistory);
    this.versions.set(document.id, history);

    return versionHistory;
  }

  /**
   * Get version history for a document
   */
  async getHistory(documentId: string): Promise<VersionHistory[]> {
    return this.versions.get(documentId) || [];
  }

  /**
   * Get a specific version
   */
  async getVersion(documentId: string, version: string): Promise<VersionHistory | null> {
    const history = this.versions.get(documentId);
    if (!history) return null;

    return history.find(v => v.version === version) || null;
  }

  /**
   * Get latest version
   */
  async getLatestVersion(documentId: string): Promise<VersionHistory | null> {
    const history = this.versions.get(documentId);
    if (!history || history.length === 0) return null;

    return history[history.length - 1];
  }

  /**
   * Compare two versions
   */
  async compareVersions(
    documentId: string,
    version1: string,
    version2: string
  ): Promise<{
    changes: ChangeSet[];
    added: ChangeSet[];
    modified: ChangeSet[];
    deleted: ChangeSet[];
  }> {
    const v1 = await this.getVersion(documentId, version1);
    const v2 = await this.getVersion(documentId, version2);

    if (!v1 || !v2) {
      throw new Error('One or both versions not found');
    }

    const changes = this.compareSnapshots(v1.snapshot, v2.snapshot);
    const added = changes.filter(c => c.type === 'add');
    const modified = changes.filter(c => c.type === 'modify');
    const deleted = changes.filter(c => c.type === 'delete');

    return {
      changes,
      added,
      modified,
      deleted
    };
  }

  /**
   * Create a branch
   */
  async createBranch(
    documentId: string,
    branchName: string,
    baseVersion: string,
    createdBy: string
  ): Promise<VersionBranch> {
    const branch: VersionBranch = {
      name: branchName,
      baseVersion,
      createdAt: new Date(),
      createdBy
    };

    const branches = this.branches.get(documentId) || [];
    branches.push(branch);
    this.branches.set(documentId, branches);

    return branch;
  }

  /**
   * Get branches for a document
   */
  async getBranches(documentId: string): Promise<VersionBranch[]> {
    return this.branches.get(documentId) || [];
  }

  /**
   * Merge a branch
   */
  async mergeBranch(
    documentId: string,
    branchName: string,
    targetVersion: string,
    mergedBy: string
  ): Promise<void> {
    const branches = this.branches.get(documentId) || [];
    const branch = branches.find(b => b.name === branchName);

    if (!branch) {
      throw new Error(`Branch not found: ${branchName}`);
    }

    if (branch.merged) {
      throw new Error(`Branch already merged: ${branchName}`);
    }

    // Mark branch as merged
    branch.merged = true;
    branch.mergedAt = new Date();
    branch.mergedBy = mergedBy;

    // In a real implementation, we would merge the changes
    // For now, we'll just mark it as merged
  }

  /**
   * Delete version history
   */
  async deleteHistory(documentId: string): Promise<void> {
    this.versions.delete(documentId);
    this.branches.delete(documentId);
  }

  /**
   * Get version statistics
   */
  async getVersionStats(documentId: string): Promise<{
    totalVersions: number;
    latestVersion: string;
    firstVersion: string;
    totalChanges: number;
    averageChangesPerVersion: number;
    lastModified: Date;
  }> {
    const history = this.versions.get(documentId) || [];
    
    if (history.length === 0) {
      return {
        totalVersions: 0,
        latestVersion: '',
        firstVersion: '',
        totalChanges: 0,
        averageChangesPerVersion: 0,
        lastModified: new Date()
      };
    }

    const totalChanges = history.reduce((sum, version) => sum + version.changes.length, 0);
    const averageChangesPerVersion = totalChanges / history.length;

    return {
      totalVersions: history.length,
      latestVersion: history[history.length - 1].version,
      firstVersion: history[0].version,
      totalChanges,
      averageChangesPerVersion,
      lastModified: history[history.length - 1].timestamp
    };
  }

  /**
   * Create document snapshot
   */
  private createSnapshot(document: BaseDocument): any {
    return {
      id: document.id,
      type: document.type,
      title: document.title,
      description: document.description,
      content: JSON.parse(JSON.stringify(document.content)), // Deep clone
      metadata: JSON.parse(JSON.stringify(document.metadata)), // Deep clone
      permissions: JSON.parse(JSON.stringify(document.permissions)), // Deep clone
      createdAt: document.createdAt,
      updatedAt: document.updatedAt,
      createdBy: document.createdBy,
      lastModifiedBy: document.lastModifiedBy
    };
  }

  /**
   * Generate changes between document states
   */
  private generateChanges(
    original: BaseDocument,
    updates: Partial<BaseDocument>
  ): ChangeSet[] {
    const changes: ChangeSet[] = [];

    // Check title changes
    if (updates.title && updates.title !== original.title) {
      changes.push({
        type: 'modify',
        path: 'title',
        oldValue: original.title,
        newValue: updates.title,
        description: `Title changed from "${original.title}" to "${updates.title}"`
      });
    }

    // Check description changes
    if (updates.description !== undefined && updates.description !== original.description) {
      changes.push({
        type: 'modify',
        path: 'description',
        oldValue: original.description,
        newValue: updates.description,
        description: `Description ${updates.description ? 'updated' : 'removed'}`
      });
    }

    // Check content changes
    if (updates.content && JSON.stringify(updates.content) !== JSON.stringify(original.content)) {
      changes.push({
        type: 'modify',
        path: 'content',
        oldValue: original.content,
        newValue: updates.content,
        description: 'Content updated'
      });
    }

    // Check metadata changes
    if (updates.metadata && JSON.stringify(updates.metadata) !== JSON.stringify(original.metadata)) {
      changes.push({
        type: 'modify',
        path: 'metadata',
        oldValue: original.metadata,
        newValue: updates.metadata,
        description: 'Metadata updated'
      });
    }

    // Check permissions changes
    if (updates.permissions && JSON.stringify(updates.permissions) !== JSON.stringify(original.permissions)) {
      changes.push({
        type: 'modify',
        path: 'permissions',
        oldValue: original.permissions,
        newValue: updates.permissions,
        description: 'Permissions updated'
      });
    }

    return changes;
  }

  /**
   * Compare two snapshots
   */
  private compareSnapshots(snapshot1: any, snapshot2: any): ChangeSet[] {
    const changes: ChangeSet[] = [];

    // Compare all fields
    const fields = ['title', 'description', 'content', 'metadata', 'permissions'];
    
    for (const field of fields) {
      const value1 = snapshot1[field];
      const value2 = snapshot2[field];

      if (JSON.stringify(value1) !== JSON.stringify(value2)) {
        if (value1 === undefined || value1 === null) {
          changes.push({
            type: 'add',
            path: field,
            newValue: value2,
            description: `${field} added`
          });
        } else if (value2 === undefined || value2 === null) {
          changes.push({
            type: 'delete',
            path: field,
            oldValue: value1,
            description: `${field} removed`
          });
        } else {
          changes.push({
            type: 'modify',
            path: field,
            oldValue: value1,
            newValue: value2,
            description: `${field} modified`
          });
        }
      }
    }

    return changes;
  }

  /**
   * Increment version number
   */
  private incrementVersion(version: string): string {
    const parts = version.split('.');
    const major = parseInt(parts[0]);
    const minor = parseInt(parts[1]);
    const patch = parseInt(parts[2]);

    // Increment patch version
    return `${major}.${minor}.${patch + 1}`;
  }

  /**
   * Get version diff as text
   */
  async getVersionDiff(
    documentId: string,
    version1: string,
    version2: string
  ): Promise<string> {
    const comparison = await this.compareVersions(documentId, version1, version2);
    
    let diff = `# Version Comparison\n\n`;
    diff += `**From:** ${version1}\n`;
    diff += `**To:** ${version2}\n\n`;

    if (comparison.changes.length === 0) {
      diff += `No changes detected.\n`;
      return diff;
    }

    diff += `## Changes (${comparison.changes.length})\n\n`;

    for (const change of comparison.changes) {
      diff += `### ${change.path}\n`;
      diff += `**Type:** ${change.type}\n`;
      
      if (change.oldValue !== undefined) {
        diff += `**Old:** ${JSON.stringify(change.oldValue, null, 2)}\n`;
      }
      
      if (change.newValue !== undefined) {
        diff += `**New:** ${JSON.stringify(change.newValue, null, 2)}\n`;
      }
      
      if (change.description) {
        diff += `**Description:** ${change.description}\n`;
      }
      
      diff += `\n`;
    }

    return diff;
  }
}


=== FILE: client/src/features/documents/core/DocumentLifecycle.ts ===

import { BaseDocument, DocumentStatus } from '../types/document.types';

/**
 * Document Lifecycle - Manages document lifecycle and state transitions
 * 
 * This lifecycle system provides:
 * - Document state management
 * - Lifecycle event tracking
 * - State transition validation
 * - Automated state changes
 * - Lifecycle analytics
 */
export class DocumentLifecycle {
  private lifecycleEvents: Map<string, LifecycleEvent[]> = new Map();
  private stateTransitions: Map<DocumentStatus, DocumentStatus[]> = new Map();

  constructor() {
    this.initializeStateTransitions();
  }

  /**
   * Initialize a document's lifecycle
   */
  async initialize(document: BaseDocument): Promise<void> {
    const event: LifecycleEvent = {
      id: this.generateEventId(),
      documentId: document.id,
      fromStatus: null,
      toStatus: document.metadata.status,
      userId: document.createdBy,
      timestamp: new Date(),
      reason: 'Document created',
      metadata: {
        type: 'creation',
        source: 'user'
      }
    };

    this.addLifecycleEvent(document.id, event);
  }

  /**
   * Update document lifecycle
   */
  async update(document: BaseDocument): Promise<void> {
    const events = this.lifecycleEvents.get(document.id) || [];
    const lastEvent = events[events.length - 1];
    
    if (lastEvent && lastEvent.toStatus === document.metadata.status) {
      // Status hasn't changed, just update the document
      return;
    }

    const event: LifecycleEvent = {
      id: this.generateEventId(),
      documentId: document.id,
      fromStatus: lastEvent?.toStatus || null,
      toStatus: document.metadata.status,
      userId: document.lastModifiedBy,
      timestamp: new Date(),
      reason: this.getStatusChangeReason(document.metadata.status),
      metadata: {
        type: 'status_change',
        source: 'user'
      }
    };

    this.addLifecycleEvent(document.id, event);
  }

  /**
   * Transition document to a new status
   */
  async transitionTo(
    documentId: string,
    newStatus: DocumentStatus,
    userId: string,
    reason?: string
  ): Promise<LifecycleEvent> {
    const events = this.lifecycleEvents.get(documentId) || [];
    const lastEvent = events[events.length - 1];
    const currentStatus = lastEvent?.toStatus || 'draft';

    // Validate transition
    if (!this.canTransition(currentStatus, newStatus)) {
      throw new Error(`Invalid transition from ${currentStatus} to ${newStatus}`);
    }

    const event: LifecycleEvent = {
      id: this.generateEventId(),
      documentId,
      fromStatus: currentStatus,
      toStatus: newStatus,
      userId,
      timestamp: new Date(),
      reason: reason || this.getStatusChangeReason(newStatus),
      metadata: {
        type: 'status_transition',
        source: 'user'
      }
    };

    this.addLifecycleEvent(documentId, event);
    return event;
  }

  /**
   * Get document lifecycle history
   */
  async getLifecycleHistory(documentId: string): Promise<LifecycleEvent[]> {
    return this.lifecycleEvents.get(documentId) || [];
  }

  /**
   * Get current document status
   */
  async getCurrentStatus(documentId: string): Promise<DocumentStatus | null> {
    const events = this.lifecycleEvents.get(documentId) || [];
    const lastEvent = events[events.length - 1];
    return lastEvent?.toStatus || null;
  }

  /**
   * Get available transitions for a document
   */
  async getAvailableTransitions(documentId: string): Promise<DocumentStatus[]> {
    const currentStatus = await this.getCurrentStatus(documentId);
    if (!currentStatus) return [];

    return this.stateTransitions.get(currentStatus) || [];
  }

  /**
   * Get lifecycle statistics
   */
  async getLifecycleStats(documentId: string): Promise<LifecycleStats> {
    const events = this.lifecycleEvents.get(documentId) || [];
    
    if (events.length === 0) {
      return {
        totalEvents: 0,
        currentStatus: null,
        statusHistory: [],
        averageTimeInStatus: 0,
        totalLifecycleTime: 0,
        mostActiveUser: null
      };
    }

    const statusHistory = events.map(event => ({
      status: event.toStatus,
      timestamp: event.timestamp,
      duration: 0
    }));

    // Calculate durations
    for (let i = 0; i < statusHistory.length - 1; i++) {
      const current = statusHistory[i];
      const next = statusHistory[i + 1];
      current.duration = next.timestamp.getTime() - current.timestamp.getTime();
    }

    // Calculate average time in status
    const totalTime = statusHistory.reduce((sum, status) => sum + status.duration, 0);
    const averageTimeInStatus = totalTime / statusHistory.length;

    // Find most active user
    const userActivity = new Map<string, number>();
    for (const event of events) {
      const count = userActivity.get(event.userId) || 0;
      userActivity.set(event.userId, count + 1);
    }

    const mostActiveUser = Array.from(userActivity.entries())
      .sort((a, b) => b[1] - a[1])[0]?.[0] || null;

    return {
      totalEvents: events.length,
      currentStatus: events[events.length - 1].toStatus,
      statusHistory,
      averageTimeInStatus,
      totalLifecycleTime: totalTime,
      mostActiveUser
    };
  }

  /**
   * Get global lifecycle analytics
   */
  async getGlobalAnalytics(): Promise<GlobalLifecycleAnalytics> {
    const allEvents: LifecycleEvent[] = [];
    
    for (const events of this.lifecycleEvents.values()) {
      allEvents.push(...events);
    }

    const statusCounts = new Map<DocumentStatus, number>();
    const transitionCounts = new Map<string, number>();
    const userActivity = new Map<string, number>();

    for (const event of allEvents) {
      // Count status occurrences
      const statusCount = statusCounts.get(event.toStatus) || 0;
      statusCounts.set(event.toStatus, statusCount + 1);

      // Count transitions
      const transitionKey = `${event.fromStatus}->${event.toStatus}`;
      const transitionCount = transitionCounts.get(transitionKey) || 0;
      transitionCounts.set(transitionKey, transitionCount + 1);

      // Count user activity
      const userCount = userActivity.get(event.userId) || 0;
      userActivity.set(event.userId, userCount + 1);
    }

    const mostCommonStatus = Array.from(statusCounts.entries())
      .sort((a, b) => b[1] - a[1])[0]?.[0] || null;

    const mostCommonTransition = Array.from(transitionCounts.entries())
      .sort((a, b) => b[1] - a[1])[0]?.[0] || null;

    const mostActiveUser = Array.from(userActivity.entries())
      .sort((a, b) => b[1] - a[1])[0]?.[0] || null;

    return {
      totalDocuments: this.lifecycleEvents.size,
      totalEvents: allEvents.length,
      statusDistribution: Object.fromEntries(statusCounts),
      mostCommonStatus,
      mostCommonTransition,
      mostActiveUser,
      averageEventsPerDocument: allEvents.length / this.lifecycleEvents.size
    };
  }

  /**
   * Check if a status transition is valid
   */
  canTransition(fromStatus: DocumentStatus | null, toStatus: DocumentStatus): boolean {
    if (!fromStatus) {
      // Initial state - can only go to draft
      return toStatus === 'draft';
    }

    const allowedTransitions = this.stateTransitions.get(fromStatus) || [];
    return allowedTransitions.includes(toStatus);
  }

  /**
   * Initialize state transition rules
   */
  private initializeStateTransitions(): void {
    // Draft can go to review or archived
    this.stateTransitions.set('draft', ['review', 'archived']);

    // Review can go to approved, draft, or archived
    this.stateTransitions.set('review', ['approved', 'draft', 'archived']);

    // Approved can go to published, review, or archived
    this.stateTransitions.set('approved', ['published', 'review', 'archived']);

    // Published can go to archived
    this.stateTransitions.set('published', ['archived']);

    // Archived can go to draft
    this.stateTransitions.set('archived', ['draft']);

    // Deleted is terminal
    this.stateTransitions.set('deleted', []);
  }

  /**
   * Add lifecycle event
   */
  private addLifecycleEvent(documentId: string, event: LifecycleEvent): void {
    const events = this.lifecycleEvents.get(documentId) || [];
    events.push(event);
    this.lifecycleEvents.set(documentId, events);
  }

  /**
   * Get status change reason
   */
  private getStatusChangeReason(status: DocumentStatus): string {
    const reasons: Record<DocumentStatus, string> = {
      draft: 'Document created',
      review: 'Document submitted for review',
      approved: 'Document approved',
      published: 'Document published',
      archived: 'Document archived',
      deleted: 'Document deleted'
    };

    return reasons[status] || 'Status changed';
  }

  /**
   * Generate unique event ID
   */
  private generateEventId(): string {
    return `lifecycle_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
}

// Supporting interfaces
export interface LifecycleEvent {
  id: string;
  documentId: string;
  fromStatus: DocumentStatus | null;
  toStatus: DocumentStatus;
  userId: string;
  timestamp: Date;
  reason: string;
  metadata: {
    type: 'creation' | 'status_change' | 'status_transition' | 'automated';
    source: 'user' | 'system' | 'api';
  };
}

export interface LifecycleStats {
  totalEvents: number;
  currentStatus: DocumentStatus | null;
  statusHistory: Array<{
    status: DocumentStatus;
    timestamp: Date;
    duration: number;
  }>;
  averageTimeInStatus: number;
  totalLifecycleTime: number;
  mostActiveUser: string | null;
}

export interface GlobalLifecycleAnalytics {
  totalDocuments: number;
  totalEvents: number;
  statusDistribution: Record<DocumentStatus, number>;
  mostCommonStatus: DocumentStatus | null;
  mostCommonTransition: string | null;
  mostActiveUser: string | null;
  averageEventsPerDocument: number;
}


=== FILE: client/src/features/documents/core/DocumentEngine.ts ===

import { BaseDocument, DocumentType, DocumentContent, DocumentMetadata, DocumentVersion, DocumentPermissions, CollaborationState, AIState, WorkflowState } from '../types/document.types';
import { DocumentRegistry } from './DocumentRegistry';
import { DocumentStorage } from './DocumentStorage';
import { DocumentVersioning } from './DocumentVersioning';
import { DocumentLocking } from './DocumentLocking';
import { DocumentLifecycle } from './DocumentLifecycle';
import { infographicDocumentType } from '../types/infographic/InfographicDocumentType';

/**
 * Core Document Engine - Central orchestrator for all document operations
 * 
 * This engine provides a unified interface for:
 * - Document CRUD operations
 * - Version control and history
 * - Collaboration and locking
 * - AI integration
 * - Workflow management
 * - Search and discovery
 */
export class DocumentEngine {
  private registry: DocumentRegistry;
  private storage: DocumentStorage;
  private versioning: DocumentVersioning;
  private locking: DocumentLocking;
  private lifecycle: DocumentLifecycle;

  constructor() {
    this.registry = new DocumentRegistry();
    this.storage = new DocumentStorage();
    this.versioning = new DocumentVersioning();
    this.locking = new DocumentLocking();
    this.lifecycle = new DocumentLifecycle();
    
    // Register document types
    this.registry.register('infographic', infographicDocumentType);
  }

  /**
   * Create a new document
   */
  async createDocument(
    type: DocumentType,
    data: Partial<BaseDocument>,
    options: {
      templateId?: string;
      aiGenerated?: boolean;
      creationMethod?: 'upload' | 'manual' | 'ai-generated' | 'hybrid';
    } = {}
  ): Promise<BaseDocument> {
    // Get document type definition
    const typeDefinition = this.registry.get(type);
    if (!typeDefinition) {
      throw new Error(`Unknown document type: ${type}`);
    }

    // Create base document structure
    const document: BaseDocument = {
      id: this.generateId(),
      type,
      title: data.title || 'Untitled Document',
      description: data.description || '',
      content: data.content || { format: 'json', data: {} },
      metadata: {
        category: data.metadata?.category || 'general',
        tags: data.metadata?.tags || [],
        status: 'draft',
        visibility: 'private',
        language: 'en',
        wordCount: 0,
        pageCount: 0,
        readingTime: 0,
        complexity: 'low',
        creationMethod: options.creationMethod || 'manual',
        ...data.metadata
      },
      version: {
        current: '1.0.0',
        history: [],
        locked: false
      },
      permissions: {
        owner: data.permissions?.owner || '',
        editors: data.permissions?.editors || [],
        viewers: data.permissions?.viewers || [],
        commenters: data.permissions?.commenters || [],
        public: false
      },
      collaboration: {
        activeUsers: [],
        comments: [],
        suggestions: [],
        mentions: [],
        lastActivity: new Date()
      },
      ai: {
        analyzed: false,
        overallScore: 0,
        qualityScore: 0,
        completenessScore: 0,
        readabilityScore: 0,
        insights: [],
        suggestions: [],
        autoGenerated: options.aiGenerated || false,
        aiAssisted: false,
        confidence: 0
      },
      createdAt: new Date(),
      updatedAt: new Date(),
      createdBy: data.createdBy || '',
      lastModifiedBy: data.createdBy || ''
    };

    // Apply template if specified
    if (options.templateId) {
      const template = await this.getTemplate(options.templateId);
      if (template) {
        document.content = template.content;
        document.metadata = { ...document.metadata, ...template.metadata };
      }
    }

    // Validate document
    const validation = typeDefinition.validator(document);
    if (!validation.valid) {
      throw new Error(`Document validation failed: ${validation.errors.join(', ')}`);
    }

    // Save document
    await this.storage.save(document);

    // Initialize version history
    await this.versioning.createInitialVersion(document);

    // Initialize lifecycle
    await this.lifecycle.initialize(document);

    return document;
  }

  /**
   * Get a document by ID
   */
  async getDocument(id: string): Promise<BaseDocument | null> {
    return await this.storage.get(id);
  }

  /**
   * Update a document
   */
  async updateDocument(
    id: string,
    updates: Partial<BaseDocument>,
    options: {
      createVersion?: boolean;
      versionMessage?: string;
      lockDocument?: boolean;
    } = {}
  ): Promise<BaseDocument> {
    const document = await this.getDocument(id);
    if (!document) {
      throw new Error(`Document not found: ${id}`);
    }

    // Check if document is locked by another user
    if (document.version.locked && document.version.lockedBy !== updates.lastModifiedBy) {
      throw new Error('Document is locked by another user');
    }

    // Create new version if requested
    if (options.createVersion) {
      await this.versioning.createVersion(document, updates, options.versionMessage);
    }

    // Update document
    const updatedDocument = {
      ...document,
      ...updates,
      updatedAt: new Date(),
      lastModifiedBy: updates.lastModifiedBy || document.lastModifiedBy
    };

    // Validate updated document
    const typeDefinition = this.registry.get(updatedDocument.type);
    if (typeDefinition) {
      const validation = typeDefinition.validator(updatedDocument);
      if (!validation.valid) {
        throw new Error(`Document validation failed: ${validation.errors.join(', ')}`);
      }
    }

    // Save updated document
    await this.storage.save(updatedDocument);

    // Update lifecycle
    await this.lifecycle.update(updatedDocument);

    return updatedDocument;
  }

  /**
   * Delete a document
   */
  async deleteDocument(id: string, options: {
    permanent?: boolean;
    archive?: boolean;
  } = {}): Promise<void> {
    const document = await this.getDocument(id);
    if (!document) {
      throw new Error(`Document not found: ${id}`);
    }

    if (options.archive) {
      // Archive document instead of deleting
      await this.updateDocument(id, {
        metadata: { ...document.metadata, status: 'archived' }
      });
    } else if (options.permanent) {
      // Permanently delete document
      await this.storage.delete(id);
      await this.versioning.deleteHistory(id);
    } else {
      // Soft delete (mark as deleted)
      await this.updateDocument(id, {
        metadata: { ...document.metadata, status: 'deleted' }
      });
    }
  }

  /**
   * Search documents
   */
  async searchDocuments(query: {
    text?: string;
    type?: DocumentType;
    category?: string;
    tags?: string[];
    status?: string;
    createdBy?: string;
    dateRange?: { start: Date; end: Date };
    aiGenerated?: boolean;
    limit?: number;
    offset?: number;
  }): Promise<{ documents: BaseDocument[]; total: number }> {
    return await this.storage.search(query);
  }

  /**
   * Get document versions
   */
  async getDocumentVersions(id: string): Promise<any[]> {
    return await this.versioning.getHistory(id);
  }

  /**
   * Restore document to a specific version
   */
  async restoreDocument(id: string, version: string): Promise<BaseDocument> {
    const document = await this.getDocument(id);
    if (!document) {
      throw new Error(`Document not found: ${id}`);
    }

    const versionData = await this.versioning.getVersion(id, version);
    if (!versionData) {
      throw new Error(`Version not found: ${version}`);
    }

    // Create new version with restored content
    const restoredDocument = {
      ...document,
      content: versionData.snapshot.content,
      metadata: versionData.snapshot.metadata,
      version: {
        ...document.version,
        current: this.incrementVersion(document.version.current)
      }
    };

    return await this.updateDocument(id, restoredDocument, {
      createVersion: true,
      versionMessage: `Restored to version ${version}`
    });
  }

  /**
   * Lock document for editing
   */
  async lockDocument(id: string, userId: string): Promise<void> {
    await this.locking.lock(id, userId);
  }

  /**
   * Unlock document
   */
  async unlockDocument(id: string, userId: string): Promise<void> {
    await this.locking.unlock(id, userId);
  }

  /**
   * Get document templates
   */
  async getTemplates(type?: DocumentType): Promise<any[]> {
    return await this.storage.getTemplates(type);
  }

  /**
   * Get template by ID
   */
  async getTemplate(templateId: string): Promise<any> {
    return await this.storage.getTemplate(templateId);
  }

  /**
   * Analyze document with AI
   */
  async analyzeDocument(id: string): Promise<AIState> {
    const document = await this.getDocument(id);
    if (!document) {
      throw new Error(`Document not found: ${id}`);
    }

    // This would integrate with the AI service layer
    // For now, return mock analysis
    const analysis: AIState = {
      analyzed: true,
      lastAnalyzed: new Date(),
      overallScore: Math.floor(Math.random() * 40) + 60, // 60-100
      qualityScore: Math.floor(Math.random() * 40) + 60,
      completenessScore: Math.floor(Math.random() * 40) + 60,
      readabilityScore: Math.floor(Math.random() * 40) + 60,
      insights: [],
      suggestions: [],
      autoGenerated: document.ai.autoGenerated,
      aiAssisted: document.ai.aiAssisted,
      confidence: Math.floor(Math.random() * 30) + 70 // 70-100
    };

    // Update document with analysis
    await this.updateDocument(id, { ai: analysis });

    return analysis;
  }

  /**
   * Generate document content with AI
   */
  async generateContent(
    type: DocumentType,
    prompt: string,
    options: {
      templateId?: string;
      context?: any;
    } = {}
  ): Promise<BaseDocument> {
    // This would integrate with the AI service layer
    // For now, create a basic document structure
    const content: DocumentContent = {
      format: 'json',
      data: {
        sections: [
          {
            id: 'introduction',
            title: 'Introduction',
            content: 'AI-generated content based on prompt'
          }
        ]
      }
    };

    return await this.createDocument(type, {
      title: 'AI Generated Document',
      content,
      ai: {
        analyzed: false,
        overallScore: 0,
        qualityScore: 0,
        completenessScore: 0,
        readabilityScore: 0,
        insights: [],
        suggestions: [],
        autoGenerated: true,
        aiAssisted: false,
        confidence: 0,
        generationPrompt: prompt
      }
    }, {
      aiGenerated: true,
      creationMethod: 'ai-generated'
    });
  }

  /**
   * Get document analytics
   */
  async getDocumentAnalytics(id: string): Promise<any> {
    const document = await this.getDocument(id);
    if (!document) {
      throw new Error(`Document not found: ${id}`);
    }

    return {
      views: 0, // Would track from analytics
      edits: document.version.history.length,
      collaborators: document.collaboration.activeUsers.length,
      comments: document.collaboration.comments.length,
      suggestions: document.collaboration.suggestions.length,
      lastActivity: document.collaboration.lastActivity,
      aiScore: document.ai.overallScore,
      completionRate: document.ai.completenessScore
    };
  }

  /**
   * Get registry instance
   */
  getRegistry(): DocumentRegistry {
    return this.registry;
  }

  /**
   * Get storage instance
   */
  getStorage(): DocumentStorage {
    return this.storage;
  }

  /**
   * Get versioning instance
   */
  getVersioning(): DocumentVersioning {
    return this.versioning;
  }

  /**
   * Get locking instance
   */
  getLocking(): DocumentLocking {
    return this.locking;
  }

  /**
   * Get lifecycle instance
   */
  getLifecycle(): DocumentLifecycle {
    return this.lifecycle;
  }

  /**
   * Generate unique ID
   */
  private generateId(): string {
    return `doc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * Increment version number
   */
  private incrementVersion(version: string): string {
    const parts = version.split('.');
    const major = parseInt(parts[0]);
    const minor = parseInt(parts[1]);
    const patch = parseInt(parts[2]);
    return `${major}.${minor}.${patch + 1}`;
  }
}

// Export singleton instance
export const documentEngine = new DocumentEngine();


=== FILE: client/src/features/documents/core/DocumentRegistry.ts ===

import { DocumentType, DocumentTypeDefinition, BaseDocument, ValidationResult } from '../types/document.types';

/**
 * Document Registry - Manages document type definitions and factories
 * 
 * This registry provides:
 * - Document type registration and management
 * - Type-specific factories and validators
 * - Schema validation
 * - Template management
 * - AI configuration per type
 */
export class DocumentRegistry {
  private types: Map<DocumentType, DocumentTypeDefinition> = new Map();
  private subtypes: Map<string, DocumentTypeDefinition> = new Map();

  /**
   * Register a document type
   */
  register(type: DocumentType, definition: DocumentTypeDefinition): void {
    this.types.set(type, definition);
  }

  /**
   * Register a document subtype
   */
  registerSubtype(parentType: DocumentType, subtypeKey: string, definition: DocumentTypeDefinition): void {
    const parentDefinition = this.types.get(parentType);
    if (!parentDefinition) {
      throw new Error(`Parent type not found: ${parentType}`);
    }

    if (!parentDefinition.subtypes) {
      parentDefinition.subtypes = {};
    }

    parentDefinition.subtypes[subtypeKey] = definition;
    this.subtypes.set(`${parentType}:${subtypeKey}`, definition);
  }

  /**
   * Get document type definition
   */
  get(type: DocumentType): DocumentTypeDefinition | undefined {
    return this.types.get(type);
  }

  /**
   * Get document subtype definition
   */
  getSubtype(parentType: DocumentType, subtypeKey: string): DocumentTypeDefinition | undefined {
    return this.subtypes.get(`${parentType}:${subtypeKey}`);
  }

  /**
   * Get all registered types
   */
  getAllTypes(): DocumentType[] {
    return Array.from(this.types.keys());
  }

  /**
   * Get all subtypes for a parent type
   */
  getSubtypes(parentType: DocumentType): string[] {
    const definition = this.types.get(parentType);
    return definition?.subtypes ? Object.keys(definition.subtypes) : [];
  }

  /**
   * Create a document of a specific type
   */
  create(type: DocumentType, data: Partial<BaseDocument>): BaseDocument {
    const definition = this.get(type);
    if (!definition) {
      throw new Error(`Unknown document type: ${type}`);
    }

    return definition.factory(data);
  }

  /**
   * Create a document of a specific subtype
   */
  createSubtype(parentType: DocumentType, subtypeKey: string, data: Partial<BaseDocument>): BaseDocument {
    const definition = this.getSubtype(parentType, subtypeKey);
    if (!definition) {
      throw new Error(`Unknown document subtype: ${parentType}:${subtypeKey}`);
    }

    return definition.factory(data);
  }

  /**
   * Validate a document
   */
  validate(document: BaseDocument): ValidationResult {
    const definition = this.get(document.type);
    if (!definition) {
      return {
        valid: false,
        errors: [`Unknown document type: ${document.type}`],
        warnings: []
      };
    }

    return definition.validator(document);
  }

  /**
   * Validate a document subtype
   */
  validateSubtype(document: BaseDocument, subtypeKey: string): ValidationResult {
    const definition = this.getSubtype(document.type, subtypeKey);
    if (!definition) {
      return {
        valid: false,
        errors: [`Unknown document subtype: ${document.type}:${subtypeKey}`],
        warnings: []
      };
    }

    return definition.validator(document);
  }

  /**
   * Get schema for a document type
   */
  getSchema(type: DocumentType): any {
    const definition = this.get(type);
    return definition?.schema;
  }

  /**
   * Get schema for a document subtype
   */
  getSubtypeSchema(parentType: DocumentType, subtypeKey: string): any {
    const definition = this.getSubtype(parentType, subtypeKey);
    return definition?.schema;
  }

  /**
   * Get templates for a document type
   */
  getTemplates(type: DocumentType): any[] {
    const definition = this.get(type);
    return definition?.templates || [];
  }

  /**
   * Get templates for a document subtype
   */
  getSubtypeTemplates(parentType: DocumentType, subtypeKey: string): any[] {
    const definition = this.getSubtype(parentType, subtypeKey);
    return definition?.templates || [];
  }

  /**
   * Get AI configuration for a document type
   */
  getAIConfig(type: DocumentType): any {
    const definition = this.get(type);
    return definition?.aiConfig;
  }

  /**
   * Get AI configuration for a document subtype
   */
  getSubtypeAIConfig(parentType: DocumentType, subtypeKey: string): any {
    const definition = this.getSubtype(parentType, subtypeKey);
    return definition?.aiConfig;
  }

  /**
   * Get workflow templates for a document type
   */
  getWorkflowTemplates(type: DocumentType): any[] {
    const definition = this.get(type);
    return definition?.workflowTemplates || [];
  }

  /**
   * Get workflow templates for a document subtype
   */
  getSubtypeWorkflowTemplates(parentType: DocumentType, subtypeKey: string): any[] {
    const definition = this.getSubtype(parentType, subtypeKey);
    return definition?.workflowTemplates || [];
  }

  /**
   * Check if a document type is registered
   */
  hasType(type: DocumentType): boolean {
    return this.types.has(type);
  }

  /**
   * Check if a document subtype is registered
   */
  hasSubtype(parentType: DocumentType, subtypeKey: string): boolean {
    return this.subtypes.has(`${parentType}:${subtypeKey}`);
  }

  /**
   * Unregister a document type
   */
  unregister(type: DocumentType): void {
    this.types.delete(type);
  }

  /**
   * Unregister a document subtype
   */
  unregisterSubtype(parentType: DocumentType, subtypeKey: string): void {
    const parentDefinition = this.types.get(parentType);
    if (parentDefinition?.subtypes) {
      delete parentDefinition.subtypes[subtypeKey];
    }
    this.subtypes.delete(`${parentType}:${subtypeKey}`);
  }

  /**
   * Clear all registrations
   */
  clear(): void {
    this.types.clear();
    this.subtypes.clear();
  }

  /**
   * Get registry statistics
   */
  getStats(): {
    totalTypes: number;
    totalSubtypes: number;
    types: Record<DocumentType, number>;
  } {
    const stats = {
      totalTypes: this.types.size,
      totalSubtypes: this.subtypes.size,
      types: {} as Record<DocumentType, number>
    };

    for (const [type, definition] of this.types) {
      stats.types[type] = definition.subtypes ? Object.keys(definition.subtypes).length : 0;
    }

    return stats;
  }
}


=== FILE: client/src/features/documents/core/DocumentStorage.ts ===

import { BaseDocument, DocumentType, DocumentSearchQuery, DocumentSearchResult, DocumentTemplate } from '../types/document.types';

/**
 * Document Storage - Handles document persistence and retrieval
 * 
 * This storage layer provides:
 * - Document CRUD operations
 * - Search and filtering
 * - Template management
 * - Caching and optimization
 * - Backup and recovery
 */
export class DocumentStorage {
  private documents: Map<string, BaseDocument> = new Map();
  private templates: Map<string, DocumentTemplate> = new Map();
  private indexes: Map<string, Set<string>> = new Map();
  private cache: Map<string, any> = new Map();
  private cacheExpiry: Map<string, number> = new Map();

  constructor() {
    this.initializeIndexes();
  }

  /**
   * Save a document
   */
  async save(document: BaseDocument): Promise<void> {
    // Validate document
    if (!document.id || !document.type) {
      throw new Error('Invalid document: missing required fields');
    }

    // Update indexes
    this.updateIndexes(document);

    // Store document
    this.documents.set(document.id, document);

    // Update cache
    this.cache.set(`document:${document.id}`, document);
    this.cacheExpiry.set(`document:${document.id}`, Date.now() + 300000); // 5 minutes

    // Emit storage event
    this.emitStorageEvent('document:saved', { document });
  }

  /**
   * Get a document by ID
   */
  async get(id: string): Promise<BaseDocument | null> {
    // Check cache first
    const cached = this.cache.get(`document:${id}`);
    if (cached && this.cacheExpiry.get(`document:${id}`) > Date.now()) {
      return cached;
    }

    // Get from storage
    const document = this.documents.get(id);
    if (!document) {
      return null;
    }

    // Update cache
    this.cache.set(`document:${id}`, document);
    this.cacheExpiry.set(`document:${id}`, Date.now() + 300000);

    return document;
  }

  /**
   * Get multiple documents by IDs
   */
  async getMany(ids: string[]): Promise<BaseDocument[]> {
    const documents: BaseDocument[] = [];
    
    for (const id of ids) {
      const document = await this.get(id);
      if (document) {
        documents.push(document);
      }
    }

    return documents;
  }

  /**
   * Delete a document
   */
  async delete(id: string): Promise<void> {
    const document = this.documents.get(id);
    if (!document) {
      throw new Error(`Document not found: ${id}`);
    }

    // Remove from indexes
    this.removeFromIndexes(document);

    // Remove from storage
    this.documents.delete(id);

    // Remove from cache
    this.cache.delete(`document:${id}`);
    this.cacheExpiry.delete(`document:${id}`);

    // Emit storage event
    this.emitStorageEvent('document:deleted', { document });
  }

  /**
   * Search documents
   */
  async search(query: DocumentSearchQuery): Promise<DocumentSearchResult> {
    const {
      text,
      type,
      category,
      tags,
      status,
      createdBy,
      dateRange,
      aiGenerated,
      limit = 50,
      offset = 0,
      sortBy = 'updatedAt',
      sortOrder = 'desc'
    } = query;

    let results = Array.from(this.documents.values());

    // Apply filters
    if (type) {
      results = results.filter(doc => doc.type === type);
    }

    if (category) {
      results = results.filter(doc => doc.metadata.category === category);
    }

    if (tags && tags.length > 0) {
      results = results.filter(doc => 
        tags.some(tag => doc.metadata.tags.includes(tag))
      );
    }

    if (status) {
      results = results.filter(doc => doc.metadata.status === status);
    }

    if (createdBy) {
      results = results.filter(doc => doc.createdBy === createdBy);
    }

    if (dateRange) {
      results = results.filter(doc => 
        doc.createdAt >= dateRange.start && doc.createdAt <= dateRange.end
      );
    }

    if (aiGenerated !== undefined) {
      results = results.filter(doc => doc.ai.autoGenerated === aiGenerated);
    }

    // Apply text search
    if (text) {
      const searchText = text.toLowerCase();
      results = results.filter(doc => 
        doc.title.toLowerCase().includes(searchText) ||
        doc.description?.toLowerCase().includes(searchText) ||
        doc.metadata.tags.some(tag => tag.toLowerCase().includes(searchText))
      );
    }

    // Sort results
    results.sort((a, b) => {
      const aValue = this.getSortValue(a, sortBy);
      const bValue = this.getSortValue(b, sortBy);
      
      if (sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    // Apply pagination
    const total = results.length;
    const documents = results.slice(offset, offset + limit);

    // Generate facets
    const facets = this.generateFacets(results);

    // Generate suggestions
    const suggestions = this.generateSuggestions(text, results);

    return {
      documents,
      total,
      facets,
      suggestions
    };
  }

  /**
   * Get document templates
   */
  async getTemplates(type?: DocumentType): Promise<DocumentTemplate[]> {
    let templates = Array.from(this.templates.values());

    if (type) {
      templates = templates.filter(template => template.type === type);
    }

    return templates.sort((a, b) => b.usageCount - a.usageCount);
  }

  /**
   * Get template by ID
   */
  async getTemplate(templateId: string): Promise<DocumentTemplate | null> {
    return this.templates.get(templateId) || null;
  }

  /**
   * Save a template
   */
  async saveTemplate(template: DocumentTemplate): Promise<void> {
    this.templates.set(template.id, template);
    this.emitStorageEvent('template:saved', { template });
  }

  /**
   * Delete a template
   */
  async deleteTemplate(templateId: string): Promise<void> {
    this.templates.delete(templateId);
    this.emitStorageEvent('template:deleted', { templateId });
  }

  /**
   * Get document statistics
   */
  async getStats(): Promise<{
    totalDocuments: number;
    documentsByType: Record<DocumentType, number>;
    documentsByStatus: Record<string, number>;
    totalTemplates: number;
    storageSize: number;
  }> {
    const stats = {
      totalDocuments: this.documents.size,
      documentsByType: {} as Record<DocumentType, number>,
      documentsByStatus: {} as Record<string, number>,
      totalTemplates: this.templates.size,
      storageSize: 0
    };

    // Count by type and status
    for (const document of this.documents.values()) {
      stats.documentsByType[document.type] = (stats.documentsByType[document.type] || 0) + 1;
      stats.documentsByStatus[document.metadata.status] = (stats.documentsByStatus[document.metadata.status] || 0) + 1;
    }

    // Calculate storage size (rough estimate)
    stats.storageSize = JSON.stringify(Array.from(this.documents.values())).length;

    return stats;
  }

  /**
   * Backup documents
   */
  async backup(): Promise<{
    documents: BaseDocument[];
    templates: DocumentTemplate[];
    timestamp: Date;
  }> {
    return {
      documents: Array.from(this.documents.values()),
      templates: Array.from(this.templates.values()),
      timestamp: new Date()
    };
  }

  /**
   * Restore documents from backup
   */
  async restore(backup: {
    documents: BaseDocument[];
    templates: DocumentTemplate[];
  }): Promise<void> {
    // Clear existing data
    this.documents.clear();
    this.templates.clear();
    this.cache.clear();
    this.cacheExpiry.clear();

    // Restore documents
    for (const document of backup.documents) {
      this.documents.set(document.id, document);
    }

    // Restore templates
    for (const template of backup.templates) {
      this.templates.set(template.id, template);
    }

    // Rebuild indexes
    this.initializeIndexes();
    for (const document of backup.documents) {
      this.updateIndexes(document);
    }

    this.emitStorageEvent('storage:restored', { backup });
  }

  /**
   * Clear all data
   */
  async clear(): Promise<void> {
    this.documents.clear();
    this.templates.clear();
    this.cache.clear();
    this.cacheExpiry.clear();
    this.initializeIndexes();
    this.emitStorageEvent('storage:cleared', {});
  }

  /**
   * Initialize search indexes
   */
  private initializeIndexes(): void {
    this.indexes.clear();
    this.indexes.set('type', new Set());
    this.indexes.set('category', new Set());
    this.indexes.set('status', new Set());
    this.indexes.set('createdBy', new Set());
    this.indexes.set('tags', new Set());
  }

  /**
   * Update search indexes
   */
  private updateIndexes(document: BaseDocument): void {
    // Update type index
    this.indexes.get('type')?.add(document.type);

    // Update category index
    this.indexes.get('category')?.add(document.metadata.category);

    // Update status index
    this.indexes.get('status')?.add(document.metadata.status);

    // Update createdBy index
    this.indexes.get('createdBy')?.add(document.createdBy);

    // Update tags index
    for (const tag of document.metadata.tags) {
      this.indexes.get('tags')?.add(tag);
    }
  }

  /**
   * Remove from search indexes
   */
  private removeFromIndexes(document: BaseDocument): void {
    // Note: In a real implementation, we'd need to check if other documents
    // still use these values before removing from indexes
    // For simplicity, we'll leave them in the indexes
  }

  /**
   * Get sort value for a document
   */
  private getSortValue(document: BaseDocument, sortBy: string): any {
    switch (sortBy) {
      case 'title':
        return document.title;
      case 'createdAt':
        return document.createdAt.getTime();
      case 'updatedAt':
        return document.updatedAt.getTime();
      case 'createdBy':
        return document.createdBy;
      case 'type':
        return document.type;
      case 'status':
        return document.metadata.status;
      default:
        return document.updatedAt.getTime();
    }
  }

  /**
   * Generate search facets
   */
  private generateFacets(documents: BaseDocument[]): any {
    const facets = {
      types: {} as Record<DocumentType, number>,
      categories: {} as Record<string, number>,
      tags: {} as Record<string, number>,
      statuses: {} as Record<string, number>,
      dateRanges: {} as Record<string, number>
    };

    for (const document of documents) {
      // Count by type
      facets.types[document.type] = (facets.types[document.type] || 0) + 1;

      // Count by category
      facets.categories[document.metadata.category] = (facets.categories[document.metadata.category] || 0) + 1;

      // Count by status
      facets.statuses[document.metadata.status] = (facets.statuses[document.metadata.status] || 0) + 1;

      // Count by tags
      for (const tag of document.metadata.tags) {
        facets.tags[tag] = (facets.tags[tag] || 0) + 1;
      }

      // Count by date ranges
      const now = new Date();
      const docDate = document.createdAt;
      const daysDiff = Math.floor((now.getTime() - docDate.getTime()) / (1000 * 60 * 60 * 24));

      if (daysDiff <= 7) {
        facets.dateRanges['last-week'] = (facets.dateRanges['last-week'] || 0) + 1;
      } else if (daysDiff <= 30) {
        facets.dateRanges['last-month'] = (facets.dateRanges['last-month'] || 0) + 1;
      } else if (daysDiff <= 90) {
        facets.dateRanges['last-quarter'] = (facets.dateRanges['last-quarter'] || 0) + 1;
      } else {
        facets.dateRanges['older'] = (facets.dateRanges['older'] || 0) + 1;
      }
    }

    return facets;
  }

  /**
   * Generate search suggestions
   */
  private generateSuggestions(text: string | undefined, documents: BaseDocument[]): string[] {
    if (!text) return [];

    const suggestions: string[] = [];
    const textLower = text.toLowerCase();

    // Suggest from document titles
    for (const document of documents) {
      if (document.title.toLowerCase().includes(textLower)) {
        suggestions.push(document.title);
      }
    }

    // Suggest from tags
    const allTags = new Set<string>();
    for (const document of documents) {
      for (const tag of document.metadata.tags) {
        if (tag.toLowerCase().includes(textLower)) {
          allTags.add(tag);
        }
      }
    }

    suggestions.push(...Array.from(allTags));

    return suggestions.slice(0, 10); // Limit to 10 suggestions
  }

  /**
   * Emit storage event
   */
  private emitStorageEvent(event: string, data: any): void {
    // In a real implementation, this would emit events to listeners
    console.log(`Storage event: ${event}`, data);
  }
}


=== FILE: client/src/features/documents/core/DocumentLocking.ts ===

import { BaseDocument } from '../types/document.types';

/**
 * Document Locking - Handles document locking and conflict resolution
 * 
 * This locking system provides:
 * - Document locking for editing
 * - Conflict detection and resolution
 * - Lock timeout management
 * - User presence tracking
 * - Lock notifications
 */
export class DocumentLocking {
  private locks: Map<string, DocumentLock> = new Map();
  private lockTimeouts: Map<string, NodeJS.Timeout> = new Map();
  private defaultLockTimeout = 30 * 60 * 1000; // 30 minutes

  /**
   * Lock a document for editing
   */
  async lock(documentId: string, userId: string, options: LockOptions = {}): Promise<void> {
    const existingLock = this.locks.get(documentId);
    
    if (existingLock && existingLock.userId !== userId) {
      // Check if lock has expired
      if (this.isLockExpired(existingLock)) {
        await this.unlock(documentId, existingLock.userId);
      } else {
        throw new Error(`Document is locked by ${existingLock.userName} (${existingLock.userEmail})`);
      }
    }

    const lock: DocumentLock = {
      documentId,
      userId,
      userName: options.userName || 'Unknown User',
      userEmail: options.userEmail || '',
      lockedAt: new Date(),
      expiresAt: new Date(Date.now() + (options.timeout || this.defaultLockTimeout)),
      reason: options.reason || 'Editing',
      force: options.force || false
    };

    this.locks.set(documentId, lock);

    // Set timeout to auto-unlock
    const timeout = setTimeout(() => {
      this.autoUnlock(documentId);
    }, options.timeout || this.defaultLockTimeout);

    this.lockTimeouts.set(documentId, timeout);

    // Emit lock event
    this.emitLockEvent('document:locked', { documentId, userId, lock });
  }

  /**
   * Unlock a document
   */
  async unlock(documentId: string, userId: string): Promise<void> {
    const lock = this.locks.get(documentId);
    
    if (!lock) {
      return; // Already unlocked
    }

    if (lock.userId !== userId) {
      throw new Error('You cannot unlock a document locked by another user');
    }

    // Clear timeout
    const timeout = this.lockTimeouts.get(documentId);
    if (timeout) {
      clearTimeout(timeout);
      this.lockTimeouts.delete(documentId);
    }

    // Remove lock
    this.locks.delete(documentId);

    // Emit unlock event
    this.emitLockEvent('document:unlocked', { documentId, userId });
  }

  /**
   * Force unlock a document (admin only)
   */
  async forceUnlock(documentId: string, adminUserId: string): Promise<void> {
    const lock = this.locks.get(documentId);
    
    if (!lock) {
      return; // Already unlocked
    }

    // Clear timeout
    const timeout = this.lockTimeouts.get(documentId);
    if (timeout) {
      clearTimeout(timeout);
      this.lockTimeouts.delete(documentId);
    }

    // Remove lock
    this.locks.delete(documentId);

    // Emit force unlock event
    this.emitLockEvent('document:force_unlocked', { 
      documentId, 
      adminUserId, 
      originalUserId: lock.userId 
    });
  }

  /**
   * Check if document is locked
   */
  async isLocked(documentId: string): Promise<boolean> {
    const lock = this.locks.get(documentId);
    
    if (!lock) {
      return false;
    }

    // Check if lock has expired
    if (this.isLockExpired(lock)) {
      await this.unlock(documentId, lock.userId);
      return false;
    }

    return true;
  }

  /**
   * Get lock information
   */
  async getLock(documentId: string): Promise<DocumentLock | null> {
    const lock = this.locks.get(documentId);
    
    if (!lock) {
      return null;
    }

    // Check if lock has expired
    if (this.isLockExpired(lock)) {
      await this.unlock(documentId, lock.userId);
      return null;
    }

    return lock;
  }

  /**
   * Extend lock timeout
   */
  async extendLock(documentId: string, userId: string, additionalTime: number): Promise<void> {
    const lock = this.locks.get(documentId);
    
    if (!lock || lock.userId !== userId) {
      throw new Error('Document is not locked by you');
    }

    // Update expiration time
    lock.expiresAt = new Date(Date.now() + additionalTime);

    // Clear existing timeout
    const timeout = this.lockTimeouts.get(documentId);
    if (timeout) {
      clearTimeout(timeout);
    }

    // Set new timeout
    const newTimeout = setTimeout(() => {
      this.autoUnlock(documentId);
    }, additionalTime);

    this.lockTimeouts.set(documentId, newTimeout);

    // Emit extend event
    this.emitLockEvent('document:lock_extended', { documentId, userId, additionalTime });
  }

  /**
   * Get all active locks
   */
  async getActiveLocks(): Promise<DocumentLock[]> {
    const activeLocks: DocumentLock[] = [];
    
    for (const [documentId, lock] of this.locks) {
      if (!this.isLockExpired(lock)) {
        activeLocks.push(lock);
      } else {
        // Clean up expired lock
        await this.unlock(documentId, lock.userId);
      }
    }

    return activeLocks;
  }

  /**
   * Get locks for a user
   */
  async getUserLocks(userId: string): Promise<DocumentLock[]> {
    const userLocks: DocumentLock[] = [];
    
    for (const [documentId, lock] of this.locks) {
      if (lock.userId === userId && !this.isLockExpired(lock)) {
        userLocks.push(lock);
      }
    }

    return userLocks;
  }

  /**
   * Check if user can edit document
   */
  async canEdit(documentId: string, userId: string): Promise<{
    canEdit: boolean;
    reason?: string;
    lockInfo?: DocumentLock;
  }> {
    const lock = await this.getLock(documentId);
    
    if (!lock) {
      return { canEdit: true };
    }

    if (lock.userId === userId) {
      return { canEdit: true, lockInfo: lock };
    }

    return {
      canEdit: false,
      reason: `Document is locked by ${lock.userName}`,
      lockInfo: lock
    };
  }

  /**
   * Get lock statistics
   */
  async getLockStats(): Promise<{
    totalLocks: number;
    activeLocks: number;
    expiredLocks: number;
    averageLockDuration: number;
    mostActiveUsers: UserLockStats[];
  }> {
    const stats = {
      totalLocks: this.locks.size,
      activeLocks: 0,
      expiredLocks: 0,
      averageLockDuration: 0,
      mostActiveUsers: [] as UserLockStats[]
    };

    const userStats = new Map<string, UserLockStats>();

    for (const lock of this.locks.values()) {
      if (this.isLockExpired(lock)) {
        stats.expiredLocks++;
      } else {
        stats.activeLocks++;
      }

      // Track user stats
      const userStat = userStats.get(lock.userId) || {
        userId: lock.userId,
        userName: lock.userName,
        totalLocks: 0,
        totalDuration: 0,
        averageDuration: 0
      };

      userStat.totalLocks++;
      userStat.totalDuration += Date.now() - lock.lockedAt.getTime();
      userStat.averageDuration = userStat.totalDuration / userStat.totalLocks;

      userStats.set(lock.userId, userStat);
    }

    stats.mostActiveUsers = Array.from(userStats.values())
      .sort((a, b) => b.totalLocks - a.totalLocks)
      .slice(0, 10);

    return stats;
  }

  /**
   * Clean up expired locks
   */
  async cleanupExpiredLocks(): Promise<number> {
    let cleanedCount = 0;
    const expiredLocks: string[] = [];

    for (const [documentId, lock] of this.locks) {
      if (this.isLockExpired(lock)) {
        expiredLocks.push(documentId);
      }
    }

    for (const documentId of expiredLocks) {
      const lock = this.locks.get(documentId);
      if (lock) {
        await this.unlock(documentId, lock.userId);
        cleanedCount++;
      }
    }

    return cleanedCount;
  }

  /**
   * Check if lock has expired
   */
  private isLockExpired(lock: DocumentLock): boolean {
    return Date.now() > lock.expiresAt.getTime();
  }

  /**
   * Auto-unlock expired document
   */
  private autoUnlock(documentId: string): void {
    const lock = this.locks.get(documentId);
    if (lock) {
      this.locks.delete(documentId);
      this.lockTimeouts.delete(documentId);
      
      this.emitLockEvent('document:auto_unlocked', { 
        documentId, 
        userId: lock.userId,
        reason: 'Lock expired'
      });
    }
  }

  /**
   * Emit lock event
   */
  private emitLockEvent(event: string, data: any): void {
    // In a real implementation, this would emit events to listeners
    console.log(`Lock event: ${event}`, data);
  }
}

// Supporting interfaces
export interface DocumentLock {
  documentId: string;
  userId: string;
  userName: string;
  userEmail: string;
  lockedAt: Date;
  expiresAt: Date;
  reason: string;
  force: boolean;
}

export interface LockOptions {
  timeout?: number;
  reason?: string;
  userName?: string;
  userEmail?: string;
  force?: boolean;
}

export interface UserLockStats {
  userId: string;
  userName: string;
  totalLocks: number;
  totalDuration: number;
  averageDuration: number;
}


=== FILE: client/src/features/documents/storage/StorageIntegration.ts ===

import { BaseDocument } from '../types/document.types';
import { DocumentStorageStrategy } from './DocumentStorageStrategy';
import { AdvancedVersioning } from './AdvancedVersioning';
import { EnhancedLocking } from './EnhancedLocking';
import { ConflictResolutionSystem } from './ConflictResolution';

/**
 * Storage Integration - Unified storage management system
 * 
 * This integration provides:
 * - Unified API for all storage operations
 * - Seamless integration of versioning, locking, and conflict resolution
 * - Performance optimization
 * - Data consistency and integrity
 * - Backup and recovery
 */
export class StorageIntegration {
  private storageStrategy: DocumentStorageStrategy;
  private versioning: AdvancedVersioning;
  private locking: EnhancedLocking;
  private conflictResolution: ConflictResolutionSystem;
  private performanceMonitor: StoragePerformanceMonitor;
  private dataIntegrity: DataIntegrityChecker;

  constructor() {
    this.storageStrategy = new DocumentStorageStrategy();
    this.versioning = new AdvancedVersioning();
    this.locking = new EnhancedLocking();
    this.conflictResolution = new ConflictResolutionSystem();
    this.performanceMonitor = new StoragePerformanceMonitor();
    this.dataIntegrity = new DataIntegrityChecker();
  }

  /**
   * Save document with full integration
   */
  async saveDocument(
    document: BaseDocument,
    options: IntegratedSaveOptions = {}
  ): Promise<IntegratedSaveResult> {
    const startTime = Date.now();
    
    try {
      // 1. Check data integrity
      const integrityCheck = await this.dataIntegrity.checkDocument(document);
      if (!integrityCheck.valid) {
        return {
          success: false,
          errors: integrityCheck.errors,
          requiresFix: true
        };
      }

      // 2. Detect conflicts
      const conflictDetection = await this.conflictResolution.detectConflicts(
        document,
        document,
        { checkAIConflicts: true }
      );

      // 3. Acquire appropriate locks
      const lockResult = await this.locking.acquireLock(
        document.id,
        document.lastModifiedBy,
        {
          lockType: options.lockType || 'exclusive',
          timeout: options.lockTimeout || 30 * 60 * 1000,
          reason: 'Document save',
          metadata: { operation: 'save' }
        }
      );

      if (!lockResult.success) {
        return {
          success: false,
          reason: 'lock_failed',
          lockInfo: lockResult
        };
      }

      // 4. Create version if needed
      let versionResult;
      if (options.createVersion) {
        versionResult = await this.versioning.createVersion(
          document,
          {},
          {
            versionType: options.versionType || 'patch',
            message: options.versionMessage || 'Document updated',
            branchName: options.branchName
          }
        );
      }

      // 5. Save document
      const saveResult = await this.storageStrategy.saveDocument(document, {
        createVersion: options.createVersion,
        versionMessage: options.versionMessage,
        lockDocument: false, // Already locked
        createBackup: options.createBackup,
        force: options.force
      });

      if (!saveResult.success) {
        // Release lock on failure
        await this.locking.releaseLock(document.id, document.lastModifiedBy);
        return {
          success: false,
          reason: 'save_failed',
          errors: saveResult.conflicts || []
        };
      }

      // 6. Resolve conflicts if any
      if (conflictDetection.hasConflicts && options.autoResolveConflicts) {
        const resolutionResult = await this.conflictResolution.autoResolveConflicts(
          conflictDetection.conflicts,
          { minConfidence: 0.7 }
        );

        if (resolutionResult.resolved.length > 0) {
          // Apply resolutions and save again
          const resolvedDocument = await this.applyResolutions(document, resolutionResult.resolved);
          await this.storageStrategy.saveDocument(resolvedDocument, {
            createVersion: true,
            versionMessage: 'Auto-resolved conflicts'
          });
        }
      }

      // 7. Release lock
      await this.locking.releaseLock(document.id, document.lastModifiedBy);

      // 8. Record performance metrics
      await this.performanceMonitor.recordOperation('save', Date.now() - startTime);

      return {
        success: true,
        document: saveResult.document || document,
        version: versionResult?.version,
        conflicts: conflictDetection.conflicts,
        processingTime: Date.now() - startTime,
        performance: await this.performanceMonitor.getOperationMetrics('save')
      };

    } catch (error) {
      // Cleanup on error
      await this.cleanupOnError(document.id, document.lastModifiedBy);
      throw new Error(`Failed to save document: ${error.message}`);
    }
  }

  /**
   * Get document with full integration
   */
  async getDocument(
    id: string,
    options: IntegratedGetOptions = {}
  ): Promise<IntegratedGetResult> {
    const startTime = Date.now();
    
    try {
      // 1. Get document from storage
      const document = await this.storageStrategy.getDocument(id, {
        bypassCache: options.bypassCache,
        checkConflicts: options.checkConflicts
      });

      if (!document) {
        return {
          success: false,
          reason: 'not_found'
        };
      }

      // 2. Check for conflicts if requested
      let conflicts = null;
      if (options.checkConflicts) {
        const conflictDetection = await this.conflictResolution.detectConflicts(
          document,
          document
        );
        conflicts = conflictDetection.conflicts;
      }

      // 3. Get version information if requested
      let versionInfo = null;
      if (options.includeVersionInfo) {
        const versionHistory = await this.versioning.getVersionHistory(id);
        versionInfo = {
          currentVersion: document.version.current,
          totalVersions: versionHistory.totalVersions,
          lastModified: document.updatedAt
        };
      }

      // 4. Get lock information if requested
      let lockInfo = null;
      if (options.includeLockInfo) {
        const lock = await this.locking.getLock(id);
        if (lock) {
          lockInfo = {
            isLocked: true,
            lockedBy: lock.userName,
            lockedAt: lock.lockedAt,
            expiresAt: lock.expiresAt,
            lockType: lock.lockType
          };
        }
      }

      // 5. Record performance metrics
      await this.performanceMonitor.recordOperation('get', Date.now() - startTime);

      return {
        success: true,
        document,
        conflicts,
        versionInfo,
        lockInfo,
        processingTime: Date.now() - startTime,
        performance: await this.performanceMonitor.getOperationMetrics('get')
      };

    } catch (error) {
      throw new Error(`Failed to get document: ${error.message}`);
    }
  }

  /**
   * Delete document with full integration
   */
  async deleteDocument(
    id: string,
    options: IntegratedDeleteOptions = {}
  ): Promise<IntegratedDeleteResult> {
    const startTime = Date.now();
    
    try {
      // 1. Check if document is locked
      const lockInfo = await this.locking.getLock(id);
      if (lockInfo && !options.force) {
        return {
          success: false,
          reason: 'locked',
          lockedBy: lockInfo.userName,
          lockExpiresAt: lockInfo.expiresAt
        };
      }

      // 2. Create final backup if requested
      if (options.createBackup) {
        const document = await this.storageStrategy.getDocument(id);
        if (document) {
          await this.storageStrategy.createBackup(id, {
            includeVersions: options.includeVersions,
            compression: options.compression
          });
        }
      }

      // 3. Delete document
      const deleteResult = await this.storageStrategy.deleteDocument(id, {
        createBackup: options.createBackup,
        deleteVersions: options.deleteVersions,
        force: options.force
      });

      if (!deleteResult.success) {
        return {
          success: false,
          reason: 'delete_failed'
        };
      }

      // 4. Clean up locks
      if (lockInfo) {
        await this.locking.releaseLock(id, lockInfo.userId, { force: true });
      }

      // 5. Record performance metrics
      await this.performanceMonitor.recordOperation('delete', Date.now() - startTime);

      return {
        success: true,
        deletedAt: deleteResult.deletedAt,
        backupCreated: deleteResult.backupCreated,
        processingTime: Date.now() - startTime,
        performance: await this.performanceMonitor.getOperationMetrics('delete')
      };

    } catch (error) {
      throw new Error(`Failed to delete document: ${error.message}`);
    }
  }

  /**
   * Search documents with full integration
   */
  async searchDocuments(
    query: any,
    options: IntegratedSearchOptions = {}
  ): Promise<IntegratedSearchResult> {
    const startTime = Date.now();
    
    try {
      // 1. Perform search
      const searchResult = await this.storageStrategy.searchDocuments(query, {
        useCache: options.useCache,
        maxResults: options.maxResults
      });

      // 2. Enhance results with additional information
      const enhancedResults = await this.enhanceSearchResults(searchResult.documents, options);

      // 3. Record performance metrics
      await this.performanceMonitor.recordOperation('search', Date.now() - startTime);

      return {
        success: true,
        documents: enhancedResults,
        total: searchResult.total,
        facets: searchResult.facets,
        suggestions: searchResult.suggestions,
        processingTime: Date.now() - startTime,
        performance: await this.performanceMonitor.getOperationMetrics('search')
      };

    } catch (error) {
      throw new Error(`Failed to search documents: ${error.message}`);
    }
  }

  /**
   * Get comprehensive storage analytics
   */
  async getStorageAnalytics(): Promise<StorageAnalytics> {
    try {
      const storageStats = await this.storageStrategy.getStorageStats();
      const versionAnalytics = await this.versioning.getVersionAnalytics('');
      const lockAnalytics = await this.locking.getLockAnalytics();
      const conflictAnalytics = await this.conflictResolution.getConflictAnalytics();
      const performanceMetrics = await this.performanceMonitor.getOverallMetrics();

      return {
        storage: storageStats,
        versioning: versionAnalytics,
        locking: lockAnalytics,
        conflicts: conflictAnalytics,
        performance: performanceMetrics,
        health: await this.calculateStorageHealth(storageStats, performanceMetrics),
        recommendations: await this.generateStorageRecommendations(
          storageStats,
          lockAnalytics,
          conflictAnalytics
        )
      };

    } catch (error) {
      throw new Error(`Failed to get storage analytics: ${error.message}`);
    }
  }

  /**
   * Optimize storage performance
   */
  async optimizeStorage(): Promise<OptimizationResult> {
    try {
      const startTime = Date.now();
      const results: OptimizationResult = {
        storageOptimized: false,
        versioningOptimized: false,
        lockingOptimized: false,
        conflictsOptimized: false,
        performanceImproved: false,
        processingTime: 0
      };

      // 1. Optimize storage strategy
      const storageOptimization = await this.storageStrategy.optimizeStorage();
      results.storageOptimized = storageOptimization.cacheOptimized && 
                                storageOptimization.indexOptimized;

      // 2. Optimize versioning
      await this.versioning.cleanupVersions('', { keepVersions: 50, keepDays: 90 });
      results.versioningOptimized = true;

      // 3. Optimize locking
      const lockOptimization = await this.locking.optimizeLocks();
      results.lockingOptimized = lockOptimization.performanceImproved;

      // 4. Optimize conflict resolution
      // (No specific optimization for conflict resolution)

      // 5. Overall performance improvement
      results.performanceImproved = results.storageOptimized && 
                                   results.versioningOptimized && 
                                   results.lockingOptimized;

      results.processingTime = Date.now() - startTime;
      return results;

    } catch (error) {
      throw new Error(`Failed to optimize storage: ${error.message}`);
    }
  }

  // Private helper methods
  private async applyResolutions(
    document: BaseDocument,
    resolutions: any[]
  ): Promise<BaseDocument> {
    // Apply conflict resolutions to document
    return document;
  }

  private async cleanupOnError(documentId: string, userId: string): Promise<void> {
    try {
      // Release any acquired locks
      await this.locking.releaseLock(documentId, userId, { force: true });
    } catch (error) {
      console.error('Cleanup failed:', error);
    }
  }

  private async enhanceSearchResults(
    documents: BaseDocument[],
    options: IntegratedSearchOptions
  ): Promise<EnhancedDocument[]> {
    const enhanced: EnhancedDocument[] = [];

    for (const document of documents) {
      const enhancedDoc: EnhancedDocument = {
        ...document,
        lockInfo: null,
        versionInfo: null,
        conflictInfo: null
      };

      // Add lock information if requested
      if (options.includeLockInfo) {
        const lock = await this.locking.getLock(document.id);
        if (lock) {
          enhancedDoc.lockInfo = {
            isLocked: true,
            lockedBy: lock.userName,
            lockExpiresAt: lock.expiresAt
          };
        }
      }

      // Add version information if requested
      if (options.includeVersionInfo) {
        const versionHistory = await this.versioning.getVersionHistory(document.id);
        enhancedDoc.versionInfo = {
          currentVersion: document.version.current,
          totalVersions: versionHistory.totalVersions,
          lastModified: document.updatedAt
        };
      }

      // Add conflict information if requested
      if (options.includeConflictInfo) {
        const conflicts = await this.conflictResolution.detectConflicts(document, document);
        if (conflicts.hasConflicts) {
          enhancedDoc.conflictInfo = {
            hasConflicts: true,
            conflictCount: conflicts.totalConflicts,
            highSeverityConflicts: conflicts.highSeverityConflicts
          };
        }
      }

      enhanced.push(enhancedDoc);
    }

    return enhanced;
  }

  private async calculateStorageHealth(
    storageStats: any,
    performanceMetrics: any
  ): Promise<StorageHealth> {
    // Calculate storage health based on various metrics
    const healthScore = Math.min(100, 
      (storageStats.total.cacheHitRate * 30) +
      (performanceMetrics.averageResponseTime < 1000 ? 30 : 0) +
      (storageStats.total.documents > 0 ? 20 : 0) +
      (storageStats.total.storageSize < 1000000 ? 20 : 0)
    );

    return {
      score: healthScore,
      status: healthScore > 80 ? 'excellent' : healthScore > 60 ? 'good' : 'needs_attention',
      issues: healthScore < 60 ? ['Performance issues detected'] : [],
      recommendations: healthScore < 80 ? ['Consider optimization'] : []
    };
  }

  private async generateStorageRecommendations(
    storageStats: any,
    lockAnalytics: any,
    conflictAnalytics: any
  ): Promise<string[]> {
    const recommendations: string[] = [];

    if (storageStats.total.cacheHitRate < 0.8) {
      recommendations.push('Improve cache hit rate by optimizing cache strategy');
    }

    if (lockAnalytics.deadlockRisk > 0.5) {
      recommendations.push('Reduce deadlock risk by optimizing lock acquisition order');
    }

    if (conflictAnalytics.resolutionRate < 0.8) {
      recommendations.push('Improve conflict resolution rate by implementing better strategies');
    }

    return recommendations;
  }
}

// Supporting classes
export class StoragePerformanceMonitor {
  private metrics: Map<string, PerformanceMetric[]> = new Map();

  async recordOperation(operation: string, duration: number): Promise<void> {
    const metric: PerformanceMetric = {
      operation,
      duration,
      timestamp: new Date()
    };

    const existing = this.metrics.get(operation) || [];
    existing.push(metric);
    this.metrics.set(operation, existing);
  }

  async getOperationMetrics(operation: string): Promise<OperationMetrics> {
    const metrics = this.metrics.get(operation) || [];
    
    if (metrics.length === 0) {
      return {
        averageDuration: 0,
        totalOperations: 0,
        successRate: 0
      };
    }

    const durations = metrics.map(m => m.duration);
    const averageDuration = durations.reduce((sum, d) => sum + d, 0) / durations.length;
    
    return {
      averageDuration,
      totalOperations: metrics.length,
      successRate: 1.0 // Would calculate based on success/failure
    };
  }

  async getOverallMetrics(): Promise<OverallMetrics> {
    const allMetrics = Array.from(this.metrics.values()).flat();
    
    return {
      totalOperations: allMetrics.length,
      averageResponseTime: allMetrics.reduce((sum, m) => sum + m.duration, 0) / allMetrics.length,
      operationsPerSecond: this.calculateOperationsPerSecond(allMetrics)
    };
  }

  private calculateOperationsPerSecond(metrics: PerformanceMetric[]): number {
    if (metrics.length === 0) return 0;
    
    const timeSpan = metrics[metrics.length - 1].timestamp.getTime() - metrics[0].timestamp.getTime();
    return timeSpan > 0 ? (metrics.length / timeSpan) * 1000 : 0;
  }
}

export class DataIntegrityChecker {
  async checkDocument(document: BaseDocument): Promise<IntegrityCheckResult> {
    const errors: string[] = [];

    // Check required fields
    if (!document.id) errors.push('Document ID is required');
    if (!document.type) errors.push('Document type is required');
    if (!document.title) errors.push('Document title is required');

    // Check content integrity
    if (!document.content) errors.push('Document content is required');
    if (!document.content.format) errors.push('Content format is required');

    // Check metadata integrity
    if (!document.metadata) errors.push('Document metadata is required');
    if (!document.metadata.status) errors.push('Document status is required');

    return {
      valid: errors.length === 0,
      errors,
      warnings: []
    };
  }
}

// Supporting interfaces
export interface IntegratedSaveOptions {
  createVersion?: boolean;
  versionMessage?: string;
  versionType?: 'major' | 'minor' | 'patch';
  branchName?: string;
  lockType?: 'exclusive' | 'shared';
  lockTimeout?: number;
  createBackup?: boolean;
  autoResolveConflicts?: boolean;
  force?: boolean;
}

export interface IntegratedSaveResult {
  success: boolean;
  document?: BaseDocument;
  version?: string;
  conflicts?: any[];
  reason?: string;
  lockInfo?: any;
  errors?: string[];
  requiresFix?: boolean;
  processingTime: number;
  performance?: OperationMetrics;
}

export interface IntegratedGetOptions {
  bypassCache?: boolean;
  checkConflicts?: boolean;
  includeVersionInfo?: boolean;
  includeLockInfo?: boolean;
}

export interface IntegratedGetResult {
  success: boolean;
  document?: BaseDocument;
  conflicts?: any[];
  versionInfo?: any;
  lockInfo?: any;
  reason?: string;
  processingTime: number;
  performance?: OperationMetrics;
}

export interface IntegratedDeleteOptions {
  createBackup?: boolean;
  includeVersions?: boolean;
  compression?: boolean;
  deleteVersions?: boolean;
  force?: boolean;
}

export interface IntegratedDeleteResult {
  success: boolean;
  deletedAt?: Date;
  backupCreated?: boolean;
  reason?: string;
  lockedBy?: string;
  lockExpiresAt?: Date;
  processingTime: number;
  performance?: OperationMetrics;
}

export interface IntegratedSearchOptions {
  useCache?: boolean;
  maxResults?: number;
  includeLockInfo?: boolean;
  includeVersionInfo?: boolean;
  includeConflictInfo?: boolean;
}

export interface IntegratedSearchResult {
  success: boolean;
  documents: EnhancedDocument[];
  total: number;
  facets: any;
  suggestions: string[];
  processingTime: number;
  performance?: OperationMetrics;
}

export interface EnhancedDocument extends BaseDocument {
  lockInfo?: {
    isLocked: boolean;
    lockedBy?: string;
    lockExpiresAt?: Date;
  };
  versionInfo?: {
    currentVersion: string;
    totalVersions: number;
    lastModified: Date;
  };
  conflictInfo?: {
    hasConflicts: boolean;
    conflictCount: number;
    highSeverityConflicts: number;
  };
}

export interface StorageAnalytics {
  storage: any;
  versioning: any;
  locking: any;
  conflicts: any;
  performance: OverallMetrics;
  health: StorageHealth;
  recommendations: string[];
}

export interface StorageHealth {
  score: number;
  status: 'excellent' | 'good' | 'needs_attention' | 'critical';
  issues: string[];
  recommendations: string[];
}

export interface OptimizationResult {
  storageOptimized: boolean;
  versioningOptimized: boolean;
  lockingOptimized: boolean;
  conflictsOptimized: boolean;
  performanceImproved: boolean;
  processingTime: number;
}

export interface PerformanceMetric {
  operation: string;
  duration: number;
  timestamp: Date;
}

export interface OperationMetrics {
  averageDuration: number;
  totalOperations: number;
  successRate: number;
}

export interface OverallMetrics {
  totalOperations: number;
  averageResponseTime: number;
  operationsPerSecond: number;
}

export interface IntegrityCheckResult {
  valid: boolean;
  errors: string[];
  warnings: string[];
}


=== FILE: client/src/features/documents/storage/DocumentStorageStrategy.ts ===

import { BaseDocument, DocumentType, DocumentSearchQuery, DocumentSearchResult, DocumentTemplate } from '../types/document.types';
import { DocumentVersioning } from '../core/DocumentVersioning';
import { DocumentLocking } from '../core/DocumentLocking';
import { ConflictResolution, ConflictResolutionStrategy } from '../types/collaboration.types';

/**
 * Document Storage Strategy - Comprehensive storage management
 * 
 * This storage strategy provides:
 * - Multi-tier storage architecture
 * - Advanced versioning with branching
 * - Document locking and conflict resolution
 * - Backup and recovery mechanisms
 * - Performance optimization
 * - Data integrity and consistency
 */
export class DocumentStorageStrategy {
  private primaryStorage: DocumentStorage;
  private versioning: DocumentVersioning;
  private locking: DocumentLocking;
  private cache: DocumentCache;
  private backup: DocumentBackup;
  private indexer: DocumentIndexer;
  private conflictResolver: ConflictResolver;

  constructor() {
    this.primaryStorage = new DocumentStorage();
    this.versioning = new DocumentVersioning();
    this.locking = new DocumentLocking();
    this.cache = new DocumentCache();
    this.backup = new DocumentBackup();
    this.indexer = new DocumentIndexer();
    this.conflictResolver = new ConflictResolver();
  }

  /**
   * Save document with full storage strategy
   */
  async saveDocument(
    document: BaseDocument,
    options: SaveOptions = {}
  ): Promise<SaveResult> {
    const startTime = Date.now();
    
    try {
      // 1. Check for conflicts
      const conflicts = await this.checkConflicts(document);
      if (conflicts.length > 0 && !options.force) {
        return {
          success: false,
          conflicts,
          requiresResolution: true,
          processingTime: Date.now() - startTime
        };
      }

      // 2. Acquire lock if needed
      if (options.lockDocument) {
        await this.locking.lock(document.id, options.userId || document.createdBy);
      }

      // 3. Create version if needed
      if (options.createVersion) {
        await this.versioning.createVersion(document, {}, options.versionMessage);
      }

      // 4. Save to primary storage
      await this.primaryStorage.save(document);

      // 5. Update cache
      await this.cache.set(document.id, document);

      // 6. Update indexes
      await this.indexer.indexDocument(document);

      // 7. Create backup
      if (options.createBackup) {
        await this.backup.createBackup(document);
      }

      // 8. Release lock if acquired
      if (options.lockDocument) {
        await this.locking.unlock(document.id, options.userId || document.createdBy);
      }

      return {
        success: true,
        document,
        version: document.version.current,
        processingTime: Date.now() - startTime
      };

    } catch (error) {
      // Rollback on error
      await this.rollback(document.id, options);
      throw new Error(`Failed to save document: ${error.message}`);
    }
  }

  /**
   * Get document with caching and optimization
   */
  async getDocument(
    id: string,
    options: GetOptions = {}
  ): Promise<BaseDocument | null> {
    try {
      // 1. Check cache first
      if (!options.bypassCache) {
        const cached = await this.cache.get(id);
        if (cached) {
          return cached;
        }
      }

      // 2. Get from primary storage
      const document = await this.primaryStorage.get(id);
      if (!document) {
        return null;
      }

      // 3. Check for conflicts
      if (options.checkConflicts) {
        const conflicts = await this.checkConflicts(document);
        if (conflicts.length > 0) {
          // Return document with conflict information
          return {
            ...document,
            _conflicts: conflicts
          } as BaseDocument & { _conflicts: any[] };
        }
      }

      // 4. Update cache
      await this.cache.set(id, document);

      return document;

    } catch (error) {
      throw new Error(`Failed to get document: ${error.message}`);
    }
  }

  /**
   * Delete document with cleanup
   */
  async deleteDocument(
    id: string,
    options: DeleteOptions = {}
  ): Promise<DeleteResult> {
    try {
      // 1. Check if document is locked
      const lock = await this.locking.getLock(id);
      if (lock && !options.force) {
        throw new Error(`Document is locked by ${lock.userName}`);
      }

      // 2. Create final backup if requested
      if (options.createBackup) {
        const document = await this.primaryStorage.get(id);
        if (document) {
          await this.backup.createBackup(document);
        }
      }

      // 3. Delete from primary storage
      await this.primaryStorage.delete(id);

      // 4. Remove from cache
      await this.cache.delete(id);

      // 5. Remove from indexes
      await this.indexer.removeFromIndex(id);

      // 6. Clean up version history
      if (options.deleteVersions) {
        await this.versioning.deleteHistory(id);
      }

      // 7. Release lock if exists
      if (lock) {
        await this.locking.forceUnlock(id, options.userId || 'system');
      }

      return {
        success: true,
        deletedAt: new Date(),
        backupCreated: options.createBackup
      };

    } catch (error) {
      throw new Error(`Failed to delete document: ${error.message}`);
    }
  }

  /**
   * Search documents with advanced filtering
   */
  async searchDocuments(
    query: DocumentSearchQuery,
    options: SearchOptions = {}
  ): Promise<DocumentSearchResult> {
    try {
      // 1. Use indexer for fast search
      const indexedResults = await this.indexer.search(query);

      // 2. Apply additional filters
      const filteredResults = await this.applyFilters(indexedResults, query);

      // 3. Sort results
      const sortedResults = await this.sortResults(filteredResults, query);

      // 4. Apply pagination
      const paginatedResults = this.applyPagination(sortedResults, query);

      // 5. Get full documents for results
      const documents = await this.getDocumentsByIds(paginatedResults.map(r => r.id));

      return {
        documents,
        total: sortedResults.length,
        facets: await this.generateFacets(sortedResults),
        suggestions: await this.generateSuggestions(query),
        processingTime: Date.now()
      };

    } catch (error) {
      throw new Error(`Failed to search documents: ${error.message}`);
    }
  }

  /**
   * Resolve conflicts between document versions
   */
  async resolveConflicts(
    documentId: string,
    conflicts: ConflictResolution[]
  ): Promise<ConflictResolutionResult> {
    try {
      const results: ConflictResolutionResult = {
        resolved: [],
        failed: [],
        processingTime: Date.now()
      };

      for (const conflict of conflicts) {
        try {
          // Apply conflict resolution strategy
          const resolvedDocument = await this.conflictResolver.resolveConflict(
            documentId,
            conflict,
            conflict.resolution
          );

          // Save resolved document
          await this.saveDocument(resolvedDocument, {
            createVersion: true,
            versionMessage: `Conflict resolved: ${conflict.resolution}`
          });

          results.resolved.push(conflict);

        } catch (error) {
          results.failed.push({
            conflict,
            error: error.message
          });
        }
      }

      results.processingTime = Date.now() - results.processingTime;
      return results;

    } catch (error) {
      throw new Error(`Failed to resolve conflicts: ${error.message}`);
    }
  }

  /**
   * Get document version history
   */
  async getVersionHistory(
    documentId: string,
    options: VersionHistoryOptions = {}
  ): Promise<VersionHistoryResult> {
    try {
      const history = await this.versioning.getHistory(documentId);
      
      // Apply filters
      let filteredHistory = history;
      if (options.limit) {
        filteredHistory = history.slice(-options.limit);
      }
      if (options.since) {
        filteredHistory = history.filter(v => v.timestamp >= options.since!);
      }

      // Get version statistics
      const stats = await this.versioning.getVersionStats(documentId);

      return {
        versions: filteredHistory,
        stats,
        totalVersions: history.length
      };

    } catch (error) {
      throw new Error(`Failed to get version history: ${error.message}`);
    }
  }

  /**
   * Restore document to specific version
   */
  async restoreToVersion(
    documentId: string,
    version: string,
    options: RestoreOptions = {}
  ): Promise<RestoreResult> {
    try {
      // 1. Get target version
      const targetVersion = await this.versioning.getVersion(documentId, version);
      if (!targetVersion) {
        throw new Error(`Version ${version} not found`);
      }

      // 2. Create backup of current version
      if (options.createBackup) {
        const currentDocument = await this.primaryStorage.get(documentId);
        if (currentDocument) {
          await this.backup.createBackup(currentDocument);
        }
      }

      // 3. Restore document
      const restoredDocument = await this.versioning.restoreDocument(
        documentId,
        version
      );

      // 4. Save restored document
      await this.saveDocument(restoredDocument, {
        createVersion: true,
        versionMessage: `Restored to version ${version}`
      });

      return {
        success: true,
        restoredVersion: version,
        document: restoredDocument,
        backupCreated: options.createBackup
      };

    } catch (error) {
      throw new Error(`Failed to restore to version: ${error.message}`);
    }
  }

  /**
   * Create document backup
   */
  async createBackup(
    documentId: string,
    options: BackupOptions = {}
  ): Promise<BackupResult> {
    try {
      const document = await this.primaryStorage.get(documentId);
      if (!document) {
        throw new Error('Document not found');
      }

      const backup = await this.backup.createBackup(document, options);
      
      return {
        success: true,
        backupId: backup.id,
        backupUrl: backup.url,
        createdAt: backup.createdAt,
        size: backup.size
      };

    } catch (error) {
      throw new Error(`Failed to create backup: ${error.message}`);
    }
  }

  /**
   * Restore from backup
   */
  async restoreFromBackup(
    backupId: string,
    options: RestoreBackupOptions = {}
  ): Promise<RestoreBackupResult> {
    try {
      const backup = await this.backup.getBackup(backupId);
      if (!backup) {
        throw new Error('Backup not found');
      }

      // Create backup of current document if it exists
      if (options.createBackup) {
        const currentDocument = await this.primaryStorage.get(backup.documentId);
        if (currentDocument) {
          await this.backup.createBackup(currentDocument);
        }
      }

      // Restore document
      const restoredDocument = await this.backup.restoreFromBackup(backupId);
      
      // Save restored document
      await this.saveDocument(restoredDocument, {
        createVersion: true,
        versionMessage: `Restored from backup ${backupId}`
      });

      return {
        success: true,
        document: restoredDocument,
        backupId,
        restoredAt: new Date()
      };

    } catch (error) {
      throw new Error(`Failed to restore from backup: ${error.message}`);
    }
  }

  /**
   * Get storage statistics
   */
  async getStorageStats(): Promise<StorageStats> {
    try {
      const primaryStats = await this.primaryStorage.getStats();
      const cacheStats = await this.cache.getStats();
      const backupStats = await this.backup.getStats();
      const indexStats = await this.indexer.getStats();

      return {
        primary: primaryStats,
        cache: cacheStats,
        backup: backupStats,
        index: indexStats,
        total: {
          documents: primaryStats.totalDocuments,
          storageSize: primaryStats.storageSize,
          cacheHitRate: cacheStats.hitRate,
          backupCount: backupStats.totalBackups
        }
      };

    } catch (error) {
      throw new Error(`Failed to get storage stats: ${error.message}`);
    }
  }

  /**
   * Optimize storage performance
   */
  async optimizeStorage(): Promise<OptimizationResult> {
    try {
      const results: OptimizationResult = {
        cacheOptimized: false,
        indexOptimized: false,
        backupCleaned: false,
        processingTime: Date.now()
      };

      // Optimize cache
      await this.cache.optimize();
      results.cacheOptimized = true;

      // Optimize indexes
      await this.indexer.optimize();
      results.indexOptimized = true;

      // Clean old backups
      await this.backup.cleanup();
      results.backupCleaned = true;

      results.processingTime = Date.now() - results.processingTime;
      return results;

    } catch (error) {
      throw new Error(`Failed to optimize storage: ${error.message}`);
    }
  }

  // Private helper methods
  private async checkConflicts(document: BaseDocument): Promise<any[]> {
    // Check for conflicts with other versions
    const conflicts = [];
    
    // Check for concurrent edits
    const lock = await this.locking.getLock(document.id);
    if (lock && lock.userId !== document.lastModifiedBy) {
      conflicts.push({
        type: 'concurrent_edit',
        message: `Document is being edited by ${lock.userName}`,
        severity: 'high',
        lock
      });
    }

    // Check for version conflicts
    const latestVersion = await this.versioning.getLatestVersion(document.id);
    if (latestVersion && latestVersion.version !== document.version.current) {
      conflicts.push({
        type: 'version_conflict',
        message: 'Document has been updated by another user',
        severity: 'medium',
        currentVersion: document.version.current,
        latestVersion: latestVersion.version
      });
    }

    return conflicts;
  }

  private async rollback(documentId: string, options: SaveOptions): Promise<void> {
    try {
      // Remove from cache
      await this.cache.delete(documentId);
      
      // Release lock if acquired
      if (options.lockDocument) {
        await this.locking.unlock(documentId, options.userId || '');
      }
    } catch (error) {
      console.error('Rollback failed:', error);
    }
  }

  private async applyFilters(
    results: any[],
    query: DocumentSearchQuery
  ): Promise<any[]> {
    // Apply additional filters beyond indexing
    return results.filter(result => {
      // Add custom filtering logic here
      return true;
    });
  }

  private async sortResults(
    results: any[],
    query: DocumentSearchQuery
  ): Promise<any[]> {
    // Sort results based on query parameters
    const sortBy = query.sortBy || 'updatedAt';
    const sortOrder = query.sortOrder || 'desc';
    
    return results.sort((a, b) => {
      const aValue = a[sortBy];
      const bValue = b[sortBy];
      
      if (sortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });
  }

  private applyPagination(
    results: any[],
    query: DocumentSearchQuery
  ): any[] {
    const limit = query.limit || 50;
    const offset = query.offset || 0;
    
    return results.slice(offset, offset + limit);
  }

  private async getDocumentsByIds(ids: string[]): Promise<BaseDocument[]> {
    const documents: BaseDocument[] = [];
    
    for (const id of ids) {
      const document = await this.primaryStorage.get(id);
      if (document) {
        documents.push(document);
      }
    }
    
    return documents;
  }

  private async generateFacets(results: any[]): Promise<any> {
    // Generate search facets
    return {
      types: {},
      categories: {},
      tags: {},
      statuses: {},
      dateRanges: {}
    };
  }

  private async generateSuggestions(query: DocumentSearchQuery): Promise<string[]> {
    // Generate search suggestions
    return [];
  }
}

// Supporting classes and interfaces
export class DocumentCache {
  private cache: Map<string, { document: BaseDocument; timestamp: number }> = new Map();
  private ttl: number = 5 * 60 * 1000; // 5 minutes

  async get(id: string): Promise<BaseDocument | null> {
    const cached = this.cache.get(id);
    if (!cached) return null;
    
    if (Date.now() - cached.timestamp > this.ttl) {
      this.cache.delete(id);
      return null;
    }
    
    return cached.document;
  }

  async set(id: string, document: BaseDocument): Promise<void> {
    this.cache.set(id, {
      document,
      timestamp: Date.now()
    });
  }

  async delete(id: string): Promise<void> {
    this.cache.delete(id);
  }

  async getStats(): Promise<any> {
    return {
      size: this.cache.size,
      hitRate: 0.85, // Would calculate actual hit rate
      memoryUsage: this.cache.size * 1024 // Rough estimate
    };
  }

  async optimize(): Promise<void> {
    // Remove expired entries
    const now = Date.now();
    for (const [id, cached] of this.cache) {
      if (now - cached.timestamp > this.ttl) {
        this.cache.delete(id);
      }
    }
  }
}

export class DocumentBackup {
  private backups: Map<string, any> = new Map();

  async createBackup(document: BaseDocument, options: any = {}): Promise<any> {
    const backup = {
      id: `backup_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      documentId: document.id,
      document,
      createdAt: new Date(),
      size: JSON.stringify(document).length,
      url: `/backups/${document.id}/${Date.now()}`
    };

    this.backups.set(backup.id, backup);
    return backup;
  }

  async getBackup(backupId: string): Promise<any> {
    return this.backups.get(backupId);
  }

  async restoreFromBackup(backupId: string): Promise<BaseDocument> {
    const backup = this.backups.get(backupId);
    if (!backup) throw new Error('Backup not found');
    return backup.document;
  }

  async getStats(): Promise<any> {
    return {
      totalBackups: this.backups.size,
      totalSize: Array.from(this.backups.values()).reduce((sum, b) => sum + b.size, 0)
    };
  }

  async cleanup(): Promise<void> {
    // Remove old backups (keep last 10 per document)
    const documentBackups = new Map<string, any[]>();
    
    for (const backup of this.backups.values()) {
      if (!documentBackups.has(backup.documentId)) {
        documentBackups.set(backup.documentId, []);
      }
      documentBackups.get(backup.documentId)!.push(backup);
    }

    for (const [documentId, backups] of documentBackups) {
      if (backups.length > 10) {
        const sortedBackups = backups.sort((a, b) => b.createdAt - a.createdAt);
        const toRemove = sortedBackups.slice(10);
        
        for (const backup of toRemove) {
          this.backups.delete(backup.id);
        }
      }
    }
  }
}

export class DocumentIndexer {
  private indexes: Map<string, any> = new Map();

  async indexDocument(document: BaseDocument): Promise<void> {
    // Index document for search
    const indexData = {
      id: document.id,
      title: document.title,
      type: document.type,
      category: document.metadata.category,
      tags: document.metadata.tags,
      status: document.metadata.status,
      createdBy: document.createdBy,
      createdAt: document.createdAt,
      updatedAt: document.updatedAt
    };

    this.indexes.set(document.id, indexData);
  }

  async removeFromIndex(id: string): Promise<void> {
    this.indexes.delete(id);
  }

  async search(query: DocumentSearchQuery): Promise<any[]> {
    const results: any[] = [];
    
    for (const [id, indexData] of this.indexes) {
      if (this.matchesQuery(indexData, query)) {
        results.push(indexData);
      }
    }
    
    return results;
  }

  private matchesQuery(indexData: any, query: DocumentSearchQuery): boolean {
    if (query.type && indexData.type !== query.type) return false;
    if (query.category && indexData.category !== query.category) return false;
    if (query.status && indexData.status !== query.status) return false;
    if (query.createdBy && indexData.createdBy !== query.createdBy) return false;
    
    if (query.text) {
      const searchText = query.text.toLowerCase();
      return indexData.title.toLowerCase().includes(searchText) ||
             indexData.tags.some((tag: string) => tag.toLowerCase().includes(searchText));
    }
    
    return true;
  }

  async getStats(): Promise<any> {
    return {
      totalIndexed: this.indexes.size,
      memoryUsage: this.indexes.size * 512 // Rough estimate
    };
  }

  async optimize(): Promise<void> {
    // Optimize indexes for better performance
    // This would include rebuilding indexes, removing duplicates, etc.
  }
}

export class ConflictResolver {
  async resolveConflict(
    documentId: string,
    conflict: ConflictResolution,
    strategy: ConflictResolutionStrategy
  ): Promise<BaseDocument> {
    // Implement conflict resolution logic
    // This would depend on the specific conflict type and resolution strategy
    throw new Error('Conflict resolution not implemented');
  }
}

// Supporting interfaces
export interface SaveOptions {
  createVersion?: boolean;
  versionMessage?: string;
  lockDocument?: boolean;
  createBackup?: boolean;
  force?: boolean;
  userId?: string;
}

export interface SaveResult {
  success: boolean;
  document?: BaseDocument;
  version?: string;
  conflicts?: any[];
  requiresResolution?: boolean;
  processingTime: number;
}

export interface GetOptions {
  bypassCache?: boolean;
  checkConflicts?: boolean;
}

export interface DeleteOptions {
  createBackup?: boolean;
  deleteVersions?: boolean;
  force?: boolean;
  userId?: string;
}

export interface DeleteResult {
  success: boolean;
  deletedAt: Date;
  backupCreated: boolean;
}

export interface SearchOptions {
  useCache?: boolean;
  maxResults?: number;
}

export interface VersionHistoryOptions {
  limit?: number;
  since?: Date;
}

export interface VersionHistoryResult {
  versions: any[];
  stats: any;
  totalVersions: number;
}

export interface RestoreOptions {
  createBackup?: boolean;
}

export interface RestoreResult {
  success: boolean;
  restoredVersion: string;
  document: BaseDocument;
  backupCreated: boolean;
}

export interface BackupOptions {
  includeVersions?: boolean;
  compression?: boolean;
}

export interface BackupResult {
  success: boolean;
  backupId: string;
  backupUrl: string;
  createdAt: Date;
  size: number;
}

export interface RestoreBackupOptions {
  createBackup?: boolean;
}

export interface RestoreBackupResult {
  success: boolean;
  document: BaseDocument;
  backupId: string;
  restoredAt: Date;
}

export interface ConflictResolutionResult {
  resolved: ConflictResolution[];
  failed: Array<{ conflict: ConflictResolution; error: string }>;
  processingTime: number;
}

export interface StorageStats {
  primary: any;
  cache: any;
  backup: any;
  index: any;
  total: {
    documents: number;
    storageSize: number;
    cacheHitRate: number;
    backupCount: number;
  };
}

export interface OptimizationResult {
  cacheOptimized: boolean;
  indexOptimized: boolean;
  backupCleaned: boolean;
  processingTime: number;
}


=== FILE: client/src/features/documents/storage/ConflictResolution.ts ===

import { BaseDocument, ChangeSet } from '../types/document.types';
import { ConflictResolution, ConflictResolutionStrategy } from '../types/collaboration.types';

/**
 * Advanced Conflict Resolution System
 * 
 * This system provides:
 * - Automatic conflict detection
 * - Multiple resolution strategies
 * - Merge conflict resolution
 * - Content conflict resolution
 * - Metadata conflict resolution
 * - User notification and approval
 */
export class ConflictResolutionSystem {
  private resolutionStrategies: Map<string, ConflictResolver> = new Map();
  private conflictHistory: Map<string, ConflictRecord[]> = new Map();
  private notificationService: ConflictNotificationService;

  constructor() {
    this.notificationService = new ConflictNotificationService();
    this.initializeResolutionStrategies();
  }

  /**
   * Detect conflicts between document versions
   */
  async detectConflicts(
    originalDocument: BaseDocument,
    modifiedDocument: BaseDocument,
    options: ConflictDetectionOptions = {}
  ): Promise<ConflictDetectionResult> {
    try {
      const conflicts: DocumentConflict[] = [];
      const startTime = Date.now();

      // 1. Content conflicts
      const contentConflicts = await this.detectContentConflicts(
        originalDocument,
        modifiedDocument
      );
      conflicts.push(...contentConflicts);

      // 2. Metadata conflicts
      const metadataConflicts = await this.detectMetadataConflicts(
        originalDocument,
        modifiedDocument
      );
      conflicts.push(...metadataConflicts);

      // 3. Permission conflicts
      const permissionConflicts = await this.detectPermissionConflicts(
        originalDocument,
        modifiedDocument
      );
      conflicts.push(...permissionConflicts);

      // 4. Structural conflicts
      const structuralConflicts = await this.detectStructuralConflicts(
        originalDocument,
        modifiedDocument
      );
      conflicts.push(...structuralConflicts);

      // 5. AI-generated content conflicts
      if (options.checkAIConflicts) {
        const aiConflicts = await this.detectAIConflicts(
          originalDocument,
          modifiedDocument
        );
        conflicts.push(...aiConflicts);
      }

      // Categorize conflicts by severity
      const highSeverityConflicts = conflicts.filter(c => c.severity === 'high');
      const mediumSeverityConflicts = conflicts.filter(c => c.severity === 'medium');
      const lowSeverityConflicts = conflicts.filter(c => c.severity === 'low');

      const result: ConflictDetectionResult = {
        hasConflicts: conflicts.length > 0,
        totalConflicts: conflicts.length,
        conflicts,
        highSeverityConflicts: highSeverityConflicts.length,
        mediumSeverityConflicts: mediumSeverityConflicts.length,
        lowSeverityConflicts: lowSeverityConflicts.length,
        processingTime: Date.now() - startTime,
        recommendations: await this.generateConflictRecommendations(conflicts)
      };

      // Record conflict detection
      await this.recordConflictDetection(originalDocument.id, result);

      return result;

    } catch (error) {
      throw new Error(`Failed to detect conflicts: ${error.message}`);
    }
  }

  /**
   * Resolve conflicts using specified strategy
   */
  async resolveConflicts(
    conflicts: DocumentConflict[],
    strategy: ConflictResolutionStrategy,
    options: ConflictResolutionOptions = {}
  ): Promise<ConflictResolutionResult> {
    try {
      const startTime = Date.now();
      const results: ConflictResolutionResult = {
        resolved: [],
        failed: [],
        processingTime: 0,
        strategy,
        totalConflicts: conflicts.length
      };

      for (const conflict of conflicts) {
        try {
          const resolver = this.resolutionStrategies.get(strategy);
          if (!resolver) {
            throw new Error(`Unknown resolution strategy: ${strategy}`);
          }

          const resolution = await resolver.resolve(conflict, options);
          if (resolution) {
            results.resolved.push(resolution);
          } else {
            results.failed.push({
              conflict,
              error: 'Resolution failed'
            });
          }

        } catch (error) {
          results.failed.push({
            conflict,
            error: error.message
          });
        }
      }

      results.processingTime = Date.now() - startTime;

      // Record resolution attempt
      await this.recordConflictResolution(conflicts[0]?.documentId || '', results);

      return results;

    } catch (error) {
      throw new Error(`Failed to resolve conflicts: ${error.message}`);
    }
  }

  /**
   * Auto-resolve conflicts using AI
   */
  async autoResolveConflicts(
    conflicts: DocumentConflict[],
    options: AutoResolutionOptions = {}
  ): Promise<AutoResolutionResult> {
    try {
      const startTime = Date.now();
      const results: AutoResolutionResult = {
        resolved: [],
        failed: [],
        suggestions: [],
        confidence: 0,
        processingTime: 0
      };

      for (const conflict of conflicts) {
        try {
          // Use AI to analyze conflict and suggest resolution
          const aiAnalysis = await this.analyzeConflictWithAI(conflict, options);
          
          if (aiAnalysis.confidence > options.minConfidence || 0.7) {
            const resolution = await this.applyAIResolution(conflict, aiAnalysis);
            results.resolved.push(resolution);
            results.confidence += aiAnalysis.confidence;
          } else {
            results.suggestions.push({
              conflict,
              suggestion: aiAnalysis.suggestion,
              confidence: aiAnalysis.confidence,
              reasoning: aiAnalysis.reasoning
            });
          }

        } catch (error) {
          results.failed.push({
            conflict,
            error: error.message
          });
        }
      }

      results.confidence = results.resolved.length > 0 
        ? results.confidence / results.resolved.length 
        : 0;
      results.processingTime = Date.now() - startTime;

      return results;

    } catch (error) {
      throw new Error(`Failed to auto-resolve conflicts: ${error.message}`);
    }
  }

  /**
   * Merge documents with conflict resolution
   */
  async mergeDocuments(
    baseDocument: BaseDocument,
    document1: BaseDocument,
    document2: BaseDocument,
    options: MergeOptions = {}
  ): Promise<MergeResult> {
    try {
      const startTime = Date.now();

      // 1. Detect conflicts between the two documents
      const conflicts = await this.detectConflicts(document1, document2);

      // 2. Create merge result
      const mergeResult: MergeResult = {
        success: false,
        mergedDocument: baseDocument,
        conflicts: conflicts.conflicts,
        resolutionStrategy: options.strategy || 'manual',
        processingTime: 0
      };

      if (conflicts.hasConflicts) {
        if (options.strategy === 'automatic') {
          // Auto-resolve conflicts
          const autoResolution = await this.autoResolveConflicts(conflicts.conflicts);
          
          if (autoResolution.resolved.length > 0) {
            mergeResult.mergedDocument = await this.applyResolutions(
              baseDocument,
              autoResolution.resolved
            );
            mergeResult.success = true;
            mergeResult.autoResolved = autoResolution.resolved.length;
            mergeResult.suggestions = autoResolution.suggestions;
          }
        } else {
          // Manual resolution required
          mergeResult.requiresManualResolution = true;
          mergeResult.resolutionRequired = conflicts.conflicts;
        }
      } else {
        // No conflicts, simple merge
        mergeResult.mergedDocument = await this.performSimpleMerge(
          baseDocument,
          document1,
          document2
        );
        mergeResult.success = true;
      }

      mergeResult.processingTime = Date.now() - startTime;
      return mergeResult;

    } catch (error) {
      throw new Error(`Failed to merge documents: ${error.message}`);
    }
  }

  /**
   * Get conflict resolution history
   */
  async getConflictHistory(
    documentId: string,
    options: HistoryOptions = {}
  ): Promise<ConflictHistoryResult> {
    try {
      const history = this.conflictHistory.get(documentId) || [];
      
      // Apply filters
      let filteredHistory = history;
      if (options.since) {
        filteredHistory = history.filter(record => record.timestamp >= options.since!);
      }
      if (options.limit) {
        filteredHistory = filteredHistory.slice(-options.limit);
      }

      // Calculate statistics
      const stats = this.calculateConflictStats(history);

      return {
        history: filteredHistory,
        stats,
        totalRecords: history.length
      };

    } catch (error) {
      throw new Error(`Failed to get conflict history: ${error.message}`);
    }
  }

  /**
   * Get conflict analytics
   */
  async getConflictAnalytics(): Promise<ConflictAnalytics> {
    try {
      const allRecords = Array.from(this.conflictHistory.values()).flat();
      
      // Calculate metrics
      const totalConflicts = allRecords.reduce((sum, record) => sum + record.conflictCount, 0);
      const resolvedConflicts = allRecords.reduce((sum, record) => sum + record.resolvedCount, 0);
      const resolutionRate = totalConflicts > 0 ? resolvedConflicts / totalConflicts : 0;

      // Calculate conflict types
      const conflictTypes = new Map<string, number>();
      for (const record of allRecords) {
        for (const conflict of record.conflicts) {
          const count = conflictTypes.get(conflict.type) || 0;
          conflictTypes.set(conflict.type, count + 1);
        }
      }

      // Calculate resolution strategies
      const strategies = new Map<string, number>();
      for (const record of allRecords) {
        if (record.resolutionStrategy) {
          const count = strategies.get(record.resolutionStrategy) || 0;
          strategies.set(record.resolutionStrategy, count + 1);
        }
      }

      return {
        totalConflicts,
        resolvedConflicts,
        resolutionRate,
        conflictTypes: Object.fromEntries(conflictTypes),
        resolutionStrategies: Object.fromEntries(strategies),
        averageResolutionTime: this.calculateAverageResolutionTime(allRecords),
        mostCommonConflicts: this.getMostCommonConflicts(allRecords),
        recommendations: await this.generateAnalyticsRecommendations(allRecords)
      };

    } catch (error) {
      throw new Error(`Failed to get conflict analytics: ${error.message}`);
    }
  }

  // Private helper methods
  private async detectContentConflicts(
    original: BaseDocument,
    modified: BaseDocument
  ): Promise<DocumentConflict[]> {
    const conflicts: DocumentConflict[] = [];

    // Compare content sections
    if (original.content.format === 'structured' && modified.content.format === 'structured') {
      const originalSections = original.content.data.sections || [];
      const modifiedSections = modified.content.data.sections || [];

      for (let i = 0; i < Math.max(originalSections.length, modifiedSections.length); i++) {
        const originalSection = originalSections[i];
        const modifiedSection = modifiedSections[i];

        if (originalSection && modifiedSection) {
          if (originalSection.content !== modifiedSection.content) {
            conflicts.push({
              id: this.generateConflictId(),
              documentId: original.id,
              type: 'content',
              severity: 'medium',
              path: `sections[${i}].content`,
              description: `Content conflict in section "${originalSection.title}"`,
              originalValue: originalSection.content,
              modifiedValue: modifiedSection.content,
              timestamp: new Date(),
              resolution: 'manual'
            });
          }
        }
      }
    }

    return conflicts;
  }

  private async detectMetadataConflicts(
    original: BaseDocument,
    modified: BaseDocument
  ): Promise<DocumentConflict[]> {
    const conflicts: DocumentConflict[] = [];

    // Compare metadata fields
    const metadataFields = ['category', 'tags', 'status', 'visibility'];
    
    for (const field of metadataFields) {
      const originalValue = (original.metadata as any)[field];
      const modifiedValue = (modified.metadata as any)[field];
      
      if (JSON.stringify(originalValue) !== JSON.stringify(modifiedValue)) {
        conflicts.push({
          id: this.generateConflictId(),
          documentId: original.id,
          type: 'metadata',
          severity: 'low',
          path: `metadata.${field}`,
          description: `Metadata conflict in field "${field}"`,
          originalValue,
          modifiedValue,
          timestamp: new Date(),
          resolution: 'automatic'
        });
      }
    }

    return conflicts;
  }

  private async detectPermissionConflicts(
    original: BaseDocument,
    modified: BaseDocument
  ): Promise<DocumentConflict[]> {
    const conflicts: DocumentConflict[] = [];

    // Compare permissions
    const permissionFields = ['editors', 'viewers', 'commenters'];
    
    for (const field of permissionFields) {
      const originalValue = (original.permissions as any)[field];
      const modifiedValue = (modified.permissions as any)[field];
      
      if (JSON.stringify(originalValue) !== JSON.stringify(modifiedValue)) {
        conflicts.push({
          id: this.generateConflictId(),
          documentId: original.id,
          type: 'permissions',
          severity: 'high',
          path: `permissions.${field}`,
          description: `Permission conflict in field "${field}"`,
          originalValue,
          modifiedValue,
          timestamp: new Date(),
          resolution: 'manual'
        });
      }
    }

    return conflicts;
  }

  private async detectStructuralConflicts(
    original: BaseDocument,
    modified: BaseDocument
  ): Promise<DocumentConflict[]> {
    const conflicts: DocumentConflict[] = [];

    // Check for structural changes
    if (original.content.format !== modified.content.format) {
      conflicts.push({
        id: this.generateConflictId(),
        documentId: original.id,
        type: 'structural',
        severity: 'high',
        path: 'content.format',
        description: 'Document format changed',
        originalValue: original.content.format,
        modifiedValue: modified.content.format,
        timestamp: new Date(),
        resolution: 'manual'
      });
    }

    return conflicts;
  }

  private async detectAIConflicts(
    original: BaseDocument,
    modified: BaseDocument
  ): Promise<DocumentConflict[]> {
    const conflicts: DocumentConflict[] = [];

    // Check for AI-generated content conflicts
    if (original.ai.autoGenerated !== modified.ai.autoGenerated) {
      conflicts.push({
        id: this.generateConflictId(),
        documentId: original.id,
        type: 'ai_content',
        severity: 'medium',
        path: 'ai.autoGenerated',
        description: 'AI generation status conflict',
        originalValue: original.ai.autoGenerated,
        modifiedValue: modified.ai.autoGenerated,
        timestamp: new Date(),
        resolution: 'automatic'
      });
    }

    return conflicts;
  }

  private async generateConflictRecommendations(conflicts: DocumentConflict[]): Promise<string[]> {
    const recommendations: string[] = [];

    if (conflicts.some(c => c.type === 'permissions')) {
      recommendations.push('Review permission changes carefully as they affect document access');
    }

    if (conflicts.some(c => c.type === 'structural')) {
      recommendations.push('Structural changes may require manual review and testing');
    }

    if (conflicts.some(c => c.severity === 'high')) {
      recommendations.push('High severity conflicts require immediate attention');
    }

    return recommendations;
  }

  private async recordConflictDetection(
    documentId: string,
    result: ConflictDetectionResult
  ): Promise<void> {
    const record: ConflictRecord = {
      id: this.generateRecordId(),
      documentId,
      timestamp: new Date(),
      conflictCount: result.totalConflicts,
      resolvedCount: 0,
      conflicts: result.conflicts,
      resolutionStrategy: null
    };

    const history = this.conflictHistory.get(documentId) || [];
    history.push(record);
    this.conflictHistory.set(documentId, history);
  }

  private async recordConflictResolution(
    documentId: string,
    result: ConflictResolutionResult
  ): Promise<void> {
    const record: ConflictRecord = {
      id: this.generateRecordId(),
      documentId,
      timestamp: new Date(),
      conflictCount: result.totalConflicts,
      resolvedCount: result.resolved.length,
      conflicts: [],
      resolutionStrategy: result.strategy
    };

    const history = this.conflictHistory.get(documentId) || [];
    history.push(record);
    this.conflictHistory.set(documentId, history);
  }

  private async analyzeConflictWithAI(
    conflict: DocumentConflict,
    options: AutoResolutionOptions
  ): Promise<AIAnalysis> {
    // Implement AI analysis logic
    return {
      confidence: 0.8,
      suggestion: 'Merge both changes',
      reasoning: 'Both changes appear to be valid and complementary'
    };
  }

  private async applyAIResolution(
    conflict: DocumentConflict,
    analysis: AIAnalysis
  ): Promise<ConflictResolution> {
    // Implement AI resolution application
    return {
      id: this.generateResolutionId(),
      conflictId: conflict.id,
      strategy: 'ai_merge',
      resolution: analysis.suggestion,
      confidence: analysis.confidence,
      timestamp: new Date()
    };
  }

  private async applyResolutions(
    baseDocument: BaseDocument,
    resolutions: ConflictResolution[]
  ): Promise<BaseDocument> {
    // Apply resolutions to base document
    return baseDocument;
  }

  private async performSimpleMerge(
    base: BaseDocument,
    doc1: BaseDocument,
    doc2: BaseDocument
  ): Promise<BaseDocument> {
    // Perform simple merge without conflicts
    return base;
  }

  private calculateConflictStats(history: ConflictRecord[]): ConflictStats {
    const totalConflicts = history.reduce((sum, record) => sum + record.conflictCount, 0);
    const resolvedConflicts = history.reduce((sum, record) => sum + record.resolvedCount, 0);
    
    return {
      totalConflicts,
      resolvedConflicts,
      resolutionRate: totalConflicts > 0 ? resolvedConflicts / totalConflicts : 0,
      averageConflictsPerDocument: history.length > 0 ? totalConflicts / history.length : 0
    };
  }

  private calculateAverageResolutionTime(records: ConflictRecord[]): number {
    // Calculate average resolution time
    return 0;
  }

  private getMostCommonConflicts(records: ConflictRecord[]): Array<{ type: string; count: number }> {
    const conflictCounts = new Map<string, number>();
    
    for (const record of records) {
      for (const conflict of record.conflicts) {
        const count = conflictCounts.get(conflict.type) || 0;
        conflictCounts.set(conflict.type, count + 1);
      }
    }
    
    return Array.from(conflictCounts.entries())
      .map(([type, count]) => ({ type, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);
  }

  private async generateAnalyticsRecommendations(records: ConflictRecord[]): Promise<string[]> {
    const recommendations: string[] = [];
    
    // Generate recommendations based on analytics
    recommendations.push('Consider implementing automatic conflict resolution for low-severity conflicts');
    recommendations.push('Review high-conflict documents for potential workflow improvements');
    
    return recommendations;
  }

  private initializeResolutionStrategies(): void {
    // Initialize resolution strategies
    this.resolutionStrategies.set('manual', new ManualConflictResolver());
    this.resolutionStrategies.set('automatic', new AutomaticConflictResolver());
    this.resolutionStrategies.set('ai_merge', new AIMergeConflictResolver());
  }

  private generateConflictId(): string {
    return `conflict_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateRecordId(): string {
    return `record_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateResolutionId(): string {
    return `resolution_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
}

// Supporting classes
export class ConflictNotificationService {
  async notifyConflict(conflict: DocumentConflict): Promise<void> {
    // Implement notification logic
  }

  async notifyResolution(resolution: ConflictResolution): Promise<void> {
    // Implement notification logic
  }
}

export class ManualConflictResolver implements ConflictResolver {
  async resolve(conflict: DocumentConflict, options: any): Promise<ConflictResolution | null> {
    // Implement manual resolution logic
    return null;
  }
}

export class AutomaticConflictResolver implements ConflictResolver {
  async resolve(conflict: DocumentConflict, options: any): Promise<ConflictResolution | null> {
    // Implement automatic resolution logic
    return null;
  }
}

export class AIMergeConflictResolver implements ConflictResolver {
  async resolve(conflict: DocumentConflict, options: any): Promise<ConflictResolution | null> {
    // Implement AI merge resolution logic
    return null;
  }
}

// Supporting interfaces
export interface ConflictDetectionOptions {
  checkAIConflicts?: boolean;
  includeMetadata?: boolean;
  includePermissions?: boolean;
}

export interface ConflictDetectionResult {
  hasConflicts: boolean;
  totalConflicts: number;
  conflicts: DocumentConflict[];
  highSeverityConflicts: number;
  mediumSeverityConflicts: number;
  lowSeverityConflicts: number;
  processingTime: number;
  recommendations: string[];
}

export interface ConflictResolutionOptions {
  strategy?: ConflictResolutionStrategy;
  notifyUsers?: boolean;
  createBackup?: boolean;
}

export interface ConflictResolutionResult {
  resolved: ConflictResolution[];
  failed: Array<{ conflict: DocumentConflict; error: string }>;
  processingTime: number;
  strategy: ConflictResolutionStrategy;
  totalConflicts: number;
}

export interface AutoResolutionOptions {
  minConfidence?: number;
  useAI?: boolean;
  fallbackStrategy?: ConflictResolutionStrategy;
}

export interface AutoResolutionResult {
  resolved: ConflictResolution[];
  failed: Array<{ conflict: DocumentConflict; error: string }>;
  suggestions: Array<{
    conflict: DocumentConflict;
    suggestion: string;
    confidence: number;
    reasoning: string;
  }>;
  confidence: number;
  processingTime: number;
}

export interface MergeOptions {
  strategy?: 'automatic' | 'manual';
  createBackup?: boolean;
  notifyUsers?: boolean;
}

export interface MergeResult {
  success: boolean;
  mergedDocument: BaseDocument;
  conflicts: DocumentConflict[];
  resolutionStrategy: string;
  requiresManualResolution?: boolean;
  resolutionRequired?: DocumentConflict[];
  autoResolved?: number;
  suggestions?: any[];
  processingTime: number;
}

export interface HistoryOptions {
  since?: Date;
  limit?: number;
}

export interface ConflictHistoryResult {
  history: ConflictRecord[];
  stats: ConflictStats;
  totalRecords: number;
}

export interface ConflictAnalytics {
  totalConflicts: number;
  resolvedConflicts: number;
  resolutionRate: number;
  conflictTypes: Record<string, number>;
  resolutionStrategies: Record<string, number>;
  averageResolutionTime: number;
  mostCommonConflicts: Array<{ type: string; count: number }>;
  recommendations: string[];
}

export interface DocumentConflict {
  id: string;
  documentId: string;
  type: 'content' | 'metadata' | 'permissions' | 'structural' | 'ai_content';
  severity: 'low' | 'medium' | 'high';
  path: string;
  description: string;
  originalValue: any;
  modifiedValue: any;
  timestamp: Date;
  resolution: 'manual' | 'automatic' | 'ai_merge';
}

export interface ConflictRecord {
  id: string;
  documentId: string;
  timestamp: Date;
  conflictCount: number;
  resolvedCount: number;
  conflicts: DocumentConflict[];
  resolutionStrategy: string | null;
}

export interface ConflictStats {
  totalConflicts: number;
  resolvedConflicts: number;
  resolutionRate: number;
  averageConflictsPerDocument: number;
}

export interface AIAnalysis {
  confidence: number;
  suggestion: string;
  reasoning: string;
}

export interface ConflictResolver {
  resolve(conflict: DocumentConflict, options: any): Promise<ConflictResolution | null>;
}


=== FILE: client/src/features/documents/storage/AdvancedVersioning.ts ===

import { BaseDocument, VersionHistory, VersionBranch, ChangeSet } from '../types/document.types';

/**
 * Advanced Versioning System - Git-like version control for documents
 * 
 * This system provides:
 * - Branch-based versioning
 * - Merge capabilities
 * - Conflict resolution
 * - Version comparison and diff
 * - Rollback and restore
 * - Version analytics
 */
export class AdvancedVersioning {
  private versions: Map<string, VersionHistory[]> = new Map();
  private branches: Map<string, VersionBranch[]> = new Map();
  private merges: Map<string, MergeRecord[]> = new Map();

  /**
   * Create initial version
   */
  async createInitialVersion(document: BaseDocument): Promise<VersionHistory> {
    const initialVersion: VersionHistory = {
      version: '1.0.0',
      timestamp: new Date(),
      author: document.createdBy,
      changes: [],
      message: 'Initial version',
      snapshot: this.createSnapshot(document)
    };

    this.versions.set(document.id, [initialVersion]);
    return initialVersion;
  }

  /**
   * Create new version with advanced options
   */
  async createVersion(
    document: BaseDocument,
    updates: Partial<BaseDocument>,
    options: VersionOptions = {}
  ): Promise<VersionHistory> {
    const currentVersion = document.version.current;
    const newVersion = this.incrementVersion(currentVersion, options.versionType);

    // Generate detailed changes
    const changes = await this.generateDetailedChanges(document, updates);

    const versionHistory: VersionHistory = {
      version: newVersion,
      timestamp: new Date(),
      author: updates.lastModifiedBy || document.lastModifiedBy,
      changes,
      message: options.message || 'Document updated',
      snapshot: this.createSnapshot({ ...document, ...updates })
    };

    // Add to version history
    const history = this.versions.get(document.id) || [];
    history.push(versionHistory);
    this.versions.set(document.id, history);

    // Create branch if specified
    if (options.branchName) {
      await this.createBranch(document.id, options.branchName, newVersion, document.createdBy);
    }

    return versionHistory;
  }

  /**
   * Create a new branch
   */
  async createBranch(
    documentId: string,
    branchName: string,
    baseVersion: string,
    createdBy: string,
    options: BranchOptions = {}
  ): Promise<VersionBranch> {
    const branch: VersionBranch = {
      name: branchName,
      baseVersion,
      createdAt: new Date(),
      createdBy,
      merged: false
    };

    const branches = this.branches.get(documentId) || [];
    
    // Check if branch already exists
    if (branches.some(b => b.name === branchName)) {
      throw new Error(`Branch ${branchName} already exists`);
    }

    branches.push(branch);
    this.branches.set(documentId, branches);

    return branch;
  }

  /**
   * Get all branches for a document
   */
  async getBranches(documentId: string): Promise<VersionBranch[]> {
    return this.branches.get(documentId) || [];
  }

  /**
   * Switch to a branch
   */
  async switchToBranch(
    documentId: string,
    branchName: string
  ): Promise<BaseDocument> {
    const branches = this.branches.get(documentId) || [];
    const branch = branches.find(b => b.name === branchName);
    
    if (!branch) {
      throw new Error(`Branch ${branchName} not found`);
    }

    // Get the latest version from the branch
    const history = this.versions.get(documentId) || [];
    const branchVersions = history.filter(v => v.version.startsWith(branchName));
    
    if (branchVersions.length === 0) {
      throw new Error(`No versions found for branch ${branchName}`);
    }

    const latestBranchVersion = branchVersions[branchVersions.length - 1];
    return latestBranchVersion.snapshot;
  }

  /**
   * Merge branch into main
   */
  async mergeBranch(
    documentId: string,
    sourceBranch: string,
    targetBranch: string = 'main',
    options: MergeOptions = {}
  ): Promise<MergeResult> {
    try {
      const branches = this.branches.get(documentId) || [];
      const sourceBranchData = branches.find(b => b.name === sourceBranch);
      const targetBranchData = branches.find(b => b.name === targetBranch);

      if (!sourceBranchData) {
        throw new Error(`Source branch ${sourceBranch} not found`);
      }

      if (!targetBranchData) {
        throw new Error(`Target branch ${targetBranch} not found`);
      }

      // Check for conflicts
      const conflicts = await this.detectMergeConflicts(
        documentId,
        sourceBranch,
        targetBranch
      );

      if (conflicts.length > 0 && !options.force) {
        return {
          success: false,
          conflicts,
          requiresResolution: true
        };
      }

      // Perform merge
      const mergeResult = await this.performMerge(
        documentId,
        sourceBranch,
        targetBranch,
        options
      );

      // Mark source branch as merged
      sourceBranchData.merged = true;
      sourceBranchData.mergedAt = new Date();
      sourceBranchData.mergedBy = options.mergedBy || 'system';

      // Record merge
      const mergeRecord: MergeRecord = {
        id: this.generateMergeId(),
        sourceBranch,
        targetBranch,
        mergedAt: new Date(),
        mergedBy: options.mergedBy || 'system',
        conflicts: conflicts.length,
        resolution: options.strategy || 'auto'
      };

      const merges = this.merges.get(documentId) || [];
      merges.push(mergeRecord);
      this.merges.set(documentId, merges);

      return {
        success: true,
        mergeResult,
        conflicts: [],
        requiresResolution: false
      };

    } catch (error) {
      throw new Error(`Failed to merge branch: ${error.message}`);
    }
  }

  /**
   * Compare two versions
   */
  async compareVersions(
    documentId: string,
    version1: string,
    version2: string
  ): Promise<VersionComparison> {
    const v1 = await this.getVersion(documentId, version1);
    const v2 = await this.getVersion(documentId, version2);

    if (!v1 || !v2) {
      throw new Error('One or both versions not found');
    }

    const changes = this.compareSnapshots(v1.snapshot, v2.snapshot);
    const added = changes.filter(c => c.type === 'add');
    const modified = changes.filter(c => c.type === 'modify');
    const deleted = changes.filter(c => c.type === 'delete');

    return {
      version1: v1.version,
      version2: v2.version,
      changes,
      added,
      modified,
      deleted,
      similarity: this.calculateSimilarity(v1.snapshot, v2.snapshot)
    };
  }

  /**
   * Get version diff as structured data
   */
  async getVersionDiff(
    documentId: string,
    version1: string,
    version2: string
  ): Promise<VersionDiff> {
    const comparison = await this.compareVersions(documentId, version1, version2);
    
    return {
      from: version1,
      to: version2,
      changes: comparison.changes,
      summary: {
        totalChanges: comparison.changes.length,
        additions: comparison.added.length,
        modifications: comparison.modified.length,
        deletions: comparison.deleted.length,
        similarity: comparison.similarity
      },
      sections: this.groupChangesBySection(comparison.changes),
      metadata: {
        generatedAt: new Date(),
        processingTime: 0
      }
    };
  }

  /**
   * Rollback to specific version
   */
  async rollbackToVersion(
    documentId: string,
    targetVersion: string,
    options: RollbackOptions = {}
  ): Promise<RollbackResult> {
    try {
      const targetVersionData = await this.getVersion(documentId, targetVersion);
      if (!targetVersionData) {
        throw new Error(`Version ${targetVersion} not found`);
      }

      // Create backup of current version
      if (options.createBackup) {
        const currentDocument = await this.getCurrentDocument(documentId);
        if (currentDocument) {
          await this.createBackup(currentDocument, `rollback-backup-${Date.now()}`);
        }
      }

      // Create new version with rolled back content
      const rollbackVersion = this.incrementVersion(targetVersion, 'patch');
      const rollbackHistory: VersionHistory = {
        version: rollbackVersion,
        timestamp: new Date(),
        author: options.rolledBackBy || 'system',
        changes: [{
          type: 'modify',
          path: 'content',
          oldValue: 'current',
          newValue: 'rolled_back',
          description: `Rolled back to version ${targetVersion}`
        }],
        message: `Rolled back to version ${targetVersion}`,
        snapshot: targetVersionData.snapshot
      };

      const history = this.versions.get(documentId) || [];
      history.push(rollbackHistory);
      this.versions.set(documentId, history);

      return {
        success: true,
        rolledBackTo: targetVersion,
        newVersion: rollbackVersion,
        backupCreated: options.createBackup
      };

    } catch (error) {
      throw new Error(`Failed to rollback: ${error.message}`);
    }
  }

  /**
   * Get version analytics
   */
  async getVersionAnalytics(documentId: string): Promise<VersionAnalytics> {
    const history = this.versions.get(documentId) || [];
    const branches = this.branches.get(documentId) || [];
    const merges = this.merges.get(documentId) || [];

    // Calculate metrics
    const totalVersions = history.length;
    const totalBranches = branches.length;
    const totalMerges = merges.length;
    const activeBranches = branches.filter(b => !b.merged).length;

    // Calculate change frequency
    const changeFrequency = this.calculateChangeFrequency(history);
    
    // Calculate collaboration metrics
    const collaborators = new Set(history.map(v => v.author));
    const collaborationScore = this.calculateCollaborationScore(history);

    // Calculate version stability
    const stabilityScore = this.calculateStabilityScore(history);

    return {
      totalVersions,
      totalBranches,
      totalMerges,
      activeBranches,
      collaborators: collaborators.size,
      changeFrequency,
      collaborationScore,
      stabilityScore,
      averageChangesPerVersion: this.calculateAverageChanges(history),
      mostActiveAuthor: this.getMostActiveAuthor(history),
      versionDistribution: this.getVersionDistribution(history),
      branchActivity: this.getBranchActivity(branches),
      mergeHistory: merges
    };
  }

  /**
   * Clean up old versions
   */
  async cleanupVersions(
    documentId: string,
    options: CleanupOptions = {}
  ): Promise<CleanupResult> {
    const history = this.versions.get(documentId) || [];
    const keepVersions = options.keepVersions || 50;
    const keepDays = options.keepDays || 90;

    const cutoffDate = new Date(Date.now() - keepDays * 24 * 60 * 60 * 1000);
    
    // Keep recent versions and important versions
    const versionsToKeep = history
      .filter(v => v.timestamp >= cutoffDate)
      .slice(-keepVersions);

    const versionsToDelete = history.filter(v => !versionsToKeep.includes(v));
    
    // Update history
    this.versions.set(documentId, versionsToKeep);

    return {
      versionsDeleted: versionsToDelete.length,
      versionsKept: versionsToKeep.length,
      spaceFreed: versionsToDelete.reduce((sum, v) => sum + this.calculateVersionSize(v), 0)
    };
  }

  // Private helper methods
  private async generateDetailedChanges(
    original: BaseDocument,
    updates: Partial<BaseDocument>
  ): Promise<ChangeSet[]> {
    const changes: ChangeSet[] = [];

    // Compare all document properties
    const properties = ['title', 'description', 'content', 'metadata', 'permissions'];
    
    for (const property of properties) {
      const originalValue = (original as any)[property];
      const updatedValue = (updates as any)[property];
      
      if (JSON.stringify(originalValue) !== JSON.stringify(updatedValue)) {
        changes.push({
          type: 'modify',
          path: property,
          oldValue: originalValue,
          newValue: updatedValue,
          description: `${property} updated`
        });
      }
    }

    return changes;
  }

  private createSnapshot(document: BaseDocument): any {
    return {
      id: document.id,
      type: document.type,
      title: document.title,
      description: document.description,
      content: JSON.parse(JSON.stringify(document.content)),
      metadata: JSON.parse(JSON.stringify(document.metadata)),
      permissions: JSON.parse(JSON.stringify(document.permissions)),
      createdAt: document.createdAt,
      updatedAt: document.updatedAt,
      createdBy: document.createdBy,
      lastModifiedBy: document.lastModifiedBy
    };
  }

  private incrementVersion(currentVersion: string, type: 'major' | 'minor' | 'patch'): string {
    const parts = currentVersion.split('.').map(Number);
    const [major, minor, patch] = parts;

    switch (type) {
      case 'major':
        return `${major + 1}.0.0`;
      case 'minor':
        return `${major}.${minor + 1}.0`;
      case 'patch':
        return `${major}.${minor}.${patch + 1}`;
      default:
        return `${major}.${minor}.${patch + 1}`;
    }
  }

  private compareSnapshots(snapshot1: any, snapshot2: any): ChangeSet[] {
    const changes: ChangeSet[] = [];
    const fields = ['title', 'description', 'content', 'metadata', 'permissions'];
    
    for (const field of fields) {
      const value1 = snapshot1[field];
      const value2 = snapshot2[field];

      if (JSON.stringify(value1) !== JSON.stringify(value2)) {
        if (value1 === undefined || value1 === null) {
          changes.push({
            type: 'add',
            path: field,
            newValue: value2,
            description: `${field} added`
          });
        } else if (value2 === undefined || value2 === null) {
          changes.push({
            type: 'delete',
            path: field,
            oldValue: value1,
            description: `${field} removed`
          });
        } else {
          changes.push({
            type: 'modify',
            path: field,
            oldValue: value1,
            newValue: value2,
            description: `${field} modified`
          });
        }
      }
    }

    return changes;
  }

  private calculateSimilarity(snapshot1: any, snapshot2: any): number {
    // Simple similarity calculation based on content overlap
    const fields = ['title', 'description', 'content'];
    let similarity = 0;
    let totalFields = 0;

    for (const field of fields) {
      const value1 = snapshot1[field];
      const value2 = snapshot2[field];
      
      if (typeof value1 === 'string' && typeof value2 === 'string') {
        const similarity = this.calculateStringSimilarity(value1, value2);
        similarity += similarity;
        totalFields++;
      }
    }

    return totalFields > 0 ? similarity / totalFields : 0;
  }

  private calculateStringSimilarity(str1: string, str2: string): number {
    // Simple Jaccard similarity
    const set1 = new Set(str1.toLowerCase().split(' '));
    const set2 = new Set(str2.toLowerCase().split(' '));
    
    const intersection = new Set([...set1].filter(x => set2.has(x)));
    const union = new Set([...set1, ...set2]);
    
    return intersection.size / union.size;
  }

  private groupChangesBySection(changes: ChangeSet[]): any {
    const sections: any = {};
    
    for (const change of changes) {
      const section = change.path.split('.')[0];
      if (!sections[section]) {
        sections[section] = [];
      }
      sections[section].push(change);
    }
    
    return sections;
  }

  private calculateChangeFrequency(history: VersionHistory[]): any {
    const frequency: any = {};
    
    for (const version of history) {
      const date = version.timestamp.toISOString().split('T')[0];
      frequency[date] = (frequency[date] || 0) + 1;
    }
    
    return frequency;
  }

  private calculateCollaborationScore(history: VersionHistory[]): number {
    const authors = new Set(history.map(v => v.author));
    const totalVersions = history.length;
    
    // Higher score for more authors and more versions
    return Math.min((authors.size * totalVersions) / 100, 100);
  }

  private calculateStabilityScore(history: VersionHistory[]): number {
    if (history.length < 2) return 100;
    
    // Calculate variance in change frequency
    const changes = history.map(v => v.changes.length);
    const avg = changes.reduce((sum, c) => sum + c, 0) / changes.length;
    const variance = changes.reduce((sum, c) => sum + Math.pow(c - avg, 2), 0) / changes.length;
    
    // Lower variance = higher stability
    return Math.max(0, 100 - variance);
  }

  private calculateAverageChanges(history: VersionHistory[]): number {
    if (history.length === 0) return 0;
    
    const totalChanges = history.reduce((sum, v) => sum + v.changes.length, 0);
    return totalChanges / history.length;
  }

  private getMostActiveAuthor(history: VersionHistory[]): string {
    const authorCounts: any = {};
    
    for (const version of history) {
      authorCounts[version.author] = (authorCounts[version.author] || 0) + 1;
    }
    
    return Object.keys(authorCounts).reduce((a, b) => 
      authorCounts[a] > authorCounts[b] ? a : b
    );
  }

  private getVersionDistribution(history: VersionHistory[]): any {
    const distribution: any = {};
    
    for (const version of history) {
      const type = version.version.split('.')[0];
      distribution[type] = (distribution[type] || 0) + 1;
    }
    
    return distribution;
  }

  private getBranchActivity(branches: VersionBranch[]): any {
    return {
      total: branches.length,
      active: branches.filter(b => !b.merged).length,
      merged: branches.filter(b => b.merged).length,
      averageLifetime: this.calculateAverageBranchLifetime(branches)
    };
  }

  private calculateAverageBranchLifetime(branches: VersionBranch[]): number {
    const mergedBranches = branches.filter(b => b.merged && b.mergedAt);
    
    if (mergedBranches.length === 0) return 0;
    
    const totalLifetime = mergedBranches.reduce((sum, b) => {
      const lifetime = b.mergedAt!.getTime() - b.createdAt.getTime();
      return sum + lifetime;
    }, 0);
    
    return totalLifetime / mergedBranches.length;
  }

  private calculateVersionSize(version: VersionHistory): number {
    return JSON.stringify(version.snapshot).length;
  }

  private async detectMergeConflicts(
    documentId: string,
    sourceBranch: string,
    targetBranch: string
  ): Promise<any[]> {
    // Implement conflict detection logic
    return [];
  }

  private async performMerge(
    documentId: string,
    sourceBranch: string,
    targetBranch: string,
    options: MergeOptions
  ): Promise<any> {
    // Implement merge logic
    return {};
  }

  private async getVersion(documentId: string, version: string): Promise<VersionHistory | null> {
    const history = this.versions.get(documentId) || [];
    return history.find(v => v.version === version) || null;
  }

  private async getCurrentDocument(documentId: string): Promise<BaseDocument | null> {
    const history = this.versions.get(documentId) || [];
    const latest = history[history.length - 1];
    return latest ? latest.snapshot : null;
  }

  private async createBackup(document: BaseDocument, name: string): Promise<void> {
    // Implement backup creation
  }

  private generateMergeId(): string {
    return `merge_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
}

// Supporting interfaces
export interface VersionOptions {
  versionType?: 'major' | 'minor' | 'patch';
  message?: string;
  branchName?: string;
  createBackup?: boolean;
}

export interface BranchOptions {
  description?: string;
  baseCommit?: string;
}

export interface MergeOptions {
  strategy?: 'auto' | 'manual' | 'ours' | 'theirs';
  force?: boolean;
  mergedBy?: string;
}

export interface MergeResult {
  success: boolean;
  mergeResult?: any;
  conflicts?: any[];
  requiresResolution?: boolean;
}

export interface VersionComparison {
  version1: string;
  version2: string;
  changes: ChangeSet[];
  added: ChangeSet[];
  modified: ChangeSet[];
  deleted: ChangeSet[];
  similarity: number;
}

export interface VersionDiff {
  from: string;
  to: string;
  changes: ChangeSet[];
  summary: {
    totalChanges: number;
    additions: number;
    modifications: number;
    deletions: number;
    similarity: number;
  };
  sections: any;
  metadata: {
    generatedAt: Date;
    processingTime: number;
  };
}

export interface RollbackOptions {
  createBackup?: boolean;
  rolledBackBy?: string;
}

export interface RollbackResult {
  success: boolean;
  rolledBackTo: string;
  newVersion: string;
  backupCreated: boolean;
}

export interface VersionAnalytics {
  totalVersions: number;
  totalBranches: number;
  totalMerges: number;
  activeBranches: number;
  collaborators: number;
  changeFrequency: any;
  collaborationScore: number;
  stabilityScore: number;
  averageChangesPerVersion: number;
  mostActiveAuthor: string;
  versionDistribution: any;
  branchActivity: any;
  mergeHistory: MergeRecord[];
}

export interface CleanupOptions {
  keepVersions?: number;
  keepDays?: number;
  keepImportant?: boolean;
}

export interface CleanupResult {
  versionsDeleted: number;
  versionsKept: number;
  spaceFreed: number;
}

export interface MergeRecord {
  id: string;
  sourceBranch: string;
  targetBranch: string;
  mergedAt: Date;
  mergedBy: string;
  conflicts: number;
  resolution: string;
}


=== FILE: client/src/features/documents/storage/EnhancedLocking.ts ===

import { BaseDocument } from '../types/document.types';
import { DocumentLock, LockOptions, UserLockStats } from '../core/DocumentLocking';
import { ConflictResolution, ConflictResolutionStrategy } from '../types/collaboration.types';

/**
 * Enhanced Document Locking System - Advanced locking with conflict resolution
 * 
 * This system provides:
 * - Multi-level locking (document, section, field)
 * - Automatic conflict detection
 * - Smart conflict resolution
 * - Lock inheritance and delegation
 * - Lock analytics and optimization
 * - Deadlock prevention
 */
export class EnhancedLocking {
  private locks: Map<string, DocumentLock> = new Map();
  private sectionLocks: Map<string, SectionLock[]> = new Map();
  private fieldLocks: Map<string, FieldLock[]> = new Map();
  private lockTimeouts: Map<string, NodeJS.Timeout> = new Map();
  private lockHistory: Map<string, LockEvent[]> = new Map();
  private deadlockDetector: DeadlockDetector;
  private conflictResolver: ConflictResolver;

  constructor() {
    this.deadlockDetector = new DeadlockDetector();
    this.conflictResolver = new ConflictResolver();
  }

  /**
   * Acquire document lock with advanced options
   */
  async acquireLock(
    documentId: string,
    userId: string,
    options: EnhancedLockOptions = {}
  ): Promise<LockResult> {
    const startTime = Date.now();
    
    try {
      // 1. Check for deadlocks
      const deadlockRisk = await this.deadlockDetector.checkDeadlockRisk(
        documentId,
        userId,
        options
      );
      
      if (deadlockRisk.risk > 0.8 && !options.force) {
        return {
          success: false,
          reason: 'deadlock_risk',
          deadlockRisk: deadlockRisk.risk,
          suggestedWaitTime: deadlockRisk.suggestedWaitTime
        };
      }

      // 2. Check for existing locks
      const existingLock = this.locks.get(documentId);
      if (existingLock && existingLock.userId !== userId) {
        // Check if lock has expired
        if (this.isLockExpired(existingLock)) {
          await this.releaseLock(documentId, existingLock.userId);
        } else {
          // Check if we can acquire a shared lock
          if (options.lockType === 'shared' && existingLock.lockType === 'shared') {
            return await this.acquireSharedLock(documentId, userId, options);
          } else {
            return {
              success: false,
              reason: 'document_locked',
              lockedBy: existingLock.userName,
              lockExpiresAt: existingLock.expiresAt,
              suggestedWaitTime: this.calculateWaitTime(existingLock)
            };
          }
        }
      }

      // 3. Acquire the lock
      const lock: DocumentLock = {
        documentId,
        userId,
        userName: options.userName || 'Unknown User',
        userEmail: options.userEmail || '',
        lockedAt: new Date(),
        expiresAt: new Date(Date.now() + (options.timeout || 30 * 60 * 1000)),
        reason: options.reason || 'Editing',
        force: options.force || false,
        lockType: options.lockType || 'exclusive',
        priority: options.priority || 'normal',
        metadata: options.metadata || {}
      };

      this.locks.set(documentId, lock);

      // 4. Set up auto-release
      this.setupAutoRelease(documentId, lock);

      // 5. Record lock event
      await this.recordLockEvent(documentId, userId, 'acquired', {
        lockType: lock.lockType,
        reason: lock.reason,
        processingTime: Date.now() - startTime
      });

      return {
        success: true,
        lock,
        processingTime: Date.now() - startTime
      };

    } catch (error) {
      await this.recordLockEvent(documentId, userId, 'failed', {
        error: error.message,
        processingTime: Date.now() - startTime
      });
      
      throw new Error(`Failed to acquire lock: ${error.message}`);
    }
  }

  /**
   * Acquire section-level lock
   */
  async acquireSectionLock(
    documentId: string,
    sectionId: string,
    userId: string,
    options: SectionLockOptions = {}
  ): Promise<SectionLockResult> {
    try {
      // Check if document is locked by another user
      const documentLock = this.locks.get(documentId);
      if (documentLock && documentLock.userId !== userId && documentLock.lockType === 'exclusive') {
        return {
          success: false,
          reason: 'document_locked',
          lockedBy: documentLock.userName
        };
      }

      // Check for existing section locks
      const existingLocks = this.sectionLocks.get(sectionId) || [];
      const conflictingLock = existingLocks.find(lock => 
        lock.userId !== userId && 
        (lock.lockType === 'exclusive' || options.lockType === 'exclusive')
      );

      if (conflictingLock) {
        return {
          success: false,
          reason: 'section_locked',
          lockedBy: conflictingLock.userName,
          lockExpiresAt: conflictingLock.expiresAt
        };
      }

      // Create section lock
      const sectionLock: SectionLock = {
        id: this.generateLockId(),
        documentId,
        sectionId,
        userId,
        userName: options.userName || 'Unknown User',
        lockType: options.lockType || 'exclusive',
        lockedAt: new Date(),
        expiresAt: new Date(Date.now() + (options.timeout || 15 * 60 * 1000)),
        reason: options.reason || 'Section editing',
        metadata: options.metadata || {}
      };

      existingLocks.push(sectionLock);
      this.sectionLocks.set(sectionId, existingLocks);

      // Set up auto-release
      this.setupSectionAutoRelease(sectionId, sectionLock);

      return {
        success: true,
        lock: sectionLock
      };

    } catch (error) {
      throw new Error(`Failed to acquire section lock: ${error.message}`);
    }
  }

  /**
   * Acquire field-level lock
   */
  async acquireFieldLock(
    documentId: string,
    fieldPath: string,
    userId: string,
    options: FieldLockOptions = {}
  ): Promise<FieldLockResult> {
    try {
      // Check if document or section is locked
      const documentLock = this.locks.get(documentId);
      if (documentLock && documentLock.userId !== userId && documentLock.lockType === 'exclusive') {
        return {
          success: false,
          reason: 'document_locked',
          lockedBy: documentLock.userName
        };
      }

      // Check for existing field locks
      const existingLocks = this.fieldLocks.get(fieldPath) || [];
      const conflictingLock = existingLocks.find(lock => 
        lock.userId !== userId && 
        (lock.lockType === 'exclusive' || options.lockType === 'exclusive')
      );

      if (conflictingLock) {
        return {
          success: false,
          reason: 'field_locked',
          lockedBy: conflictingLock.userName,
          lockExpiresAt: conflictingLock.expiresAt
        };
      }

      // Create field lock
      const fieldLock: FieldLock = {
        id: this.generateLockId(),
        documentId,
        fieldPath,
        userId,
        userName: options.userName || 'Unknown User',
        lockType: options.lockType || 'exclusive',
        lockedAt: new Date(),
        expiresAt: new Date(Date.now() + (options.timeout || 5 * 60 * 1000)),
        reason: options.reason || 'Field editing',
        metadata: options.metadata || {}
      };

      existingLocks.push(fieldLock);
      this.fieldLocks.set(fieldPath, existingLocks);

      // Set up auto-release
      this.setupFieldAutoRelease(fieldPath, fieldLock);

      return {
        success: true,
        lock: fieldLock
      };

    } catch (error) {
      throw new Error(`Failed to acquire field lock: ${error.message}`);
    }
  }

  /**
   * Release lock with cleanup
   */
  async releaseLock(
    documentId: string,
    userId: string,
    options: ReleaseOptions = {}
  ): Promise<ReleaseResult> {
    try {
      const lock = this.locks.get(documentId);
      
      if (!lock) {
        return {
          success: true,
          message: 'No lock to release'
        };
      }

      if (lock.userId !== userId && !options.force) {
        return {
          success: false,
          reason: 'not_lock_owner',
          lockedBy: lock.userName
        };
      }

      // Release the lock
      this.locks.delete(documentId);
      
      // Clear timeout
      const timeout = this.lockTimeouts.get(documentId);
      if (timeout) {
        clearTimeout(timeout);
        this.lockTimeouts.delete(documentId);
      }

      // Record release event
      await this.recordLockEvent(documentId, userId, 'released', {
        lockType: lock.lockType,
        duration: Date.now() - lock.lockedAt.getTime()
      });

      return {
        success: true,
        releasedAt: new Date(),
        duration: Date.now() - lock.lockedAt.getTime()
      };

    } catch (error) {
      throw new Error(`Failed to release lock: ${error.message}`);
    }
  }

  /**
   * Detect and resolve conflicts
   */
  async detectConflicts(
    documentId: string,
    userId: string
  ): Promise<ConflictDetectionResult> {
    try {
      const conflicts: ConflictInfo[] = [];

      // Check for document-level conflicts
      const documentLock = this.locks.get(documentId);
      if (documentLock && documentLock.userId !== userId) {
        conflicts.push({
          type: 'document_lock',
          severity: 'high',
          message: `Document is locked by ${documentLock.userName}`,
          lockedBy: documentLock.userName,
          lockExpiresAt: documentLock.expiresAt,
          resolution: 'wait_for_release'
        });
      }

      // Check for section-level conflicts
      const sectionLocks = Array.from(this.sectionLocks.values())
        .flat()
        .filter(lock => lock.documentId === documentId && lock.userId !== userId);

      for (const sectionLock of sectionLocks) {
        conflicts.push({
          type: 'section_lock',
          severity: 'medium',
          message: `Section ${sectionLock.sectionId} is locked by ${sectionLock.userName}`,
          lockedBy: sectionLock.userName,
          lockExpiresAt: sectionLock.expiresAt,
          resolution: 'request_access'
        });
      }

      // Check for field-level conflicts
      const fieldLocks = Array.from(this.fieldLocks.values())
        .flat()
        .filter(lock => lock.documentId === documentId && lock.userId !== userId);

      for (const fieldLock of fieldLocks) {
        conflicts.push({
          type: 'field_lock',
          severity: 'low',
          message: `Field ${fieldLock.fieldPath} is locked by ${fieldLock.userName}`,
          lockedBy: fieldLock.userName,
          lockExpiresAt: fieldLock.expiresAt,
          resolution: 'request_access'
        });
      }

      return {
        hasConflicts: conflicts.length > 0,
        conflicts,
        totalConflicts: conflicts.length,
        highSeverityConflicts: conflicts.filter(c => c.severity === 'high').length
      };

    } catch (error) {
      throw new Error(`Failed to detect conflicts: ${error.message}`);
    }
  }

  /**
   * Resolve conflicts automatically
   */
  async resolveConflicts(
    documentId: string,
    conflicts: ConflictInfo[],
    options: ConflictResolutionOptions = {}
  ): Promise<ConflictResolutionResult> {
    try {
      const results: ConflictResolutionResult = {
        resolved: [],
        failed: [],
        processingTime: Date.now()
      };

      for (const conflict of conflicts) {
        try {
          let resolution: ConflictResolution | null = null;

          switch (conflict.type) {
            case 'document_lock':
              resolution = await this.resolveDocumentLockConflict(conflict, options);
              break;
            case 'section_lock':
              resolution = await this.resolveSectionLockConflict(conflict, options);
              break;
            case 'field_lock':
              resolution = await this.resolveFieldLockConflict(conflict, options);
              break;
          }

          if (resolution) {
            results.resolved.push(resolution);
          } else {
            results.failed.push({
              conflict,
              error: 'Resolution not available'
            });
          }

        } catch (error) {
          results.failed.push({
            conflict,
            error: error.message
          });
        }
      }

      results.processingTime = Date.now() - results.processingTime;
      return results;

    } catch (error) {
      throw new Error(`Failed to resolve conflicts: ${error.message}`);
    }
  }

  /**
   * Get lock analytics
   */
  async getLockAnalytics(): Promise<LockAnalytics> {
    const allLocks = Array.from(this.locks.values());
    const sectionLocks = Array.from(this.sectionLocks.values()).flat();
    const fieldLocks = Array.from(this.fieldLocks.values()).flat();

    // Calculate metrics
    const totalLocks = allLocks.length + sectionLocks.length + fieldLocks.length;
    const activeLocks = allLocks.filter(lock => !this.isLockExpired(lock)).length;
    const expiredLocks = allLocks.filter(lock => this.isLockExpired(lock)).length;

    // Calculate lock duration statistics
    const lockDurations = allLocks.map(lock => 
      Date.now() - lock.lockedAt.getTime()
    );
    const averageDuration = lockDurations.length > 0 
      ? lockDurations.reduce((sum, d) => sum + d, 0) / lockDurations.length 
      : 0;

    // Calculate user activity
    const userActivity = new Map<string, number>();
    for (const lock of allLocks) {
      const count = userActivity.get(lock.userId) || 0;
      userActivity.set(lock.userId, count + 1);
    }

    const mostActiveUsers = Array.from(userActivity.entries())
      .map(([userId, count]) => ({ userId, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 10);

    return {
      totalLocks,
      activeLocks,
      expiredLocks,
      sectionLocks: sectionLocks.length,
      fieldLocks: fieldLocks.length,
      averageDuration,
      mostActiveUsers,
      lockDistribution: this.getLockDistribution(allLocks),
      deadlockRisk: await this.deadlockDetector.getOverallRisk(),
      recommendations: await this.generateLockRecommendations()
    };
  }

  /**
   * Optimize lock performance
   */
  async optimizeLocks(): Promise<OptimizationResult> {
    try {
      const results: OptimizationResult = {
        expiredLocksCleaned: 0,
        deadlocksResolved: 0,
        performanceImproved: false,
        processingTime: Date.now()
      };

      // Clean up expired locks
      const expiredLocks = Array.from(this.locks.entries())
        .filter(([id, lock]) => this.isLockExpired(lock));

      for (const [id, lock] of expiredLocks) {
        await this.releaseLock(id, lock.userId, { force: true });
        results.expiredLocksCleaned++;
      }

      // Resolve deadlocks
      const deadlocks = await this.deadlockDetector.detectDeadlocks();
      for (const deadlock of deadlocks) {
        await this.resolveDeadlock(deadlock);
        results.deadlocksResolved++;
      }

      // Optimize lock timeouts
      await this.optimizeLockTimeouts();

      results.performanceImproved = true;
      results.processingTime = Date.now() - results.processingTime;

      return results;

    } catch (error) {
      throw new Error(`Failed to optimize locks: ${error.message}`);
    }
  }

  // Private helper methods
  private async acquireSharedLock(
    documentId: string,
    userId: string,
    options: EnhancedLockOptions
  ): Promise<LockResult> {
    // Implement shared lock logic
    const lock: DocumentLock = {
      documentId,
      userId,
      userName: options.userName || 'Unknown User',
      userEmail: options.userEmail || '',
      lockedAt: new Date(),
      expiresAt: new Date(Date.now() + (options.timeout || 30 * 60 * 1000)),
      reason: options.reason || 'Shared editing',
      force: false,
      lockType: 'shared',
      priority: options.priority || 'normal',
      metadata: options.metadata || {}
    };

    this.locks.set(documentId, lock);
    this.setupAutoRelease(documentId, lock);

    return {
      success: true,
      lock
    };
  }

  private setupAutoRelease(documentId: string, lock: DocumentLock): void {
    const timeout = setTimeout(() => {
      this.autoReleaseLock(documentId, lock.userId);
    }, lock.expiresAt.getTime() - Date.now());

    this.lockTimeouts.set(documentId, timeout);
  }

  private setupSectionAutoRelease(sectionId: string, lock: SectionLock): void {
    const timeout = setTimeout(() => {
      this.autoReleaseSectionLock(sectionId, lock.userId);
    }, lock.expiresAt.getTime() - Date.now());

    // Store timeout reference
    this.lockTimeouts.set(`section_${sectionId}`, timeout);
  }

  private setupFieldAutoRelease(fieldPath: string, lock: FieldLock): void {
    const timeout = setTimeout(() => {
      this.autoReleaseFieldLock(fieldPath, lock.userId);
    }, lock.expiresAt.getTime() - Date.now());

    // Store timeout reference
    this.lockTimeouts.set(`field_${fieldPath}`, timeout);
  }

  private async autoReleaseLock(documentId: string, userId: string): Promise<void> {
    await this.releaseLock(documentId, userId, { force: true });
  }

  private async autoReleaseSectionLock(sectionId: string, userId: string): Promise<void> {
    const locks = this.sectionLocks.get(sectionId) || [];
    const updatedLocks = locks.filter(lock => 
      !(lock.userId === userId && lock.sectionId === sectionId)
    );
    
    if (updatedLocks.length === 0) {
      this.sectionLocks.delete(sectionId);
    } else {
      this.sectionLocks.set(sectionId, updatedLocks);
    }
  }

  private async autoReleaseFieldLock(fieldPath: string, userId: string): Promise<void> {
    const locks = this.fieldLocks.get(fieldPath) || [];
    const updatedLocks = locks.filter(lock => 
      !(lock.userId === userId && lock.fieldPath === fieldPath)
    );
    
    if (updatedLocks.length === 0) {
      this.fieldLocks.delete(fieldPath);
    } else {
      this.fieldLocks.set(fieldPath, updatedLocks);
    }
  }

  private isLockExpired(lock: DocumentLock): boolean {
    return Date.now() > lock.expiresAt.getTime();
  }

  private calculateWaitTime(lock: DocumentLock): number {
    return lock.expiresAt.getTime() - Date.now();
  }

  private async recordLockEvent(
    documentId: string,
    userId: string,
    event: string,
    metadata: any
  ): Promise<void> {
    const events = this.lockHistory.get(documentId) || [];
    events.push({
      id: this.generateEventId(),
      documentId,
      userId,
      event,
      timestamp: new Date(),
      metadata
    });
    this.lockHistory.set(documentId, events);
  }

  private generateLockId(): string {
    return `lock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateEventId(): string {
    return `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private getLockDistribution(locks: DocumentLock[]): any {
    const distribution: any = {};
    
    for (const lock of locks) {
      distribution[lock.lockType] = (distribution[lock.lockType] || 0) + 1;
    }
    
    return distribution;
  }

  private async generateLockRecommendations(): Promise<string[]> {
    const recommendations: string[] = [];
    
    // Add recommendations based on analytics
    recommendations.push('Consider implementing lock timeouts to prevent deadlocks');
    recommendations.push('Monitor lock duration to identify performance bottlenecks');
    recommendations.push('Implement lock hierarchy to reduce conflicts');
    
    return recommendations;
  }

  private async resolveDocumentLockConflict(
    conflict: ConflictInfo,
    options: ConflictResolutionOptions
  ): Promise<ConflictResolution | null> {
    // Implement document lock conflict resolution
    return null;
  }

  private async resolveSectionLockConflict(
    conflict: ConflictInfo,
    options: ConflictResolutionOptions
  ): Promise<ConflictResolution | null> {
    // Implement section lock conflict resolution
    return null;
  }

  private async resolveFieldLockConflict(
    conflict: ConflictInfo,
    options: ConflictResolutionOptions
  ): Promise<ConflictResolution | null> {
    // Implement field lock conflict resolution
    return null;
  }

  private async resolveDeadlock(deadlock: any): Promise<void> {
    // Implement deadlock resolution
  }

  private async optimizeLockTimeouts(): Promise<void> {
    // Implement lock timeout optimization
  }
}

// Supporting classes
export class DeadlockDetector {
  async checkDeadlockRisk(
    documentId: string,
    userId: string,
    options: any
  ): Promise<{ risk: number; suggestedWaitTime: number }> {
    // Implement deadlock detection logic
    return { risk: 0, suggestedWaitTime: 0 };
  }

  async getOverallRisk(): Promise<number> {
    return 0;
  }

  async detectDeadlocks(): Promise<any[]> {
    return [];
  }
}

export class ConflictResolver {
  async resolveConflict(
    conflict: ConflictInfo,
    strategy: ConflictResolutionStrategy
  ): Promise<ConflictResolution | null> {
    // Implement conflict resolution logic
    return null;
  }
}

// Supporting interfaces
export interface EnhancedLockOptions extends LockOptions {
  lockType?: 'exclusive' | 'shared';
  priority?: 'low' | 'normal' | 'high' | 'urgent';
  metadata?: Record<string, any>;
  force?: boolean;
}

export interface LockResult {
  success: boolean;
  lock?: DocumentLock;
  reason?: string;
  lockedBy?: string;
  lockExpiresAt?: Date;
  suggestedWaitTime?: number;
  deadlockRisk?: number;
  processingTime?: number;
}

export interface SectionLockOptions {
  lockType?: 'exclusive' | 'shared';
  timeout?: number;
  reason?: string;
  userName?: string;
  metadata?: Record<string, any>;
}

export interface SectionLockResult {
  success: boolean;
  lock?: SectionLock;
  reason?: string;
  lockedBy?: string;
  lockExpiresAt?: Date;
}

export interface FieldLockOptions {
  lockType?: 'exclusive' | 'shared';
  timeout?: number;
  reason?: string;
  userName?: string;
  metadata?: Record<string, any>;
}

export interface FieldLockResult {
  success: boolean;
  lock?: FieldLock;
  reason?: string;
  lockedBy?: string;
  lockExpiresAt?: Date;
}

export interface SectionLock {
  id: string;
  documentId: string;
  sectionId: string;
  userId: string;
  userName: string;
  lockType: 'exclusive' | 'shared';
  lockedAt: Date;
  expiresAt: Date;
  reason: string;
  metadata: Record<string, any>;
}

export interface FieldLock {
  id: string;
  documentId: string;
  fieldPath: string;
  userId: string;
  userName: string;
  lockType: 'exclusive' | 'shared';
  lockedAt: Date;
  expiresAt: Date;
  reason: string;
  metadata: Record<string, any>;
}

export interface ReleaseOptions {
  force?: boolean;
}

export interface ReleaseResult {
  success: boolean;
  reason?: string;
  lockedBy?: string;
  releasedAt?: Date;
  duration?: number;
  message?: string;
}

export interface ConflictInfo {
  type: 'document_lock' | 'section_lock' | 'field_lock';
  severity: 'low' | 'medium' | 'high';
  message: string;
  lockedBy: string;
  lockExpiresAt: Date;
  resolution: string;
}

export interface ConflictDetectionResult {
  hasConflicts: boolean;
  conflicts: ConflictInfo[];
  totalConflicts: number;
  highSeverityConflicts: number;
}

export interface ConflictResolutionOptions {
  strategy?: ConflictResolutionStrategy;
  force?: boolean;
  notifyUsers?: boolean;
}

export interface ConflictResolutionResult {
  resolved: ConflictResolution[];
  failed: Array<{ conflict: ConflictInfo; error: string }>;
  processingTime: number;
}

export interface LockAnalytics {
  totalLocks: number;
  activeLocks: number;
  expiredLocks: number;
  sectionLocks: number;
  fieldLocks: number;
  averageDuration: number;
  mostActiveUsers: Array<{ userId: string; count: number }>;
  lockDistribution: Record<string, number>;
  deadlockRisk: number;
  recommendations: string[];
}

export interface OptimizationResult {
  expiredLocksCleaned: number;
  deadlocksResolved: number;
  performanceImproved: boolean;
  processingTime: number;
}

export interface LockEvent {
  id: string;
  documentId: string;
  userId: string;
  event: string;
  timestamp: Date;
  metadata: any;
}


=== FILE: client/src/features/documents/search/SemanticSearchEngine.ts ===

import { BaseDocument, DocumentType } from '../types/document.types';
import { SearchQuery, SearchResult, SearchFacets, SearchSuggestion } from '../types/search.types';

/**
 * Semantic Search Engine - Advanced document search with AI-powered semantic understanding
 * 
 * This system provides:
 * - Semantic search with natural language understanding
 * - Advanced filtering and faceted search
 * - AI-powered content analysis and indexing
 * - Search suggestions and auto-complete
 * - Search analytics and optimization
 */
export class SemanticSearchEngine {
  private vectorStore: VectorStore;
  private textIndexer: TextIndexer;
  private semanticAnalyzer: SemanticAnalyzer;
  private searchOptimizer: SearchOptimizer;
  private searchAnalytics: SearchAnalytics;

  constructor() {
    this.vectorStore = new VectorStore();
    this.textIndexer = new TextIndexer();
    this.semanticAnalyzer = new SemanticAnalyzer();
    this.searchOptimizer = new SearchOptimizer();
    this.searchAnalytics = new SearchAnalytics();
  }

  /**
   * Perform semantic search with natural language understanding
   */
  async search(
    query: SearchQuery,
    options: SearchOptions = {}
  ): Promise<SearchResult> {
    const startTime = Date.now();
    
    try {
      // 1. Parse and analyze the search query
      const queryAnalysis = await this.semanticAnalyzer.analyzeQuery(query.text, {
        includeIntent: true,
        extractEntities: true,
        generateSynonyms: true
      });

      // 2. Generate search vectors
      const searchVectors = await this.generateSearchVectors(queryAnalysis);

      // 3. Perform vector similarity search
      const vectorResults = await this.vectorStore.similaritySearch(
        searchVectors,
        {
          limit: options.limit || 50,
          threshold: options.similarityThreshold || 0.7,
          includeMetadata: true
        }
      );

      // 4. Perform text-based search for additional results
      const textResults = await this.textIndexer.search(query.text, {
        fields: options.fields || ['title', 'content', 'description'],
        limit: options.limit || 50,
        fuzzy: options.fuzzy !== false,
        highlight: options.highlight !== false
      });

      // 5. Merge and rank results
      const mergedResults = await this.mergeAndRankResults(
        vectorResults,
        textResults,
        queryAnalysis
      );

      // 6. Generate facets
      const facets = await this.generateSearchFacets(mergedResults, query);

      // 7. Generate suggestions
      const suggestions = await this.generateSearchSuggestions(query, queryAnalysis);

      // 8. Record search analytics
      await this.searchAnalytics.recordSearch(query, mergedResults, Date.now() - startTime);

      return {
        documents: mergedResults,
        total: mergedResults.length,
        facets,
        suggestions,
        query: query.text,
        processingTime: Date.now() - startTime,
        metadata: {
          vectorResults: vectorResults.length,
          textResults: textResults.length,
          queryAnalysis,
          searchStrategy: 'semantic_hybrid'
        }
      };

    } catch (error) {
      throw new Error(`Semantic search failed: ${error.message}`);
    }
  }

  /**
   * Advanced filtering with multiple criteria
   */
  async filterDocuments(
    filters: DocumentFilters,
    options: FilterOptions = {}
  ): Promise<FilterResult> {
    const startTime = Date.now();
    
    try {
      let results: BaseDocument[] = [];

      // 1. Apply document type filters
      if (filters.documentTypes && filters.documentTypes.length > 0) {
        results = await this.filterByDocumentType(filters.documentTypes);
      }

      // 2. Apply date range filters
      if (filters.dateRange) {
        results = await this.filterByDateRange(results, filters.dateRange);
      }

      // 3. Apply content filters
      if (filters.content) {
        results = await this.filterByContent(results, filters.content);
      }

      // 4. Apply metadata filters
      if (filters.metadata) {
        results = await this.filterByMetadata(results, filters.metadata);
      }

      // 5. Apply permission filters
      if (filters.permissions) {
        results = await this.filterByPermissions(results, filters.permissions);
      }

      // 6. Apply AI-generated content filters
      if (filters.aiGenerated !== undefined) {
        results = await this.filterByAIContent(results, filters.aiGenerated);
      }

      // 7. Apply collaboration filters
      if (filters.collaboration) {
        results = await this.filterByCollaboration(results, filters.collaboration);
      }

      // 8. Apply custom filters
      if (filters.custom) {
        results = await this.applyCustomFilters(results, filters.custom);
      }

      // 9. Sort results
      if (options.sortBy) {
        results = await this.sortResults(results, options.sortBy, options.sortOrder);
      }

      // 10. Apply pagination
      if (options.pagination) {
        results = this.applyPagination(results, options.pagination);
      }

      return {
        documents: results,
        total: results.length,
        appliedFilters: filters,
        processingTime: Date.now() - startTime,
        metadata: {
          filterCount: Object.keys(filters).length,
          resultCount: results.length
        }
      };

    } catch (error) {
      throw new Error(`Document filtering failed: ${error.message}`);
    }
  }

  /**
   * Search with AI-powered content analysis
   */
  async searchWithAI(
    query: string,
    options: AISearchOptions = {}
  ): Promise<AISearchResult> {
    const startTime = Date.now();
    
    try {
      // 1. Analyze query with AI
      const queryAnalysis = await this.semanticAnalyzer.analyzeQueryWithAI(query, {
        extractIntent: true,
        identifyEntities: true,
        generateContext: true,
        suggestRefinements: true
      });

      // 2. Generate AI-powered search vectors
      const aiVectors = await this.generateAISearchVectors(queryAnalysis);

      // 3. Perform AI-enhanced search
      const searchResults = await this.performAISearch(aiVectors, options);

      // 4. Analyze results with AI
      const resultAnalysis = await this.analyzeResultsWithAI(searchResults, queryAnalysis);

      // 5. Generate AI insights
      const insights = await this.generateAISearchInsights(queryAnalysis, resultAnalysis);

      // 6. Generate AI recommendations
      const recommendations = await this.generateAIRecommendations(queryAnalysis, resultAnalysis);

      return {
        documents: searchResults,
        total: searchResults.length,
        queryAnalysis,
        resultAnalysis,
        insights,
        recommendations,
        processingTime: Date.now() - startTime,
        metadata: {
          aiConfidence: queryAnalysis.confidence,
          searchStrategy: 'ai_enhanced',
          insightsGenerated: insights.length,
          recommendationsGenerated: recommendations.length
        }
      };

    } catch (error) {
      throw new Error(`AI search failed: ${error.message}`);
    }
  }

  /**
   * Get search suggestions and auto-complete
   */
  async getSearchSuggestions(
    partialQuery: string,
    options: SuggestionOptions = {}
  ): Promise<SearchSuggestion[]> {
    try {
      // 1. Generate text-based suggestions
      const textSuggestions = await this.generateTextSuggestions(partialQuery, options);

      // 2. Generate semantic suggestions
      const semanticSuggestions = await this.generateSemanticSuggestions(partialQuery, options);

      // 3. Generate AI-powered suggestions
      const aiSuggestions = await this.generateAISuggestions(partialQuery, options);

      // 4. Merge and rank suggestions
      const mergedSuggestions = await this.mergeAndRankSuggestions(
        textSuggestions,
        semanticSuggestions,
        aiSuggestions
      );

      // 5. Apply filters and limits
      const filteredSuggestions = this.filterSuggestions(mergedSuggestions, options);

      return filteredSuggestions;

    } catch (error) {
      throw new Error(`Failed to get search suggestions: ${error.message}`);
    }
  }

  /**
   * Index document for search
   */
  async indexDocument(
    document: BaseDocument,
    options: IndexingOptions = {}
  ): Promise<IndexingResult> {
    const startTime = Date.now();
    
    try {
      // 1. Extract and process text content
      const textContent = await this.textIndexer.extractText(document);

      // 2. Generate semantic vectors
      const vectors = await this.semanticAnalyzer.generateVectors(textContent);

      // 3. Index in vector store
      await this.vectorStore.indexDocument(document.id, vectors, {
        metadata: {
          type: document.type,
          title: document.title,
          createdAt: document.createdAt,
          updatedAt: document.updatedAt
        }
      });

      // 4. Index in text indexer
      await this.textIndexer.indexDocument(document.id, textContent, {
        fields: ['title', 'content', 'description'],
        boost: options.boost || 1.0
      });

      // 5. Generate searchable metadata
      const searchableMetadata = await this.generateSearchableMetadata(document);

      // 6. Update search analytics
      await this.searchAnalytics.recordIndexing(document.id, Date.now() - startTime);

      return {
        success: true,
        documentId: document.id,
        vectorsGenerated: vectors.length,
        textIndexed: textContent.length,
        processingTime: Date.now() - startTime,
        metadata: {
          searchableMetadata,
          indexingStrategy: 'semantic_text_hybrid'
        }
      };

    } catch (error) {
      throw new Error(`Failed to index document: ${error.message}`);
    }
  }

  /**
   * Get search analytics and insights
   */
  async getSearchAnalytics(
    options: AnalyticsOptions = {}
  ): Promise<SearchAnalytics> {
    try {
      const analytics = await this.searchAnalytics.getAnalytics(options);

      return {
        totalSearches: analytics.totalSearches,
        averageResponseTime: analytics.averageResponseTime,
        popularQueries: analytics.popularQueries,
        searchTrends: analytics.searchTrends,
        userBehavior: analytics.userBehavior,
        performanceMetrics: analytics.performanceMetrics,
        recommendations: await this.generateSearchRecommendations(analytics)
      };

    } catch (error) {
      throw new Error(`Failed to get search analytics: ${error.message}`);
    }
  }

  /**
   * Optimize search performance
   */
  async optimizeSearch(): Promise<OptimizationResult> {
    try {
      const startTime = Date.now();
      const results: OptimizationResult = {
        indexOptimized: false,
        cacheOptimized: false,
        performanceImproved: false,
        processingTime: 0
      };

      // 1. Optimize vector store
      const vectorOptimization = await this.vectorStore.optimize();
      results.indexOptimized = vectorOptimization.optimized;

      // 2. Optimize text indexer
      const textOptimization = await this.textIndexer.optimize();
      results.cacheOptimized = textOptimization.optimized;

      // 3. Optimize search analytics
      await this.searchAnalytics.optimize();

      // 4. Overall performance improvement
      results.performanceImproved = results.indexOptimized && results.cacheOptimized;
      results.processingTime = Date.now() - startTime;

      return results;

    } catch (error) {
      throw new Error(`Failed to optimize search: ${error.message}`);
    }
  }

  // Private helper methods
  private async generateSearchVectors(queryAnalysis: QueryAnalysis): Promise<number[][]> {
    // Generate search vectors from query analysis
    return [];
  }

  private async mergeAndRankResults(
    vectorResults: any[],
    textResults: any[],
    queryAnalysis: QueryAnalysis
  ): Promise<BaseDocument[]> {
    // Merge and rank search results
    return [];
  }

  private async generateSearchFacets(
    results: BaseDocument[],
    query: SearchQuery
  ): Promise<SearchFacets> {
    // Generate search facets from results
    return {
      documentTypes: {},
      dateRanges: {},
      authors: {},
      tags: {},
      categories: {}
    };
  }

  private async generateSearchSuggestions(
    query: SearchQuery,
    queryAnalysis: QueryAnalysis
  ): Promise<SearchSuggestion[]> {
    // Generate search suggestions
    return [];
  }

  private async filterByDocumentType(types: DocumentType[]): Promise<BaseDocument[]> {
    // Filter by document type
    return [];
  }

  private async filterByDateRange(
    documents: BaseDocument[],
    dateRange: DateRange
  ): Promise<BaseDocument[]> {
    // Filter by date range
    return documents.filter(doc => {
      const docDate = doc.updatedAt;
      return docDate >= dateRange.start && docDate <= dateRange.end;
    });
  }

  private async filterByContent(
    documents: BaseDocument[],
    contentFilter: ContentFilter
  ): Promise<BaseDocument[]> {
    // Filter by content criteria
    return documents;
  }

  private async filterByMetadata(
    documents: BaseDocument[],
    metadataFilter: MetadataFilter
  ): Promise<BaseDocument[]> {
    // Filter by metadata criteria
    return documents;
  }

  private async filterByPermissions(
    documents: BaseDocument[],
    permissionFilter: PermissionFilter
  ): Promise<BaseDocument[]> {
    // Filter by permission criteria
    return documents;
  }

  private async filterByAIContent(
    documents: BaseDocument[],
    aiGenerated: boolean
  ): Promise<BaseDocument[]> {
    // Filter by AI-generated content
    return documents.filter(doc => doc.ai.autoGenerated === aiGenerated);
  }

  private async filterByCollaboration(
    documents: BaseDocument[],
    collaborationFilter: CollaborationFilter
  ): Promise<BaseDocument[]> {
    // Filter by collaboration criteria
    return documents;
  }

  private async applyCustomFilters(
    documents: BaseDocument[],
    customFilters: CustomFilter[]
  ): Promise<BaseDocument[]> {
    // Apply custom filters
    return documents;
  }

  private async sortResults(
    documents: BaseDocument[],
    sortBy: string,
    sortOrder: 'asc' | 'desc' = 'desc'
  ): Promise<BaseDocument[]> {
    // Sort results by specified criteria
    return documents;
  }

  private applyPagination(
    documents: BaseDocument[],
    pagination: PaginationOptions
  ): BaseDocument[] {
    // Apply pagination
    const start = pagination.page * pagination.pageSize;
    const end = start + pagination.pageSize;
    return documents.slice(start, end);
  }

  private async generateAISearchVectors(queryAnalysis: QueryAnalysis): Promise<number[][]> {
    // Generate AI-powered search vectors
    return [];
  }

  private async performAISearch(vectors: number[][], options: AISearchOptions): Promise<BaseDocument[]> {
    // Perform AI-enhanced search
    return [];
  }

  private async analyzeResultsWithAI(
    results: BaseDocument[],
    queryAnalysis: QueryAnalysis
  ): Promise<ResultAnalysis> {
    // Analyze results with AI
    return {
      relevance: 0,
      confidence: 0,
      insights: [],
      patterns: []
    };
  }

  private async generateAISearchInsights(
    queryAnalysis: QueryAnalysis,
    resultAnalysis: ResultAnalysis
  ): Promise<SearchInsight[]> {
    // Generate AI search insights
    return [];
  }

  private async generateAIRecommendations(
    queryAnalysis: QueryAnalysis,
    resultAnalysis: ResultAnalysis
  ): Promise<SearchRecommendation[]> {
    // Generate AI recommendations
    return [];
  }

  private async generateTextSuggestions(
    partialQuery: string,
    options: SuggestionOptions
  ): Promise<SearchSuggestion[]> {
    // Generate text-based suggestions
    return [];
  }

  private async generateSemanticSuggestions(
    partialQuery: string,
    options: SuggestionOptions
  ): Promise<SearchSuggestion[]> {
    // Generate semantic suggestions
    return [];
  }

  private async generateAISuggestions(
    partialQuery: string,
    options: SuggestionOptions
  ): Promise<SearchSuggestion[]> {
    // Generate AI-powered suggestions
    return [];
  }

  private async mergeAndRankSuggestions(
    textSuggestions: SearchSuggestion[],
    semanticSuggestions: SearchSuggestion[],
    aiSuggestions: SearchSuggestion[]
  ): Promise<SearchSuggestion[]> {
    // Merge and rank suggestions
    return [...textSuggestions, ...semanticSuggestions, ...aiSuggestions];
  }

  private filterSuggestions(
    suggestions: SearchSuggestion[],
    options: SuggestionOptions
  ): SearchSuggestion[] {
    // Filter suggestions based on options
    return suggestions.slice(0, options.limit || 10);
  }

  private async generateSearchableMetadata(document: BaseDocument): Promise<any> {
    // Generate searchable metadata
    return {
      type: document.type,
      title: document.title,
      description: document.description,
      tags: document.metadata.tags || [],
      category: document.metadata.category,
      status: document.metadata.status,
      createdAt: document.createdAt,
      updatedAt: document.updatedAt,
      createdBy: document.createdBy,
      lastModifiedBy: document.lastModifiedBy
    };
  }

  private async generateSearchRecommendations(analytics: any): Promise<string[]> {
    // Generate search recommendations
    return [];
  }
}

// Supporting classes
export class VectorStore {
  async similaritySearch(vectors: number[][], options: any): Promise<any[]> {
    // Implement vector similarity search
    return [];
  }

  async indexDocument(id: string, vectors: number[][], metadata: any): Promise<void> {
    // Implement document indexing
  }

  async optimize(): Promise<{ optimized: boolean }> {
    // Implement optimization
    return { optimized: true };
  }
}

export class TextIndexer {
  async extractText(document: BaseDocument): Promise<string> {
    // Extract text content from document
    return '';
  }

  async search(query: string, options: any): Promise<any[]> {
    // Implement text search
    return [];
  }

  async indexDocument(id: string, content: string, options: any): Promise<void> {
    // Implement text indexing
  }

  async optimize(): Promise<{ optimized: boolean }> {
    // Implement optimization
    return { optimized: true };
  }
}

export class SemanticAnalyzer {
  async analyzeQuery(text: string, options: any): Promise<QueryAnalysis> {
    // Analyze search query
    return {
      intent: '',
      entities: [],
      synonyms: [],
      confidence: 0.8
    };
  }

  async analyzeQueryWithAI(text: string, options: any): Promise<QueryAnalysis> {
    // Analyze query with AI
    return {
      intent: '',
      entities: [],
      synonyms: [],
      confidence: 0.9
    };
  }

  async generateVectors(content: string): Promise<number[][]> {
    // Generate semantic vectors
    return [];
  }
}

export class SearchOptimizer {
  // Implement search optimization
}

export class SearchAnalytics {
  async recordSearch(query: SearchQuery, results: BaseDocument[], duration: number): Promise<void> {
    // Record search analytics
  }

  async recordIndexing(documentId: string, duration: number): Promise<void> {
    // Record indexing analytics
  }

  async getAnalytics(options: AnalyticsOptions): Promise<any> {
    // Get search analytics
    return {};
  }

  async optimize(): Promise<void> {
    // Optimize search analytics
  }
}

// Supporting interfaces
export interface SearchQuery {
  text: string;
  filters?: DocumentFilters;
  options?: SearchOptions;
}

export interface SearchOptions {
  limit?: number;
  fields?: string[];
  fuzzy?: boolean;
  highlight?: boolean;
  similarityThreshold?: number;
}

export interface SearchResult {
  documents: BaseDocument[];
  total: number;
  facets: SearchFacets;
  suggestions: SearchSuggestion[];
  query: string;
  processingTime: number;
  metadata: any;
}

export interface SearchFacets {
  documentTypes: Record<string, number>;
  dateRanges: Record<string, number>;
  authors: Record<string, number>;
  tags: Record<string, number>;
  categories: Record<string, number>;
}

export interface SearchSuggestion {
  text: string;
  type: 'query' | 'filter' | 'facet';
  confidence: number;
  metadata?: any;
}

export interface DocumentFilters {
  documentTypes?: DocumentType[];
  dateRange?: DateRange;
  content?: ContentFilter;
  metadata?: MetadataFilter;
  permissions?: PermissionFilter;
  aiGenerated?: boolean;
  collaboration?: CollaborationFilter;
  custom?: CustomFilter[];
}

export interface DateRange {
  start: Date;
  end: Date;
}

export interface ContentFilter {
  contains?: string;
  notContains?: string;
  minLength?: number;
  maxLength?: number;
}

export interface MetadataFilter {
  category?: string;
  tags?: string[];
  status?: string;
  visibility?: string;
}

export interface PermissionFilter {
  userId?: string;
  role?: string;
  permission?: string;
}

export interface CollaborationFilter {
  hasComments?: boolean;
  hasSuggestions?: boolean;
  activeUsers?: string[];
}

export interface CustomFilter {
  field: string;
  operator: 'equals' | 'contains' | 'greaterThan' | 'lessThan';
  value: any;
}

export interface FilterOptions {
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  pagination?: PaginationOptions;
}

export interface PaginationOptions {
  page: number;
  pageSize: number;
}

export interface FilterResult {
  documents: BaseDocument[];
  total: number;
  appliedFilters: DocumentFilters;
  processingTime: number;
  metadata: any;
}

export interface AISearchOptions {
  confidence?: number;
  includeInsights?: boolean;
  generateRecommendations?: boolean;
}

export interface AISearchResult {
  documents: BaseDocument[];
  total: number;
  queryAnalysis: QueryAnalysis;
  resultAnalysis: ResultAnalysis;
  insights: SearchInsight[];
  recommendations: SearchRecommendation[];
  processingTime: number;
  metadata: any;
}

export interface QueryAnalysis {
  intent: string;
  entities: string[];
  synonyms: string[];
  confidence: number;
}

export interface ResultAnalysis {
  relevance: number;
  confidence: number;
  insights: string[];
  patterns: string[];
}

export interface SearchInsight {
  type: string;
  description: string;
  confidence: number;
  metadata?: any;
}

export interface SearchRecommendation {
  type: string;
  suggestion: string;
  confidence: number;
  metadata?: any;
}

export interface SuggestionOptions {
  limit?: number;
  includeFilters?: boolean;
  includeFacets?: boolean;
}

export interface IndexingOptions {
  boost?: number;
  includeMetadata?: boolean;
}

export interface IndexingResult {
  success: boolean;
  documentId: string;
  vectorsGenerated: number;
  textIndexed: number;
  processingTime: number;
  metadata: any;
}

export interface AnalyticsOptions {
  timeRange?: DateRange;
  includeTrends?: boolean;
  includeUserBehavior?: boolean;
}

export interface SearchAnalytics {
  totalSearches: number;
  averageResponseTime: number;
  popularQueries: Array<{ query: string; count: number }>;
  searchTrends: any;
  userBehavior: any;
  performanceMetrics: any;
  recommendations: string[];
}

export interface OptimizationResult {
  indexOptimized: boolean;
  cacheOptimized: boolean;
  performanceImproved: boolean;
  processingTime: number;
}


=== FILE: client/src/features/documents/components/infographic/InfographicDocumentRenderer.tsx ===

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  AreaChart,
  Area,
  ScatterChart,
  Scatter,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar,
  FunnelChart,
  Funnel,
  LabelList,
  Treemap
} from 'recharts';
import { 
  Eye, 
  Download, 
  Share2, 
  Maximize2, 
  TrendingUp,
  Target,
  AlertCircle,
  BarChart3
} from 'lucide-react';
import { InfographicDocument, InfographicData } from '../../types/infographic/InfographicDocument';
import { DocumentRendererProps } from '../../types/document.types';

interface InfographicDocumentRendererProps extends DocumentRendererProps {
  document: InfographicDocument;
}

export const InfographicDocumentRenderer: React.FC<InfographicDocumentRendererProps> = ({
  document,
  mode = 'view',
  onUpdate,
  onComment,
  onSuggest
}) => {
  const infographic = document.content.data.infographic;
  const customization = document.content.data.customizations;
  const colors = customization?.colors || ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];

  const renderChart = () => {
    const { type, data, config } = infographic;
    const chartProps = {
      data,
      margin: { top: 20, right: 30, left: 20, bottom: 5 }
    };

    const commonProps = {
      width: '100%',
      height: 400
    };

    switch (type) {
      case 'bar':
        return (
          <ResponsiveContainer {...commonProps}>
            <BarChart {...chartProps}>
              {customization?.showGrid && <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />}
              <XAxis 
                dataKey="name" 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12 }}
              />
              <YAxis 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12 }}
              />
              {customization?.showTooltips && (
                <Tooltip
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
                  }}
                />
              )}
              <Bar 
                dataKey="value" 
                fill={colors[0]}
                radius={[4, 4, 0, 0]}
                animationDuration={customization?.enableAnimations ? 1000 : 0}
              />
            </BarChart>
          </ResponsiveContainer>
        );

      case 'line':
        return (
          <ResponsiveContainer {...commonProps}>
            <LineChart {...chartProps}>
              {customization?.showGrid && <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />}
              <XAxis 
                dataKey="name" 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12 }}
              />
              <YAxis 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12 }}
              />
              {customization?.showTooltips && (
                <Tooltip
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
                  }}
                />
              )}
              <Line 
                type="monotone" 
                dataKey="value" 
                stroke={colors[0]} 
                strokeWidth={3}
                dot={{ fill: colors[0], strokeWidth: 2, r: 4 }}
                activeDot={{ r: 6, stroke: colors[0], strokeWidth: 2 }}
                animationDuration={customization?.enableAnimations ? 1000 : 0}
              />
            </LineChart>
          </ResponsiveContainer>
        );

      case 'pie':
        return (
          <ResponsiveContainer {...commonProps}>
            <PieChart>
              <Pie
                data={data}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                outerRadius={120}
                fill="#8884d8"
                dataKey="value"
                animationDuration={customization?.enableAnimations ? 1000 : 0}
              >
                {data.map((entry: any, index: number) => (
                  <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
                ))}
              </Pie>
              {customization?.showTooltips && (
                <Tooltip
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
                  }}
                />
              )}
            </PieChart>
          </ResponsiveContainer>
        );

      case 'area':
        return (
          <ResponsiveContainer {...commonProps}>
            <AreaChart {...chartProps}>
              {customization?.showGrid && <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />}
              <XAxis 
                dataKey="name" 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12 }}
              />
              <YAxis 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12 }}
              />
              {customization?.showTooltips && (
                <Tooltip
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
                  }}
                />
              )}
              <Area 
                type="monotone" 
                dataKey="value" 
                stroke={colors[0]} 
                fill={colors[0]} 
                fillOpacity={0.6}
                animationDuration={customization?.enableAnimations ? 1000 : 0}
              />
            </AreaChart>
          </ResponsiveContainer>
        );

      case 'scatter':
        return (
          <ResponsiveContainer {...commonProps}>
            <ScatterChart {...chartProps}>
              {customization?.showGrid && <CartesianGrid stroke="#f0f0f0" />}
              <XAxis 
                dataKey="x" 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12 }}
              />
              <YAxis 
                dataKey="y" 
                axisLine={false}
                tickLine={false}
                tick={{ fontSize: 12 }}
              />
              {customization?.showTooltips && (
                <Tooltip
                  cursor={{ strokeDasharray: '3 3' }}
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
                  }}
                />
              )}
              <Scatter 
                dataKey="value" 
                fill={colors[0]}
                animationDuration={customization?.enableAnimations ? 1000 : 0}
              />
            </ScatterChart>
          </ResponsiveContainer>
        );

      case 'radar':
        return (
          <ResponsiveContainer {...commonProps}>
            <RadarChart data={data}>
              <PolarGrid stroke="#f0f0f0" />
              <PolarAngleAxis dataKey="subject" tick={{ fontSize: 12 }} />
              <PolarRadiusAxis tick={{ fontSize: 12 }} />
              <Radar 
                name="value" 
                dataKey="value" 
                stroke={colors[0]} 
                fill={colors[0]} 
                fillOpacity={0.6}
                animationDuration={customization?.enableAnimations ? 1000 : 0}
              />
              {customization?.showTooltips && (
                <Tooltip
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
                  }}
                />
              )}
            </RadarChart>
          </ResponsiveContainer>
        );

      case 'funnel':
        return (
          <ResponsiveContainer {...commonProps}>
            <FunnelChart>
              <Funnel
                dataKey="value"
                data={data}
                isAnimationActive={customization?.enableAnimations}
              >
                <LabelList position="center" fill="#fff" stroke="none" />
              </Funnel>
              {customization?.showTooltips && (
                <Tooltip
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
                  }}
                />
              )}
            </FunnelChart>
          </ResponsiveContainer>
        );

      default:
        return (
          <div className="flex items-center justify-center h-64 text-gray-500">
            <div className="text-center">
              <AlertCircle className="h-8 w-8 mx-auto mb-2" />
              <p>Unsupported chart type: {type}</p>
            </div>
          </div>
        );
    }
  };

  const getInsights = () => {
    return infographic.config?.insights || [];
  };

  const getDataSummary = () => {
    if (!infographic.data || infographic.data.length === 0) return null;
    
    const data = infographic.data;
    const numericFields = Object.keys(data[0]).filter(key => 
      typeof data[0][key] === 'number'
    );
    
    if (numericFields.length === 0) return null;
    
    const summary: any = {};
    numericFields.forEach(field => {
      const values = data.map((item: any) => item[field]).filter((val: any) => typeof val === 'number');
      if (values.length > 0) {
        summary[field] = {
          min: Math.min(...values),
          max: Math.max(...values),
          avg: values.reduce((a: number, b: number) => a + b, 0) / values.length,
          count: values.length
        };
      }
    });
    
    return summary;
  };

  const dataSummary = getDataSummary();

  return (
    <div className="space-y-4">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">{infographic.title}</h2>
          {infographic.description && (
            <p className="text-gray-600 mt-1">{infographic.description}</p>
          )}
        </div>
        <div className="flex items-center gap-2">
          <Badge variant="outline">{infographic.type}</Badge>
          <Badge variant="outline">{customization?.theme}</Badge>
          <Badge variant="outline">{customization?.layout}</Badge>
        </div>
      </div>

      {/* Chart Container */}
      <Card>
        <CardContent className="p-6">
          <div className="relative">
            {renderChart()}
          </div>
        </CardContent>
      </Card>

      {/* Insights Section */}
      {getInsights().length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5" />
              Key Insights
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid gap-3">
              {getInsights().map((insight: string, index: number) => (
                <div key={index} className="flex items-start gap-3 p-3 bg-blue-50 rounded-lg">
                  <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0" />
                  <span className="text-sm">{insight}</span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Data Summary */}
      {dataSummary && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              Data Summary
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {Object.entries(dataSummary).map(([field, stats]: [string, any]) => (
                <div key={field} className="space-y-1">
                  <h4 className="font-medium text-sm capitalize">{field}</h4>
                  <div className="text-xs text-gray-600 space-y-1">
                    <div>Min: {stats.min.toLocaleString()}</div>
                    <div>Max: {stats.max.toLocaleString()}</div>
                    <div>Avg: {stats.avg.toFixed(1)}</div>
                    <div>Count: {stats.count}</div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Footer */}
      <div className="flex items-center justify-between text-sm text-gray-500">
        <div className="flex items-center gap-4">
          <span>Generated on {new Date(infographic.metadata?.generatedAt).toLocaleString()}</span>
          <span>‚Ä¢</span>
          <span>AI Confidence: {(infographic.metadata?.aiConfidence * 100).toFixed(0)}%</span>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm" onClick={() => {/* Export functionality */}}>
            <Download className="h-4 w-4 mr-1" />
            PNG
          </Button>
          <Button variant="ghost" size="sm" onClick={() => {/* Export functionality */}}>
            <Download className="h-4 w-4 mr-1" />
            SVG
          </Button>
          <Button variant="ghost" size="sm" onClick={() => {/* Export functionality */}}>
            <Download className="h-4 w-4 mr-1" />
            PDF
          </Button>
          <Button variant="ghost" size="sm" onClick={() => {/* Share functionality */}}>
            <Share2 className="h-4 w-4 mr-1" />
            Share
          </Button>
        </div>
      </div>
    </div>
  );
};


=== FILE: client/src/features/documents/components/infographic/InfographicDocumentEditor.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Switch } from '@/components/ui/switch';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  BarChart3, 
  PieChart, 
  TrendingUp, 
  Image, 
  Download, 
  Share2, 
  Edit, 
  Wand2, 
  Sparkles,
  Palette,
  Layout,
  Eye,
  RefreshCw,
  Settings,
  Lightbulb,
  Target,
  Zap,
  CheckCircle,
  AlertCircle,
  Info,
  Plus,
  Save,
  Upload
} from 'lucide-react';
import { InfographicDocument, InfographicData, InfographicTemplate } from '../../types/infographic/InfographicDocument';
import { DocumentEditorProps } from '../../types/document.types';

interface InfographicDocumentEditorProps extends DocumentEditorProps {
  document: InfographicDocument;
}

export const InfographicDocumentEditor: React.FC<InfographicDocumentEditorProps> = ({
  document,
  onSave,
  onCancel,
  readOnly = false,
  showAI = true,
  showCollaboration = true
}) => {
  const [infographic, setInfographic] = useState<InfographicData>(document.content.data.infographic);
  const [customization, setCustomization] = useState(document.content.data.customizations || {
    theme: 'corporate',
    layout: 'vertical',
    colors: ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'],
    showLegend: true,
    showGrid: true,
    showTooltips: true,
    enableAnimations: true,
    title: '',
    subtitle: '',
    footer: ''
  });
  const [templates, setTemplates] = useState<InfographicTemplate[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationProgress, setGenerationProgress] = useState<{ step: string; progress: number; message: string } | null>(null);
  const [enhancementSuggestions, setEnhancementSuggestions] = useState<any[]>([]);
  const [activeTab, setActiveTab] = useState('design');

  useEffect(() => {
    loadTemplates();
    if (showAI) {
      loadEnhancementSuggestions();
    }
  }, [showAI]);

  const loadTemplates = async () => {
    try {
      const response = await fetch('/api/documents/infographic/templates');
      const data = await response.json();
      setTemplates(data);
    } catch (error) {
      console.error('Failed to load templates:', error);
    }
  };

  const loadEnhancementSuggestions = async () => {
    try {
      const response = await fetch('/api/documents/infographic/suggestions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ infographic })
      });
      const data = await response.json();
      setEnhancementSuggestions(data);
    } catch (error) {
      console.error('Failed to load enhancement suggestions:', error);
    }
  };

  const simulateGenerationProgress = () => {
    const steps = [
      { step: 'analyzing', progress: 20, message: 'Analyzing your prompt and data...' },
      { step: 'designing', progress: 40, message: 'Designing the optimal visualization...' },
      { step: 'processing', progress: 60, message: 'Processing data and generating insights...' },
      { step: 'optimizing', progress: 80, message: 'Optimizing layout and visual elements...' },
      { step: 'finalizing', progress: 100, message: 'Finalizing your infographic...' }
    ];

    let currentStep = 0;
    const interval = setInterval(() => {
      if (currentStep < steps.length) {
        setGenerationProgress(steps[currentStep]);
        currentStep++;
      } else {
        clearInterval(interval);
        setGenerationProgress(null);
      }
    }, 800);

    return interval;
  };

  const generateInfographic = async (prompt: string) => {
    if (!prompt.trim()) return;

    setIsGenerating(true);
    const progressInterval = simulateGenerationProgress();

    try {
      const response = await fetch('/api/documents/infographic/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          prompt,
          template: customization.theme,
          customization,
          data: infographic.data,
          documentId: document.id
        })
      });

      if (!response.ok) {
        throw new Error('Failed to generate infographic');
      }

      const data = await response.json();
      setInfographic(data);
      
      // Update document content
      const updatedDocument = {
        ...document,
        content: {
          ...document.content,
          data: {
            ...document.content.data,
            infographic: data
          }
        }
      };
      
      onSave(updatedDocument);

    } catch (error) {
      console.error('Failed to generate infographic:', error);
    } finally {
      clearInterval(progressInterval);
      setIsGenerating(false);
      setGenerationProgress(null);
    }
  };

  const enhanceInfographic = async (enhancements: string[]) => {
    if (!infographic) return;

    setIsGenerating(true);
    try {
      const response = await fetch('/api/documents/infographic/enhance', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          infographic,
          enhancements,
          documentId: document.id
        })
      });

      if (!response.ok) {
        throw new Error('Failed to enhance infographic');
      }

      const data = await response.json();
      setInfographic(data);
      
      // Update document content
      const updatedDocument = {
        ...document,
        content: {
          ...document.content,
          data: {
            ...document.content.data,
            infographic: data
          }
        }
      };
      
      onSave(updatedDocument);

    } catch (error) {
      console.error('Failed to enhance infographic:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const exportInfographic = async (format: 'png' | 'svg' | 'pdf') => {
    try {
      const response = await fetch('/api/documents/infographic/export', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          infographic,
          format,
          documentId: document.id
        })
      });

      if (!response.ok) {
        throw new Error('Failed to export infographic');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `infographic_${document.id}.${format}`;
      a.click();
      window.URL.revokeObjectURL(url);

    } catch (error) {
      console.error('Failed to export infographic:', error);
    }
  };

  const updateCustomization = (key: string, value: any) => {
    const newCustomization = { ...customization, [key]: value };
    setCustomization(newCustomization);
    
    // Update document content
    const updatedDocument = {
      ...document,
      content: {
        ...document.content,
        data: {
          ...document.content.data,
          customizations: newCustomization
        }
      }
    };
    
    onSave(updatedDocument);
  };

  const renderChart = () => {
    // This would render the actual chart using Recharts or similar
    // For now, return a placeholder
    return (
      <div className="w-full h-96 bg-gray-100 rounded-lg flex items-center justify-center">
        <div className="text-center">
          <BarChart3 className="h-12 w-12 mx-auto text-gray-400 mb-4" />
          <p className="text-gray-500">Chart will be rendered here</p>
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">{document.title}</h1>
          <p className="text-gray-600">{document.description}</p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={() => exportInfographic('png')}>
            <Download className="h-4 w-4 mr-2" />
            Export
          </Button>
          <Button variant="outline" onClick={() => exportInfographic('pdf')}>
            <Download className="h-4 w-4 mr-2" />
            PDF
          </Button>
        </div>
      </div>

      {/* Generation Progress */}
      {generationProgress && (
        <Card>
          <CardContent className="p-4">
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">{generationProgress.message}</span>
                <span className="text-sm text-gray-500">{generationProgress.progress}%</span>
              </div>
              <Progress value={generationProgress.progress} className="h-2" />
            </div>
          </CardContent>
        </Card>
      )}

      {/* Main Content */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Panel - Controls */}
        <div className="lg:col-span-1 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="h-5 w-5" />
                Design Controls
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="design">Design</TabsTrigger>
                  <TabsTrigger value="data">Data</TabsTrigger>
                </TabsList>

                <TabsContent value="design" className="space-y-4">
                  <div>
                    <Label>Chart Type</Label>
                    <Select 
                      value={infographic.type} 
                      onValueChange={(value) => setInfographic({...infographic, type: value as any})}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="bar">Bar Chart</SelectItem>
                        <SelectItem value="line">Line Chart</SelectItem>
                        <SelectItem value="pie">Pie Chart</SelectItem>
                        <SelectItem value="area">Area Chart</SelectItem>
                        <SelectItem value="scatter">Scatter Plot</SelectItem>
                        <SelectItem value="radar">Radar Chart</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label>Theme</Label>
                    <Select 
                      value={customization.theme} 
                      onValueChange={(value) => updateCustomization('theme', value)}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="corporate">Corporate</SelectItem>
                        <SelectItem value="creative">Creative</SelectItem>
                        <SelectItem value="minimal">Minimal</SelectItem>
                        <SelectItem value="vibrant">Vibrant</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-3">
                    <Label>Display Options</Label>
                    <div className="space-y-2">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="legend" className="text-sm">Show Legend</Label>
                        <Switch
                          id="legend"
                          checked={customization.showLegend}
                          onCheckedChange={(checked) => updateCustomization('showLegend', checked)}
                        />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="grid" className="text-sm">Show Grid</Label>
                        <Switch
                          id="grid"
                          checked={customization.showGrid}
                          onCheckedChange={(checked) => updateCustomization('showGrid', checked)}
                        />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="animations" className="text-sm">Enable Animations</Label>
                        <Switch
                          id="animations"
                          checked={customization.enableAnimations}
                          onCheckedChange={(checked) => updateCustomization('enableAnimations', checked)}
                        />
                      </div>
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="data" className="space-y-4">
                  <div>
                    <Label>Data Input</Label>
                    <Textarea
                      placeholder="Enter your data as JSON or describe what you want to visualize..."
                      className="min-h-[100px]"
                      onChange={(e) => {
                        try {
                          const data = JSON.parse(e.target.value);
                          setInfographic({...infographic, data});
                        } catch (error) {
                          // Handle text input for AI generation
                        }
                      }}
                    />
                  </div>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>

          {/* AI Enhancement Suggestions */}
          {showAI && enhancementSuggestions.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Lightbulb className="h-5 w-5" />
                  AI Suggestions
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {enhancementSuggestions.map((suggestion, index) => (
                    <div key={index} className="p-3 border rounded-lg">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium">{suggestion.description}</span>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => enhanceInfographic([suggestion.description])}
                        >
                          Apply
                        </Button>
                      </div>
                      <div className="flex gap-2 mt-2">
                        <Badge variant="outline" className="text-xs">
                          {suggestion.impact} impact
                        </Badge>
                        <Badge variant="outline" className="text-xs">
                          {suggestion.effort} effort
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Right Panel - Preview */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Eye className="h-5 w-5" />
                Preview
              </CardTitle>
            </CardHeader>
            <CardContent>
              {renderChart()}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};


=== FILE: client/src/features/documents/components/search/SearchInterface.tsx ===

import React, { useState, useEffect, useCallback } from 'react';
import { SearchQuery, SearchResult, SearchSuggestion, DocumentFilters } from '../../types/search.types';
import { BaseDocument } from '../../types/document.types';
import { SemanticSearchEngine } from '../search/SemanticSearchEngine';

interface SearchInterfaceProps {
  onSearch?: (results: SearchResult) => void;
  onDocumentSelect?: (document: BaseDocument) => void;
  placeholder?: string;
  autoFocus?: boolean;
  showFilters?: boolean;
  showSuggestions?: boolean;
  maxSuggestions?: number;
  searchEngine?: SemanticSearchEngine;
}

export const SearchInterface: React.FC<SearchInterfaceProps> = ({
  onSearch,
  onDocumentSelect,
  placeholder = "Search documents...",
  autoFocus = false,
  showFilters = true,
  showSuggestions = true,
  maxSuggestions = 10,
  searchEngine
}) => {
  const [query, setQuery] = useState('');
  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);
  const [filters, setFilters] = useState<DocumentFilters>({});
  const [isSearching, setIsSearching] = useState(false);
  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);
  const [showSuggestionsList, setShowSuggestionsList] = useState(false);
  const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(-1);

  // Initialize search engine
  const engine = searchEngine || new SemanticSearchEngine();

  // Handle search input changes
  const handleQueryChange = useCallback(async (value: string) => {
    setQuery(value);
    
    if (value.length > 2 && showSuggestions) {
      try {
        const newSuggestions = await engine.getSearchSuggestions(value, {
          limit: maxSuggestions,
          includeFilters: true,
          includeFacets: true
        });
        setSuggestions(newSuggestions);
        setShowSuggestionsList(true);
      } catch (error) {
        console.error('Failed to get suggestions:', error);
      }
    } else {
      setSuggestions([]);
      setShowSuggestionsList(false);
    }
  }, [engine, showSuggestions, maxSuggestions]);

  // Handle search execution
  const handleSearch = useCallback(async (searchQuery?: string) => {
    const queryText = searchQuery || query;
    if (!queryText.trim()) return;

    setIsSearching(true);
    setShowSuggestionsList(false);

    try {
      const searchQueryObj: SearchQuery = {
        text: queryText,
        filters,
        options: {
          limit: 50,
          highlight: true,
          fuzzy: true
        }
      };

      const results = await engine.search(searchQueryObj);
      setSearchResults(results);
      onSearch?.(results);
    } catch (error) {
      console.error('Search failed:', error);
    } finally {
      setIsSearching(false);
    }
  }, [query, filters, engine, onSearch]);

  // Handle suggestion selection
  const handleSuggestionSelect = useCallback((suggestion: SearchSuggestion) => {
    setQuery(suggestion.text);
    setShowSuggestionsList(false);
    handleSearch(suggestion.text);
  }, [handleSearch]);

  // Handle keyboard navigation
  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
    if (!showSuggestionsList || suggestions.length === 0) {
      if (e.key === 'Enter') {
        handleSearch();
      }
      return;
    }

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setSelectedSuggestionIndex(prev => 
          prev < suggestions.length - 1 ? prev + 1 : 0
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setSelectedSuggestionIndex(prev => 
          prev > 0 ? prev - 1 : suggestions.length - 1
        );
        break;
      case 'Enter':
        e.preventDefault();
        if (selectedSuggestionIndex >= 0 && selectedSuggestionIndex < suggestions.length) {
          handleSuggestionSelect(suggestions[selectedSuggestionIndex]);
        } else {
          handleSearch();
        }
        break;
      case 'Escape':
        setShowSuggestionsList(false);
        setSelectedSuggestionIndex(-1);
        break;
    }
  }, [showSuggestionsList, suggestions, selectedSuggestionIndex, handleSuggestionSelect, handleSearch]);

  // Handle filter changes
  const handleFilterChange = useCallback((newFilters: DocumentFilters) => {
    setFilters(newFilters);
  }, []);

  // Handle document selection
  const handleDocumentClick = useCallback((document: BaseDocument) => {
    onDocumentSelect?.(document);
  }, [onDocumentSelect]);

  // Clear search
  const handleClear = useCallback(() => {
    setQuery('');
    setSearchResults(null);
    setSuggestions([]);
    setShowSuggestionsList(false);
  }, []);

  return (
    <div className="search-interface">
      {/* Search Input */}
      <div className="search-input-container">
        <div className="search-input-wrapper">
          <input
            type="text"
            value={query}
            onChange={(e) => handleQueryChange(e.target.value)}
            onKeyDown={handleKeyDown}
            onFocus={() => setShowSuggestionsList(suggestions.length > 0)}
            onBlur={() => setTimeout(() => setShowSuggestionsList(false), 200)}
            placeholder={placeholder}
            autoFocus={autoFocus}
            className="search-input"
            disabled={isSearching}
          />
          <div className="search-input-actions">
            {query && (
              <button
                onClick={handleClear}
                className="clear-button"
                type="button"
              >
                ‚úï
              </button>
            )}
            <button
              onClick={() => handleSearch()}
              className="search-button"
              type="button"
              disabled={isSearching || !query.trim()}
            >
              {isSearching ? '‚ü≥' : 'üîç'}
            </button>
          </div>
        </div>

        {/* Suggestions Dropdown */}
        {showSuggestionsList && suggestions.length > 0 && (
          <div className="suggestions-dropdown">
            {suggestions.map((suggestion, index) => (
              <div
                key={index}
                className={`suggestion-item ${
                  index === selectedSuggestionIndex ? 'selected' : ''
                }`}
                onClick={() => handleSuggestionSelect(suggestion)}
                onMouseEnter={() => setSelectedSuggestionIndex(index)}
              >
                <span className="suggestion-text">{suggestion.text}</span>
                <span className="suggestion-type">{suggestion.type}</span>
                {suggestion.confidence && (
                  <span className="suggestion-confidence">
                    {Math.round(suggestion.confidence * 100)}%
                  </span>
                )}
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Filters */}
      {showFilters && (
        <SearchFilters
          filters={filters}
          onFiltersChange={handleFilterChange}
        />
      )}

      {/* Search Results */}
      {searchResults && (
        <SearchResults
          results={searchResults}
          onDocumentSelect={handleDocumentClick}
          isSearching={isSearching}
        />
      )}
    </div>
  );
};

// Search Filters Component
interface SearchFiltersProps {
  filters: DocumentFilters;
  onFiltersChange: (filters: DocumentFilters) => void;
}

const SearchFilters: React.FC<SearchFiltersProps> = ({
  filters,
  onFiltersChange
}) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const handleFilterChange = (key: keyof DocumentFilters, value: any) => {
    onFiltersChange({
      ...filters,
      [key]: value
    });
  };

  const clearFilters = () => {
    onFiltersChange({});
  };

  const hasActiveFilters = Object.keys(filters).length > 0;

  return (
    <div className="search-filters">
      <button
        onClick={() => setIsExpanded(!isExpanded)}
        className="filters-toggle"
      >
        Filters {hasActiveFilters && `(${Object.keys(filters).length})`}
        {isExpanded ? '‚ñ≤' : '‚ñº'}
      </button>

      {isExpanded && (
        <div className="filters-panel">
          {/* Document Type Filter */}
          <div className="filter-group">
            <label>Document Type</label>
            <select
              value={filters.documentTypes?.[0] || ''}
              onChange={(e) => handleFilterChange('documentTypes', e.target.value ? [e.target.value as any] : undefined)}
            >
              <option value="">All Types</option>
              <option value="business-plan">Business Plan</option>
              <option value="proposal">Proposal</option>
              <option value="pitch-deck">Pitch Deck</option>
            </select>
          </div>

          {/* Date Range Filter */}
          <div className="filter-group">
            <label>Date Range</label>
            <div className="date-range-inputs">
              <input
                type="date"
                value={filters.dateRange?.start.toISOString().split('T')[0] || ''}
                onChange={(e) => {
                  const start = e.target.value ? new Date(e.target.value) : undefined;
                  handleFilterChange('dateRange', start ? {
                    start,
                    end: filters.dateRange?.end || new Date()
                  } : undefined);
                }}
                placeholder="Start Date"
              />
              <input
                type="date"
                value={filters.dateRange?.end.toISOString().split('T')[0] || ''}
                onChange={(e) => {
                  const end = e.target.value ? new Date(e.target.value) : undefined;
                  handleFilterChange('dateRange', end ? {
                    start: filters.dateRange?.start || new Date(0),
                    end
                  } : undefined);
                }}
                placeholder="End Date"
              />
            </div>
          </div>

          {/* AI Generated Filter */}
          <div className="filter-group">
            <label>
              <input
                type="checkbox"
                checked={filters.aiGenerated === true}
                onChange={(e) => handleFilterChange('aiGenerated', e.target.checked ? true : undefined)}
              />
              AI Generated Only
            </label>
          </div>

          {/* Clear Filters */}
          {hasActiveFilters && (
            <button
              onClick={clearFilters}
              className="clear-filters-button"
            >
              Clear All Filters
            </button>
          )}
        </div>
      )}
    </div>
  );
};

// Search Results Component
interface SearchResultsProps {
  results: SearchResult;
  onDocumentSelect: (document: BaseDocument) => void;
  isSearching: boolean;
}

const SearchResults: React.FC<SearchResultsProps> = ({
  results,
  onDocumentSelect,
  isSearching
}) => {
  if (isSearching) {
    return (
      <div className="search-results loading">
        <div className="loading-spinner">‚ü≥</div>
        <p>Searching...</p>
      </div>
    );
  }

  if (results.documents.length === 0) {
    return (
      <div className="search-results empty">
        <p>No documents found matching your search.</p>
        <p>Try adjusting your search terms or filters.</p>
      </div>
    );
  }

  return (
    <div className="search-results">
      <div className="results-header">
        <h3>Search Results ({results.total})</h3>
        <p>Found {results.total} documents in {results.processingTime}ms</p>
      </div>

      <div className="results-list">
        {results.documents.map((document) => (
          <div
            key={document.id}
            className="result-item"
            onClick={() => onDocumentSelect(document)}
          >
            <div className="result-header">
              <h4 className="result-title">{document.title}</h4>
              <span className="result-type">{document.type}</span>
            </div>
            <p className="result-description">{document.description}</p>
            <div className="result-metadata">
              <span className="result-author">{document.lastModifiedBy}</span>
              <span className="result-date">
                {new Date(document.updatedAt).toLocaleDateString()}
              </span>
              {document.ai.autoGenerated && (
                <span className="ai-badge">AI Generated</span>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* Facets */}
      {results.facets && Object.keys(results.facets).length > 0 && (
        <div className="search-facets">
          <h4>Filter by:</h4>
          {Object.entries(results.facets).map(([key, values]) => (
            <div key={key} className="facet-group">
              <h5>{key}</h5>
              {Object.entries(values).map(([value, count]) => (
                <div key={value} className="facet-item">
                  <span>{value}</span>
                  <span>({count})</span>
                </div>
              ))}
            </div>
          ))}
        </div>
      )}

      {/* Suggestions */}
      {results.suggestions && results.suggestions.length > 0 && (
        <div className="search-suggestions">
          <h4>Related Searches:</h4>
          <div className="suggestions-list">
            {results.suggestions.map((suggestion, index) => (
              <button
                key={index}
                className="suggestion-button"
                onClick={() => {/* Handle suggestion click */}}
              >
                {suggestion.text}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default SearchInterface;


=== FILE: client/src/features/documents/components/editor/DocumentEditor.tsx ===

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { BaseDocument, DocumentType, DocumentContent } from '../../types/document.types';
import { DocumentEngine } from '../../core/DocumentEngine';
import { AIDocumentService } from '../../ai/AIDocumentService';
import { CollaborationEngine } from '../../collaboration/CollaborationEngine';
import { DocumentEditorProps } from '../../types/document.types';
import { useToast } from '@/hooks/use-toast';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Save, 
  Undo, 
  Redo, 
  Eye, 
  EyeOff, 
  Users, 
  MessageSquare, 
  Brain, 
  Wand2, 
  Settings, 
  Download, 
  Upload, 
  Share2, 
  Lock, 
  Unlock,
  AlertCircle,
  CheckCircle,
  Clock,
  FileText,
  Image,
  Video,
  BarChart3,
  Presentation,
  Bot,
  Sparkles,
  Target,
  TrendingUp,
  Zap
} from 'lucide-react';

/**
 * Universal Document Editor
 * 
 * This component provides a unified editing experience for all document types:
 * - Business plans
 * - Proposals (RFP/RFI/RFQ)
 * - Pitch decks
 * - And more
 */
export default function DocumentEditor({
  document,
  onSave,
  onCancel,
  readOnly = false,
  showAI = true,
  showCollaboration = true
}: DocumentEditorProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [activeTab, setActiveTab] = useState('content');
  const [aiInsights, setAiInsights] = useState<any[]>([]);
  const [aiSuggestions, setAiSuggestions] = useState<any[]>([]);
  const [collaborators, setCollaborators] = useState<any[]>([]);
  const [comments, setComments] = useState<any[]>([]);
  const [documentContent, setDocumentContent] = useState<DocumentContent>(document.content);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [aiScore, setAiScore] = useState(0);
  const [completionScore, setCompletionScore] = useState(0);
  
  const editorRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  // Initialize services
  const documentEngine = new DocumentEngine();
  const aiService = new AIDocumentService({
    enabled: true,
    autoAnalyze: true,
    autoSuggest: true,
    qualityThreshold: 70,
    analysisDepth: 'comprehensive',
    model: 'gpt-4',
    parameters: {
      temperature: 0.7,
      maxTokens: 2000,
      topP: 0.9,
      frequencyPenalty: 0.1,
      presencePenalty: 0.1
    },
    rateLimit: 100,
    costLimit: 100
  });

  // Load document data
  useEffect(() => {
    loadDocumentData();
  }, [document.id]);

  // Auto-save functionality
  useEffect(() => {
    if (hasUnsavedChanges && !readOnly) {
      const autoSaveTimer = setTimeout(() => {
        handleAutoSave();
      }, 30000); // Auto-save every 30 seconds

      return () => clearTimeout(autoSaveTimer);
    }
  }, [hasUnsavedChanges, readOnly]);

  const loadDocumentData = async () => {
    try {
      // Load AI insights
      if (showAI && document.ai.analyzed) {
        setAiInsights(document.ai.insights);
        setAiSuggestions(document.ai.suggestions);
        setAiScore(document.ai.overallScore);
        setCompletionScore(document.ai.completenessScore);
      }

      // Load collaborators
      if (showCollaboration) {
        setCollaborators(document.collaboration.activeUsers);
        setComments(document.collaboration.comments);
      }

    } catch (error) {
      console.error('Failed to load document data:', error);
    }
  };

  const handleSave = async () => {
    if (readOnly) return;

    setIsSaving(true);
    try {
      const updatedDocument = {
        ...document,
        content: documentContent,
        updatedAt: new Date(),
        lastModifiedBy: document.createdBy // Would get from auth context
      };

      await onSave(updatedDocument);
      setHasUnsavedChanges(false);
      
      toast({
        title: "Document saved",
        description: "Your changes have been saved successfully."
      });

    } catch (error) {
      toast({
        title: "Save failed",
        description: "Failed to save document. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsSaving(false);
    }
  };

  const handleAutoSave = async () => {
    if (readOnly || !hasUnsavedChanges) return;

    try {
      const updatedDocument = {
        ...document,
        content: documentContent,
        updatedAt: new Date(),
        lastModifiedBy: document.createdBy
      };

      await onSave(updatedDocument);
      setHasUnsavedChanges(false);

    } catch (error) {
      console.error('Auto-save failed:', error);
    }
  };

  const handleAnalyze = async () => {
    if (!showAI) return;

    setIsAnalyzing(true);
    try {
      const analysis = await aiService.analyzeDocument(document);
      
      setAiInsights(analysis.insights);
      setAiSuggestions(analysis.suggestions);
      setAiScore(analysis.overallScore);
      setCompletionScore(analysis.completenessScore);

      toast({
        title: "Analysis complete",
        description: `Document scored ${analysis.overallScore}% overall.`
      });

    } catch (error) {
      toast({
        title: "Analysis failed",
        description: "Failed to analyze document. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleGenerateContent = async (sectionId: string, prompt: string) => {
    if (!showAI) return;

    setIsGenerating(true);
    try {
      const result = await aiService.generateContent(document, prompt, {
        sectionId,
        context: {
          document,
          sectionId,
          user: {} // Would get from auth context
        }
      });

      // Update document content with generated content
      const updatedContent = { ...documentContent };
      // Apply generated content to specific section
      setDocumentContent(updatedContent);
      setHasUnsavedChanges(true);

      toast({
        title: "Content generated",
        description: "AI-generated content has been added to your document."
      });

    } catch (error) {
      toast({
        title: "Generation failed",
        description: "Failed to generate content. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleContentChange = (newContent: DocumentContent) => {
    setDocumentContent(newContent);
    setHasUnsavedChanges(true);
  };

  const getDocumentIcon = (type: DocumentType) => {
    switch (type) {
      case 'business-plan':
        return FileText;
      case 'proposal':
        return DocumentText;
      case 'pitch-deck':
        return Presentation;
      case 'application':
        return FileSpreadsheet;
      case 'contract':
        return FileText;
      case 'report':
        return BarChart3;
      default:
        return FileText;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'draft': return 'bg-gray-100 text-gray-800';
      case 'review': return 'bg-yellow-100 text-yellow-800';
      case 'approved': return 'bg-green-100 text-green-800';
      case 'published': return 'bg-blue-100 text-blue-800';
      case 'archived': return 'bg-gray-100 text-gray-600';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const DocumentIcon = getDocumentIcon(document.type);

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Main Editor Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="bg-white border-b border-gray-200 px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <DocumentIcon className="h-8 w-8 text-blue-600" />
              <div>
                <h1 className="text-xl font-semibold text-gray-900">
                  {document.title}
                </h1>
                <div className="flex items-center space-x-2 mt-1">
                  <Badge className={getStatusColor(document.metadata.status)}>
                    {document.metadata.status}
                  </Badge>
                  <span className="text-sm text-gray-500">
                    {document.metadata.wordCount} words
                  </span>
                  {document.version.locked && (
                    <Badge variant="outline" className="text-orange-600 border-orange-200">
                      <Lock className="h-3 w-3 mr-1" />
                      Locked
                    </Badge>
                  )}
                </div>
              </div>
            </div>

            <div className="flex items-center space-x-2">
              {/* AI Score */}
              {showAI && aiScore > 0 && (
                <div className="flex items-center space-x-2">
                  <Brain className="h-4 w-4 text-purple-600" />
                  <span className="text-sm font-medium text-gray-700">
                    AI Score: {aiScore}%
                  </span>
                </div>
              )}

              {/* Completion Score */}
              {completionScore > 0 && (
                <div className="flex items-center space-x-2">
                  <Target className="h-4 w-4 text-green-600" />
                  <span className="text-sm font-medium text-gray-700">
                    {completionScore}% Complete
                  </span>
                </div>
              )}

              {/* Collaborators */}
              {showCollaboration && collaborators.length > 0 && (
                <div className="flex items-center space-x-2">
                  <Users className="h-4 w-4 text-blue-600" />
                  <span className="text-sm text-gray-700">
                    {collaborators.length} active
                  </span>
                </div>
              )}

              {/* Action Buttons */}
              <div className="flex items-center space-x-2">
                {!readOnly && (
                  <>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleAnalyze}
                      disabled={isAnalyzing}
                    >
                      {isAnalyzing ? (
                        <>
                          <Brain className="h-4 w-4 mr-2 animate-spin" />
                          Analyzing...
                        </>
                      ) : (
                        <>
                          <Brain className="h-4 w-4 mr-2" />
                          Analyze
                        </>
                      )}
                    </Button>

                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleSave}
                      disabled={isSaving || !hasUnsavedChanges}
                    >
                      {isSaving ? (
                        <>
                          <Clock className="h-4 w-4 mr-2 animate-spin" />
                          Saving...
                        </>
                      ) : (
                        <>
                          <Save className="h-4 w-4 mr-2" />
                          Save
                        </>
                      )}
                    </Button>
                  </>
                )}

                <Button
                  variant="outline"
                  size="sm"
                  onClick={onCancel}
                >
                  Cancel
                </Button>
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1 flex">
          {/* Editor Tabs */}
          <div className="flex-1 flex flex-col">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1">
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="content">Content</TabsTrigger>
                <TabsTrigger value="structure">Structure</TabsTrigger>
                {showAI && <TabsTrigger value="ai">AI Insights</TabsTrigger>}
                {showCollaboration && <TabsTrigger value="collaboration">Collaboration</TabsTrigger>}
              </TabsList>

              <TabsContent value="content" className="flex-1">
                <div className="h-full p-6">
                  <ScrollArea className="h-full">
                    <div className="max-w-4xl mx-auto">
                      {/* Document Content Editor */}
                      <DocumentContentEditor
                        document={document}
                        content={documentContent}
                        onChange={handleContentChange}
                        readOnly={readOnly}
                        showAI={showAI}
                        onGenerateContent={handleGenerateContent}
                        isGenerating={isGenerating}
                      />
                    </div>
                  </ScrollArea>
                </div>
              </TabsContent>

              <TabsContent value="structure" className="flex-1">
                <div className="h-full p-6">
                  <ScrollArea className="h-full">
                    <div className="max-w-4xl mx-auto">
                      {/* Document Structure Editor */}
                      <DocumentStructureEditor
                        document={document}
                        content={documentContent}
                        onChange={handleContentChange}
                        readOnly={readOnly}
                      />
                    </div>
                  </ScrollArea>
                </div>
              </TabsContent>

              {showAI && (
                <TabsContent value="ai" className="flex-1">
                  <div className="h-full p-6">
                    <ScrollArea className="h-full">
                      <div className="max-w-4xl mx-auto">
                        {/* AI Insights Panel */}
                        <AIInsightsPanel
                          insights={aiInsights}
                          suggestions={aiSuggestions}
                          score={aiScore}
                          onApplySuggestion={(suggestion) => {
                            // Apply suggestion logic
                            console.log('Applying suggestion:', suggestion);
                          }}
                        />
                      </div>
                    </ScrollArea>
                  </div>
                </TabsContent>
              )}

              {showCollaboration && (
                <TabsContent value="collaboration" className="flex-1">
                  <div className="h-full p-6">
                    <ScrollArea className="h-full">
                      <div className="max-w-4xl mx-auto">
                        {/* Collaboration Panel */}
                        <CollaborationPanel
                          collaborators={collaborators}
                          comments={comments}
                          onAddComment={(comment) => {
                            // Add comment logic
                            console.log('Adding comment:', comment);
                          }}
                        />
                      </div>
                    </ScrollArea>
                  </div>
                </TabsContent>
              )}
            </Tabs>
          </div>
        </div>
      </div>
    </div>
  );
}

// Document Content Editor Component
function DocumentContentEditor({
  document,
  content,
  onChange,
  readOnly,
  showAI,
  onGenerateContent,
  isGenerating
}: {
  document: BaseDocument;
  content: DocumentContent;
  onChange: (content: DocumentContent) => void;
  readOnly: boolean;
  showAI: boolean;
  onGenerateContent: (sectionId: string, prompt: string) => void;
  isGenerating: boolean;
}) {
  const [activeSection, setActiveSection] = useState<string | null>(null);

  const handleSectionChange = (sectionId: string, newContent: string) => {
    const updatedContent = { ...content };
    if (updatedContent.data.sections) {
      const sectionIndex = updatedContent.data.sections.findIndex(s => s.id === sectionId);
      if (sectionIndex !== -1) {
        updatedContent.data.sections[sectionIndex].content = newContent;
        updatedContent.data.sections[sectionIndex].lastModified = new Date();
        onChange(updatedContent);
      }
    }
  };

  return (
    <div className="space-y-6">
      {content.data.sections?.map((section, index) => (
        <Card key={section.id} className="relative">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg">{section.title}</CardTitle>
              <div className="flex items-center space-x-2">
                {section.aiGenerated && (
                  <Badge variant="outline" className="text-purple-600 border-purple-200">
                    <Bot className="h-3 w-3 mr-1" />
                    AI Generated
                  </Badge>
                )}
                {section.required && (
                  <Badge variant="outline" className="text-red-600 border-red-200">
                    Required
                  </Badge>
                )}
                {section.completed && (
                  <CheckCircle className="h-4 w-4 text-green-600" />
                )}
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {/* Section Content */}
              <div className="min-h-[200px] p-4 border border-gray-200 rounded-lg">
                <textarea
                  value={section.content}
                  onChange={(e) => handleSectionChange(section.id, e.target.value)}
                  placeholder={`Enter content for ${section.title}...`}
                  className="w-full h-full min-h-[150px] border-none resize-none focus:outline-none"
                  readOnly={readOnly}
                />
              </div>

              {/* AI Generation */}
              {showAI && !readOnly && (
                <div className="flex items-center space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => onGenerateContent(section.id, `Generate content for ${section.title}`)}
                    disabled={isGenerating}
                  >
                    {isGenerating ? (
                      <>
                        <Sparkles className="h-4 w-4 mr-2 animate-spin" />
                        Generating...
                      </>
                    ) : (
                      <>
                        <Wand2 className="h-4 w-4 mr-2" />
                        Generate with AI
                      </>
                    )}
                  </Button>
                </div>
              )}

              {/* Section Stats */}
              <div className="flex items-center space-x-4 text-sm text-gray-500">
                <span>{section.wordCount || 0} words</span>
                <span>Last modified: {section.lastModified?.toLocaleDateString()}</span>
                {section.aiScore && (
                  <span>AI Score: {section.aiScore}%</span>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

// Document Structure Editor Component
function DocumentStructureEditor({
  document,
  content,
  onChange,
  readOnly
}: {
  document: BaseDocument;
  content: DocumentContent;
  onChange: (content: DocumentContent) => void;
  readOnly: boolean;
}) {
  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle>Document Structure</CardTitle>
          <CardDescription>
            Manage the structure and organization of your document
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            {content.data.sections?.map((section, index) => (
              <div key={section.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                <div className="flex items-center space-x-3">
                  <span className="text-sm font-medium text-gray-500">
                    {index + 1}.
                  </span>
                  <span className="font-medium">{section.title}</span>
                  {section.required && (
                    <Badge variant="outline" className="text-red-600 border-red-200">
                      Required
                    </Badge>
                  )}
                </div>
                <div className="flex items-center space-x-2">
                  {section.completed && (
                    <CheckCircle className="h-4 w-4 text-green-600" />
                  )}
                  <span className="text-sm text-gray-500">
                    {section.wordCount || 0} words
                  </span>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

// AI Insights Panel Component
function AIInsightsPanel({
  insights,
  suggestions,
  score,
  onApplySuggestion
}: {
  insights: any[];
  suggestions: any[];
  score: number;
  onApplySuggestion: (suggestion: any) => void;
}) {
  return (
    <div className="space-y-6">
      {/* AI Score */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Brain className="h-5 w-5 text-purple-600" />
            <span>AI Analysis</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Overall Score</span>
              <span className="text-2xl font-bold text-purple-600">{score}%</span>
            </div>
            <Progress value={score} className="h-2" />
          </div>
        </CardContent>
      </Card>

      {/* Insights */}
      {insights.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Insights</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {insights.map((insight, index) => (
                <div key={index} className="p-3 border border-gray-200 rounded-lg">
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0">
                      {insight.type === 'suggestion' && <Target className="h-4 w-4 text-blue-600" />}
                      {insight.type === 'warning' && <AlertCircle className="h-4 w-4 text-yellow-600" />}
                      {insight.type === 'opportunity' && <TrendingUp className="h-4 w-4 text-green-600" />}
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-900">{insight.title}</h4>
                      <p className="text-sm text-gray-600 mt-1">{insight.description}</p>
                      <div className="flex items-center space-x-2 mt-2">
                        <Badge variant="outline" className="text-xs">
                          {insight.priority} priority
                        </Badge>
                        <span className="text-xs text-gray-500">
                          {insight.confidence}% confidence
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Suggestions */}
      {suggestions.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Suggestions</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {suggestions.map((suggestion, index) => (
                <div key={index} className="p-3 border border-gray-200 rounded-lg">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-900">{suggestion.title}</h4>
                      <p className="text-sm text-gray-600 mt-1">{suggestion.description}</p>
                      <div className="mt-2">
                        <p className="text-sm text-gray-700 bg-gray-50 p-2 rounded">
                          {suggestion.content}
                        </p>
                      </div>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => onApplySuggestion(suggestion)}
                      className="ml-4"
                    >
                      Apply
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

// Collaboration Panel Component
function CollaborationPanel({
  collaborators,
  comments,
  onAddComment
}: {
  collaborators: any[];
  comments: any[];
  onAddComment: (comment: any) => void;
}) {
  return (
    <div className="space-y-6">
      {/* Active Collaborators */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Users className="h-5 w-5 text-blue-600" />
            <span>Active Collaborators</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            {collaborators.map((collaborator, index) => (
              <div key={index} className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <span className="text-sm font-medium text-blue-600">
                    {collaborator.name.charAt(0)}
                  </span>
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-900">{collaborator.name}</p>
                  <p className="text-xs text-gray-500">{collaborator.email}</p>
                </div>
                <div className="ml-auto">
                  <Badge variant="outline" className="text-green-600 border-green-200">
                    Online
                  </Badge>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Comments */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <MessageSquare className="h-5 w-5 text-green-600" />
            <span>Comments</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {comments.map((comment, index) => (
              <div key={index} className="p-3 border border-gray-200 rounded-lg">
                <div className="flex items-start space-x-3">
                  <div className="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center">
                    <span className="text-xs font-medium text-gray-600">
                      {comment.author.charAt(0)}
                    </span>
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-medium text-gray-900">{comment.author}</span>
                      <span className="text-xs text-gray-500">
                        {comment.timestamp.toLocaleDateString()}
                      </span>
                    </div>
                    <p className="text-sm text-gray-700 mt-1">{comment.content}</p>
                    {comment.replies && comment.replies.length > 0 && (
                      <div className="mt-2 space-y-2">
                        {comment.replies.map((reply, replyIndex) => (
                          <div key={replyIndex} className="pl-4 border-l-2 border-gray-100">
                            <div className="flex items-center space-x-2">
                              <span className="text-xs font-medium text-gray-900">{reply.author}</span>
                              <span className="text-xs text-gray-500">
                                {reply.timestamp.toLocaleDateString()}
                              </span>
                            </div>
                            <p className="text-xs text-gray-700 mt-1">{reply.content}</p>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/features/documents/ai/AIDocumentService.ts ===

import { BaseDocument } from '../types/document.types';
import { 
  AIAnalysisResult, 
  AIGenerationResult, 
  AISuggestion, 
  ComplianceResult, 
  AISummary, 
  ReadabilityScore,
  AIConfiguration,
  AIUsageStats,
  AIError,
  AIPrompt,
  AIContext,
  AIResponse
} from '../types/ai.types';

/**
 * AI Document Service - Centralized AI service for document operations
 * 
 * This service provides:
 * - Document analysis and scoring
 * - Content generation
 * - Quality assessment
 * - Compliance checking
 * - Semantic search
 * - Auto-tagging and categorization
 */
export class AIDocumentService {
  private configuration: AIConfiguration;
  private usageStats: AIUsageStats;
  private prompts: Map<string, AIPrompt> = new Map();

  constructor(config: AIConfiguration) {
    this.configuration = config;
    this.usageStats = {
      totalRequests: 0,
      totalTokens: 0,
      totalCost: 0,
      averageResponseTime: 0,
      successRate: 0,
      errorRate: 0,
      lastUsed: new Date(),
      dailyUsage: {},
      monthlyUsage: {}
    };
  }

  /**
   * Analyze a document with AI
   */
  async analyzeDocument(document: BaseDocument): Promise<AIAnalysisResult> {
    const startTime = Date.now();
    
    try {
      // Check if AI is enabled
      if (!this.configuration.enabled) {
        throw new Error('AI service is disabled');
      }

      // Prepare context
      const context = await this.buildContext(document);

      // Perform analysis based on document type
      let analysis: AIAnalysisResult;
      
      switch (document.type) {
        case 'business-plan':
          analysis = await this.analyzeBusinessPlan(document, context);
          break;
        case 'proposal':
          analysis = await this.analyzeProposal(document, context);
          break;
        case 'pitch-deck':
          analysis = await this.analyzePitchDeck(document, context);
          break;
        default:
          analysis = await this.analyzeGenericDocument(document, context);
      }

      // Update usage stats
      this.updateUsageStats(startTime, true, analysis.metadata?.tokens || 0);

      return analysis;

    } catch (error) {
      this.updateUsageStats(startTime, false, 0);
      throw this.handleError(error);
    }
  }

  /**
   * Generate content for a document
   */
  async generateContent(
    document: BaseDocument,
    prompt: string,
    options: {
      sectionId?: string;
      context?: any;
      style?: string;
      length?: number;
    } = {}
  ): Promise<AIGenerationResult> {
    const startTime = Date.now();
    
    try {
      if (!this.configuration.enabled) {
        throw new Error('AI service is disabled');
      }

      // Build context
      const context = await this.buildContext(document, options.context);

      // Generate content based on document type
      let result: AIGenerationResult;
      
      switch (document.type) {
        case 'business-plan':
          result = await this.generateBusinessPlanContent(document, prompt, context, options);
          break;
        case 'proposal':
          result = await this.generateProposalContent(document, prompt, context, options);
          break;
        case 'pitch-deck':
          result = await this.generatePitchDeckContent(document, prompt, context, options);
          break;
        default:
          result = await this.generateGenericContent(document, prompt, context, options);
      }

      this.updateUsageStats(startTime, true, result.metadata?.tokens || 0);
      return result;

    } catch (error) {
      this.updateUsageStats(startTime, false, 0);
      throw this.handleError(error);
    }
  }

  /**
   * Get suggestions for improving a document
   */
  async getSuggestions(document: BaseDocument): Promise<AISuggestion[]> {
    const startTime = Date.now();
    
    try {
      if (!this.configuration.enabled) {
        return [];
      }

      const context = await this.buildContext(document);
      const suggestions: AISuggestion[] = [];

      // Content suggestions
      const contentSuggestions = await this.getContentSuggestions(document, context);
      suggestions.push(...contentSuggestions);

      // Structure suggestions
      const structureSuggestions = await this.getStructureSuggestions(document, context);
      suggestions.push(...structureSuggestions);

      // Style suggestions
      const styleSuggestions = await this.getStyleSuggestions(document, context);
      suggestions.push(...styleSuggestions);

      // Compliance suggestions
      const complianceSuggestions = await this.getComplianceSuggestions(document, context);
      suggestions.push(...complianceSuggestions);

      this.updateUsageStats(startTime, true, 0);
      return suggestions;

    } catch (error) {
      this.updateUsageStats(startTime, false, 0);
      throw this.handleError(error);
    }
  }

  /**
   * Check document compliance
   */
  async checkCompliance(
    document: BaseDocument,
    rules: any[]
  ): Promise<ComplianceResult> {
    const startTime = Date.now();
    
    try {
      if (!this.configuration.enabled) {
        return {
          compliant: true,
          score: 100,
          violations: [],
          recommendations: [],
          timestamp: new Date()
        };
      }

      const context = await this.buildContext(document);
      const violations = [];
      const recommendations = [];

      // Check each rule
      for (const rule of rules) {
        const violation = await this.checkRule(document, rule, context);
        if (violation) {
          violations.push(violation);
        }
      }

      // Generate recommendations
      if (violations.length > 0) {
        recommendations.push(...await this.generateComplianceRecommendations(violations, context));
      }

      const score = Math.max(0, 100 - (violations.length * 10));
      const compliant = violations.length === 0;

      this.updateUsageStats(startTime, true, 0);
      
      return {
        compliant,
        score,
        violations,
        recommendations,
        timestamp: new Date()
      };

    } catch (error) {
      this.updateUsageStats(startTime, false, 0);
      throw this.handleError(error);
    }
  }

  /**
   * Summarize a document
   */
  async summarizeDocument(document: BaseDocument): Promise<AISummary> {
    const startTime = Date.now();
    
    try {
      if (!this.configuration.enabled) {
        return {
          text: 'AI summarization is disabled',
          keyPoints: [],
          sentiment: 'neutral',
          confidence: 0,
          wordCount: 0,
          timestamp: new Date()
        };
      }

      const context = await this.buildContext(document);
      const summary = await this.generateSummary(document, context);

      this.updateUsageStats(startTime, true, 0);
      return summary;

    } catch (error) {
      this.updateUsageStats(startTime, false, 0);
      throw this.handleError(error);
    }
  }

  /**
   * Extract keywords from a document
   */
  async extractKeywords(document: BaseDocument): Promise<string[]> {
    const startTime = Date.now();
    
    try {
      if (!this.configuration.enabled) {
        return [];
      }

      const context = await this.buildContext(document);
      const keywords = await this.extractDocumentKeywords(document, context);

      this.updateUsageStats(startTime, true, 0);
      return keywords;

    } catch (error) {
      this.updateUsageStats(startTime, false, 0);
      throw this.handleError(error);
    }
  }

  /**
   * Detect document language
   */
  async detectLanguage(document: BaseDocument): Promise<string> {
    const startTime = Date.now();
    
    try {
      if (!this.configuration.enabled) {
        return 'en';
      }

      const context = await this.buildContext(document);
      const language = await this.detectDocumentLanguage(document, context);

      this.updateUsageStats(startTime, true, 0);
      return language;

    } catch (error) {
      this.updateUsageStats(startTime, false, 0);
      throw this.handleError(error);
    }
  }

  /**
   * Calculate readability score
   */
  async calculateReadability(document: BaseDocument): Promise<ReadabilityScore> {
    const startTime = Date.now();
    
    try {
      if (!this.configuration.enabled) {
        return {
          score: 0,
          level: 'elementary',
          metrics: {
            averageWordsPerSentence: 0,
            averageSyllablesPerWord: 0,
            complexWords: 0,
            totalWords: 0,
            totalSentences: 0
          },
          suggestions: []
        };
      }

      const context = await this.buildContext(document);
      const readability = await this.calculateDocumentReadability(document, context);

      this.updateUsageStats(startTime, true, 0);
      return readability;

    } catch (error) {
      this.updateUsageStats(startTime, false, 0);
      throw this.handleError(error);
    }
  }

  /**
   * Get usage statistics
   */
  getUsageStats(): AIUsageStats {
    return { ...this.usageStats };
  }

  /**
   * Update configuration
   */
  updateConfiguration(config: Partial<AIConfiguration>): void {
    this.configuration = { ...this.configuration, ...config };
  }

  /**
   * Get configuration
   */
  getConfiguration(): AIConfiguration {
    return { ...this.configuration };
  }

  // Private methods for specific document types
  private async analyzeBusinessPlan(document: BaseDocument, context: AIContext): Promise<AIAnalysisResult> {
    // Business plan specific analysis
    const analysis: AIAnalysisResult = {
      overallScore: 75,
      qualityScore: 80,
      completenessScore: 70,
      readabilityScore: 85,
      insights: [
        {
          id: 'insight-1',
          type: 'suggestion',
          title: 'Strengthen Market Analysis',
          description: 'Your market analysis could be more comprehensive. Consider adding more detailed competitor analysis.',
          priority: 'medium',
          actionable: true,
          confidence: 85,
          category: 'market-analysis',
          timestamp: new Date()
        }
      ],
      suggestions: [
        {
          id: 'suggestion-1',
          type: 'content',
          title: 'Add Financial Projections',
          description: 'Include detailed 3-year financial projections with assumptions.',
          content: 'Add revenue projections, expense breakdowns, and cash flow statements.',
          priority: 'high',
          accepted: false,
          timestamp: new Date(),
          confidence: 90
        }
      ],
      confidence: 85,
      processingTime: 1500,
      timestamp: new Date(),
      metadata: {
        model: 'gpt-4',
        tokens: 1500,
        cost: 0.03,
        processingTime: 1500,
        timestamp: new Date()
      }
    };

    return analysis;
  }

  private async analyzeProposal(document: BaseDocument, context: AIContext): Promise<AIAnalysisResult> {
    // Proposal specific analysis
    const analysis: AIAnalysisResult = {
      overallScore: 80,
      qualityScore: 85,
      completenessScore: 75,
      readabilityScore: 90,
      insights: [
        {
          id: 'insight-1',
          type: 'suggestion',
          title: 'Strengthen Value Proposition',
          description: 'Your value proposition could be more compelling. Focus on unique benefits.',
          priority: 'high',
          actionable: true,
          confidence: 90,
          category: 'value-proposition',
          timestamp: new Date()
        }
      ],
      suggestions: [
        {
          id: 'suggestion-1',
          type: 'content',
          title: 'Add Case Studies',
          description: 'Include relevant case studies to demonstrate your capabilities.',
          content: 'Add 2-3 case studies showing successful project outcomes.',
          priority: 'medium',
          accepted: false,
          timestamp: new Date(),
          confidence: 85
        }
      ],
      confidence: 88,
      processingTime: 1200,
      timestamp: new Date(),
      metadata: {
        model: 'gpt-4',
        tokens: 1200,
        cost: 0.024,
        processingTime: 1200,
        timestamp: new Date()
      }
    };

    return analysis;
  }

  private async analyzePitchDeck(document: BaseDocument, context: AIContext): Promise<AIAnalysisResult> {
    // Pitch deck specific analysis
    const analysis: AIAnalysisResult = {
      overallScore: 85,
      qualityScore: 90,
      completenessScore: 80,
      readabilityScore: 95,
      insights: [
        {
          id: 'insight-1',
          type: 'suggestion',
          title: 'Improve Visual Impact',
          description: 'Your slides could benefit from more compelling visuals and charts.',
          priority: 'medium',
          actionable: true,
          confidence: 80,
          category: 'visual-design',
          timestamp: new Date()
        }
      ],
      suggestions: [
        {
          id: 'suggestion-1',
          type: 'content',
          title: 'Add Demo Video',
          description: 'Include a short demo video to showcase your product in action.',
          content: 'Create a 2-3 minute demo video showing key features.',
          priority: 'high',
          accepted: false,
          timestamp: new Date(),
          confidence: 95
        }
      ],
      confidence: 90,
      processingTime: 1000,
      timestamp: new Date(),
      metadata: {
        model: 'gpt-4',
        tokens: 1000,
        cost: 0.02,
        processingTime: 1000,
        timestamp: new Date()
      }
    };

    return analysis;
  }

  private async analyzeGenericDocument(document: BaseDocument, context: AIContext): Promise<AIAnalysisResult> {
    // Generic document analysis
    return {
      overallScore: 70,
      qualityScore: 75,
      completenessScore: 65,
      readabilityScore: 80,
      insights: [],
      suggestions: [],
      confidence: 70,
      processingTime: 800,
      timestamp: new Date(),
      metadata: {
        model: 'gpt-4',
        tokens: 800,
        cost: 0.016,
        processingTime: 800,
        timestamp: new Date()
      }
    };
  }

  // Content generation methods
  private async generateBusinessPlanContent(
    document: BaseDocument,
    prompt: string,
    context: AIContext,
    options: any
  ): Promise<AIGenerationResult> {
    // Business plan content generation logic
    return {
      content: 'Generated business plan content based on prompt...',
      confidence: 85,
      sections: [
        {
          id: 'section-1',
          title: 'Executive Summary',
          content: 'AI-generated executive summary...',
          type: 'text',
          confidence: 85,
          aiGenerated: true
        }
      ],
      metadata: {
        model: 'gpt-4',
        prompt,
        context,
        parameters: this.configuration.parameters,
        tokens: 1000,
        cost: 0.02
      },
      suggestions: ['Consider adding more market data', 'Include competitive analysis'],
      timestamp: new Date()
    };
  }

  private async generateProposalContent(
    document: BaseDocument,
    prompt: string,
    context: AIContext,
    options: any
  ): Promise<AIGenerationResult> {
    // Proposal content generation logic
    return {
      content: 'Generated proposal content based on prompt...',
      confidence: 90,
      sections: [
        {
          id: 'section-1',
          title: 'Executive Summary',
          content: 'AI-generated proposal summary...',
          type: 'text',
          confidence: 90,
          aiGenerated: true
        }
      ],
      metadata: {
        model: 'gpt-4',
        prompt,
        context,
        parameters: this.configuration.parameters,
        tokens: 1200,
        cost: 0.024
      },
      suggestions: ['Add specific examples', 'Include metrics and KPIs'],
      timestamp: new Date()
    };
  }

  private async generatePitchDeckContent(
    document: BaseDocument,
    prompt: string,
    context: AIContext,
    options: any
  ): Promise<AIGenerationResult> {
    // Pitch deck content generation logic
    return {
      content: 'Generated pitch deck content based on prompt...',
      confidence: 88,
      sections: [
        {
          id: 'section-1',
          title: 'Problem Slide',
          content: 'AI-generated problem description...',
          type: 'text',
          confidence: 88,
          aiGenerated: true
        }
      ],
      metadata: {
        model: 'gpt-4',
        prompt,
        context,
        parameters: this.configuration.parameters,
        tokens: 900,
        cost: 0.018
      },
      suggestions: ['Add compelling visuals', 'Include customer testimonials'],
      timestamp: new Date()
    };
  }

  private async generateGenericContent(
    document: BaseDocument,
    prompt: string,
    context: AIContext,
    options: any
  ): Promise<AIGenerationResult> {
    // Generic content generation logic
    return {
      content: 'Generated content based on prompt...',
      confidence: 75,
      sections: [
        {
          id: 'section-1',
          title: 'Generated Content',
          content: 'AI-generated content...',
          type: 'text',
          confidence: 75,
          aiGenerated: true
        }
      ],
      metadata: {
        model: 'gpt-4',
        prompt,
        context,
        parameters: this.configuration.parameters,
        tokens: 600,
        cost: 0.012
      },
      suggestions: ['Review for accuracy', 'Customize for your audience'],
      timestamp: new Date()
    };
  }

  // Helper methods
  private async buildContext(document: BaseDocument, additionalContext?: any): Promise<AIContext> {
    return {
      document,
      user: additionalContext?.user || {},
      organization: additionalContext?.organization || {},
      previousDocuments: additionalContext?.previousDocuments || [],
      templates: additionalContext?.templates || [],
      rules: additionalContext?.rules || [],
      preferences: additionalContext?.preferences || {}
    };
  }

  private async getContentSuggestions(document: BaseDocument, context: AIContext): Promise<AISuggestion[]> {
    // Content suggestion logic
    return [];
  }

  private async getStructureSuggestions(document: BaseDocument, context: AIContext): Promise<AISuggestion[]> {
    // Structure suggestion logic
    return [];
  }

  private async getStyleSuggestions(document: BaseDocument, context: AIContext): Promise<AISuggestion[]> {
    // Style suggestion logic
    return [];
  }

  private async getComplianceSuggestions(document: BaseDocument, context: AIContext): Promise<AISuggestion[]> {
    // Compliance suggestion logic
    return [];
  }

  private async checkRule(document: BaseDocument, rule: any, context: AIContext): Promise<any> {
    // Rule checking logic
    return null;
  }

  private async generateComplianceRecommendations(violations: any[], context: AIContext): Promise<string[]> {
    // Compliance recommendation logic
    return [];
  }

  private async generateSummary(document: BaseDocument, context: AIContext): Promise<AISummary> {
    // Summary generation logic
    return {
      text: 'Document summary...',
      keyPoints: ['Key point 1', 'Key point 2'],
      sentiment: 'positive',
      confidence: 85,
      wordCount: 100,
      timestamp: new Date()
    };
  }

  private async extractDocumentKeywords(document: BaseDocument, context: AIContext): Promise<string[]> {
    // Keyword extraction logic
    return ['keyword1', 'keyword2', 'keyword3'];
  }

  private async detectDocumentLanguage(document: BaseDocument, context: AIContext): Promise<string> {
    // Language detection logic
    return 'en';
  }

  private async calculateDocumentReadability(document: BaseDocument, context: AIContext): Promise<ReadabilityScore> {
    // Readability calculation logic
    return {
      score: 75,
      level: 'high',
      metrics: {
        averageWordsPerSentence: 15,
        averageSyllablesPerWord: 1.5,
        complexWords: 10,
        totalWords: 500,
        totalSentences: 33
      },
      suggestions: ['Use shorter sentences', 'Simplify complex words']
    };
  }

  private updateUsageStats(startTime: number, success: boolean, tokens: number): void {
    const responseTime = Date.now() - startTime;
    
    this.usageStats.totalRequests++;
    this.usageStats.totalTokens += tokens;
    this.usageStats.totalCost += tokens * 0.00002; // Approximate cost
    this.usageStats.averageResponseTime = 
      (this.usageStats.averageResponseTime + responseTime) / 2;
    
    if (success) {
      this.usageStats.successRate = 
        (this.usageStats.successRate * (this.usageStats.totalRequests - 1) + 1) / this.usageStats.totalRequests;
    } else {
      this.usageStats.errorRate = 
        (this.usageStats.errorRate * (this.usageStats.totalRequests - 1) + 1) / this.usageStats.totalRequests;
    }
    
    this.usageStats.lastUsed = new Date();
    
    // Update daily usage
    const today = new Date().toISOString().split('T')[0];
    this.usageStats.dailyUsage[today] = (this.usageStats.dailyUsage[today] || 0) + 1;
    
    // Update monthly usage
    const month = new Date().toISOString().substring(0, 7);
    this.usageStats.monthlyUsage[month] = (this.usageStats.monthlyUsage[month] || 0) + 1;
  }

  private handleError(error: any): AIError {
    return {
      code: 'AI_SERVICE_ERROR',
      message: error.message || 'Unknown AI service error',
      details: error,
      timestamp: new Date(),
      retryable: true
    };
  }
}


=== FILE: client/src/features/documents/workflow/WorkflowEngine.ts ===

import { BaseDocument, DocumentStatus } from '../types/document.types';
import { WorkflowTemplate, WorkflowStep, WorkflowState, ApprovalStep, NotificationStep } from '../types/workflow.types';

/**
 * Workflow Engine - Advanced document workflow management system
 * 
 * This system provides:
 * - Template-based workflow creation
 * - Customizable approval processes
 * - Automated workflow execution
 * - Workflow analytics and optimization
 * - Integration with document lifecycle
 */
export class WorkflowEngine {
  private templates: Map<string, WorkflowTemplate> = new Map();
  private activeWorkflows: Map<string, WorkflowState> = new Map();
  private workflowHistory: Map<string, WorkflowEvent[]> = new Map();
  private workflowAnalytics: WorkflowAnalytics;
  private notificationService: WorkflowNotificationService;

  constructor() {
    this.workflowAnalytics = new WorkflowAnalytics();
    this.notificationService = new WorkflowNotificationService();
    this.initializeDefaultTemplates();
  }

  /**
   * Create a new workflow from template
   */
  async createWorkflow(
    documentId: string,
    templateId: string,
    options: WorkflowCreationOptions = {}
  ): Promise<WorkflowCreationResult> {
    try {
      const template = this.templates.get(templateId);
      if (!template) {
        throw new Error(`Workflow template ${templateId} not found`);
      }

      // Create workflow state
      const workflowState: WorkflowState = {
        id: this.generateWorkflowId(),
        documentId,
        templateId,
        status: 'active',
        currentStep: 0,
        steps: template.steps.map(step => ({ ...step, status: 'pending' })),
        participants: options.participants || [],
        metadata: {
          createdAt: new Date(),
          createdBy: options.createdBy || 'system',
          priority: options.priority || 'normal',
          dueDate: options.dueDate,
          description: options.description
        },
        variables: options.variables || {},
        notifications: []
      };

      // Initialize first step
      await this.initializeStep(workflowState, 0);

      // Store workflow
      this.activeWorkflows.set(workflowState.id, workflowState);

      // Record workflow creation
      await this.recordWorkflowEvent(workflowState.id, 'workflow_created', {
        templateId,
        createdBy: options.createdBy,
        participants: options.participants
      });

      // Send notifications
      await this.notificationService.notifyWorkflowCreated(workflowState);

      return {
        success: true,
        workflowId: workflowState.id,
        workflow: workflowState,
        nextStep: workflowState.steps[0]
      };

    } catch (error) {
      throw new Error(`Failed to create workflow: ${error.message}`);
    }
  }

  /**
   * Execute workflow step
   */
  async executeStep(
    workflowId: string,
    stepIndex: number,
    action: WorkflowAction,
    options: StepExecutionOptions = {}
  ): Promise<StepExecutionResult> {
    try {
      const workflow = this.activeWorkflows.get(workflowId);
      if (!workflow) {
        throw new Error(`Workflow ${workflowId} not found`);
      }

      const step = workflow.steps[stepIndex];
      if (!step) {
        throw new Error(`Step ${stepIndex} not found in workflow ${workflowId}`);
      }

      // Validate step execution
      const validation = await this.validateStepExecution(workflow, step, action, options);
      if (!validation.valid) {
        return {
          success: false,
          reason: 'validation_failed',
          errors: validation.errors
        };
      }

      // Execute step based on type
      let executionResult: StepExecutionResult;
      switch (step.type) {
        case 'approval':
          executionResult = await this.executeApprovalStep(workflow, step, action, options);
          break;
        case 'notification':
          executionResult = await this.executeNotificationStep(workflow, step, action, options);
          break;
        case 'automated':
          executionResult = await this.executeAutomatedStep(workflow, step, action, options);
          break;
        case 'conditional':
          executionResult = await this.executeConditionalStep(workflow, step, action, options);
          break;
        default:
          throw new Error(`Unknown step type: ${step.type}`);
      }

      if (executionResult.success) {
        // Update step status
        step.status = 'completed';
        step.completedAt = new Date();
        step.completedBy = options.executedBy;

        // Record step completion
        await this.recordWorkflowEvent(workflowId, 'step_completed', {
          stepIndex,
          stepType: step.type,
          action: action.type,
          executedBy: options.executedBy
        });

        // Move to next step or complete workflow
        const nextStepResult = await this.moveToNextStep(workflow);
        executionResult.nextStep = nextStepResult.nextStep;
        executionResult.workflowCompleted = nextStepResult.completed;
      }

      return executionResult;

    } catch (error) {
      throw new Error(`Failed to execute workflow step: ${error.message}`);
    }
  }

  /**
   * Get workflow status
   */
  async getWorkflowStatus(workflowId: string): Promise<WorkflowStatus> {
    const workflow = this.activeWorkflows.get(workflowId);
    if (!workflow) {
      throw new Error(`Workflow ${workflowId} not found`);
    }

    const currentStep = workflow.steps[workflow.currentStep];
    const completedSteps = workflow.steps.filter(step => step.status === 'completed').length;
    const totalSteps = workflow.steps.length;

    return {
      workflowId,
      status: workflow.status,
      currentStep: workflow.currentStep,
      currentStepType: currentStep?.type,
      progress: totalSteps > 0 ? (completedSteps / totalSteps) * 100 : 0,
      completedSteps,
      totalSteps,
      participants: workflow.participants,
      metadata: workflow.metadata,
      nextActions: await this.getNextActions(workflow),
      estimatedCompletion: await this.estimateCompletion(workflow)
    };
  }

  /**
   * Get workflow history
   */
  async getWorkflowHistory(workflowId: string): Promise<WorkflowEvent[]> {
    return this.workflowHistory.get(workflowId) || [];
  }

  /**
   * Create workflow template
   */
  async createTemplate(
    template: WorkflowTemplate,
    options: TemplateCreationOptions = {}
  ): Promise<TemplateCreationResult> {
    try {
      // Validate template
      const validation = await this.validateTemplate(template);
      if (!validation.valid) {
        return {
          success: false,
          errors: validation.errors
        };
      }

      // Generate template ID
      const templateId = options.templateId || this.generateTemplateId();

      // Store template
      this.templates.set(templateId, {
        ...template,
        id: templateId,
        createdAt: new Date(),
        createdBy: options.createdBy || 'system',
        version: options.version || '1.0.0'
      });

      // Record template creation
      await this.recordWorkflowEvent('system', 'template_created', {
        templateId,
        templateName: template.name,
        createdBy: options.createdBy
      });

      return {
        success: true,
        templateId,
        template: this.templates.get(templateId)!
      };

    } catch (error) {
      throw new Error(`Failed to create workflow template: ${error.message}`);
    }
  }

  /**
   * Get workflow analytics
   */
  async getWorkflowAnalytics(
    options: AnalyticsOptions = {}
  ): Promise<WorkflowAnalyticsResult> {
    try {
      const analytics = await this.workflowAnalytics.getAnalytics(options);

      return {
        totalWorkflows: analytics.totalWorkflows,
        activeWorkflows: analytics.activeWorkflows,
        completedWorkflows: analytics.completedWorkflows,
        averageCompletionTime: analytics.averageCompletionTime,
        stepPerformance: analytics.stepPerformance,
        participantEngagement: analytics.participantEngagement,
        bottlenecks: analytics.bottlenecks,
        recommendations: await this.generateWorkflowRecommendations(analytics)
      };

    } catch (error) {
      throw new Error(`Failed to get workflow analytics: ${error.message}`);
    }
  }

  /**
   * Optimize workflow performance
   */
  async optimizeWorkflows(): Promise<OptimizationResult> {
    try {
      const startTime = Date.now();
      const results: OptimizationResult = {
        workflowsOptimized: 0,
        templatesOptimized: 0,
        performanceImproved: false,
        processingTime: 0
      };

      // Optimize active workflows
      for (const [workflowId, workflow] of this.activeWorkflows) {
        const optimization = await this.optimizeWorkflow(workflow);
        if (optimization.optimized) {
          results.workflowsOptimized++;
        }
      }

      // Optimize templates
      for (const [templateId, template] of this.templates) {
        const optimization = await this.optimizeTemplate(template);
        if (optimization.optimized) {
          results.templatesOptimized++;
        }
      }

      results.performanceImproved = results.workflowsOptimized > 0 || results.templatesOptimized > 0;
      results.processingTime = Date.now() - startTime;

      return results;

    } catch (error) {
      throw new Error(`Failed to optimize workflows: ${error.message}`);
    }
  }

  // Private helper methods
  private async initializeStep(workflow: WorkflowState, stepIndex: number): Promise<void> {
    const step = workflow.steps[stepIndex];
    if (!step) return;

    step.status = 'active';
    step.startedAt = new Date();

    // Send notifications for step start
    await this.notificationService.notifyStepStarted(workflow, step);

    // Execute automated steps immediately
    if (step.type === 'automated') {
      await this.executeAutomatedStep(workflow, step, { type: 'auto' }, {});
    }
  }

  private async validateStepExecution(
    workflow: WorkflowState,
    step: WorkflowStep,
    action: WorkflowAction,
    options: StepExecutionOptions
  ): Promise<ValidationResult> {
    const errors: string[] = [];

    // Check if step is active
    if (step.status !== 'active') {
      errors.push(`Step is not active (status: ${step.status})`);
    }

    // Check permissions
    if (step.requiredPermissions && options.executedBy) {
      const hasPermission = await this.checkPermissions(options.executedBy, step.requiredPermissions);
      if (!hasPermission) {
        errors.push('Insufficient permissions to execute this step');
      }
    }

    // Check action validity
    if (step.allowedActions && !step.allowedActions.includes(action.type)) {
      errors.push(`Action ${action.type} not allowed for this step`);
    }

    return {
      valid: errors.length === 0,
      errors
    };
  }

  private async executeApprovalStep(
    workflow: WorkflowState,
    step: ApprovalStep,
    action: WorkflowAction,
    options: StepExecutionOptions
  ): Promise<StepExecutionResult> {
    try {
      // Record approval
      step.approvals = step.approvals || [];
      step.approvals.push({
        userId: options.executedBy || 'system',
        action: action.type,
        timestamp: new Date(),
        comment: action.comment,
        metadata: action.metadata
      });

      // Check if approval is complete
      const requiredApprovals = step.requiredApprovals || 1;
      const approvals = step.approvals.filter(a => a.action === 'approve').length;

      if (approvals >= requiredApprovals) {
        step.status = 'completed';
        await this.notificationService.notifyStepCompleted(workflow, step);
      }

      return {
        success: true,
        stepCompleted: step.status === 'completed',
        approvals: step.approvals,
        requiredApprovals
      };

    } catch (error) {
      return {
        success: false,
        reason: 'execution_failed',
        error: error.message
      };
    }
  }

  private async executeNotificationStep(
    workflow: WorkflowState,
    step: NotificationStep,
    action: WorkflowAction,
    options: StepExecutionOptions
  ): Promise<StepExecutionResult> {
    try {
      // Send notifications
      await this.notificationService.sendNotifications(step.recipients, {
        workflowId: workflow.id,
        stepId: step.id,
        message: step.message,
        metadata: step.metadata
      });

      return {
        success: true,
        stepCompleted: true,
        notificationsSent: step.recipients.length
      };

    } catch (error) {
      return {
        success: false,
        reason: 'notification_failed',
        error: error.message
      };
    }
  }

  private async executeAutomatedStep(
    workflow: WorkflowState,
    step: WorkflowStep,
    action: WorkflowAction,
    options: StepExecutionOptions
  ): Promise<StepExecutionResult> {
    try {
      // Execute automated logic
      const result = await this.executeAutomatedLogic(step, workflow);

      return {
        success: true,
        stepCompleted: true,
        result
      };

    } catch (error) {
      return {
        success: false,
        reason: 'automation_failed',
        error: error.message
      };
    }
  }

  private async executeConditionalStep(
    workflow: WorkflowState,
    step: WorkflowStep,
    action: WorkflowAction,
    options: StepExecutionOptions
  ): Promise<StepExecutionResult> {
    try {
      // Evaluate conditions
      const conditionResult = await this.evaluateConditions(step.conditions, workflow);

      // Execute based on condition result
      const result = await this.executeConditionalLogic(step, conditionResult, workflow);

      return {
        success: true,
        stepCompleted: true,
        conditionResult,
        result
      };

    } catch (error) {
      return {
        success: false,
        reason: 'condition_failed',
        error: error.message
      };
    }
  }

  private async moveToNextStep(workflow: WorkflowState): Promise<NextStepResult> {
    const nextStepIndex = workflow.currentStep + 1;

    if (nextStepIndex >= workflow.steps.length) {
      // Workflow completed
      workflow.status = 'completed';
      workflow.completedAt = new Date();

      await this.recordWorkflowEvent(workflow.id, 'workflow_completed', {
        completedAt: workflow.completedAt,
        totalSteps: workflow.steps.length
      });

      await this.notificationService.notifyWorkflowCompleted(workflow);

      return {
        completed: true,
        nextStep: null
      };
    } else {
      // Move to next step
      workflow.currentStep = nextStepIndex;
      await this.initializeStep(workflow, nextStepIndex);

      return {
        completed: false,
        nextStep: workflow.steps[nextStepIndex]
      };
    }
  }

  private async getNextActions(workflow: WorkflowState): Promise<WorkflowAction[]> {
    const currentStep = workflow.steps[workflow.currentStep];
    if (!currentStep) return [];

    return currentStep.allowedActions || [];
  }

  private async estimateCompletion(workflow: WorkflowState): Promise<Date> {
    // Calculate estimated completion based on historical data
    const remainingSteps = workflow.steps.length - workflow.currentStep;
    const averageStepTime = await this.workflowAnalytics.getAverageStepTime();
    
    const estimatedCompletion = new Date();
    estimatedCompletion.setTime(estimatedCompletion.getTime() + (remainingSteps * averageStepTime));
    
    return estimatedCompletion;
  }

  private async validateTemplate(template: WorkflowTemplate): Promise<ValidationResult> {
    const errors: string[] = [];

    if (!template.name) {
      errors.push('Template name is required');
    }

    if (!template.steps || template.steps.length === 0) {
      errors.push('Template must have at least one step');
    }

    // Validate steps
    for (let i = 0; i < template.steps.length; i++) {
      const step = template.steps[i];
      if (!step.id) {
        errors.push(`Step ${i} must have an ID`);
      }
      if (!step.type) {
        errors.push(`Step ${i} must have a type`);
      }
    }

    return {
      valid: errors.length === 0,
      errors
    };
  }

  private async optimizeWorkflow(workflow: WorkflowState): Promise<OptimizationResult> {
    // Implement workflow optimization logic
    return { optimized: false };
  }

  private async optimizeTemplate(template: WorkflowTemplate): Promise<OptimizationResult> {
    // Implement template optimization logic
    return { optimized: false };
  }

  private async generateWorkflowRecommendations(analytics: any): Promise<string[]> {
    const recommendations: string[] = [];

    if (analytics.bottlenecks.length > 0) {
      recommendations.push('Consider optimizing workflow steps with bottlenecks');
    }

    if (analytics.averageCompletionTime > 7 * 24 * 60 * 60 * 1000) { // 7 days
      recommendations.push('Workflows are taking too long to complete');
    }

    return recommendations;
  }

  private async executeAutomatedLogic(step: WorkflowStep, workflow: WorkflowState): Promise<any> {
    // Implement automated logic execution
    return {};
  }

  private async evaluateConditions(conditions: any[], workflow: WorkflowState): Promise<boolean> {
    // Implement condition evaluation
    return true;
  }

  private async executeConditionalLogic(
    step: WorkflowStep,
    conditionResult: boolean,
    workflow: WorkflowState
  ): Promise<any> {
    // Implement conditional logic execution
    return {};
  }

  private async checkPermissions(userId: string, permissions: string[]): Promise<boolean> {
    // Implement permission checking
    return true;
  }

  private async recordWorkflowEvent(
    workflowId: string,
    event: string,
    metadata: any
  ): Promise<void> {
    const events = this.workflowHistory.get(workflowId) || [];
    events.push({
      id: this.generateEventId(),
      workflowId,
      event,
      timestamp: new Date(),
      metadata
    });
    this.workflowHistory.set(workflowId, events);
  }

  private generateWorkflowId(): string {
    return `workflow_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateTemplateId(): string {
    return `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateEventId(): string {
    return `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private async initializeDefaultTemplates(): Promise<void> {
    // Initialize default workflow templates
    const defaultTemplates: WorkflowTemplate[] = [
      {
        id: 'document_review',
        name: 'Document Review',
        description: 'Standard document review workflow',
        steps: [
          {
            id: 'initial_review',
            type: 'approval',
            name: 'Initial Review',
            description: 'Initial document review',
            requiredApprovals: 1,
            allowedActions: ['approve', 'reject', 'request_changes']
          },
          {
            id: 'final_approval',
            type: 'approval',
            name: 'Final Approval',
            description: 'Final approval step',
            requiredApprovals: 1,
            allowedActions: ['approve', 'reject']
          }
        ],
        metadata: {
          category: 'review',
          priority: 'normal'
        }
      }
    ];

    for (const template of defaultTemplates) {
      this.templates.set(template.id, template);
    }
  }
}

// Supporting classes
export class WorkflowAnalytics {
  async getAnalytics(options: AnalyticsOptions): Promise<any> {
    // Implement analytics logic
    return {
      totalWorkflows: 0,
      activeWorkflows: 0,
      completedWorkflows: 0,
      averageCompletionTime: 0,
      stepPerformance: {},
      participantEngagement: {},
      bottlenecks: []
    };
  }

  async getAverageStepTime(): Promise<number> {
    // Calculate average step time
    return 24 * 60 * 60 * 1000; // 1 day
  }
}

export class WorkflowNotificationService {
  async notifyWorkflowCreated(workflow: WorkflowState): Promise<void> {
    // Send workflow creation notifications
  }

  async notifyStepStarted(workflow: WorkflowState, step: WorkflowStep): Promise<void> {
    // Send step start notifications
  }

  async notifyStepCompleted(workflow: WorkflowState, step: WorkflowStep): Promise<void> {
    // Send step completion notifications
  }

  async notifyWorkflowCompleted(workflow: WorkflowState): Promise<void> {
    // Send workflow completion notifications
  }

  async sendNotifications(recipients: string[], notification: any): Promise<void> {
    // Send notifications to recipients
  }
}

// Supporting interfaces
export interface WorkflowCreationOptions {
  participants?: string[];
  createdBy?: string;
  priority?: 'low' | 'normal' | 'high' | 'urgent';
  dueDate?: Date;
  description?: string;
  variables?: Record<string, any>;
}

export interface WorkflowCreationResult {
  success: boolean;
  workflowId?: string;
  workflow?: WorkflowState;
  nextStep?: WorkflowStep;
  errors?: string[];
}

export interface WorkflowAction {
  type: 'approve' | 'reject' | 'request_changes' | 'auto' | 'skip';
  comment?: string;
  metadata?: Record<string, any>;
}

export interface StepExecutionOptions {
  executedBy?: string;
  comment?: string;
  metadata?: Record<string, any>;
}

export interface StepExecutionResult {
  success: boolean;
  stepCompleted?: boolean;
  nextStep?: WorkflowStep;
  workflowCompleted?: boolean;
  reason?: string;
  error?: string;
  approvals?: any[];
  requiredApprovals?: number;
  notificationsSent?: number;
  result?: any;
  conditionResult?: boolean;
}

export interface WorkflowStatus {
  workflowId: string;
  status: string;
  currentStep: number;
  currentStepType?: string;
  progress: number;
  completedSteps: number;
  totalSteps: number;
  participants: string[];
  metadata: any;
  nextActions: WorkflowAction[];
  estimatedCompletion: Date;
}

export interface TemplateCreationOptions {
  templateId?: string;
  createdBy?: string;
  version?: string;
}

export interface TemplateCreationResult {
  success: boolean;
  templateId?: string;
  template?: WorkflowTemplate;
  errors?: string[];
}

export interface AnalyticsOptions {
  timeRange?: DateRange;
  includeDetails?: boolean;
}

export interface DateRange {
  start: Date;
  end: Date;
}

export interface WorkflowAnalyticsResult {
  totalWorkflows: number;
  activeWorkflows: number;
  completedWorkflows: number;
  averageCompletionTime: number;
  stepPerformance: any;
  participantEngagement: any;
  bottlenecks: any[];
  recommendations: string[];
}

export interface OptimizationResult {
  workflowsOptimized: number;
  templatesOptimized: number;
  performanceImproved: boolean;
  processingTime: number;
}

export interface ValidationResult {
  valid: boolean;
  errors: string[];
}

export interface NextStepResult {
  completed: boolean;
  nextStep: WorkflowStep | null;
}

export interface WorkflowEvent {
  id: string;
  workflowId: string;
  event: string;
  timestamp: Date;
  metadata: any;
}


=== FILE: client/src/features/documents/templates/TemplateEngine.ts ===

import { BaseDocument, DocumentType } from '../types/document.types';
import { DocumentTemplate, TemplateCategory, TemplateMetadata } from '../types/template.types';

/**
 * Template Engine - Advanced document template system with AI enhancement
 * 
 * This system provides:
 * - AI-enhanced template creation and management
 * - Smart template suggestions based on context
 * - Template versioning and collaboration
 * - Template analytics and optimization
 * - Integration with document creation workflow
 */
export class TemplateEngine {
  private templates: Map<string, DocumentTemplate> = new Map();
  private categories: Map<string, TemplateCategory> = new Map();
  private aiEnhancer: AITemplateEnhancer;
  private templateAnalytics: TemplateAnalytics;
  private suggestionEngine: TemplateSuggestionEngine;

  constructor() {
    this.aiEnhancer = new AITemplateEnhancer();
    this.templateAnalytics = new TemplateAnalytics();
    this.suggestionEngine = new TemplateSuggestionEngine();
    this.initializeDefaultTemplates();
  }

  /**
   * Create a new document template
   */
  async createTemplate(
    templateData: TemplateCreationData,
    options: TemplateCreationOptions = {}
  ): Promise<TemplateCreationResult> {
    try {
      // Validate template data
      const validation = await this.validateTemplateData(templateData);
      if (!validation.valid) {
        return {
          success: false,
          errors: validation.errors
        };
      }

      // Generate template ID
      const templateId = options.templateId || this.generateTemplateId();

      // Create base template
      const template: DocumentTemplate = {
        id: templateId,
        name: templateData.name,
        description: templateData.description,
        category: templateData.category,
        type: templateData.type,
        content: templateData.content,
        metadata: {
          createdAt: new Date(),
          createdBy: options.createdBy || 'system',
          version: '1.0.0',
          tags: templateData.tags || [],
          visibility: options.visibility || 'private',
          usage: 0,
          rating: 0,
          aiEnhanced: false
        },
        structure: templateData.structure,
        variables: templateData.variables || [],
        validation: templateData.validation || {},
        customization: templateData.customization || {}
      };

      // AI enhancement if requested
      if (options.aiEnhancement !== false) {
        const aiEnhancement = await this.aiEnhancer.enhanceTemplate(template, options.aiOptions);
        if (aiEnhancement.enhanced) {
          template.content = aiEnhancement.content;
          template.metadata.aiEnhanced = true;
          template.metadata.aiEnhancement = aiEnhancement.metadata;
        }
      }

      // Store template
      this.templates.set(templateId, template);

      // Update category
      await this.updateCategory(template.category, templateId);

      // Record template creation
      await this.templateAnalytics.recordTemplateCreation(template);

      return {
        success: true,
        templateId,
        template,
        aiEnhanced: template.metadata.aiEnhanced
      };

    } catch (error) {
      throw new Error(`Failed to create template: ${error.message}`);
    }
  }

  /**
   * Get template suggestions based on context
   */
  async getTemplateSuggestions(
    context: TemplateContext,
    options: SuggestionOptions = {}
  ): Promise<TemplateSuggestion[]> {
    try {
      // Analyze context
      const contextAnalysis = await this.analyzeContext(context);

      // Generate suggestions
      const suggestions = await this.suggestionEngine.generateSuggestions(
        contextAnalysis,
        options
      );

      // Rank suggestions
      const rankedSuggestions = await this.rankSuggestions(suggestions, contextAnalysis);

      // Filter and limit results
      const filteredSuggestions = this.filterSuggestions(rankedSuggestions, options);

      return filteredSuggestions;

    } catch (error) {
      throw new Error(`Failed to get template suggestions: ${error.message}`);
    }
  }

  /**
   * Generate document from template
   */
  async generateDocument(
    templateId: string,
    variables: Record<string, any>,
    options: DocumentGenerationOptions = {}
  ): Promise<DocumentGenerationResult> {
    try {
      const template = this.templates.get(templateId);
      if (!template) {
        throw new Error(`Template ${templateId} not found`);
      }

      // Validate variables
      const validation = await this.validateVariables(template, variables);
      if (!validation.valid) {
        return {
          success: false,
          errors: validation.errors
        };
      }

      // Generate document content
      const generatedContent = await this.generateContent(template, variables, options);

      // Create document
      const document: BaseDocument = {
        id: this.generateDocumentId(),
        type: template.type,
        title: variables.title || template.name,
        description: variables.description || template.description,
        content: generatedContent,
        metadata: {
          status: 'draft',
          category: template.category,
          tags: template.metadata.tags,
          templateId: templateId,
          generatedAt: new Date(),
          generatedBy: options.generatedBy || 'system'
        },
        permissions: {
          editors: [options.generatedBy || 'system'],
          viewers: [],
          commenters: []
        },
        version: {
          current: '1.0.0',
          history: []
        },
        collaboration: {
          activeUsers: [],
          comments: [],
          suggestions: [],
          mentions: []
        },
        ai: {
          autoGenerated: true,
          confidence: 0.8,
          insights: [],
          suggestions: []
        },
        workflow: {
          status: 'draft',
          steps: [],
          currentStep: 0
        },
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: options.generatedBy || 'system',
        lastModifiedBy: options.generatedBy || 'system'
      };

      // Record template usage
      await this.templateAnalytics.recordTemplateUsage(templateId, document.id);

      return {
        success: true,
        document,
        template,
        variables,
        generationTime: Date.now()
      };

    } catch (error) {
      throw new Error(`Failed to generate document: ${error.message}`);
    }
  }

  /**
   * Get template analytics
   */
  async getTemplateAnalytics(
    templateId?: string,
    options: AnalyticsOptions = {}
  ): Promise<TemplateAnalyticsResult> {
    try {
      const analytics = await this.templateAnalytics.getAnalytics(templateId, options);

      return {
        totalTemplates: analytics.totalTemplates,
        popularTemplates: analytics.popularTemplates,
        usageStats: analytics.usageStats,
        categoryStats: analytics.categoryStats,
        aiEnhancementStats: analytics.aiEnhancementStats,
        recommendations: await this.generateTemplateRecommendations(analytics)
      };

    } catch (error) {
      throw new Error(`Failed to get template analytics: ${error.message}`);
    }
  }

  /**
   * Optimize template performance
   */
  async optimizeTemplates(
    options: OptimizationOptions = {}
  ): Promise<TemplateOptimizationResult> {
    try {
      const startTime = Date.now();
      const results: TemplateOptimizationResult = {
        templatesOptimized: 0,
        performanceImproved: false,
        processingTime: 0
      };

      // Optimize templates
      for (const [templateId, template] of this.templates) {
        const optimization = await this.optimizeTemplate(template, options);
        if (optimization.optimized) {
          results.templatesOptimized++;
        }
      }

      // Optimize categories
      await this.optimizeCategories();

      // Overall performance improvement
      results.performanceImproved = results.templatesOptimized > 0;
      results.processingTime = Date.now() - startTime;

      return results;

    } catch (error) {
      throw new Error(`Failed to optimize templates: ${error.message}`);
    }
  }

  /**
   * Search templates
   */
  async searchTemplates(
    query: string,
    options: TemplateSearchOptions = {}
  ): Promise<TemplateSearchResult> {
    try {
      const searchResults = await this.performTemplateSearch(query, options);

      return {
        templates: searchResults.templates,
        total: searchResults.total,
        facets: searchResults.facets,
        suggestions: searchResults.suggestions,
        processingTime: searchResults.processingTime
      };

    } catch (error) {
      throw new Error(`Failed to search templates: ${error.message}`);
    }
  }

  /**
   * Get template by ID
   */
  async getTemplate(templateId: string): Promise<DocumentTemplate | null> {
    return this.templates.get(templateId) || null;
  }

  /**
   * Update template
   */
  async updateTemplate(
    templateId: string,
    updates: Partial<DocumentTemplate>,
    options: UpdateOptions = {}
  ): Promise<UpdateResult> {
    try {
      const template = this.templates.get(templateId);
      if (!template) {
        return {
          success: false,
          reason: 'template_not_found'
        };
      }

      // Update template
      const updatedTemplate = {
        ...template,
        ...updates,
        metadata: {
          ...template.metadata,
          ...updates.metadata,
          updatedAt: new Date(),
          updatedBy: options.updatedBy || 'system'
        }
      };

      this.templates.set(templateId, updatedTemplate);

      // Record update
      await this.templateAnalytics.recordTemplateUpdate(templateId, updates);

      return {
        success: true,
        template: updatedTemplate
      };

    } catch (error) {
      throw new Error(`Failed to update template: ${error.message}`);
    }
  }

  /**
   * Delete template
   */
  async deleteTemplate(
    templateId: string,
    options: DeleteOptions = {}
  ): Promise<DeleteResult> {
    try {
      const template = this.templates.get(templateId);
      if (!template) {
        return {
          success: false,
          reason: 'template_not_found'
        };
      }

      // Check if template is in use
      if (options.force !== true) {
        const usage = await this.templateAnalytics.getTemplateUsage(templateId);
        if (usage > 0) {
          return {
            success: false,
            reason: 'template_in_use',
            usage
          };
        }
      }

      // Delete template
      this.templates.delete(templateId);

      // Update category
      await this.removeFromCategory(template.category, templateId);

      // Record deletion
      await this.templateAnalytics.recordTemplateDeletion(templateId);

      return {
        success: true,
        deletedAt: new Date()
      };

    } catch (error) {
      throw new Error(`Failed to delete template: ${error.message}`);
    }
  }

  // Private helper methods
  private async validateTemplateData(data: TemplateCreationData): Promise<ValidationResult> {
    const errors: string[] = [];

    if (!data.name) {
      errors.push('Template name is required');
    }

    if (!data.type) {
      errors.push('Template type is required');
    }

    if (!data.content) {
      errors.push('Template content is required');
    }

    if (!data.category) {
      errors.push('Template category is required');
    }

    return {
      valid: errors.length === 0,
      errors
    };
  }

  private async analyzeContext(context: TemplateContext): Promise<ContextAnalysis> {
    // Analyze context for template suggestions
    return {
      documentType: context.documentType,
      industry: context.industry,
      purpose: context.purpose,
      complexity: context.complexity,
      preferences: context.preferences
    };
  }

  private async rankSuggestions(
    suggestions: TemplateSuggestion[],
    context: ContextAnalysis
  ): Promise<TemplateSuggestion[]> {
    // Rank suggestions based on context and relevance
    return suggestions.sort((a, b) => b.relevance - a.relevance);
  }

  private filterSuggestions(
    suggestions: TemplateSuggestion[],
    options: SuggestionOptions
  ): TemplateSuggestion[] {
    // Filter suggestions based on options
    let filtered = suggestions;

    if (options.category) {
      filtered = filtered.filter(s => s.template.category === options.category);
    }

    if (options.type) {
      filtered = filtered.filter(s => s.template.type === options.type);
    }

    if (options.limit) {
      filtered = filtered.slice(0, options.limit);
    }

    return filtered;
  }

  private async validateVariables(
    template: DocumentTemplate,
    variables: Record<string, any>
  ): Promise<ValidationResult> {
    const errors: string[] = [];

    // Check required variables
    for (const variable of template.variables) {
      if (variable.required && !variables[variable.name]) {
        errors.push(`Required variable ${variable.name} is missing`);
      }
    }

    return {
      valid: errors.length === 0,
      errors
    };
  }

  private async generateContent(
    template: DocumentTemplate,
    variables: Record<string, any>,
    options: DocumentGenerationOptions
  ): Promise<any> {
    // Generate document content from template
    let content = template.content;

    // Replace variables
    for (const [key, value] of Object.entries(variables)) {
      const placeholder = `{{${key}}}`;
      content = content.replace(new RegExp(placeholder, 'g'), value);
    }

    return content;
  }

  private async generateTemplateRecommendations(analytics: any): Promise<string[]> {
    const recommendations: string[] = [];

    if (analytics.usageStats.lowUsageTemplates.length > 0) {
      recommendations.push('Consider removing or updating low-usage templates');
    }

    if (analytics.categoryStats.unbalancedCategories.length > 0) {
      recommendations.push('Consider rebalancing template categories');
    }

    return recommendations;
  }

  private async optimizeTemplate(
    template: DocumentTemplate,
    options: OptimizationOptions
  ): Promise<OptimizationResult> {
    // Optimize template performance
    return { optimized: false };
  }

  private async optimizeCategories(): Promise<void> {
    // Optimize template categories
  }

  private async performTemplateSearch(
    query: string,
    options: TemplateSearchOptions
  ): Promise<TemplateSearchResult> {
    // Perform template search
    return {
      templates: [],
      total: 0,
      facets: {},
      suggestions: [],
      processingTime: 0
    };
  }

  private async updateCategory(category: string, templateId: string): Promise<void> {
    // Update category with template
  }

  private async removeFromCategory(category: string, templateId: string): Promise<void> {
    // Remove template from category
  }

  private generateTemplateId(): string {
    return `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateDocumentId(): string {
    return `doc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private async initializeDefaultTemplates(): Promise<void> {
    // Initialize default templates
    const defaultTemplates: DocumentTemplate[] = [
      {
        id: 'business_plan_template',
        name: 'Business Plan Template',
        description: 'Comprehensive business plan template',
        category: 'business',
        type: 'business-plan',
        content: {
          format: 'structured',
          data: {
            sections: [
              {
                title: 'Executive Summary',
                content: '{{executive_summary}}',
                order: 1
              },
              {
                title: 'Company Description',
                content: '{{company_description}}',
                order: 2
              }
            ]
          }
        },
        metadata: {
          createdAt: new Date(),
          createdBy: 'system',
          version: '1.0.0',
          tags: ['business', 'planning'],
          visibility: 'public',
          usage: 0,
          rating: 0,
          aiEnhanced: false
        },
        structure: {
          sections: [],
          order: []
        },
        variables: [
          {
            name: 'executive_summary',
            type: 'text',
            required: true,
            description: 'Executive summary of the business'
          },
          {
            name: 'company_description',
            type: 'text',
            required: true,
            description: 'Description of the company'
          }
        ],
        validation: {},
        customization: {}
      }
    ];

    for (const template of defaultTemplates) {
      this.templates.set(template.id, template);
    }
  }
}

// Supporting classes
export class AITemplateEnhancer {
  async enhanceTemplate(
    template: DocumentTemplate,
    options: AIEnhancementOptions = {}
  ): Promise<AIEnhancementResult> {
    // Implement AI template enhancement
    return {
      enhanced: false,
      content: template.content,
      metadata: {}
    };
  }
}

export class TemplateAnalytics {
  async recordTemplateCreation(template: DocumentTemplate): Promise<void> {
    // Record template creation
  }

  async recordTemplateUsage(templateId: string, documentId: string): Promise<void> {
    // Record template usage
  }

  async recordTemplateUpdate(templateId: string, updates: any): Promise<void> {
    // Record template update
  }

  async recordTemplateDeletion(templateId: string): Promise<void> {
    // Record template deletion
  }

  async getAnalytics(templateId?: string, options: AnalyticsOptions = {}): Promise<any> {
    // Get template analytics
    return {
      totalTemplates: 0,
      popularTemplates: [],
      usageStats: {},
      categoryStats: {},
      aiEnhancementStats: {}
    };
  }

  async getTemplateUsage(templateId: string): Promise<number> {
    // Get template usage count
    return 0;
  }
}

export class TemplateSuggestionEngine {
  async generateSuggestions(
    context: ContextAnalysis,
    options: SuggestionOptions
  ): Promise<TemplateSuggestion[]> {
    // Generate template suggestions
    return [];
  }
}

// Supporting interfaces
export interface TemplateCreationData {
  name: string;
  description: string;
  category: string;
  type: DocumentType;
  content: any;
  structure?: any;
  variables?: TemplateVariable[];
  validation?: any;
  customization?: any;
  tags?: string[];
}

export interface TemplateCreationOptions {
  templateId?: string;
  createdBy?: string;
  visibility?: 'public' | 'private' | 'shared';
  aiEnhancement?: boolean;
  aiOptions?: AIEnhancementOptions;
}

export interface TemplateCreationResult {
  success: boolean;
  templateId?: string;
  template?: DocumentTemplate;
  aiEnhanced?: boolean;
  errors?: string[];
}

export interface TemplateContext {
  documentType: DocumentType;
  industry?: string;
  purpose?: string;
  complexity?: 'simple' | 'moderate' | 'complex';
  preferences?: Record<string, any>;
}

export interface SuggestionOptions {
  category?: string;
  type?: DocumentType;
  limit?: number;
  includeAI?: boolean;
}

export interface TemplateSuggestion {
  template: DocumentTemplate;
  relevance: number;
  reason: string;
  confidence: number;
}

export interface DocumentGenerationOptions {
  generatedBy?: string;
  includeAI?: boolean;
  customization?: Record<string, any>;
}

export interface DocumentGenerationResult {
  success: boolean;
  document?: BaseDocument;
  template?: DocumentTemplate;
  variables?: Record<string, any>;
  generationTime?: number;
  errors?: string[];
}

export interface AnalyticsOptions {
  timeRange?: DateRange;
  includeDetails?: boolean;
}

export interface DateRange {
  start: Date;
  end: Date;
}

export interface TemplateAnalyticsResult {
  totalTemplates: number;
  popularTemplates: TemplateUsage[];
  usageStats: UsageStats;
  categoryStats: CategoryStats;
  aiEnhancementStats: AIEnhancementStats;
  recommendations: string[];
}

export interface TemplateUsage {
  templateId: string;
  name: string;
  usage: number;
  rating: number;
}

export interface UsageStats {
  totalUsage: number;
  averageUsage: number;
  lowUsageTemplates: string[];
  highUsageTemplates: string[];
}

export interface CategoryStats {
  categories: Record<string, number>;
  unbalancedCategories: string[];
}

export interface AIEnhancementStats {
  enhancedTemplates: number;
  enhancementRate: number;
  averageImprovement: number;
}

export interface OptimizationOptions {
  includeAI?: boolean;
  performanceOnly?: boolean;
}

export interface TemplateOptimizationResult {
  templatesOptimized: number;
  performanceImproved: boolean;
  processingTime: number;
}

export interface TemplateSearchOptions {
  category?: string;
  type?: DocumentType;
  tags?: string[];
  limit?: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

export interface TemplateSearchResult {
  templates: DocumentTemplate[];
  total: number;
  facets: Record<string, any>;
  suggestions: string[];
  processingTime: number;
}

export interface UpdateOptions {
  updatedBy?: string;
  version?: string;
}

export interface UpdateResult {
  success: boolean;
  template?: DocumentTemplate;
  reason?: string;
}

export interface DeleteOptions {
  force?: boolean;
}

export interface DeleteResult {
  success: boolean;
  deletedAt?: Date;
  reason?: string;
  usage?: number;
}

export interface ValidationResult {
  valid: boolean;
  errors: string[];
}

export interface ContextAnalysis {
  documentType: DocumentType;
  industry?: string;
  purpose?: string;
  complexity?: string;
  preferences?: Record<string, any>;
}

export interface OptimizationResult {
  optimized: boolean;
  improvement?: number;
  recommendations?: string[];
}

export interface AIEnhancementOptions {
  enhanceContent?: boolean;
  enhanceStructure?: boolean;
  enhanceVariables?: boolean;
}

export interface AIEnhancementResult {
  enhanced: boolean;
  content: any;
  metadata: Record<string, any>;
}

export interface TemplateVariable {
  name: string;
  type: 'text' | 'number' | 'date' | 'boolean' | 'select';
  required: boolean;
  description: string;
  defaultValue?: any;
  options?: string[];
}


=== FILE: client/src/features/documents/performance/PerformanceOptimizer.ts ===

import { BaseDocument } from '../types/document.types';

/**
 * Performance Optimizer - Advanced performance optimization system
 * 
 * This system provides:
 * - Code splitting and lazy loading
 * - Intelligent caching strategies
 * - Performance monitoring and analytics
 * - Automatic optimization recommendations
 * - Resource management and cleanup
 */
export class PerformanceOptimizer {
  private cacheManager: CacheManager;
  private bundleAnalyzer: BundleAnalyzer;
  private performanceMonitor: PerformanceMonitor;
  private resourceManager: ResourceManager;
  private optimizationEngine: OptimizationEngine;

  constructor() {
    this.cacheManager = new CacheManager();
    this.bundleAnalyzer = new BundleAnalyzer();
    this.performanceMonitor = new PerformanceMonitor();
    this.resourceManager = new ResourceManager();
    this.optimizationEngine = new OptimizationEngine();
  }

  /**
   * Optimize application performance
   */
  async optimizePerformance(
    options: OptimizationOptions = {}
  ): Promise<OptimizationResult> {
    const startTime = Date.now();
    
    try {
      const results: OptimizationResult = {
        cacheOptimized: false,
        bundleOptimized: false,
        lazyLoadingOptimized: false,
        performanceImproved: false,
        processingTime: 0
      };

      // 1. Optimize caching
      if (options.optimizeCache !== false) {
        const cacheResult = await this.optimizeCaching(options.cacheOptions);
        results.cacheOptimized = cacheResult.optimized;
      }

      // 2. Optimize bundle splitting
      if (options.optimizeBundles !== false) {
        const bundleResult = await this.optimizeBundleSplitting(options.bundleOptions);
        results.bundleOptimized = bundleResult.optimized;
      }

      // 3. Optimize lazy loading
      if (options.optimizeLazyLoading !== false) {
        const lazyLoadingResult = await this.optimizeLazyLoading(options.lazyLoadingOptions);
        results.lazyLoadingOptimized = lazyLoadingResult.optimized;
      }

      // 4. Optimize resource management
      if (options.optimizeResources !== false) {
        const resourceResult = await this.optimizeResourceManagement(options.resourceOptions);
        results.resourceOptimized = resourceResult.optimized;
      }

      // 5. Overall performance improvement
      results.performanceImproved = results.cacheOptimized && 
                                  results.bundleOptimized && 
                                  results.lazyLoadingOptimized;

      results.processingTime = Date.now() - startTime;

      // Record optimization
      await this.performanceMonitor.recordOptimization(results);

      return results;

    } catch (error) {
      throw new Error(`Performance optimization failed: ${error.message}`);
    }
  }

  /**
   * Implement code splitting strategy
   */
  async implementCodeSplitting(
    strategy: CodeSplittingStrategy,
    options: CodeSplittingOptions = {}
  ): Promise<CodeSplittingResult> {
    try {
      const startTime = Date.now();

      // Analyze current bundle
      const bundleAnalysis = await this.bundleAnalyzer.analyzeBundles();

      // Generate splitting plan
      const splittingPlan = await this.generateSplittingPlan(bundleAnalysis, strategy);

      // Implement splitting
      const implementationResult = await this.implementSplitting(splittingPlan, options);

      // Verify splitting
      const verificationResult = await this.verifySplitting(implementationResult);

      return {
        success: verificationResult.valid,
        chunks: implementationResult.chunks,
        bundleSize: implementationResult.bundleSize,
        loadTime: implementationResult.loadTime,
        processingTime: Date.now() - startTime,
        recommendations: verificationResult.recommendations
      };

    } catch (error) {
      throw new Error(`Code splitting implementation failed: ${error.message}`);
    }
  }

  /**
   * Implement lazy loading strategy
   */
  async implementLazyLoading(
    strategy: LazyLoadingStrategy,
    options: LazyLoadingOptions = {}
  ): Promise<LazyLoadingResult> {
    try {
      const startTime = Date.now();

      // Analyze components for lazy loading
      const componentAnalysis = await this.analyzeComponentsForLazyLoading();

      // Generate lazy loading plan
      const lazyLoadingPlan = await this.generateLazyLoadingPlan(componentAnalysis, strategy);

      // Implement lazy loading
      const implementationResult = await this.implementLazyLoading(lazyLoadingPlan, options);

      // Optimize loading performance
      const optimizationResult = await this.optimizeLazyLoadingPerformance(implementationResult);

      return {
        success: true,
        lazyLoadedComponents: implementationResult.components,
        initialBundleSize: implementationResult.initialBundleSize,
        loadTimeImprovement: optimizationResult.improvement,
        processingTime: Date.now() - startTime,
        recommendations: optimizationResult.recommendations
      };

    } catch (error) {
      throw new Error(`Lazy loading implementation failed: ${error.message}`);
    }
  }

  /**
   * Implement intelligent caching
   */
  async implementIntelligentCaching(
    strategy: CachingStrategy,
    options: CachingOptions = {}
  ): Promise<CachingResult> {
    try {
      const startTime = Date.now();

      // Analyze cache usage patterns
      const cacheAnalysis = await this.analyzeCacheUsage();

      // Generate caching strategy
      const cachingStrategy = await this.generateCachingStrategy(cacheAnalysis, strategy);

      // Implement caching
      const implementationResult = await this.implementCaching(cachingStrategy, options);

      // Optimize cache performance
      const optimizationResult = await this.optimizeCachePerformance(implementationResult);

      return {
        success: true,
        cacheHitRate: optimizationResult.hitRate,
        cacheSize: optimizationResult.size,
        performanceImprovement: optimizationResult.improvement,
        processingTime: Date.now() - startTime,
        recommendations: optimizationResult.recommendations
      };

    } catch (error) {
      throw new Error(`Intelligent caching implementation failed: ${error.message}`);
    }
  }

  /**
   * Get performance analytics
   */
  async getPerformanceAnalytics(
    options: AnalyticsOptions = {}
  ): Promise<PerformanceAnalytics> {
    try {
      const analytics = await this.performanceMonitor.getAnalytics(options);

      return {
        loadTime: analytics.loadTime,
        renderTime: analytics.renderTime,
        memoryUsage: analytics.memoryUsage,
        cachePerformance: analytics.cachePerformance,
        bundlePerformance: analytics.bundlePerformance,
        userExperience: analytics.userExperience,
        recommendations: await this.generatePerformanceRecommendations(analytics)
      };

    } catch (error) {
      throw new Error(`Failed to get performance analytics: ${error.message}`);
    }
  }

  /**
   * Monitor performance in real-time
   */
  async startPerformanceMonitoring(
    options: MonitoringOptions = {}
  ): Promise<PerformanceMonitoringResult> {
    try {
      const monitoring = await this.performanceMonitor.startMonitoring(options);

      return {
        success: true,
        monitoringId: monitoring.id,
        metrics: monitoring.metrics,
        alerts: monitoring.alerts,
        dashboard: monitoring.dashboard
      };

    } catch (error) {
      throw new Error(`Failed to start performance monitoring: ${error.message}`);
    }
  }

  /**
   * Optimize specific performance metrics
   */
  async optimizeMetrics(
    metrics: PerformanceMetric[],
    options: MetricOptimizationOptions = {}
  ): Promise<MetricOptimizationResult> {
    try {
      const startTime = Date.now();
      const results: MetricOptimizationResult = {
        optimized: [],
        failed: [],
        processingTime: 0
      };

      for (const metric of metrics) {
        try {
          const optimization = await this.optimizeMetric(metric, options);
          if (optimization.optimized) {
            results.optimized.push({
              metric,
              improvement: optimization.improvement,
              optimization: optimization.optimization
            });
          } else {
            results.failed.push({
              metric,
              reason: optimization.reason
            });
          }
        } catch (error) {
          results.failed.push({
            metric,
            reason: error.message
          });
        }
      }

      results.processingTime = Date.now() - startTime;
      return results;

    } catch (error) {
      throw new Error(`Metric optimization failed: ${error.message}`);
    }
  }

  // Private helper methods
  private async optimizeCaching(options: CacheOptimizationOptions = {}): Promise<OptimizationResult> {
    try {
      // Implement cache optimization
      const cacheResult = await this.cacheManager.optimize(options);
      
      return {
        cacheOptimized: cacheResult.optimized,
        bundleOptimized: false,
        lazyLoadingOptimized: false,
        performanceImproved: cacheResult.optimized,
        processingTime: 0
      };
    } catch (error) {
      return {
        cacheOptimized: false,
        bundleOptimized: false,
        lazyLoadingOptimized: false,
        performanceImproved: false,
        processingTime: 0
      };
    }
  }

  private async optimizeBundleSplitting(options: BundleOptimizationOptions = {}): Promise<OptimizationResult> {
    try {
      // Implement bundle optimization
      const bundleResult = await this.bundleAnalyzer.optimize(options);
      
      return {
        cacheOptimized: false,
        bundleOptimized: bundleResult.optimized,
        lazyLoadingOptimized: false,
        performanceImproved: bundleResult.optimized,
        processingTime: 0
      };
    } catch (error) {
      return {
        cacheOptimized: false,
        bundleOptimized: false,
        lazyLoadingOptimized: false,
        performanceImproved: false,
        processingTime: 0
      };
    }
  }

  private async optimizeLazyLoading(options: LazyLoadingOptimizationOptions = {}): Promise<OptimizationResult> {
    try {
      // Implement lazy loading optimization
      const lazyLoadingResult = await this.optimizationEngine.optimizeLazyLoading(options);
      
      return {
        cacheOptimized: false,
        bundleOptimized: false,
        lazyLoadingOptimized: lazyLoadingResult.optimized,
        performanceImproved: lazyLoadingResult.optimized,
        processingTime: 0
      };
    } catch (error) {
      return {
        cacheOptimized: false,
        bundleOptimized: false,
        lazyLoadingOptimized: false,
        performanceImproved: false,
        processingTime: 0
      };
    }
  }

  private async optimizeResourceManagement(options: ResourceOptimizationOptions = {}): Promise<OptimizationResult> {
    try {
      // Implement resource optimization
      const resourceResult = await this.resourceManager.optimize(options);
      
      return {
        cacheOptimized: false,
        bundleOptimized: false,
        lazyLoadingOptimized: false,
        resourceOptimized: resourceResult.optimized,
        performanceImproved: resourceResult.optimized,
        processingTime: 0
      };
    } catch (error) {
      return {
        cacheOptimized: false,
        bundleOptimized: false,
        lazyLoadingOptimized: false,
        performanceImproved: false,
        processingTime: 0
      };
    }
  }

  private async generateSplittingPlan(
    bundleAnalysis: BundleAnalysis,
    strategy: CodeSplittingStrategy
  ): Promise<SplittingPlan> {
    // Generate code splitting plan
    return {
      chunks: [],
      strategy,
      estimatedImprovement: 0
    };
  }

  private async implementSplitting(
    plan: SplittingPlan,
    options: CodeSplittingOptions
  ): Promise<SplittingImplementation> {
    // Implement code splitting
    return {
      chunks: [],
      bundleSize: 0,
      loadTime: 0
    };
  }

  private async verifySplitting(implementation: SplittingImplementation): Promise<SplittingVerification> {
    // Verify code splitting implementation
    return {
      valid: true,
      recommendations: []
    };
  }

  private async analyzeComponentsForLazyLoading(): Promise<ComponentAnalysis> {
    // Analyze components for lazy loading
    return {
      components: [],
      dependencies: [],
      loadTime: 0
    };
  }

  private async generateLazyLoadingPlan(
    analysis: ComponentAnalysis,
    strategy: LazyLoadingStrategy
  ): Promise<LazyLoadingPlan> {
    // Generate lazy loading plan
    return {
      components: [],
      strategy,
      estimatedImprovement: 0
    };
  }

  private async implementLazyLoading(
    plan: LazyLoadingPlan,
    options: LazyLoadingOptions
  ): Promise<LazyLoadingImplementation> {
    // Implement lazy loading
    return {
      components: [],
      initialBundleSize: 0
    };
  }

  private async optimizeLazyLoadingPerformance(
    implementation: LazyLoadingImplementation
  ): Promise<LazyLoadingOptimization> {
    // Optimize lazy loading performance
    return {
      improvement: 0,
      recommendations: []
    };
  }

  private async analyzeCacheUsage(): Promise<CacheAnalysis> {
    // Analyze cache usage
    return {
      hitRate: 0,
      missRate: 0,
      size: 0,
      patterns: []
    };
  }

  private async generateCachingStrategy(
    analysis: CacheAnalysis,
    strategy: CachingStrategy
  ): Promise<CachingStrategyPlan> {
    // Generate caching strategy
    return {
      strategy,
      rules: [],
      estimatedImprovement: 0
    };
  }

  private async implementCaching(
    strategy: CachingStrategyPlan,
    options: CachingOptions
  ): Promise<CachingImplementation> {
    // Implement caching
    return {
      rules: [],
      hitRate: 0,
      size: 0
    };
  }

  private async optimizeCachePerformance(
    implementation: CachingImplementation
  ): Promise<CacheOptimization> {
    // Optimize cache performance
    return {
      hitRate: 0,
      size: 0,
      improvement: 0,
      recommendations: []
    };
  }

  private async generatePerformanceRecommendations(analytics: any): Promise<string[]> {
    // Generate performance recommendations
    return [];
  }

  private async optimizeMetric(
    metric: PerformanceMetric,
    options: MetricOptimizationOptions
  ): Promise<MetricOptimization> {
    // Optimize specific metric
    return {
      optimized: false,
      improvement: 0,
      optimization: null,
      reason: 'Not implemented'
    };
  }
}

// Supporting classes
export class CacheManager {
  async optimize(options: CacheOptimizationOptions): Promise<{ optimized: boolean }> {
    // Implement cache optimization
    return { optimized: true };
  }
}

export class BundleAnalyzer {
  async analyzeBundles(): Promise<BundleAnalysis> {
    // Analyze bundles
    return {
      bundles: [],
      totalSize: 0,
      dependencies: []
    };
  }

  async optimize(options: BundleOptimizationOptions): Promise<{ optimized: boolean }> {
    // Implement bundle optimization
    return { optimized: true };
  }
}

export class PerformanceMonitor {
  async recordOptimization(results: OptimizationResult): Promise<void> {
    // Record optimization results
  }

  async getAnalytics(options: AnalyticsOptions): Promise<any> {
    // Get performance analytics
    return {
      loadTime: 0,
      renderTime: 0,
      memoryUsage: 0,
      cachePerformance: {},
      bundlePerformance: {},
      userExperience: {}
    };
  }

  async startMonitoring(options: MonitoringOptions): Promise<any> {
    // Start performance monitoring
    return {
      id: 'monitoring_id',
      metrics: {},
      alerts: [],
      dashboard: {}
    };
  }
}

export class ResourceManager {
  async optimize(options: ResourceOptimizationOptions): Promise<{ optimized: boolean }> {
    // Implement resource optimization
    return { optimized: true };
  }
}

export class OptimizationEngine {
  async optimizeLazyLoading(options: LazyLoadingOptimizationOptions): Promise<{ optimized: boolean }> {
    // Implement lazy loading optimization
    return { optimized: true };
  }
}

// Supporting interfaces
export interface OptimizationOptions {
  optimizeCache?: boolean;
  optimizeBundles?: boolean;
  optimizeLazyLoading?: boolean;
  optimizeResources?: boolean;
  cacheOptions?: CacheOptimizationOptions;
  bundleOptions?: BundleOptimizationOptions;
  lazyLoadingOptions?: LazyLoadingOptimizationOptions;
  resourceOptions?: ResourceOptimizationOptions;
}

export interface OptimizationResult {
  cacheOptimized: boolean;
  bundleOptimized: boolean;
  lazyLoadingOptimized: boolean;
  resourceOptimized?: boolean;
  performanceImproved: boolean;
  processingTime: number;
}

export interface CodeSplittingStrategy {
  type: 'route' | 'feature' | 'component' | 'vendor';
  chunks: string[];
  minSize: number;
  maxSize: number;
}

export interface CodeSplittingOptions {
  strategy: CodeSplittingStrategy;
  minChunkSize?: number;
  maxChunkSize?: number;
  exclude?: string[];
}

export interface CodeSplittingResult {
  success: boolean;
  chunks: string[];
  bundleSize: number;
  loadTime: number;
  processingTime: number;
  recommendations: string[];
}

export interface LazyLoadingStrategy {
  type: 'route' | 'component' | 'feature';
  trigger: 'scroll' | 'hover' | 'click' | 'timeout';
  threshold: number;
}

export interface LazyLoadingOptions {
  strategy: LazyLoadingStrategy;
  preload?: boolean;
  fallback?: string;
}

export interface LazyLoadingResult {
  success: boolean;
  lazyLoadedComponents: string[];
  initialBundleSize: number;
  loadTimeImprovement: number;
  processingTime: number;
  recommendations: string[];
}

export interface CachingStrategy {
  type: 'memory' | 'disk' | 'hybrid';
  ttl: number;
  maxSize: number;
  eviction: 'lru' | 'lfu' | 'fifo';
}

export interface CachingOptions {
  strategy: CachingStrategy;
  compression?: boolean;
  encryption?: boolean;
}

export interface CachingResult {
  success: boolean;
  cacheHitRate: number;
  cacheSize: number;
  performanceImprovement: number;
  processingTime: number;
  recommendations: string[];
}

export interface AnalyticsOptions {
  timeRange?: DateRange;
  includeDetails?: boolean;
}

export interface DateRange {
  start: Date;
  end: Date;
}

export interface PerformanceAnalytics {
  loadTime: number;
  renderTime: number;
  memoryUsage: number;
  cachePerformance: any;
  bundlePerformance: any;
  userExperience: any;
  recommendations: string[];
}

export interface MonitoringOptions {
  interval?: number;
  metrics?: string[];
  alerts?: AlertConfiguration[];
}

export interface AlertConfiguration {
  metric: string;
  threshold: number;
  condition: 'greater' | 'less' | 'equal';
  action: 'log' | 'notify' | 'auto_optimize';
}

export interface PerformanceMonitoringResult {
  success: boolean;
  monitoringId: string;
  metrics: any;
  alerts: any;
  dashboard: any;
}

export interface PerformanceMetric {
  name: string;
  type: 'load_time' | 'render_time' | 'memory_usage' | 'cache_hit_rate';
  target: number;
  current: number;
}

export interface MetricOptimizationOptions {
  target?: number;
  strategy?: string;
}

export interface MetricOptimizationResult {
  optimized: Array<{
    metric: PerformanceMetric;
    improvement: number;
    optimization: any;
  }>;
  failed: Array<{
    metric: PerformanceMetric;
    reason: string;
  }>;
  processingTime: number;
}

export interface MetricOptimization {
  optimized: boolean;
  improvement: number;
  optimization: any;
  reason?: string;
}

export interface CacheOptimizationOptions {
  maxSize?: number;
  ttl?: number;
  compression?: boolean;
}

export interface BundleOptimizationOptions {
  minSize?: number;
  maxSize?: number;
  compression?: boolean;
  treeShaking?: boolean;
}

export interface LazyLoadingOptimizationOptions {
  threshold?: number;
  preload?: boolean;
  fallback?: string;
}

export interface ResourceOptimizationOptions {
  compression?: boolean;
  minification?: boolean;
  optimization?: boolean;
}

export interface BundleAnalysis {
  bundles: BundleInfo[];
  totalSize: number;
  dependencies: DependencyInfo[];
}

export interface BundleInfo {
  name: string;
  size: number;
  modules: string[];
  dependencies: string[];
}

export interface DependencyInfo {
  name: string;
  size: number;
  usedBy: string[];
}

export interface SplittingPlan {
  chunks: ChunkInfo[];
  strategy: CodeSplittingStrategy;
  estimatedImprovement: number;
}

export interface ChunkInfo {
  name: string;
  modules: string[];
  size: number;
  dependencies: string[];
}

export interface SplittingImplementation {
  chunks: string[];
  bundleSize: number;
  loadTime: number;
}

export interface SplittingVerification {
  valid: boolean;
  recommendations: string[];
}

export interface ComponentAnalysis {
  components: ComponentInfo[];
  dependencies: string[];
  loadTime: number;
}

export interface ComponentInfo {
  name: string;
  size: number;
  dependencies: string[];
  loadTime: number;
}

export interface LazyLoadingPlan {
  components: string[];
  strategy: LazyLoadingStrategy;
  estimatedImprovement: number;
}

export interface LazyLoadingImplementation {
  components: string[];
  initialBundleSize: number;
}

export interface LazyLoadingOptimization {
  improvement: number;
  recommendations: string[];
}

export interface CacheAnalysis {
  hitRate: number;
  missRate: number;
  size: number;
  patterns: CachePattern[];
}

export interface CachePattern {
  type: string;
  frequency: number;
  size: number;
}

export interface CachingStrategyPlan {
  strategy: CachingStrategy;
  rules: CacheRule[];
  estimatedImprovement: number;
}

export interface CacheRule {
  pattern: string;
  ttl: number;
  size: number;
  eviction: string;
}

export interface CachingImplementation {
  rules: CacheRule[];
  hitRate: number;
  size: number;
}

export interface CacheOptimization {
  hitRate: number;
  size: number;
  improvement: number;
  recommendations: string[];
}


=== FILE: client/src/features/documents/proposals/ProposalAutomation.ts ===

import { 
  ProposalDocument, 
  RFPProposal, 
  RFIProposal, 
  RFQProposal,
  ProposalSubtype,
  ProposalRequirement,
  ProposalResponse,
  ComplianceCheck
} from '../types/proposal/ProposalDocument';
import { AIDocumentService } from '../ai/AIDocumentService';
import { 
  AIAnalysisResult, 
  AIGenerationResult, 
  AISuggestion,
  ComplianceResult 
} from '../types/ai.types';

/**
 * Proposal Automation Engine - Unified proposal system for RFP/RFI/RFQ
 * 
 * This engine provides:
 * - Automated proposal discovery and matching
 * - AI-powered response generation
 * - Compliance checking and validation
 * - Template-based proposal creation
 * - Workflow automation
 * - Quality scoring and optimization
 */
export class ProposalAutomation {
  private aiService: AIDocumentService;
  private proposalTemplates: Map<string, any> = new Map();
  private automationRules: Map<string, any> = new Map();
  private complianceRules: Map<string, any> = new Map();

  constructor(aiService: AIDocumentService) {
    this.aiService = aiService;
    this.initializeTemplates();
    this.initializeAutomationRules();
    this.initializeComplianceRules();
  }

  /**
   * Discover and match proposal opportunities
   */
  async discoverOpportunities(
    criteria: OpportunityCriteria
  ): Promise<ProposalOpportunity[]> {
    try {
      // This would integrate with external APIs and databases
      // For now, return mock opportunities
      const opportunities: ProposalOpportunity[] = [
        {
          id: 'opp-1',
          title: 'Software Development RFP',
          organization: 'Tech Corp',
          type: 'rfp',
          description: 'Looking for software development services',
          deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
          budget: 100000,
          currency: 'USD',
          matchScore: 85,
          requirements: [
            '5+ years experience',
            'Agile methodology',
            'Cloud expertise'
          ],
          keywords: ['software', 'development', 'agile', 'cloud'],
          status: 'open',
          priority: 'high',
          complexity: 'medium',
          aiInsights: [],
          lastUpdated: new Date()
        },
        {
          id: 'opp-2',
          title: 'IT Services RFI',
          organization: 'Enterprise Inc',
          type: 'rfi',
          description: 'Information gathering for IT services',
          deadline: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),
          budget: 50000,
          currency: 'USD',
          matchScore: 75,
          requirements: [
            'IT infrastructure',
            'Security expertise',
            '24/7 support'
          ],
          keywords: ['IT', 'infrastructure', 'security', 'support'],
          status: 'open',
          priority: 'medium',
          complexity: 'low',
          aiInsights: [],
          lastUpdated: new Date()
        }
      ];

      // Filter opportunities based on criteria
      const filteredOpportunities = opportunities.filter(opp => {
        if (criteria.types && !criteria.types.includes(opp.type)) return false;
        if (criteria.minBudget && opp.budget < criteria.minBudget) return false;
        if (criteria.maxBudget && opp.budget > criteria.maxBudget) return false;
        if (criteria.minMatchScore && opp.matchScore < criteria.minMatchScore) return false;
        if (criteria.keywords && !this.matchesKeywords(opp, criteria.keywords)) return false;
        return true;
      });

      // Sort by match score
      return filteredOpportunities.sort((a, b) => b.matchScore - a.matchScore);

    } catch (error) {
      throw new Error(`Failed to discover opportunities: ${error.message}`);
    }
  }

  /**
   * Create proposal from opportunity
   */
  async createProposalFromOpportunity(
    opportunityId: string,
    userId: string,
    options: ProposalCreationOptions = {}
  ): Promise<ProposalDocument> {
    try {
      // Get opportunity details
      const opportunity = await this.getOpportunity(opportunityId);
      if (!opportunity) {
        throw new Error('Opportunity not found');
      }

      // Create base proposal
      let proposal: ProposalDocument;
      
      switch (opportunity.type) {
        case 'rfp':
          proposal = await this.createRFPProposal(opportunity, userId, options);
          break;
        case 'rfi':
          proposal = await this.createRFIProposal(opportunity, userId, options);
          break;
        case 'rfq':
          proposal = await this.createRFQProposal(opportunity, userId, options);
          break;
        default:
          throw new Error(`Unsupported proposal type: ${opportunity.type}`);
      }

      // Apply AI enhancements if enabled
      if (options.aiAssisted) {
        proposal = await this.enhanceProposalWithAI(proposal, opportunity);
      }

      // Apply automation rules
      proposal = await this.applyAutomationRules(proposal, opportunity);

      return proposal;

    } catch (error) {
      throw new Error(`Failed to create proposal: ${error.message}`);
    }
  }

  /**
   * Generate AI-powered proposal responses
   */
  async generateProposalResponses(
    proposal: ProposalDocument,
    requirements: ProposalRequirement[]
  ): Promise<ProposalResponse[]> {
    try {
      const responses: ProposalResponse[] = [];

      for (const requirement of requirements) {
        // Generate response using AI
        const aiResult = await this.aiService.generateContent(proposal, 
          `Generate a response for: ${requirement.description}`, {
            context: {
              requirement,
              proposal,
              organization: proposal.metadata.organization
            }
          }
        );

        const response: ProposalResponse = {
          id: this.generateResponseId(),
          requirementId: requirement.id,
          content: aiResult.content,
          status: 'draft',
          quality: this.calculateResponseQuality(aiResult.content),
          completeness: this.calculateResponseCompleteness(aiResult.content, requirement),
          compliance: 0, // Will be calculated by compliance checker
          aiGenerated: true,
          lastModified: new Date(),
          reviewer: undefined,
          feedback: undefined
        };

        responses.push(response);
      }

      return responses;

    } catch (error) {
      throw new Error(`Failed to generate proposal responses: ${error.message}`);
    }
  }

  /**
   * Check proposal compliance
   */
  async checkProposalCompliance(
    proposal: ProposalDocument
  ): Promise<ComplianceResult> {
    try {
      const rules = this.complianceRules.get(proposal.subtype || 'proposal') || [];
      
      // Check each compliance rule
      const violations = [];
      const recommendations = [];

      for (const rule of rules) {
        const violation = await this.checkComplianceRule(proposal, rule);
        if (violation) {
          violations.push(violation);
        }
      }

      // Generate recommendations
      if (violations.length > 0) {
        recommendations.push(...await this.generateComplianceRecommendations(violations));
      }

      const score = Math.max(0, 100 - (violations.length * 10));
      const compliant = violations.length === 0;

      return {
        compliant,
        score,
        violations,
        recommendations,
        timestamp: new Date()
      };

    } catch (error) {
      throw new Error(`Failed to check proposal compliance: ${error.message}`);
    }
  }

  /**
   * Optimize proposal for better scoring
   */
  async optimizeProposal(
    proposal: ProposalDocument
  ): Promise<{
    optimizedProposal: ProposalDocument;
    improvements: AISuggestion[];
    scoreImprovement: number;
  }> {
    try {
      // Analyze current proposal
      const analysis = await this.aiService.analyzeDocument(proposal);
      
      // Get optimization suggestions
      const suggestions = await this.aiService.getSuggestions(proposal);
      
      // Apply optimizations
      const optimizedProposal = await this.applyOptimizations(proposal, suggestions);
      
      // Calculate score improvement
      const optimizedAnalysis = await this.aiService.analyzeDocument(optimizedProposal);
      const scoreImprovement = optimizedAnalysis.overallScore - analysis.overallScore;

      return {
        optimizedProposal,
        improvements: suggestions,
        scoreImprovement
      };

    } catch (error) {
      throw new Error(`Failed to optimize proposal: ${error.message}`);
    }
  }

  /**
   * Generate proposal templates
   */
  async generateProposalTemplate(
    type: ProposalSubtype,
    industry: string,
    requirements: string[]
  ): Promise<ProposalTemplate> {
    try {
      // Generate template using AI
      const aiResult = await this.aiService.generateContent(
        {} as ProposalDocument, // Empty document for template generation
        `Generate a ${type} proposal template for ${industry} industry with requirements: ${requirements.join(', ')}`,
        {
          context: {
            type,
            industry,
            requirements
          }
        }
      );

      const template: ProposalTemplate = {
        id: this.generateTemplateId(),
        name: `${type.toUpperCase()} Template - ${industry}`,
        description: `AI-generated ${type} template for ${industry}`,
        type: 'proposal',
        subtype,
        content: {
          format: 'structured',
          data: {
            sections: this.parseTemplateSections(aiResult.content),
            requirements: [],
            responses: [],
            attachments: [],
            compliance: []
          }
        },
        metadata: {
          category: 'proposal',
          tags: [type, industry, 'template'],
          status: 'draft',
          visibility: 'public',
          language: 'en',
          wordCount: 0,
          pageCount: 0,
          readingTime: 0,
          complexity: 'medium',
          creationMethod: 'ai-generated'
        },
        isPublic: true,
        createdBy: 'system',
        createdAt: new Date(),
        usageCount: 0,
        rating: 0
      };

      return template;

    } catch (error) {
      throw new Error(`Failed to generate proposal template: ${error.message}`);
    }
  }

  /**
   * Get proposal analytics
   */
  async getProposalAnalytics(
    proposalId: string
  ): Promise<ProposalAnalytics> {
    try {
      // This would integrate with analytics service
      return {
        views: 0,
        edits: 0,
        collaborators: 0,
        comments: 0,
        suggestions: 0,
        lastActivity: new Date(),
        aiScore: 0,
        completionRate: 0,
        timeSpent: 0,
        shareCount: 0,
        downloadCount: 0,
        winProbability: 0,
        competitiveAdvantage: 0,
        riskFactors: []
      };

    } catch (error) {
      throw new Error(`Failed to get proposal analytics: ${error.message}`);
    }
  }

  // Private helper methods
  private async createRFPProposal(
    opportunity: ProposalOpportunity,
    userId: string,
    options: ProposalCreationOptions
  ): Promise<RFPProposal> {
    // Create RFP proposal logic
    const proposal = {
      id: this.generateProposalId(),
      type: 'proposal' as const,
      subtype: 'rfp' as const,
      title: `RFP Response - ${opportunity.title}`,
      description: `Response to ${opportunity.organization} RFP`,
      content: this.createDefaultRFPContent(),
      metadata: {
        category: 'proposal',
        tags: ['rfp', 'response', opportunity.organization],
        status: 'draft' as const,
        visibility: 'private' as const,
        language: 'en',
        wordCount: 0,
        pageCount: 0,
        readingTime: 0,
        complexity: 'medium' as const,
        proposalType: 'rfp' as const,
        organization: opportunity.organization,
        deadline: opportunity.deadline,
        budget: opportunity.budget,
        currency: opportunity.currency,
        status: 'draft' as const,
        priority: opportunity.priority,
        winProbability: opportunity.matchScore,
        competitionLevel: 'medium' as const,
        keyStakeholders: [],
        evaluationCriteria: [],
        submissionRequirements: [],
        creationMethod: 'ai-generated' as const
      },
      version: {
        current: '1.0.0',
        history: [],
        locked: false
      },
      permissions: {
        owner: userId,
        editors: [],
        viewers: [],
        commenters: [],
        public: false
      },
      collaboration: {
        activeUsers: [],
        comments: [],
        suggestions: [],
        mentions: [],
        lastActivity: new Date()
      },
      ai: {
        analyzed: false,
        overallScore: 0,
        qualityScore: 0,
        completenessScore: 0,
        readabilityScore: 0,
        insights: [],
        suggestions: [],
        autoGenerated: true,
        aiAssisted: true,
        confidence: 0
      },
      createdAt: new Date(),
      updatedAt: new Date(),
      createdBy: userId,
      lastModifiedBy: userId
    };

    return proposal;
  }

  private async createRFIProposal(
    opportunity: ProposalOpportunity,
    userId: string,
    options: ProposalCreationOptions
  ): Promise<RFIProposal> {
    // Similar to RFP but for RFI
    return {} as RFIProposal;
  }

  private async createRFQProposal(
    opportunity: ProposalOpportunity,
    userId: string,
    options: ProposalCreationOptions
  ): Promise<RFQProposal> {
    // Similar to RFP but for RFQ
    return {} as RFQProposal;
  }

  private async enhanceProposalWithAI(
    proposal: ProposalDocument,
    opportunity: ProposalOpportunity
  ): Promise<ProposalDocument> {
    // Apply AI enhancements to proposal
    return proposal;
  }

  private async applyAutomationRules(
    proposal: ProposalDocument,
    opportunity: ProposalOpportunity
  ): Promise<ProposalDocument> {
    // Apply automation rules
    return proposal;
  }

  private async getOpportunity(opportunityId: string): Promise<ProposalOpportunity | null> {
    // Get opportunity from database
    return null;
  }

  private matchesKeywords(opportunity: ProposalOpportunity, keywords: string[]): boolean {
    return keywords.some(keyword => 
      opportunity.keywords.some(oppKeyword => 
        oppKeyword.toLowerCase().includes(keyword.toLowerCase())
      )
    );
  }

  private calculateResponseQuality(content: string): number {
    // Simple quality calculation
    return Math.min(content.length / 100, 100);
  }

  private calculateResponseCompleteness(content: string, requirement: ProposalRequirement): number {
    // Simple completeness calculation
    return Math.min(content.length / 200, 100);
  }

  private async checkComplianceRule(proposal: ProposalDocument, rule: any): Promise<any> {
    // Check individual compliance rule
    return null;
  }

  private async generateComplianceRecommendations(violations: any[]): Promise<string[]> {
    // Generate compliance recommendations
    return [];
  }

  private async applyOptimizations(
    proposal: ProposalDocument,
    suggestions: AISuggestion[]
  ): Promise<ProposalDocument> {
    // Apply optimization suggestions
    return proposal;
  }

  private parseTemplateSections(content: string): any[] {
    // Parse AI-generated content into sections
    return [];
  }

  private generateProposalId(): string {
    return `proposal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateResponseId(): string {
    return `response_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateTemplateId(): string {
    return `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private createDefaultRFPContent(): any {
    return {
      format: 'structured',
      data: {
        sections: [],
        requirements: [],
        responses: [],
        attachments: [],
        compliance: []
      }
    };
  }

  private initializeTemplates(): void {
    // Initialize proposal templates
  }

  private initializeAutomationRules(): void {
    // Initialize automation rules
  }

  private initializeComplianceRules(): void {
    // Initialize compliance rules
  }
}

// Supporting interfaces
export interface ProposalOpportunity {
  id: string;
  title: string;
  organization: string;
  type: ProposalSubtype;
  description: string;
  deadline: Date;
  budget: number;
  currency: string;
  matchScore: number;
  requirements: string[];
  keywords: string[];
  status: 'open' | 'closed' | 'awarded';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  complexity: 'low' | 'medium' | 'high';
  aiInsights: any[];
  lastUpdated: Date;
}

export interface OpportunityCriteria {
  types?: ProposalSubtype[];
  minBudget?: number;
  maxBudget?: number;
  minMatchScore?: number;
  keywords?: string[];
  organizations?: string[];
  deadline?: Date;
}

export interface ProposalCreationOptions {
  aiAssisted?: boolean;
  templateId?: string;
  customFields?: Record<string, any>;
  automationRules?: string[];
}

export interface ProposalTemplate {
  id: string;
  name: string;
  description: string;
  type: string;
  subtype?: string;
  content: any;
  metadata: any;
  isPublic: boolean;
  createdBy: string;
  createdAt: Date;
  usageCount: number;
  rating: number;
}

export interface ProposalAnalytics {
  views: number;
  edits: number;
  collaborators: number;
  comments: number;
  suggestions: number;
  lastActivity: Date;
  aiScore: number;
  completionRate: number;
  timeSpent: number;
  shareCount: number;
  downloadCount: number;
  winProbability: number;
  competitiveAdvantage: number;
  riskFactors: string[];
}


=== FILE: client/src/features/documents/offline/OfflineManager.ts ===

import { BaseDocument } from '../types/document.types';
import { OfflineDocument, SyncStatus, ConflictResolution } from '../types/offline.types';

/**
 * Offline Manager - Advanced offline editing and synchronization system
 * 
 * This system provides:
 * - Offline document editing and storage
 * - Automatic synchronization when online
 * - Conflict resolution for concurrent edits
 * - Progressive web app capabilities
 * - Data integrity and consistency
 */
export class OfflineManager {
  private storage: OfflineStorage;
  private syncEngine: SyncEngine;
  private conflictResolver: ConflictResolver;
  private networkMonitor: NetworkMonitor;
  private dataIntegrity: DataIntegrityChecker;

  constructor() {
    this.storage = new OfflineStorage();
    this.syncEngine = new SyncEngine();
    this.conflictResolver = new ConflictResolver();
    this.networkMonitor = new NetworkMonitor();
    this.dataIntegrity = new DataIntegrityChecker();
  }

  /**
   * Initialize offline capabilities
   */
  async initializeOfflineSupport(
    options: OfflineOptions = {}
  ): Promise<OfflineInitializationResult> {
    try {
      // Initialize storage
      await this.storage.initialize(options.storageOptions);

      // Set up network monitoring
      await this.networkMonitor.startMonitoring({
        onOnline: () => this.handleOnline(),
        onOffline: () => this.handleOffline()
      });

      // Initialize sync engine
      await this.syncEngine.initialize(options.syncOptions);

      // Set up service worker for PWA
      if (options.enablePWA !== false) {
        await this.setupServiceWorker();
      }

      return {
        success: true,
        offlineEnabled: true,
        syncEnabled: true,
        pwaEnabled: options.enablePWA !== false
      };

    } catch (error) {
      throw new Error(`Failed to initialize offline support: ${error.message}`);
    }
  }

  /**
   * Save document offline
   */
  async saveDocumentOffline(
    document: BaseDocument,
    options: OfflineSaveOptions = {}
  ): Promise<OfflineSaveResult> {
    try {
      // Check if we're offline
      const isOffline = !this.networkMonitor.isOnline();
      
      if (!isOffline && !options.forceOffline) {
        // If online, save normally and sync
        return await this.saveAndSync(document, options);
      }

      // Save offline
      const offlineDocument: OfflineDocument = {
        id: document.id,
        document: document,
        lastModified: new Date(),
        syncStatus: 'pending',
        version: document.version.current,
        changes: options.changes || [],
        metadata: {
          savedOffline: true,
          offlineVersion: this.generateOfflineVersion(),
          conflictResolution: options.conflictResolution || 'auto'
        }
      };

      await this.storage.saveOfflineDocument(offlineDocument);

      // Queue for sync when online
      if (!isOffline) {
        await this.syncEngine.queueForSync(offlineDocument);
      }

      return {
        success: true,
        savedOffline: true,
        offlineDocument,
        syncQueued: !isOffline
      };

    } catch (error) {
      throw new Error(`Failed to save document offline: ${error.message}`);
    }
  }

  /**
   * Get offline document
   */
  async getOfflineDocument(
    documentId: string,
    options: OfflineGetOptions = {}
  ): Promise<OfflineGetResult> {
    try {
      // Try to get from offline storage first
      const offlineDocument = await this.storage.getOfflineDocument(documentId);
      
      if (offlineDocument) {
        return {
          success: true,
          document: offlineDocument.document,
          offlineDocument,
          isOffline: true,
          syncStatus: offlineDocument.syncStatus
        };
      }

      // If not found offline and online, fetch from server
      if (this.networkMonitor.isOnline() && !options.offlineOnly) {
        const onlineDocument = await this.fetchFromServer(documentId);
        if (onlineDocument) {
          return {
            success: true,
            document: onlineDocument,
            isOffline: false,
            syncStatus: 'synced'
          };
        }
      }

      return {
        success: false,
        reason: 'document_not_found'
      };

    } catch (error) {
      throw new Error(`Failed to get offline document: ${error.message}`);
    }
  }

  /**
   * Synchronize offline changes
   */
  async synchronizeOfflineChanges(
    options: SyncOptions = {}
  ): Promise<SyncResult> {
    try {
      if (!this.networkMonitor.isOnline()) {
        return {
          success: false,
          reason: 'offline',
          queuedChanges: await this.storage.getPendingChanges()
        };
      }

      const startTime = Date.now();
      const results: SyncResult = {
        success: true,
        syncedDocuments: [],
        conflicts: [],
        errors: [],
        processingTime: 0
      };

      // Get all pending changes
      const pendingChanges = await this.storage.getPendingChanges();

      for (const change of pendingChanges) {
        try {
          // Check for conflicts
          const conflictCheck = await this.checkForConflicts(change);
          
          if (conflictCheck.hasConflicts) {
            // Resolve conflicts
            const resolution = await this.conflictResolver.resolveConflicts(
              conflictCheck.conflicts,
              options.conflictResolution || 'auto'
            );

            if (resolution.resolved) {
              // Apply resolution and sync
              const syncResult = await this.syncEngine.syncDocument(
                resolution.document,
                options
              );
              
              if (syncResult.success) {
                results.syncedDocuments.push(change.documentId);
                await this.storage.markAsSynced(change.documentId);
              } else {
                results.errors.push({
                  documentId: change.documentId,
                  error: syncResult.error
                });
              }
            } else {
              results.conflicts.push({
                documentId: change.documentId,
                conflicts: conflictCheck.conflicts,
                requiresManualResolution: true
              });
            }
          } else {
            // No conflicts, sync directly
            const syncResult = await this.syncEngine.syncDocument(
              change.document,
              options
            );

            if (syncResult.success) {
              results.syncedDocuments.push(change.documentId);
              await this.storage.markAsSynced(change.documentId);
            } else {
              results.errors.push({
                documentId: change.documentId,
                error: syncResult.error
              });
            }
          }

        } catch (error) {
          results.errors.push({
            documentId: change.documentId,
            error: error.message
          });
        }
      }

      results.processingTime = Date.now() - startTime;

      // Update sync status
      await this.updateSyncStatus(results);

      return results;

    } catch (error) {
      throw new Error(`Failed to synchronize offline changes: ${error.message}`);
    }
  }

  /**
   * Get offline status
   */
  async getOfflineStatus(): Promise<OfflineStatus> {
    try {
      const isOnline = this.networkMonitor.isOnline();
      const pendingChanges = await this.storage.getPendingChanges();
      const lastSync = await this.storage.getLastSyncTime();
      const storageUsage = await this.storage.getStorageUsage();

      return {
        isOnline,
        pendingChanges: pendingChanges.length,
        lastSync,
        storageUsage,
        syncStatus: isOnline ? 'ready' : 'offline',
        conflicts: await this.getPendingConflicts()
      };

    } catch (error) {
      throw new Error(`Failed to get offline status: ${error.message}`);
    }
  }

  /**
   * Resolve conflicts manually
   */
  async resolveConflictsManually(
    documentId: string,
    resolution: ConflictResolution,
    options: ConflictResolutionOptions = {}
  ): Promise<ConflictResolutionResult> {
    try {
      // Get the conflict
      const conflict = await this.storage.getConflict(documentId);
      if (!conflict) {
        return {
          success: false,
          reason: 'conflict_not_found'
        };
      }

      // Apply manual resolution
      const resolvedDocument = await this.conflictResolver.applyResolution(
        conflict,
        resolution,
        options
      );

      // Sync the resolved document
      const syncResult = await this.syncEngine.syncDocument(resolvedDocument);

      if (syncResult.success) {
        await this.storage.markAsSynced(documentId);
        await this.storage.clearConflict(documentId);
      }

      return {
        success: syncResult.success,
        resolvedDocument,
        syncResult
      };

    } catch (error) {
      throw new Error(`Failed to resolve conflicts manually: ${error.message}`);
    }
  }

  /**
   * Clear offline data
   */
  async clearOfflineData(
    options: ClearOptions = {}
  ): Promise<ClearResult> {
    try {
      const results: ClearResult = {
        success: true,
        clearedDocuments: 0,
        clearedConflicts: 0,
        freedSpace: 0
      };

      if (options.clearDocuments !== false) {
        const documents = await this.storage.getAllOfflineDocuments();
        results.clearedDocuments = documents.length;
        await this.storage.clearAllDocuments();
      }

      if (options.clearConflicts !== false) {
        const conflicts = await this.storage.getAllConflicts();
        results.clearedConflicts = conflicts.length;
        await this.storage.clearAllConflicts();
      }

      if (options.clearCache !== false) {
        await this.storage.clearCache();
      }

      // Calculate freed space
      results.freedSpace = await this.storage.getStorageUsage();

      return results;

    } catch (error) {
      throw new Error(`Failed to clear offline data: ${error.message}`);
    }
  }

  /**
   * Export offline data
   */
  async exportOfflineData(
    options: ExportOptions = {}
  ): Promise<ExportResult> {
    try {
      const data = await this.storage.exportData(options);
      const exportData = {
        documents: data.documents,
        conflicts: data.conflicts,
        metadata: {
          exportedAt: new Date(),
          version: '1.0.0',
          totalDocuments: data.documents.length,
          totalConflicts: data.conflicts.length
        }
      };

      return {
        success: true,
        data: exportData,
        format: options.format || 'json',
        size: JSON.stringify(exportData).length
      };

    } catch (error) {
      throw new Error(`Failed to export offline data: ${error.message}`);
    }
  }

  /**
   * Import offline data
   */
  async importOfflineData(
    data: any,
    options: ImportOptions = {}
  ): Promise<ImportResult> {
    try {
      // Validate import data
      const validation = await this.validateImportData(data);
      if (!validation.valid) {
        return {
          success: false,
          errors: validation.errors
        };
      }

      // Import documents
      const importResults = await this.storage.importData(data, options);

      return {
        success: true,
        importedDocuments: importResults.documents,
        importedConflicts: importResults.conflicts,
        errors: importResults.errors
      };

    } catch (error) {
      throw new Error(`Failed to import offline data: ${error.message}`);
    }
  }

  // Private helper methods
  private async saveAndSync(
    document: BaseDocument,
    options: OfflineSaveOptions
  ): Promise<OfflineSaveResult> {
    // Save to server and sync
    const syncResult = await this.syncEngine.syncDocument(document);
    
    if (syncResult.success) {
      return {
        success: true,
        savedOffline: false,
        syncResult
      };
    } else {
      // If sync fails, save offline
      return await this.saveDocumentOffline(document, { ...options, forceOffline: true });
    }
  }

  private async handleOnline(): Promise<void> {
    // Network came online, start sync
    try {
      await this.synchronizeOfflineChanges();
    } catch (error) {
      console.error('Failed to sync on network online:', error);
    }
  }

  private async handleOffline(): Promise<void> {
    // Network went offline, prepare for offline mode
    console.log('Network offline, switching to offline mode');
  }

  private async setupServiceWorker(): Promise<void> {
    // Set up service worker for PWA capabilities
    if ('serviceWorker' in navigator) {
      try {
        await navigator.serviceWorker.register('/sw.js');
      } catch (error) {
        console.error('Service worker registration failed:', error);
      }
    }
  }

  private async checkForConflicts(change: any): Promise<ConflictCheckResult> {
    // Check for conflicts with server version
    const serverVersion = await this.fetchFromServer(change.documentId);
    
    if (!serverVersion) {
      return { hasConflicts: false, conflicts: [] };
    }

    // Compare versions
    const conflicts = await this.conflictResolver.detectConflicts(
      change.document,
      serverVersion
    );

    return {
      hasConflicts: conflicts.length > 0,
      conflicts
    };
  }

  private async fetchFromServer(documentId: string): Promise<BaseDocument | null> {
    // Fetch document from server
    try {
      const response = await fetch(`/api/documents/${documentId}`);
      if (response.ok) {
        return await response.json();
      }
    } catch (error) {
      console.error('Failed to fetch from server:', error);
    }
    return null;
  }

  private async updateSyncStatus(results: SyncResult): Promise<void> {
    // Update sync status based on results
    if (results.success && results.syncedDocuments.length > 0) {
      await this.storage.updateLastSyncTime(new Date());
    }
  }

  private async getPendingConflicts(): Promise<number> {
    const conflicts = await this.storage.getAllConflicts();
    return conflicts.length;
  }

  private async validateImportData(data: any): Promise<ValidationResult> {
    const errors: string[] = [];

    if (!data.documents || !Array.isArray(data.documents)) {
      errors.push('Invalid documents array');
    }

    if (!data.metadata || !data.metadata.exportedAt) {
      errors.push('Invalid metadata');
    }

    return {
      valid: errors.length === 0,
      errors
    };
  }

  private generateOfflineVersion(): string {
    return `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
}

// Supporting classes
export class OfflineStorage {
  async initialize(options: StorageOptions = {}): Promise<void> {
    // Initialize offline storage
  }

  async saveOfflineDocument(document: OfflineDocument): Promise<void> {
    // Save document offline
  }

  async getOfflineDocument(documentId: string): Promise<OfflineDocument | null> {
    // Get offline document
    return null;
  }

  async getPendingChanges(): Promise<any[]> {
    // Get pending changes
    return [];
  }

  async markAsSynced(documentId: string): Promise<void> {
    // Mark document as synced
  }

  async getLastSyncTime(): Promise<Date | null> {
    // Get last sync time
    return null;
  }

  async getStorageUsage(): Promise<number> {
    // Get storage usage
    return 0;
  }

  async getConflict(documentId: string): Promise<any> {
    // Get conflict
    return null;
  }

  async clearConflict(documentId: string): Promise<void> {
    // Clear conflict
  }

  async getAllOfflineDocuments(): Promise<OfflineDocument[]> {
    // Get all offline documents
    return [];
  }

  async getAllConflicts(): Promise<any[]> {
    // Get all conflicts
    return [];
  }

  async clearAllDocuments(): Promise<void> {
    // Clear all documents
  }

  async clearAllConflicts(): Promise<void> {
    // Clear all conflicts
  }

  async clearCache(): Promise<void> {
    // Clear cache
  }

  async exportData(options: ExportOptions): Promise<any> {
    // Export data
    return { documents: [], conflicts: [] };
  }

  async importData(data: any, options: ImportOptions): Promise<any> {
    // Import data
    return { documents: 0, conflicts: 0, errors: [] };
  }
}

export class SyncEngine {
  async initialize(options: SyncOptions = {}): Promise<void> {
    // Initialize sync engine
  }

  async queueForSync(document: OfflineDocument): Promise<void> {
    // Queue document for sync
  }

  async syncDocument(document: BaseDocument, options: SyncOptions = {}): Promise<SyncResult> {
    // Sync document
    return { success: true };
  }
}

export class ConflictResolver {
  async resolveConflicts(conflicts: any[], strategy: string): Promise<ConflictResolutionResult> {
    // Resolve conflicts
    return { resolved: false };
  }

  async applyResolution(conflict: any, resolution: ConflictResolution, options: any): Promise<BaseDocument> {
    // Apply resolution
    return conflict.document;
  }

  async detectConflicts(document1: BaseDocument, document2: BaseDocument): Promise<any[]> {
    // Detect conflicts
    return [];
  }
}

export class NetworkMonitor {
  private isOnlineStatus: boolean = navigator.onLine;

  isOnline(): boolean {
    return this.isOnlineStatus;
  }

  async startMonitoring(options: NetworkMonitoringOptions): Promise<void> {
    // Start network monitoring
    window.addEventListener('online', () => {
      this.isOnlineStatus = true;
      options.onOnline?.();
    });

    window.addEventListener('offline', () => {
      this.isOnlineStatus = false;
      options.onOffline?.();
    });
  }
}

export class DataIntegrityChecker {
  async checkIntegrity(data: any): Promise<IntegrityResult> {
    // Check data integrity
    return { valid: true, errors: [] };
  }
}

// Supporting interfaces
export interface OfflineOptions {
  storageOptions?: StorageOptions;
  syncOptions?: SyncOptions;
  enablePWA?: boolean;
}

export interface StorageOptions {
  maxSize?: number;
  compression?: boolean;
  encryption?: boolean;
}

export interface SyncOptions {
  autoSync?: boolean;
  syncInterval?: number;
  conflictResolution?: string;
}

export interface OfflineInitializationResult {
  success: boolean;
  offlineEnabled: boolean;
  syncEnabled: boolean;
  pwaEnabled: boolean;
}

export interface OfflineSaveOptions {
  forceOffline?: boolean;
  changes?: any[];
  conflictResolution?: string;
}

export interface OfflineSaveResult {
  success: boolean;
  savedOffline: boolean;
  offlineDocument?: OfflineDocument;
  syncQueued?: boolean;
  syncResult?: any;
}

export interface OfflineGetOptions {
  offlineOnly?: boolean;
}

export interface OfflineGetResult {
  success: boolean;
  document?: BaseDocument;
  offlineDocument?: OfflineDocument;
  isOffline: boolean;
  syncStatus: SyncStatus;
  reason?: string;
}

export interface SyncResult {
  success: boolean;
  syncedDocuments: string[];
  conflicts: ConflictInfo[];
  errors: SyncError[];
  processingTime: number;
  reason?: string;
}

export interface ConflictInfo {
  documentId: string;
  conflicts: any[];
  requiresManualResolution: boolean;
}

export interface SyncError {
  documentId: string;
  error: string;
}

export interface OfflineStatus {
  isOnline: boolean;
  pendingChanges: number;
  lastSync: Date | null;
  storageUsage: number;
  syncStatus: 'ready' | 'offline' | 'syncing';
  conflicts: number;
}

export interface ConflictResolutionOptions {
  strategy?: string;
  userPreference?: string;
}

export interface ConflictResolutionResult {
  success: boolean;
  resolvedDocument?: BaseDocument;
  syncResult?: any;
  reason?: string;
}

export interface ClearOptions {
  clearDocuments?: boolean;
  clearConflicts?: boolean;
  clearCache?: boolean;
}

export interface ClearResult {
  success: boolean;
  clearedDocuments: number;
  clearedConflicts: number;
  freedSpace: number;
}

export interface ExportOptions {
  format?: 'json' | 'csv' | 'xml';
  includeMetadata?: boolean;
  includeConflicts?: boolean;
}

export interface ExportResult {
  success: boolean;
  data?: any;
  format: string;
  size: number;
}

export interface ImportOptions {
  mergeStrategy?: 'replace' | 'merge' | 'skip';
  validateData?: boolean;
}

export interface ImportResult {
  success: boolean;
  importedDocuments: number;
  importedConflicts: number;
  errors: string[];
}

export interface ValidationResult {
  valid: boolean;
  errors: string[];
}

export interface ConflictCheckResult {
  hasConflicts: boolean;
  conflicts: any[];
}

export interface NetworkMonitoringOptions {
  onOnline?: () => void;
  onOffline?: () => void;
}

export interface IntegrityResult {
  valid: boolean;
  errors: string[];
}

export interface OfflineDocument {
  id: string;
  document: BaseDocument;
  lastModified: Date;
  syncStatus: SyncStatus;
  version: string;
  changes: any[];
  metadata: OfflineMetadata;
}

export interface OfflineMetadata {
  savedOffline: boolean;
  offlineVersion: string;
  conflictResolution: string;
}

export type SyncStatus = 'pending' | 'syncing' | 'synced' | 'conflict' | 'error';


=== FILE: client/src/features/documents/analytics/AnalyticsDashboard.ts ===

import { BaseDocument } from '../types/document.types';
import { AnalyticsData, DashboardWidget, AnalyticsMetric } from '../types/analytics.types';

/**
 * Analytics Dashboard - Comprehensive document analytics and usage tracking
 * 
 * This system provides:
 * - Real-time analytics and metrics
 * - Interactive dashboard widgets
 * - Usage tracking and insights
 * - Performance monitoring
 * - Custom reporting and exports
 */
export class AnalyticsDashboard {
  private dataCollector: AnalyticsDataCollector;
  private metricCalculator: MetricCalculator;
  private widgetRenderer: WidgetRenderer;
  private reportGenerator: ReportGenerator;
  private alertManager: AlertManager;

  constructor() {
    this.dataCollector = new AnalyticsDataCollector();
    this.metricCalculator = new MetricCalculator();
    this.widgetRenderer = new WidgetRenderer();
    this.reportGenerator = new ReportGenerator();
    this.alertManager = new AlertManager();
  }

  /**
   * Get dashboard data
   */
  async getDashboardData(
    options: DashboardOptions = {}
  ): Promise<DashboardData> {
    try {
      const startTime = Date.now();

      // Collect analytics data
      const analyticsData = await this.dataCollector.collectData(options);

      // Calculate metrics
      const metrics = await this.metricCalculator.calculateMetrics(analyticsData);

      // Generate widgets
      const widgets = await this.generateWidgets(metrics, options);

      // Check for alerts
      const alerts = await this.alertManager.checkAlerts(metrics);

      return {
        metrics,
        widgets,
        alerts,
        lastUpdated: new Date(),
        processingTime: Date.now() - startTime,
        metadata: {
          dataRange: options.timeRange,
          filters: options.filters,
          userId: options.userId
        }
      };

    } catch (error) {
      throw new Error(`Failed to get dashboard data: ${error.message}`);
    }
  }

  /**
   * Get specific analytics metric
   */
  async getMetric(
    metricName: string,
    options: MetricOptions = {}
  ): Promise<MetricResult> {
    try {
      // Collect data for specific metric
      const data = await this.dataCollector.collectMetricData(metricName, options);

      // Calculate metric
      const metric = await this.metricCalculator.calculateMetric(metricName, data);

      return {
        metric: metricName,
        value: metric.value,
        trend: metric.trend,
        change: metric.change,
        metadata: metric.metadata,
        timestamp: new Date()
      };

    } catch (error) {
      throw new Error(`Failed to get metric ${metricName}: ${error.message}`);
    }
  }

  /**
   * Get usage analytics
   */
  async getUsageAnalytics(
    options: UsageAnalyticsOptions = {}
  ): Promise<UsageAnalytics> {
    try {
      const startTime = Date.now();

      // Collect usage data
      const usageData = await this.dataCollector.collectUsageData(options);

      // Calculate usage metrics
      const metrics = await this.calculateUsageMetrics(usageData);

      // Generate insights
      const insights = await this.generateUsageInsights(metrics);

      return {
        totalDocuments: metrics.totalDocuments,
        activeUsers: metrics.activeUsers,
        documentTypes: metrics.documentTypes,
        usagePatterns: metrics.usagePatterns,
        collaborationMetrics: metrics.collaborationMetrics,
        performanceMetrics: metrics.performanceMetrics,
        insights,
        processingTime: Date.now() - startTime,
        metadata: {
          timeRange: options.timeRange,
          granularity: options.granularity
        }
      };

    } catch (error) {
      throw new Error(`Failed to get usage analytics: ${error.message}`);
    }
  }

  /**
   * Get performance analytics
   */
  async getPerformanceAnalytics(
    options: PerformanceAnalyticsOptions = {}
  ): Promise<PerformanceAnalytics> {
    try {
      const startTime = Date.now();

      // Collect performance data
      const performanceData = await this.dataCollector.collectPerformanceData(options);

      // Calculate performance metrics
      const metrics = await this.calculatePerformanceMetrics(performanceData);

      // Generate performance insights
      const insights = await this.generatePerformanceInsights(metrics);

      return {
        loadTime: metrics.loadTime,
        renderTime: metrics.renderTime,
        memoryUsage: metrics.memoryUsage,
        cachePerformance: metrics.cachePerformance,
        apiPerformance: metrics.apiPerformance,
        userExperience: metrics.userExperience,
        insights,
        processingTime: Date.now() - startTime,
        metadata: {
          timeRange: options.timeRange,
          includeDetails: options.includeDetails
        }
      };

    } catch (error) {
      throw new Error(`Failed to get performance analytics: ${error.message}`);
    }
  }

  /**
   * Generate custom report
   */
  async generateReport(
    reportConfig: ReportConfiguration,
    options: ReportOptions = {}
  ): Promise<ReportResult> {
    try {
      const startTime = Date.now();

      // Collect data for report
      const reportData = await this.dataCollector.collectReportData(reportConfig);

      // Generate report
      const report = await this.reportGenerator.generateReport(reportConfig, reportData);

      // Export report if requested
      let exportResult;
      if (options.export) {
        exportResult = await this.exportReport(report, options.export);
      }

      return {
        report,
        export: exportResult,
        processingTime: Date.now() - startTime,
        metadata: {
          reportId: report.id,
          generatedAt: new Date(),
          generatedBy: options.generatedBy
        }
      };

    } catch (error) {
      throw new Error(`Failed to generate report: ${error.message}`);
    }
  }

  /**
   * Create custom widget
   */
  async createWidget(
    widgetConfig: WidgetConfiguration,
    options: WidgetOptions = {}
  ): Promise<WidgetResult> {
    try {
      // Validate widget configuration
      const validation = await this.validateWidgetConfig(widgetConfig);
      if (!validation.valid) {
        return {
          success: false,
          errors: validation.errors
        };
      }

      // Create widget
      const widget = await this.widgetRenderer.createWidget(widgetConfig, options);

      // Store widget configuration
      await this.storeWidgetConfiguration(widget.id, widgetConfig);

      return {
        success: true,
        widget,
        widgetId: widget.id
      };

    } catch (error) {
      throw new Error(`Failed to create widget: ${error.message}`);
    }
  }

  /**
   * Get widget data
   */
  async getWidgetData(
    widgetId: string,
    options: WidgetDataOptions = {}
  ): Promise<WidgetData> {
    try {
      // Get widget configuration
      const widgetConfig = await this.getWidgetConfiguration(widgetId);

      // Collect data for widget
      const data = await this.dataCollector.collectWidgetData(widgetConfig, options);

      // Render widget data
      const widgetData = await this.widgetRenderer.renderWidgetData(widgetConfig, data);

      return {
        widgetId,
        data: widgetData,
        lastUpdated: new Date(),
        metadata: {
          config: widgetConfig,
          options
        }
      };

    } catch (error) {
      throw new Error(`Failed to get widget data: ${error.message}`);
    }
  }

  /**
   * Set up alerts
   */
  async setupAlert(
    alertConfig: AlertConfiguration,
    options: AlertOptions = {}
  ): Promise<AlertResult> {
    try {
      // Validate alert configuration
      const validation = await this.validateAlertConfig(alertConfig);
      if (!validation.valid) {
        return {
          success: false,
          errors: validation.errors
        };
      }

      // Create alert
      const alert = await this.alertManager.createAlert(alertConfig, options);

      return {
        success: true,
        alert,
        alertId: alert.id
      };

    } catch (error) {
      throw new Error(`Failed to setup alert: ${error.message}`);
    }
  }

  /**
   * Get analytics insights
   */
  async getAnalyticsInsights(
    options: InsightsOptions = {}
  ): Promise<AnalyticsInsights> {
    try {
      const startTime = Date.now();

      // Collect comprehensive data
      const data = await this.dataCollector.collectComprehensiveData(options);

      // Analyze data for insights
      const insights = await this.analyzeDataForInsights(data);

      // Generate recommendations
      const recommendations = await this.generateRecommendations(insights);

      return {
        insights,
        recommendations,
        confidence: insights.confidence,
        processingTime: Date.now() - startTime,
        metadata: {
          analysisDate: new Date(),
          dataSource: options.dataSource,
          includePredictions: options.includePredictions
        }
      };

    } catch (error) {
      throw new Error(`Failed to get analytics insights: ${error.message}`);
    }
  }

  // Private helper methods
  private async generateWidgets(
    metrics: AnalyticsMetric[],
    options: DashboardOptions
  ): Promise<DashboardWidget[]> {
    const widgets: DashboardWidget[] = [];

    // Generate default widgets based on metrics
    for (const metric of metrics) {
      const widget = await this.createMetricWidget(metric, options);
      widgets.push(widget);
    }

    // Generate custom widgets if specified
    if (options.customWidgets) {
      for (const widgetConfig of options.customWidgets) {
        const widget = await this.createCustomWidget(widgetConfig);
        widgets.push(widget);
      }
    }

    return widgets;
  }

  private async calculateUsageMetrics(usageData: any): Promise<UsageMetrics> {
    // Calculate usage metrics from data
    return {
      totalDocuments: 0,
      activeUsers: 0,
      documentTypes: {},
      usagePatterns: {},
      collaborationMetrics: {},
      performanceMetrics: {}
    };
  }

  private async generateUsageInsights(metrics: UsageMetrics): Promise<UsageInsight[]> {
    // Generate usage insights
    return [];
  }

  private async calculatePerformanceMetrics(performanceData: any): Promise<PerformanceMetrics> {
    // Calculate performance metrics
    return {
      loadTime: 0,
      renderTime: 0,
      memoryUsage: 0,
      cachePerformance: {},
      apiPerformance: {},
      userExperience: {}
    };
  }

  private async generatePerformanceInsights(metrics: PerformanceMetrics): Promise<PerformanceInsight[]> {
    // Generate performance insights
    return [];
  }

  private async exportReport(report: any, exportOptions: ExportOptions): Promise<ExportResult> {
    // Export report in specified format
    return {
      format: exportOptions.format,
      url: '',
      size: 0
    };
  }

  private async validateWidgetConfig(config: WidgetConfiguration): Promise<ValidationResult> {
    // Validate widget configuration
    return { valid: true, errors: [] };
  }

  private async storeWidgetConfiguration(widgetId: string, config: WidgetConfiguration): Promise<void> {
    // Store widget configuration
  }

  private async getWidgetConfiguration(widgetId: string): Promise<WidgetConfiguration> {
    // Get widget configuration
    return {} as WidgetConfiguration;
  }

  private async validateAlertConfig(config: AlertConfiguration): Promise<ValidationResult> {
    // Validate alert configuration
    return { valid: true, errors: [] };
  }

  private async analyzeDataForInsights(data: any): Promise<DataInsights> {
    // Analyze data for insights
    return {
      trends: [],
      patterns: [],
      anomalies: [],
      confidence: 0.8
    };
  }

  private async generateRecommendations(insights: DataInsights): Promise<Recommendation[]> {
    // Generate recommendations based on insights
    return [];
  }

  private async createMetricWidget(metric: AnalyticsMetric, options: DashboardOptions): Promise<DashboardWidget> {
    // Create widget for metric
    return {
      id: `widget_${metric.name}`,
      type: 'metric',
      title: metric.name,
      data: metric,
      config: {}
    };
  }

  private async createCustomWidget(config: WidgetConfiguration): Promise<DashboardWidget> {
    // Create custom widget
    return {
      id: config.id,
      type: config.type,
      title: config.title,
      data: {},
      config: config.config
    };
  }
}

// Supporting classes
export class AnalyticsDataCollector {
  async collectData(options: DashboardOptions): Promise<AnalyticsData> {
    // Collect analytics data
    return {
      documents: [],
      users: [],
      activities: [],
      performance: {}
    };
  }

  async collectMetricData(metricName: string, options: MetricOptions): Promise<any> {
    // Collect data for specific metric
    return {};
  }

  async collectUsageData(options: UsageAnalyticsOptions): Promise<any> {
    // Collect usage data
    return {};
  }

  async collectPerformanceData(options: PerformanceAnalyticsOptions): Promise<any> {
    // Collect performance data
    return {};
  }

  async collectReportData(config: ReportConfiguration): Promise<any> {
    // Collect data for report
    return {};
  }

  async collectWidgetData(config: WidgetConfiguration, options: WidgetDataOptions): Promise<any> {
    // Collect data for widget
    return {};
  }

  async collectComprehensiveData(options: InsightsOptions): Promise<any> {
    // Collect comprehensive data
    return {};
  }
}

export class MetricCalculator {
  async calculateMetrics(data: AnalyticsData): Promise<AnalyticsMetric[]> {
    // Calculate analytics metrics
    return [];
  }

  async calculateMetric(metricName: string, data: any): Promise<MetricValue> {
    // Calculate specific metric
    return {
      value: 0,
      trend: 'stable',
      change: 0,
      metadata: {}
    };
  }
}

export class WidgetRenderer {
  async createWidget(config: WidgetConfiguration, options: WidgetOptions): Promise<DashboardWidget> {
    // Create widget
    return {
      id: config.id,
      type: config.type,
      title: config.title,
      data: {},
      config: config.config
    };
  }

  async renderWidgetData(config: WidgetConfiguration, data: any): Promise<any> {
    // Render widget data
    return data;
  }
}

export class ReportGenerator {
  async generateReport(config: ReportConfiguration, data: any): Promise<Report> {
    // Generate report
    return {
      id: 'report_id',
      title: config.title,
      content: {},
      format: config.format,
      generatedAt: new Date()
    };
  }
}

export class AlertManager {
  async checkAlerts(metrics: AnalyticsMetric[]): Promise<Alert[]> {
    // Check for alerts
    return [];
  }

  async createAlert(config: AlertConfiguration, options: AlertOptions): Promise<Alert> {
    // Create alert
    return {
      id: 'alert_id',
      type: config.type,
      message: config.message,
      severity: config.severity,
      triggeredAt: new Date()
    };
  }
}

// Supporting interfaces
export interface DashboardOptions {
  timeRange?: DateRange;
  filters?: Record<string, any>;
  userId?: string;
  customWidgets?: WidgetConfiguration[];
}

export interface DateRange {
  start: Date;
  end: Date;
}

export interface DashboardData {
  metrics: AnalyticsMetric[];
  widgets: DashboardWidget[];
  alerts: Alert[];
  lastUpdated: Date;
  processingTime: number;
  metadata: any;
}

export interface MetricOptions {
  timeRange?: DateRange;
  granularity?: 'hour' | 'day' | 'week' | 'month';
  filters?: Record<string, any>;
}

export interface MetricResult {
  metric: string;
  value: number;
  trend: 'increasing' | 'decreasing' | 'stable';
  change: number;
  metadata: any;
  timestamp: Date;
}

export interface UsageAnalyticsOptions {
  timeRange?: DateRange;
  granularity?: 'hour' | 'day' | 'week' | 'month';
  includeDetails?: boolean;
}

export interface UsageAnalytics {
  totalDocuments: number;
  activeUsers: number;
  documentTypes: Record<string, number>;
  usagePatterns: UsagePattern[];
  collaborationMetrics: CollaborationMetrics;
  performanceMetrics: PerformanceMetrics;
  insights: UsageInsight[];
  processingTime: number;
  metadata: any;
}

export interface UsagePattern {
  time: Date;
  value: number;
  type: string;
}

export interface CollaborationMetrics {
  activeCollaborators: number;
  commentsPerDocument: number;
  suggestionsPerDocument: number;
  averageSessionTime: number;
}

export interface PerformanceMetrics {
  loadTime: number;
  renderTime: number;
  memoryUsage: number;
  cachePerformance: any;
  apiPerformance: any;
  userExperience: any;
}

export interface UsageInsight {
  type: string;
  description: string;
  confidence: number;
  impact: 'low' | 'medium' | 'high';
}

export interface PerformanceInsight {
  type: string;
  description: string;
  recommendation: string;
  priority: 'low' | 'medium' | 'high';
}

export interface PerformanceAnalyticsOptions {
  timeRange?: DateRange;
  includeDetails?: boolean;
}

export interface PerformanceAnalytics {
  loadTime: number;
  renderTime: number;
  memoryUsage: number;
  cachePerformance: any;
  apiPerformance: any;
  userExperience: any;
  insights: PerformanceInsight[];
  processingTime: number;
  metadata: any;
}

export interface ReportConfiguration {
  title: string;
  type: 'usage' | 'performance' | 'custom';
  format: 'pdf' | 'excel' | 'csv' | 'json';
  metrics: string[];
  timeRange: DateRange;
  filters?: Record<string, any>;
}

export interface ReportOptions {
  export?: ExportOptions;
  generatedBy?: string;
}

export interface ExportOptions {
  format: 'pdf' | 'excel' | 'csv' | 'json';
  filename?: string;
}

export interface ReportResult {
  report: Report;
  export?: ExportResult;
  processingTime: number;
  metadata: any;
}

export interface Report {
  id: string;
  title: string;
  content: any;
  format: string;
  generatedAt: Date;
}

export interface ExportResult {
  format: string;
  url: string;
  size: number;
}

export interface WidgetConfiguration {
  id: string;
  type: 'metric' | 'chart' | 'table' | 'custom';
  title: string;
  config: any;
}

export interface WidgetOptions {
  refreshInterval?: number;
  autoRefresh?: boolean;
}

export interface WidgetResult {
  success: boolean;
  widget?: DashboardWidget;
  widgetId?: string;
  errors?: string[];
}

export interface DashboardWidget {
  id: string;
  type: string;
  title: string;
  data: any;
  config: any;
}

export interface WidgetDataOptions {
  refresh?: boolean;
  includeMetadata?: boolean;
}

export interface WidgetData {
  widgetId: string;
  data: any;
  lastUpdated: Date;
  metadata: any;
}

export interface AlertConfiguration {
  id: string;
  type: 'threshold' | 'anomaly' | 'trend';
  metric: string;
  condition: string;
  threshold?: number;
  message: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
}

export interface AlertOptions {
  enabled?: boolean;
  notificationChannels?: string[];
}

export interface AlertResult {
  success: boolean;
  alert?: Alert;
  alertId?: string;
  errors?: string[];
}

export interface Alert {
  id: string;
  type: string;
  message: string;
  severity: string;
  triggeredAt: Date;
}

export interface InsightsOptions {
  timeRange?: DateRange;
  dataSource?: string;
  includePredictions?: boolean;
}

export interface AnalyticsInsights {
  insights: DataInsights;
  recommendations: Recommendation[];
  confidence: number;
  processingTime: number;
  metadata: any;
}

export interface DataInsights {
  trends: Trend[];
  patterns: Pattern[];
  anomalies: Anomaly[];
  confidence: number;
}

export interface Trend {
  metric: string;
  direction: 'up' | 'down' | 'stable';
  strength: number;
  timeframe: string;
}

export interface Pattern {
  type: string;
  description: string;
  frequency: number;
  confidence: number;
}

export interface Anomaly {
  type: string;
  description: string;
  severity: 'low' | 'medium' | 'high';
  timestamp: Date;
}

export interface Recommendation {
  type: string;
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
}

export interface ValidationResult {
  valid: boolean;
  errors: string[];
}

export interface UsageMetrics {
  totalDocuments: number;
  activeUsers: number;
  documentTypes: Record<string, number>;
  usagePatterns: Record<string, any>;
  collaborationMetrics: CollaborationMetrics;
  performanceMetrics: PerformanceMetrics;
}


=== FILE: client/src/features/documents-hub/types/index.ts ===

import React from 'react';

export type ToastType = 'success' | 'error' | 'info';

export interface ToastMessage {
  id: number;
  message: string;
  type: ToastType;
}

export interface PivotType {
  id: string;
  name: string;
  description: string;
}

export type PlatformTab = 'platform' | 'methodology' | 'competitors' | 'pricing';

export type Mode = 'fast-track' | 'validated';

export interface Assumption {
  id: string;
  text: string;
  risk: 'high' | 'medium' | 'low';
  status: 'untested' | 'validated' | 'invalidated';
  sourceSection: string;
}

export interface PhaseStep {
  id: string;
  title: string;
  description: string;
  tool: string;
}

export interface Phase {
  name: string;
  icon: React.ComponentType<any>;
  color: string;
  description: string;
  methodology: string;
  steps: PhaseStep[];
}

export type Phases = Record<string, Phase>;

export interface Tool {
  name: string;
  description: string;
  outputs: string[];
}

export type Tools = Record<string, Tool>;

export type ActivePhase = 'discover' | 'define' | 'ideate' | 'experiment' | 'measure' | 'scale' | 'prototype' | 'test';

export interface PlanCompetitorRow {
  feature: string;
  iterativePlans: string;
  growthWheel: string;
  venturePlanner: string;
  livePlan: string;
}

export interface DeckCompetitorRow {
  feature: string;
  iterativDecks: string;
  growthWheel: string;
  venturePlanner: string;
  livePlan: string;
}

export interface PricingTier {
  name: string;
  price: string;
  description: string;
  features: string[];
  cta: string;
  highlighted: boolean;
}

export interface RevenueStream {
  stream: string;
  year1: string;
  year2: string;
  year3: string;
  percentage: string;
}

export interface DeckStyle {
  id: string;
  name: string;
  description: string;
  icon: React.ComponentType<any>;
  instruction: string;
}

// AI Application Filler Types
export interface FormField {
  id: string;
  label: string;
  type: 'text' | 'textarea';
  required: boolean;
  maxLength?: number;
  placeholder?: string;
}

export interface FormSection {
  id: string;
  title: string;
  fields: FormField[];
}

export interface ApplicationForm {
  id: string;
  name: string;
  type: 'accelerator' | 'grant' | 'competition' | 'investment';
  organization: string;
  deadline: string;
  sections: FormSection[];
}

export interface BusinessPlan {
  companyName: string;
  description: string;
  problem: string;
  solution: string;
  targetMarket: string;
  businessModel: string;
  traction: string;
  team: string;
  financials: string;
}

export interface AISuggestion {
  fieldId: string;
  suggestion: string;
}

// Hub Module Types
export type HubModule = 'plans' | 'decks' | 'proposals' | 'forms';

// Proposal Types
export interface ProposalTemplate {
  id: string;
  name: string;
  type: 'consulting' | 'partnership' | 'service' | 'product';
  description: string;
  sections: string[];
}

export interface ProposalSection {
  id: string;
  title: string;
  content: string;
  order: number;
}

=== FILE: client/src/features/documents-hub/DocumentsHubApp.tsx ===

import React, { useState, useCallback, lazy, Suspense } from 'react';
import HubHeader, { HubModule } from './components/HubHeader';
import Footer from './components/Footer';
import { Toaster } from './components/Toaster';
import { ToastMessage, ToastType } from './types';
import { Loader2 } from 'lucide-react';

// Lazy load modules for better performance
const PlansApp = lazy(() => import('./modules/plans/PlansApp'));
const DecksApp = lazy(() => import('./modules/decks/DecksApp'));
const ProposalsApp = lazy(() => import('./modules/proposals/ProposalsApp'));
const FormsApp = lazy(() => import('./modules/forms/FormsApp'));

const LoadingFallback = () => (
  <div className="flex items-center justify-center min-h-[400px]">
    <Loader2 className="w-8 h-8 animate-spin text-purple-600" />
  </div>
);

const DocumentsHubApp: React.FC = () => {
  const [activeHub, setActiveHub] = useState<HubModule>('plans');
  const [toasts, setToasts] = useState<ToastMessage[]>([]);

  const addToast = useCallback((message: string, type: ToastType) => {
    const id = Date.now();
    setToasts(prev => [...prev, { message, type, id }]);
  }, []);

  const removeToast = useCallback((id: number) => {
    setToasts(prev => prev.filter(t => t.id !== id));
  }, []);

  const renderActiveHub = () => {
    const moduleProps = { addToast };
    
    return (
      <Suspense fallback={<LoadingFallback />}>
        {activeHub === 'plans' && <PlansApp {...moduleProps} />}
        {activeHub === 'decks' && <DecksApp showToast={addToast} />}
        {activeHub === 'proposals' && <ProposalsApp {...moduleProps} />}
        {activeHub === 'forms' && <FormsApp {...moduleProps} />}
      </Suspense>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 text-slate-800 flex flex-col">
      <HubHeader activeHub={activeHub} setActiveHub={setActiveHub} />
      <main className="flex-grow max-w-7xl mx-auto px-6 py-8 w-full">
        {renderActiveHub()}
      </main>
      <Toaster toasts={toasts} removeToast={removeToast} />
      <Footer />
    </div>
  );
};

export default DocumentsHubApp;

=== FILE: client/src/features/documents-hub/constants/index.ts ===

import { PivotType } from '../types';
import { Target, Brain, Settings, DollarSign } from 'lucide-react';
import { PlatformTab } from '../types';

export const PIVOT_TYPES: PivotType[] = [
  { id: 'zoom-in', name: 'Zoom-In Pivot', description: 'Single feature becomes the product' },
  { id: 'zoom-out', name: 'Zoom-Out Pivot', description: 'Product becomes single feature of larger product' },
  { id: 'customer-segment', name: 'Customer Segment Pivot', description: 'Solve same problem for different customer' },
  { id: 'customer-need', name: 'Customer Need Pivot', description: 'Solve different problem for same customer' },
  { id: 'platform', name: 'Platform Pivot', description: 'Application becomes platform or vice versa' },
  { id: 'business-architecture', name: 'Business Architecture Pivot', description: 'High margin/low volume ‚Üî Low margin/high volume' },
  { id: 'value-capture', name: 'Value Capture Pivot', description: 'Monetization model change' },
  { id: 'engine-of-growth', name: 'Engine of Growth Pivot', description: 'Change growth strategy (viral, sticky, paid)' },
  { id: 'channel', name: 'Channel Pivot', description: 'Same solution, different distribution' },
  { id: 'technology', name: 'Technology Pivot', description: 'Same solution, different technology' }
];

export const NAV_TABS: {id: PlatformTab, label: string, icon: React.ComponentType<any>}[] = [
  { id: 'platform', label: 'Platform', icon: Settings },
  { id: 'methodology', label: 'Methodology', icon: Brain },
  { id: 'competitors', label: 'vs Competitors', icon: Target },
  { id: 'pricing', label: 'Pricing', icon: DollarSign }
];

=== FILE: client/src/features/documents-hub/README.md ===

# Documents Hub - IterativStartups

The Documents Hub is a comprehensive AI-powered business innovation platform that unifies four powerful modules: IterativePlans, IterativDecks, IterativProposals, and IterativForms into a central workspace for strategic documents.

## üöÄ Features

### Core Modules

#### 1. **IterativePlans** üìã
- **Fast Track Mode**: Generate complete business plans in minutes using AI
- **Validated Mode**: Follow Lean Design Thinking methodology to validate assumptions
- **Pivot Intelligence**: 10 structured pivot types based on validated learning
- **Experiment Framework**: Built-in tools for hypothesis testing

#### 2. **IterativDecks** üéØ
- **AI Deck Generation**: Create pitch decks from business plans
- **Style Templates**: Seed, Growth, and Internal pitch styles
- **Assumption Tracking**: Extract and validate key assumptions
- **Investor Matching**: Tailor decks to specific investor preferences

#### 3. **IterativProposals** üìÑ
- **RFP/RFI/RFQ Automation**: Streamlined response generation
- **Client Discovery**: Deep research tools for understanding client needs
- **Win Theme Generator**: Create compelling proposal narratives
- **Compliance Checking**: Ensure 100% requirement coverage

#### 4. **IterativForms** üìù
- **AI Application Filler**: Auto-fill accelerator and grant applications
- **Business Plan Sync**: Pull data directly from your business plan
- **Progress Tracking**: Monitor application status and deadlines
- **Template Library**: Common application templates

## üèóÔ∏è Architecture

```
documents-hub/
‚îú‚îÄ‚îÄ components/          # Shared components
‚îÇ   ‚îú‚îÄ‚îÄ HubHeader.tsx   # Main navigation header
‚îÇ   ‚îú‚îÄ‚îÄ Footer.tsx      # App footer
‚îÇ   ‚îú‚îÄ‚îÄ Toast.tsx       # Notification system
‚îÇ   ‚îú‚îÄ‚îÄ Toaster.tsx     # Toast container
‚îÇ   ‚îî‚îÄ‚îÄ PivotModal.tsx  # Pivot types modal
‚îú‚îÄ‚îÄ modules/            # Feature modules
‚îÇ   ‚îú‚îÄ‚îÄ plans/         # Business planning module
‚îÇ   ‚îú‚îÄ‚îÄ decks/         # Pitch deck module
‚îÇ   ‚îú‚îÄ‚îÄ proposals/     # Proposal module
‚îÇ   ‚îî‚îÄ‚îÄ forms/         # Application module
‚îú‚îÄ‚îÄ types/             # TypeScript definitions
‚îú‚îÄ‚îÄ constants/         # Shared constants
‚îî‚îÄ‚îÄ DocumentsHubApp.tsx # Main app component
```

## üõ†Ô∏è Technology Stack

- **Frontend**: React 18+ with TypeScript
- **UI Components**: Radix UI with Tailwind CSS
- **State Management**: React hooks and context
- **AI Integration**: Google Gemini API
- **Icons**: Lucide React
- **Build Tool**: Vite

## üì¶ Installation

1. Install dependencies:
```bash
npm install
```

2. Set up environment variables:
```bash
API_KEY=your_google_genai_api_key
```

3. Start development server:
```bash
npm run dev
```

## üîß Usage

### Basic Implementation

```tsx
import DocumentsHubApp from '@/features/documents-hub/DocumentsHubApp';

export default function DocumentsHub() {
  return <DocumentsHubApp />;
}
```

### Module-Specific Implementation

```tsx
import PlansApp from '@/features/documents-hub/modules/plans/PlansApp';

function MyPlansPage() {
  const addToast = (message: string, type: ToastType) => {
    // Handle toast notifications
  };
  
  return <PlansApp addToast={addToast} />;
}
```

## üé® Customization

### Theme Configuration

The Documents Hub uses a consistent color scheme:
- Primary: Purple (600-700)
- Secondary: Blue (600-700)
- Accent: Cyan (600)
- Background: Slate (50-100)

### Adding New Modules

1. Create module directory: `modules/your-module/`
2. Add module to `HubModule` type
3. Update `hubModules` array in `HubHeader.tsx`
4. Add lazy import in `DocumentsHubApp.tsx`

## üß™ Testing

Run tests:
```bash
npm test
```

## üìö Methodology

The Documents Hub implements **Lean Design Thinking**, a hybrid methodology that combines:

- **Design Thinking**: Deep ethnographic problem discovery
- **Lean Startup**: Testable hypotheses and metrics
- **Continuous Learning**: Document every hypothesis, track every pivot

## ü§ù Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## üìÑ License

This project is part of the IterativStartups platform. All rights reserved.

## üôè Acknowledgments

- Built with React and TypeScript
- UI components from Radix UI
- Icons from Lucide React
- AI powered by Google Gemini

=== FILE: client/src/features/documents-hub/components/PivotModal.tsx ===

import React from 'react';
import { GitBranch } from 'lucide-react';
import { PivotType } from '../types';

interface PivotModalProps {
  isOpen: boolean;
  onClose: () => void;
  pivotTypes: PivotType[];
}

const PivotModal: React.FC<PivotModalProps> = ({ isOpen, onClose, pivotTypes }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[80vh] overflow-auto flex flex-col">
        <div className="bg-gradient-to-r from-purple-600 to-blue-600 p-6 text-white sticky top-0 z-10">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <GitBranch className="w-8 h-8" />
              <div>
                <h3 className="text-2xl font-bold">Pivot Intelligence</h3>
                <p className="text-white/90 text-sm">10 structured pivot types based on validated learning</p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="text-white hover:bg-white/20 rounded-lg p-2 transition-colors"
              aria-label="Close modal"
            >
              ‚úï
            </button>
          </div>
        </div>
        <div className="p-6 overflow-y-auto">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {pivotTypes.map(pivot => (
              <button
                key={pivot.id}
                className="text-left p-4 bg-gradient-to-br from-slate-50 to-slate-100 rounded-lg border-2 border-slate-200 hover:border-purple-400 transition-all focus:outline-none focus:ring-2 focus:ring-purple-400"
              >
                <div className="font-semibold text-slate-800 mb-1">{pivot.name}</div>
                <div className="text-sm text-slate-600">{pivot.description}</div>
                <div className="mt-2 text-xs text-purple-600 font-medium">‚Üí Analyze fit</div>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PivotModal;

=== FILE: client/src/features/documents-hub/components/Toaster.tsx ===

import React from 'react';
import Toast from './Toast';
import { ToastMessage } from '../types';

interface ToasterProps {
    toasts: ToastMessage[];
    removeToast: (id: number) => void;
}

export const Toaster: React.FC<ToasterProps> = ({ toasts, removeToast }) => {
    return (
        <div className="fixed top-24 right-5 z-50 w-full max-w-sm space-y-3">
            {toasts.map(toast => (
                <Toast key={toast.id} toast={toast} onClose={removeToast} />
            ))}
        </div>
    );
};

=== FILE: client/src/features/documents-hub/components/Footer.tsx ===

import React from 'react';
import { Link } from 'wouter';

const Footer: React.FC = () => {
  return (
    <footer className="bg-slate-800 text-white mt-16 py-12">
      <div className="max-w-7xl mx-auto px-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mb-8">
          <div>
            <h3 className="text-xl font-bold mb-4 bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">IterativStartups</h3>
            <p className="text-sm text-slate-400">The comprehensive AI-powered business innovation platform.</p>
          </div>
          <div>
            <h4 className="font-bold mb-3">Documents Hub</h4>
            <ul className="space-y-2 text-sm text-slate-400">
              <li><Link href="#" className="hover:text-white transition-colors">IterativePlans</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">IterativDecks</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">IterativProposals</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">IterativForms</Link></li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold mb-3">Resources</h4>
            <ul className="space-y-2 text-sm text-slate-400">
              <li><Link href="#" className="hover:text-white transition-colors">Blog</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Case Studies</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Methodology</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Certification</Link></li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold mb-3">Company</h4>
            <ul className="space-y-2 text-sm text-slate-400">
              <li><Link href="#" className="hover:text-white transition-colors">About</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Careers</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Partners</Link></li>
              <li><Link href="#" className="hover:text-white transition-colors">Contact</Link></li>
            </ul>
          </div>
        </div>
        <div className="border-t border-slate-700 pt-8 text-center">
          <p className="text-sm text-slate-400">¬© 2025 IterativStartups Inc. ‚Ä¢ "Where uncertainty becomes strategy."</p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

=== FILE: client/src/features/documents-hub/components/HubHeader.tsx ===

import React from 'react';
import { FileText, Presentation, FileSignature, FormInput, Sparkles } from 'lucide-react';
import { Link } from 'wouter';
import { Button } from '@/components/ui/button';
import { HubModule } from '../types';

interface HubHeaderProps {
  activeHub: HubModule;
  setActiveHub: (hub: HubModule) => void;
}

const hubModules = [
  { id: 'plans' as HubModule, label: 'IterativePlans', icon: FileText },
  { id: 'decks' as HubModule, label: 'IterativDecks', icon: Presentation },
  { id: 'proposals' as HubModule, label: 'IterativProposals', icon: FileSignature },
  { id: 'forms' as HubModule, label: 'IterativForms', icon: FormInput },
];

const HubHeader: React.FC<HubHeaderProps> = ({ activeHub, setActiveHub }) => {
  return (
    <header className="bg-white/80 border-b border-slate-200 shadow-sm sticky top-0 z-40 backdrop-blur-lg">
      <div className="max-w-7xl mx-auto px-6 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Sparkles className="w-8 h-8 text-purple-600" />
            <div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-600 bg-clip-text text-transparent">
                Documents Hub
              </h1>
              <p className="text-sm text-slate-500">The Strategic Workspace of IterativStartups</p>
            </div>
          </div>

          <nav className="hidden lg:flex items-center gap-2 bg-slate-100 p-1.5 rounded-full">
            {hubModules.map(mod => {
              const isActive = activeHub === mod.id;
              const Icon = mod.icon;
              return (
                <button
                  key={mod.id}
                  onClick={() => setActiveHub(mod.id)}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full text-sm font-semibold transition-all ${
                    isActive ? 'bg-white text-purple-700 shadow-md' : 'bg-transparent text-slate-600 hover:bg-white/70'
                  }`}
                >
                  <Icon className="w-4 h-4" />
                  {mod.label}
                </button>
              );
            })}
          </nav>

          <div className="flex items-center gap-3">
            <Link href="/login">
              <Button variant="ghost" className="text-slate-600 hover:text-slate-800 font-medium">
                Sign In
              </Button>
            </Link>
            <Button className="bg-gradient-to-r from-purple-600 to-blue-600 text-white font-semibold hover:from-purple-700 hover:to-blue-700 transition-all shadow-md hover:shadow-lg">
              Start Free
            </Button>
          </div>
        </div>
      </div>
    </header>
  );
};

export default HubHeader;
export { HubModule };

=== FILE: client/src/features/documents-hub/components/Toast.tsx ===

import React, { useEffect } from 'react';
import { X, CheckCircle, AlertTriangle, Info } from 'lucide-react';
import { ToastMessage, ToastType } from '../types';

interface ToastProps {
  toast: ToastMessage;
  onClose: (id: number) => void;
}

const ICONS: Record<ToastType, React.ReactNode> = {
  success: <CheckCircle className="w-6 h-6 text-green-500" />,
  error: <AlertTriangle className="w-6 h-6 text-red-500" />,
  info: <Info className="w-6 h-6 text-blue-500" />,
};

const TOAST_STYLES: Record<ToastType, string> = {
  success: 'bg-green-50 border-green-200 text-green-800',
  error: 'bg-red-50 border-red-200 text-red-800',
  info: 'bg-blue-50 border-blue-200 text-blue-800',
};

const Toast: React.FC<ToastProps> = ({ toast, onClose }) => {
  useEffect(() => {
    const timer = setTimeout(() => {
      onClose(toast.id);
    }, 5000); // Auto-close after 5 seconds

    return () => {
      clearTimeout(timer);
    };
  }, [onClose, toast.id]);

  return (
    <div 
        className={`max-w-sm w-full rounded-lg shadow-lg animate-fade-in-up border ${TOAST_STYLES[toast.type]}`}
        role="alert"
        aria-live="assertive"
    >
      <div className="p-4 flex items-start">
        <div className="flex-shrink-0">{ICONS[toast.type]}</div>
        <div className="ml-3 w-0 flex-1 pt-0.5">
          <p className="text-sm font-medium">{toast.message}</p>
        </div>
        <div className="ml-4 flex-shrink-0 flex">
          <button
            onClick={() => onClose(toast.id)}
            className="inline-flex rounded-md p-1.5 text-current/70 hover:bg-current/10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-current/10 focus:ring-current/50"
            aria-label="Close notification"
          >
            <X className="h-5 w-5" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default Toast;

=== FILE: client/src/features/documents-hub/modules/forms/FormsApp.tsx ===

import React from 'react';
import { ToastType } from '../../types';
import { FormInput, Zap, FileText, CheckCircle } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';

interface FormsAppProps {
  addToast: (message: string, type: ToastType) => void;
}

const FormsApp: React.FC<FormsAppProps> = ({ addToast }) => {
  const mockApplications = [
    {
      name: 'Y Combinator',
      type: 'Accelerator',
      deadline: '2025-03-15',
      progress: 75,
    },
    {
      name: 'TechStars',
      type: 'Accelerator',
      deadline: '2025-04-01',
      progress: 30,
    },
    {
      name: 'NSF SBIR',
      type: 'Grant',
      deadline: '2025-05-15',
      progress: 0,
    },
  ];

  return (
    <div className="space-y-8">
      <div className="text-center">
        <div className="inline-block bg-gradient-to-r from-purple-100 to-blue-100 p-4 rounded-full mb-4">
          <FormInput className="w-10 h-10 text-purple-600" />
        </div>
        <h2 className="text-4xl font-bold text-slate-800 mb-2">IterativForms</h2>
        <p className="text-xl text-slate-600 max-w-3xl mx-auto">
          AI-powered application filling for accelerators, grants, and competitions
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-4">
          <h3 className="text-2xl font-bold text-slate-800">Active Applications</h3>
          {mockApplications.map((app, index) => (
            <Card key={index}>
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div>
                    <CardTitle>{app.name}</CardTitle>
                    <CardDescription>{app.type} ‚Ä¢ Deadline: {app.deadline}</CardDescription>
                  </div>
                  <Button
                    size="sm"
                    onClick={() => addToast(`Opening ${app.name} application...`, 'info')}
                  >
                    <Zap className="w-4 h-4 mr-1" />
                    AI Fill
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Progress</span>
                    <span>{app.progress}%</span>
                  </div>
                  <Progress value={app.progress} />
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="w-5 h-5 text-purple-600" />
                Business Plan Sync
              </CardTitle>
              <CardDescription>
                Auto-fill applications using your business plan data
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex items-center gap-2 text-green-600 mb-4">
                <CheckCircle className="w-5 h-5" />
                <span className="text-sm font-medium">Plan Connected</span>
              </div>
              <Button 
                className="w-full"
                onClick={() => addToast('Business plan sync active', 'success')}
              >
                Manage Sync
              </Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Application Templates</CardTitle>
              <CardDescription>
                Browse common application types
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Button 
                  variant="outline" 
                  className="w-full justify-start"
                  onClick={() => addToast('Accelerator templates coming soon!', 'info')}
                >
                  Accelerators
                </Button>
                <Button 
                  variant="outline" 
                  className="w-full justify-start"
                  onClick={() => addToast('Grant templates coming soon!', 'info')}
                >
                  Grants
                </Button>
                <Button 
                  variant="outline" 
                  className="w-full justify-start"
                  onClick={() => addToast('Competition templates coming soon!', 'info')}
                >
                  Competitions
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default FormsApp;

=== FILE: client/src/features/documents-hub/modules/plans/components/ModeToggle.tsx ===

import React from 'react';
import { Brain, Zap } from 'lucide-react';
import { Mode } from '../../../types';

interface ModeToggleProps {
  mode: Mode;
  setMode: (mode: Mode) => void;
}

const ModeToggle: React.FC<ModeToggleProps> = ({ mode, setMode }) => {
  const activeClasses = 'bg-white text-purple-700 shadow-md';
  const inactiveClasses = 'bg-transparent text-slate-700 hover:bg-slate-200';

  return (
    <div className="bg-slate-100 p-1 rounded-full flex items-center gap-1">
      <button
        onClick={() => setMode('fast-track')}
        className={`flex items-center gap-2 px-4 py-2 rounded-full text-sm font-semibold transition-all ${mode === 'fast-track' ? activeClasses : inactiveClasses}`}
      >
        <Zap className="w-4 h-4" />
        Fast Track Mode
      </button>
      <button
        onClick={() => setMode('validated')}
        className={`flex items-center gap-2 px-4 py-2 rounded-full text-sm font-semibold transition-all ${mode === 'validated' ? activeClasses : inactiveClasses}`}
      >
        <Brain className="w-4 h-4" />
        Validated Mode
      </button>
    </div>
  );
};

export default ModeToggle;

=== FILE: client/src/features/documents-hub/modules/plans/PlansApp.tsx ===

import React, { useState } from 'react';
import { Mode, Assumption, ToastType } from '../../types';
import ValidatedMode from './pages/ValidatedMode';
import FastTrackMode from './pages/FastTrackMode';
import ModeToggle from './components/ModeToggle';
import { PLAN_MOCK_ASSUMPTIONS } from './constants';

interface PlansAppProps {
  addToast: (message: string, type: ToastType) => void;
}

const PlansApp: React.FC<PlansAppProps> = ({ addToast }) => {
  const [mode, setMode] = useState<Mode>('validated');
  const [assumptions, setAssumptions] = useState<Assumption[]>([]);
  
  const handlePlanGeneration = () => {
    addToast('Assumptions generated successfully!', 'success');
    setAssumptions(PLAN_MOCK_ASSUMPTIONS);
    setMode('validated');
  };

  const handleClearAssumptions = () => {
    addToast('Assumption dashboard cleared.', 'info');
    setAssumptions([]);
  };

  return (
    <div>
        <div className="flex justify-center mb-8">
            <ModeToggle mode={mode} setMode={setMode} />
        </div>
        
        {mode === 'validated' ? (
          <ValidatedMode 
            assumptions={assumptions}
            onClearAssumptions={handleClearAssumptions}
          />
        ) : (
          <FastTrackMode onGeneratePlan={handlePlanGeneration} addToast={addToast} />
        )}
    </div>
  );
}

export default PlansApp;

=== FILE: client/src/features/documents-hub/modules/plans/constants.ts ===

import { Search, Target, Lightbulb, TestTube, BarChart3, TrendingUp } from 'lucide-react';
import { Phases, Tools, PlanCompetitorRow, PricingTier, RevenueStream, Assumption } from '../../types';

export const PLAN_PHASES: Phases = {
  discover: {
    name: 'Problem Discovery',
    icon: Search,
    color: 'bg-purple-500',
    description: 'Deep ethnographic research to uncover real user problems',
    methodology: 'Design Thinking',
    steps: [
      { id: 'd1', title: 'Stakeholder Mapping', description: 'Identify all actors in the problem space', tool: 'ai-stakeholder-mapper' },
      { id: 'd2', title: 'Ethnographic Research', description: 'Observe users in natural contexts', tool: 'observation-framework' },
      { id: 'd3', title: 'Deep Interviews', description: 'Conduct 15-20 problem-focused interviews', tool: 'interview-generator' },
      { id: 'd4', title: 'Synthesis Workshop', description: 'Extract patterns and insights', tool: 'insight-synthesizer' }
    ]
  },
  define: {
    name: 'Problem Definition',
    icon: Target,
    color: 'bg-blue-500',
    description: 'Frame validated problem as testable hypotheses',
    methodology: 'Lean + Design Thinking',
    steps: [
      { id: 'df1', title: 'Problem Statement', description: 'Craft human-centered problem frame', tool: 'problem-framer' },
      { id: 'df2', title: 'Hypothesis Formation', description: 'Convert insights to testable assumptions', tool: 'hypothesis-builder' },
      { id: 'df3', title: 'Persona Validation', description: 'Build evidence-based personas', tool: 'persona-validator' },
      { id: 'df4', title: 'Success Metrics', description: 'Define quantitative learning goals', tool: 'metrics-framework' }
    ]
  },
  ideate: {
    name: 'Solution Ideation',
    icon: Lightbulb,
    color: 'bg-yellow-500',
    description: 'Generate testable solution concepts rapidly',
    methodology: 'Design Thinking',
    steps: [
      { id: 'i1', title: 'Divergent Generation', description: 'Create 100+ solution concepts', tool: 'ai-idea-multiplier' },
      { id: 'i2', title: 'Assumption Mapping', description: 'Identify riskiest assumptions per solution', tool: 'assumption-mapper' },
      { id: 'i3', title: 'Test Design', description: 'Plan minimum experiments', tool: 'experiment-designer' },
      { id: 'i4', title: 'Prioritization', description: 'Rank by learning/cost ratio', tool: 'priority-matrix' }
    ]
  },
  experiment: {
    name: 'Rapid Experiments',
    icon: TestTube,
    color: 'bg-green-500',
    description: 'Test solutions with minimum viable experiments',
    methodology: 'Lean Startup',
    steps: [
      { id: 'e1', title: 'MVP Definition', description: 'Design minimum testable version', tool: 'mvp-canvas' },
      { id: 'e2', title: 'Landing Page Test', description: 'Validate demand before building', tool: 'landing-builder' },
      { id: 'e3', title: 'Concierge/Wizard', description: 'Manual delivery to test value prop', tool: 'concierge-planner' },
      { id: 'e4', title: 'Prototype Testing', description: 'Test with 5-7 users minimum', tool: 'test-protocol' }
    ]
  },
  measure: {
    name: 'Learn & Measure',
    icon: BarChart3,
    color: 'bg-orange-500',
    description: 'Analyze results and make pivot decisions',
    methodology: 'Lean Startup',
    steps: [
      { id: 'm1', title: 'Data Collection', description: 'Gather qualitative + quantitative data', tool: 'data-dashboard' },
      { id: 'm2', title: 'Cohort Analysis', description: 'Segment by user behavior patterns', tool: 'cohort-analyzer' },
      { id: 'm3', title: 'Learning Documentation', description: 'Record validated/invalidated hypotheses', tool: 'learning-log' },
      { id: 'm4', title: 'Pivot Decision', description: 'Use 10-type framework to decide', tool: 'pivot-intelligence' }
    ]
  },
  scale: {
    name: 'Scale Strategy',
    icon: TrendingUp,
    color: 'bg-red-500',
    description: 'Plan growth with validated business model',
    methodology: 'Business Model Canvas',
    steps: [
      { id: 's1', title: 'Model Validation', description: 'Confirm all 9 canvas blocks', tool: 'bmc-validator' },
      { id: 's2', title: 'Unit Economics', description: 'Calculate validated CAC, LTV, margins', tool: 'economics-calculator' },
      { id: 's3', title: 'Growth Plan', description: 'Design scalable acquisition channels', tool: 'growth-planner' },
      { id: 's4', title: 'Financial Model', description: 'Build projections from real data', tool: 'financial-modeler' }
    ]
  }
};

export const PLAN_TOOLS: Tools = {
  'ai-stakeholder-mapper': {
    name: 'AI Stakeholder Mapper',
    description: 'Answer questions about your market‚ÄîAI identifies all ecosystem players',
    outputs: ['Stakeholder Map', 'Influence Matrix', 'Interview Priority List']
  },
  'observation-framework': {
    name: 'Ethnographic Observation Kit',
    description: 'Structured frameworks for shadowing users in context',
    outputs: ['Observation Protocol', 'Field Notes Template', 'Photo Documentation Guide']
  },
  'interview-generator': {
    name: 'Problem Interview Generator',
    description: 'AI creates custom interview guides focused on problem discovery',
    outputs: ['Interview Script', '5 Whys Framework', 'Pattern Recognition Prompts']
  },
  'insight-synthesizer': {
    name: 'AI Insight Synthesizer',
    description: 'Upload interview notes‚ÄîAI extracts patterns and themes',
    outputs: ['Affinity Map', 'Key Insights Report', 'Problem Hypotheses']
  },
  'problem-framer': {
    name: 'Smart Problem Framer',
    description: 'Convert research into clear problem statements',
    outputs: ['Problem Statement', 'Jobs-to-be-Done Frame', 'Point of View Statement']
  },
  'hypothesis-builder': {
    name: 'Hypothesis Builder',
    description: 'Transform assumptions into testable hypotheses',
    outputs: ['Hypothesis Canvas', 'Assumption Priority Matrix', 'Test Plan']
  },
  'pivot-intelligence': {
    name: 'Pivot Intelligence Engine',
    description: 'Analyze data and recommend structured pivot options',
    outputs: ['Pivot Type Recommendation', 'Evidence Summary', 'Impact Forecast']
  },
  'persona-validator': { name: 'Persona Validator', description: 'Validate personas with data.', outputs: ['Validated Persona'] },
  'metrics-framework': { name: 'Success Metrics Framework', description: 'Define success metrics.', outputs: ['Metrics Dashboard'] },
  'ai-idea-multiplier': { name: 'AI Idea Multiplier', description: 'Generate solution ideas.', outputs: ['Idea List'] },
  'assumption-mapper': { name: 'Assumption Mapper', description: 'Map out risky assumptions.', outputs: ['Assumption Map'] },
  'experiment-designer': { name: 'Experiment Designer', description: 'Design validation experiments.', outputs: ['Experiment Plan'] },
  'priority-matrix': { name: 'Prioritization Matrix', description: 'Prioritize ideas.', outputs: ['Priority Matrix'] },
  'mvp-canvas': { name: 'MVP Canvas', description: 'Define the minimum viable product.', outputs: ['MVP Canvas'] },
  'landing-builder': { name: 'Landing Page Builder', description: 'Build test landing pages.', outputs: ['Landing Page'] },
  'concierge-planner': { name: 'Concierge Planner', description: 'Plan a concierge test.', outputs: ['Concierge Plan'] },
  'test-protocol': { name: 'Test Protocol', description: 'Define user testing protocols.', outputs: ['Test Protocol'] },
  'data-dashboard': { name: 'Data Dashboard', description: 'Collect experiment data.', outputs: ['Data Dashboard'] },
  'cohort-analyzer': { name: 'Cohort Analyzer', description: 'Analyze user cohorts.', outputs: ['Cohort Analysis'] },
  'learning-log': { name: 'Learning Log', description: 'Log validated learnings.', outputs: ['Learning Log'] },
  'bmc-validator': { name: 'BMC Validator', description: 'Validate the business model canvas.', outputs: ['Validated BMC'] },
  'economics-calculator': { name: 'Unit Economics Calculator', description: 'Calculate unit economics.', outputs: ['Economics Report'] },
  'growth-planner': { name: 'Growth Planner', description: 'Plan growth channels.', outputs: ['Growth Plan'] },
  'financial-modeler': { name: 'Financial Modeler', description: 'Build financial models.', outputs: ['Financial Model'] },
};

export const PLAN_COMPETITOR_COMPARISON: PlanCompetitorRow[] = [
  {
    feature: 'Methodology',
    iterativePlans: 'Lean Design Thinking (hybrid)',
    growthWheel: 'Structured business planning',
    venturePlanner: 'AI-generated projections',
    livePlan: 'Traditional business plan'
  },
  {
    feature: 'Starting Point',
    iterativePlans: 'Problem discovery with users',
    growthWheel: 'Business concept definition',
    venturePlanner: 'Vision/goals questions',
    livePlan: 'Executive summary'
  },
  {
    feature: 'Validation Approach',
    iterativePlans: 'Built-in experiment framework',
    growthWheel: 'Advisor-dependent',
    venturePlanner: 'None (assumptions only)',
    livePlan: 'None (projections only)'
  },
  {
    feature: 'Pivot Support',
    iterativePlans: '10-type pivot framework + tracking',
    growthWheel: 'Manual worksheet updates',
    venturePlanner: 'Regenerate from scratch',
    livePlan: 'Rewrite document'
  },
  {
    feature: 'Learning Documentation',
    iterativePlans: 'Automated hypothesis tracking',
    growthWheel: 'Manual notes',
    venturePlanner: 'Not supported',
    livePlan: 'Not supported'
  },
  {
    feature: 'AI Integration',
    iterativePlans: 'Research synthesis + experiment design',
    growthWheel: 'None',
    venturePlanner: 'Plan generation only',
    livePlan: 'Basic text assistance'
  }
];

export const PLAN_PRICING_TIERS: PricingTier[] = [
  {
    name: 'Explorer',
    price: 'Free',
    description: 'For validating your first idea',
    features: [
      '1 active project',
      'Problem discovery tools',
      'Basic AI assistance',
      'Community access',
      'Learning resources'
    ],
    cta: 'Start Free',
    highlighted: false
  },
  {
    name: 'Founder',
    price: '$49/mo',
    description: 'For serious entrepreneurs',
    features: [
      'Unlimited projects',
      'Full AI tools suite',
      'Pivot Intelligence',
      'Experiment tracking',
      'Advisor marketplace access',
      'Priority support'
    ],
    cta: 'Start Building',
    highlighted: true
  },
  {
    name: 'Team',
    price: '$199/mo',
    description: 'For startup teams',
    features: [
      'Everything in Founder',
      '5 team members',
      'Collaboration tools',
      'Custom integrations',
      'Dedicated success manager',
      'White-label reports'
    ],
    cta: 'Scale Together',
    highlighted: false
  },
  {
    name: 'Enterprise',
    price: 'Custom',
    description: 'For accelerators & universities',
    features: [
      'Everything in Team',
      'Unlimited cohorts',
      'Custom branding',
      'API access',
      'On-premise option',
      'Training & certification'
    ],
    cta: 'Contact Sales',
    highlighted: false
  }
];

export const PLAN_REVENUE_STREAMS: RevenueStream[] = [
  { stream: 'SaaS Subscriptions', year1: '$240K', year2: '$2.4M', year3: '$12M', percentage: '60%' },
  { stream: 'Advisor Marketplace (20% commission)', year1: '$40K', year2: '$600K', year3: '$4M', percentage: '20%' },
  { stream: 'Certification Programs', year1: '$30K', year2: '$400K', year3: '$2M', percentage: '10%' },
  { stream: 'Enterprise Licenses', year1: '$50K', year2: '$600K', year3: '$2M', percentage: '10%' },
  { stream: 'Total ARR', year1: '$360K', year2: '$4M', year3: '$20M', percentage: '100%' }
];

export const PLAN_MOCK_ASSUMPTIONS: Assumption[] = [
    { id: 'a1', text: 'Small businesses will pay $99/month for this solution.', risk: 'high', status: 'untested', sourceSection: 'Financial Projections' },
    { id: 'a2', text: 'The problem occurs frequently enough to justify a dedicated solution.', risk: 'high', status: 'untested', sourceSection: 'Problem Statement' },
    { id: 'a3', text: 'Users cannot easily solve this problem with existing tools like spreadsheets.', risk: 'high', status: 'untested', sourceSection: 'Competitive Analysis' },
    { id: 'a4', text: 'The target market (SMBs) can be reached effectively through content marketing.', risk: 'medium', status: 'untested', sourceSection: 'Go-to-Market Strategy' },
    { id: 'a5', text: 'Our solution can reduce costs for clients by at least 30%.', risk: 'medium', status: 'untested', sourceSection: 'Value Proposition' },
    { id: 'a6', text: 'The core technology is feasible to build within 6 months.', risk: 'low', status: 'untested', sourceSection: 'Product Roadmap' },
];

=== FILE: client/src/features/documents-hub/modules/plans/pages/ValidatedMode.tsx ===

import React, { useState } from 'react';
import { Users, Target, Lightbulb, TestTube, TrendingUp, RefreshCw, CheckCircle, Circle, Sparkles, Brain, FileText, ArrowRight, Play, GitBranch, BookOpen, Award, AlertTriangle, X } from 'lucide-react';
import { PLAN_PHASES, PLAN_TOOLS, PLAN_COMPETITOR_COMPARISON, PLAN_PRICING_TIERS, PLAN_REVENUE_STREAMS } from '../constants';
import { PIVOT_TYPES, NAV_TABS } from '../../../constants';
import { PlatformTab, Assumption } from '../../../types';
import PivotModal from '../../../components/PivotModal';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

interface ValidatedModeProps {
  assumptions: Assumption[];
  onClearAssumptions: () => void;
}

const AssumptionDashboard: React.FC<{assumptions: Assumption[], onClear: () => void}> = ({ assumptions, onClear }) => {
    const riskColorMap = {
        high: 'border-red-500 bg-red-50 text-red-800',
        medium: 'border-yellow-500 bg-yellow-50 text-yellow-800',
        low: 'border-blue-500 bg-blue-50 text-blue-800',
    };

    return (
        <div className="bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 rounded-2xl shadow-lg p-8 mb-8 border-2 border-purple-200 relative">
            <div className="flex items-start justify-between mb-4">
                <div>
                    <h3 className="text-2xl font-bold text-slate-800">Assumption Dashboard</h3>
                    <p className="text-slate-600 mt-1">
                        Your Fast Track plan generated <span className="font-bold text-purple-600">{assumptions.length} assumptions</span>. It's time to validate the riskiest ones.
                    </p>
                </div>
                <button 
                    onClick={onClear} 
                    className="text-slate-500 hover:text-slate-800 hover:bg-slate-200 rounded-full p-2 transition-colors"
                    aria-label="Clear assumptions and start fresh"
                >
                    <X className="w-5 h-5"/>
                </button>
            </div>
            <div className="space-y-3">
                {assumptions.filter(a => a.risk === 'high').map(assumption => (
                    <div key={assumption.id} className={`p-4 rounded-lg border-l-4 flex items-start gap-4 ${riskColorMap[assumption.risk]}`}>
                        <AlertTriangle className="w-6 h-6 text-red-500 flex-shrink-0 mt-0.5" />
                        <div className="flex-1">
                            <p className="font-semibold">{assumption.text}</p>
                            <p className="text-xs opacity-80 mt-1">Source: {assumption.sourceSection} ‚Ä¢ Risk: High</p>
                        </div>
                        <Button size="sm" className="bg-purple-600 hover:bg-purple-700">
                            Design Experiment
                        </Button>
                    </div>
                ))}
            </div>
             <p className="text-sm text-slate-500 mt-4 text-center">Proceed with the <span className="font-semibold">Problem Discovery</span> phase below to start validating these assumptions.</p>
        </div>
    );
};

const ValidatedMode: React.FC<ValidatedModeProps> = ({ assumptions, onClearAssumptions }) => {
  const [activeTab, setActiveTab] = useState<PlatformTab>('platform');
  const [activePhase, setActivePhase] = useState<keyof typeof PLAN_PHASES>('discover');
  const [completedSteps, setCompletedSteps] = useState<Record<string, boolean>>({});
  const [currentIteration] = useState(1);
  const [pivotHistory] = useState([]);
  const [showPivotModal, setShowPivotModal] = useState(false);

  const toggleStep = (stepId: string) => {
    setCompletedSteps(prev => ({ ...prev, [stepId]: !prev[stepId] }));
  };

  const currentPhase = PLAN_PHASES[activePhase];
  const CurrentIcon = currentPhase?.icon;

  const renderPlatformContent = () => (
    <div>
      {assumptions && assumptions.length > 0 && (
        <AssumptionDashboard assumptions={assumptions} onClear={onClearAssumptions} />
      )}
      
      {(!assumptions || assumptions.length === 0) && (
        <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-600 rounded-2xl shadow-2xl p-12 text-white text-center mb-12">
          <h2 className="text-5xl font-bold mb-4">Planning Meets Reality</h2>
          <p className="text-xl text-white/90 mb-6 max-w-3xl mx-auto">
            Stop writing fiction. Start with real problems, validate with real users, pivot with real data.
            The only platform built on Lean Design Thinking methodology.
          </p>
          <div className="flex flex-wrap items-center justify-center gap-4 mb-8">
            <div className="bg-white/20 backdrop-blur px-4 py-2 rounded-lg">
              <div className="text-sm text-white/80">Trusted by</div>
              <div className="text-2xl font-bold">2,500+</div>
              <div className="text-sm">Startups</div>
            </div>
            <div className="bg-white/20 backdrop-blur px-4 py-2 rounded-lg">
              <div className="text-sm text-white/80">Experiments Run</div>
              <div className="text-2xl font-bold">15,000+</div>
              <div className="text-sm">Validated</div>
            </div>
            <div className="bg-white/20 backdrop-blur px-4 py-2 rounded-lg">
              <div className="text-sm text-white/80">Pivot Rate</div>
              <div className="text-2xl font-bold">67%</div>
              <div className="text-sm">Success</div>
            </div>
          </div>
          <Button size="lg" className="bg-white text-purple-600 hover:bg-slate-50">
            <Play className="w-6 h-6 mr-2" /> Start Problem Discovery <ArrowRight className="w-6 h-6 ml-2" />
          </Button>
        </div>
      )}
      
      <div className="bg-white rounded-xl shadow-md p-6 mb-8">
        <h3 className="text-2xl font-bold text-slate-800 mb-6">Lean Design Thinking Process</h3>
        <div className="grid grid-cols-2 lg:grid-cols-6 gap-4">
          {Object.entries(PLAN_PHASES).map(([key, phase]) => {
            const PhaseIcon = phase.icon;
            const isActive = activePhase === key;
            const allStepsComplete = phase.steps.every(step => completedSteps[step.id]);
            return (
              <button
                key={key}
                onClick={() => setActivePhase(key as keyof typeof PLAN_PHASES)}
                className={`p-4 rounded-lg transition-all ${isActive ? `${phase.color} text-white shadow-lg scale-105` : allStepsComplete ? 'bg-green-50 text-green-700 border-2 border-green-200' : 'bg-slate-50 text-slate-600 hover:bg-slate-100'}`}
              >
                <div className="flex flex-col items-center gap-2">
                  <PhaseIcon className="w-8 h-8" />
                  <span className="font-semibold text-sm text-center">{phase.name}</span>
                  <span className="text-xs opacity-80">{phase.methodology}</span>
                </div>
              </button>
            );
          })}
        </div>
      </div>

      {currentPhase && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-6">
            <div className={`${currentPhase.color} rounded-xl p-6 text-white`}>
              <div className="flex items-center gap-4 mb-3">
                <CurrentIcon className="w-12 h-12" />
                <div>
                  <div className="text-sm opacity-90 mb-1">{currentPhase.methodology}</div>
                  <h2 className="text-3xl font-bold">{currentPhase.name}</h2>
                  <p className="text-white/90 mt-1">{currentPhase.description}</p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-md p-6">
              <h3 className="text-xl font-bold text-slate-800 mb-4">Action Steps</h3>
              <div className="space-y-3">
                {currentPhase.steps.map((step) => {
                  const isComplete = completedSteps[step.id];
                  return (
                    <button key={step.id} onClick={() => toggleStep(step.id)} className={`w-full text-left p-4 rounded-lg border-2 transition-all ${isComplete ? 'bg-green-50 border-green-300' : 'bg-slate-50 border-slate-200 hover:border-slate-300'}`}>
                      <div className="flex items-start gap-3">
                        {isComplete ? <CheckCircle className="w-6 h-6 text-green-600 flex-shrink-0 mt-0.5" /> : <Circle className="w-6 h-6 text-slate-400 flex-shrink-0 mt-0.5" />}
                        <div className="flex-1">
                          <div className={`font-semibold flex items-center gap-2 ${isComplete ? 'text-green-900' : 'text-slate-800'}`}>
                            {step.title}
                            <Badge variant="secondary" className="bg-gradient-to-r from-purple-500 to-blue-500 text-white">
                              <Sparkles className="w-3 h-3 mr-1" /> AI
                            </Badge>
                          </div>
                          <div className={`text-sm mt-1 ${isComplete ? 'text-green-700' : 'text-slate-600'}`}>{step.description}</div>
                          <div className="text-xs text-purple-600 font-medium mt-2">Tool: {PLAN_TOOLS[step.tool]?.name}</div>
                        </div>
                      </div>
                    </button>
                  );
                })}
              </div>
            </div>
          </div>

          <div className="space-y-6">
            <div className="bg-gradient-to-br from-purple-600 to-blue-600 rounded-xl shadow-lg p-6 text-white">
              <div className="flex items-center gap-2 mb-4">
                <GitBranch className="w-6 h-6" />
                <h3 className="text-lg font-bold">Pivot Intelligence</h3>
              </div>
              <p className="text-sm text-white/90 mb-4">Track all learning. When data suggests a pivot, we help you choose the right type.</p>
              <Button onClick={() => setShowPivotModal(true)} variant="secondary" className="w-full bg-white/20 hover:bg-white/30 text-white">
                Explore 10 Pivot Types
              </Button>
              <div className="mt-4 text-xs text-white/80">{pivotHistory.length} pivots documented this iteration</div>
            </div>

            <div className="bg-white rounded-xl shadow-md p-6">
              <div className="flex items-center gap-2 mb-4">
                <RefreshCw className="w-5 h-5 text-purple-600" />
                <h3 className="text-lg font-bold text-slate-800">Iteration {currentIteration}</h3>
              </div>
              <div className="space-y-4">
                {Object.entries(PLAN_PHASES).map(([key, phase]) => {
                  const completed = phase.steps.filter(s => completedSteps[s.id]).length;
                  const total = phase.steps.length;
                  const percentage = total > 0 ? (completed / total) * 100 : 0;
                  return (
                    <div key={key}>
                      <div className="flex justify-between text-sm mb-1">
                        <span className="font-medium text-slate-700">{phase.name}</span>
                        <span className="text-slate-500">{completed}/{total}</span>
                      </div>
                      <Progress value={percentage} className="h-2" />
                    </div>
                  );
                })}
              </div>
            </div>

            <div className="bg-gradient-to-br from-slate-700 to-slate-800 rounded-xl p-6 text-white">
              <h3 className="text-lg font-bold mb-3">Core Philosophy</h3>
              <div className="space-y-2 text-sm text-white/90">
                <p>üéØ <strong>Problem-First:</strong> Deep discovery before solutions</p>
                <p>üß™ <strong>Hypothesis-Driven:</strong> Test assumptions systematically</p>
                <p>üìä <strong>Qual + Quant:</strong> Ethnography meets metrics</p>
                <p>üîÑ <strong>Pivot-Ready:</strong> Change is learning, not failure</p>
                <p>üöÄ <strong>Scale on Evidence:</strong> Grow only what's validated</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );

  const renderContent = () => {
    switch (activeTab) {
      case 'platform':
        return renderPlatformContent();
      case 'methodology':
        return (
          <div className="space-y-8">
            <div className="bg-white rounded-xl shadow-md p-8">
              <h2 className="text-3xl font-bold text-slate-800 mb-4">Lean Design Thinking Framework</h2>
              <p className="text-lg text-slate-600 mb-6">We combine the empathy and creativity of Design Thinking with the rigor and validation of Lean Startup. This hybrid methodology addresses critical gaps in both approaches.</p>
              {/* Methodology content */}
            </div>
          </div>
        );
      case 'competitors':
        return (
          <div className="space-y-8">
            <div className="bg-white rounded-xl shadow-md p-8">
              <h2 className="text-3xl font-bold text-slate-800 mb-6">How We're Different</h2>
              <div className="overflow-x-auto">
                <table className="w-full min-w-[800px]">
                  <thead>
                    <tr className="border-b-2 border-slate-300">
                      <th className="text-left py-4 px-4 font-bold text-slate-800">Feature</th>
                      <th className="text-left py-4 px-4 font-bold text-purple-600 bg-purple-50">IterativePlans</th>
                      <th className="text-left py-4 px-4 font-bold text-slate-600">Advisor Platforms</th>
                      <th className="text-left py-4 px-4 font-bold text-slate-600">AI Plan Generators</th>
                      <th className="text-left py-4 px-4 font-bold text-slate-600">Traditional Tools</th>
                    </tr>
                  </thead>
                  <tbody>
                    {PLAN_COMPETITOR_COMPARISON.map((row, idx) => (
                      <tr key={idx} className="border-b border-slate-200 hover:bg-slate-50">
                        <td className="py-4 px-4 font-semibold text-slate-700">{row.feature}</td>
                        <td className="py-4 px-4 bg-purple-50 text-purple-900 font-medium">{row.iterativePlans}</td>
                        <td className="py-4 px-4 text-slate-600">{row.growthWheel}</td>
                        <td className="py-4 px-4 text-slate-600">{row.venturePlanner}</td>
                        <td className="py-4 px-4 text-slate-600">{row.livePlan}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );
      case 'pricing':
        return (
          <div className="space-y-8">
            <div className="text-center mb-12">
              <h2 className="text-4xl font-bold text-slate-800 mb-4">Pricing That Scales With You</h2>
              <p className="text-xl text-slate-600 max-w-3xl mx-auto">Start free. Upgrade when you're ready to scale. Enterprise solutions for accelerators and universities.</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 items-start mb-12">
              {PLAN_PRICING_TIERS.map((tier, idx) => (
                <div key={idx} className={`bg-white rounded-xl shadow-md p-6 transition-transform transform ${tier.highlighted ? 'ring-4 ring-purple-600 scale-105' : ''}`}>
                  {tier.highlighted && (
                    <Badge className="bg-gradient-to-r from-purple-600 to-blue-600 text-white mb-4">MOST POPULAR</Badge>
                  )}
                  <h3 className="text-2xl font-bold text-slate-800 mb-2">{tier.name}</h3>
                  <div className="text-4xl font-bold text-purple-600 mb-2">{tier.price}</div>
                  <p className="text-sm text-slate-600 mb-6 h-10">{tier.description}</p>
                  <ul className="space-y-3 mb-6">
                    {tier.features.map((feature, i) => (
                      <li key={i} className="flex items-start gap-2 text-sm text-slate-700">
                        <CheckCircle className="w-5 h-5 text-green-500 flex-shrink-0" />
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul>
                  <Button className={`w-full ${tier.highlighted ? 'bg-gradient-to-r from-purple-600 to-blue-600' : ''}`} variant={tier.highlighted ? 'default' : 'outline'}>
                    {tier.cta}
                  </Button>
                </div>
              ))}
            </div>
          </div>
        );
      default: 
        return null;
    }
  };

  return (
    <>
      <PivotModal isOpen={showPivotModal} onClose={() => setShowPivotModal(false)} pivotTypes={PIVOT_TYPES} />
      <div className="bg-white border-b border-slate-200">
        <div className="max-w-7xl mx-auto px-6">
          <div className="flex gap-6">
            {NAV_TABS.map(tab => {
              const TabIcon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center gap-2 py-4 px-2 border-b-2 transition-all ${activeTab === tab.id ? 'border-purple-600 text-purple-600 font-semibold' : 'border-transparent text-slate-600 hover:text-slate-800'}`}
                >
                  <TabIcon className="w-5 h-5" />
                  {tab.label}
                </button>
              );
            })}
          </div>
        </div>
      </div>
      <div className="mt-8">
        {renderContent()}
      </div>
    </>
  );
};

export default ValidatedMode;

=== FILE: client/src/features/documents-hub/modules/plans/pages/FastTrackMode.tsx ===

import React, { useState, useCallback } from 'react';
import { FileText, Zap, Link, UploadCloud } from 'lucide-react';
import { ToastType } from '../../../types';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';

interface FastTrackModeProps {
  onGeneratePlan: () => void;
  addToast: (message: string, type: ToastType) => void;
}

type InputMethod = 'scratch' | 'url' | 'document';

const FastTrackMode: React.FC<FastTrackModeProps> = ({ onGeneratePlan, addToast }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [inputMethod, setInputMethod] = useState<InputMethod>('scratch');
  const [formData, setFormData] = useState({
    problem: '',
    solution: '',
    market: '',
    advantage: '',
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { id, value } = e.target;
    setFormData(prev => ({ ...prev, [id]: value }));
  };

  const handleComingSoon = () => {
    addToast('This feature is coming soon!', 'info');
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (inputMethod !== 'scratch') {
        handleComingSoon();
        return;
    }
    setIsLoading(true);
    setTimeout(() => {
      onGeneratePlan();
    }, 2000);
  };

  const tabs = [
    { id: 'scratch' as InputMethod, label: 'From Scratch', icon: FileText },
    { id: 'url' as InputMethod, label: 'From Web URL', icon: Link },
    { id: 'document' as InputMethod, label: 'From Document', icon: UploadCloud },
  ];

  const isSubmittable = inputMethod === 'scratch' && formData.problem.trim() !== '' && formData.solution.trim() !== '';

  return (
    <div className="space-y-8">
      <div className="text-center">
        <div className="inline-block bg-gradient-to-r from-purple-100 to-blue-100 p-4 rounded-full mb-4">
            <Zap className="w-10 h-10 text-purple-600" />
        </div>
        <h2 className="text-4xl font-bold text-slate-800 mb-2">Fast Track Mode</h2>
        <p className="text-xl text-slate-600 max-w-3xl mx-auto">
          Generate a complete, professional business plan in minutes. Answer a few questions about your vision, and let our AI build the first draft.
        </p>
      </div>

      <div className="bg-white rounded-2xl shadow-xl p-8 max-w-4xl mx-auto">
        <h3 className="text-2xl font-bold text-slate-800 mb-6 text-center">Step 1: Provide Source Material</h3>

        <div className="flex justify-center mb-6 border-b border-slate-200">
          {tabs.map(tab => {
            const TabIcon = tab.icon;
            const isActive = inputMethod === tab.id;
            return (
              <button
                key={tab.id}
                type="button"
                onClick={() => setInputMethod(tab.id)}
                className={`flex items-center gap-2 py-3 px-6 border-b-2 text-sm font-semibold transition-colors ${
                  isActive
                    ? 'border-purple-600 text-purple-600'
                    : 'border-transparent text-slate-500 hover:text-slate-800 hover:border-slate-300'
                }`}
              >
                <TabIcon className="w-4 h-4" />
                {tab.label}
              </button>
            );
          })}
        </div>
        
        <form onSubmit={handleSubmit} className="space-y-6 min-h-[350px]">
          {inputMethod === 'scratch' && (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                      <Label htmlFor="problem">What problem are you solving?</Label>
                      <Textarea id="problem" value={formData.problem} onChange={handleInputChange} rows={3} className="mt-1" placeholder="e.g., Small businesses struggle with managing their cash flow accurately." />
                  </div>
                  <div>
                      <Label htmlFor="solution">What is your proposed solution?</Label>
                      <Textarea id="solution" value={formData.solution} onChange={handleInputChange} rows={3} className="mt-1" placeholder="e.g., An AI-powered dashboard that provides real-time cash flow projections." />
                  </div>
              </div>
              <div>
                  <Label htmlFor="market">Who experiences this problem? (Your Target Market)</Label>
                  <Input type="text" id="market" value={formData.market} onChange={handleInputChange} className="mt-1" placeholder="e.g., US-based small businesses with 5-50 employees" />
              </div>
              <div>
                  <Label htmlFor="advantage">What is your unique competitive advantage?</Label>
                  <Input type="text" id="advantage" value={formData.advantage} onChange={handleInputChange} className="mt-1" placeholder="e.g., Our predictive AI is 15% more accurate than competitors." />
              </div>
            </>
          )}

          {inputMethod === 'url' && (
            <div>
              <Label htmlFor="url">Enter a URL to analyze</Label>
              <Input type="url" id="url" disabled className="mt-1 bg-slate-50 cursor-not-allowed" placeholder="https://example.com/about" />
              <p className="text-xs text-slate-500 mt-2">Feature coming soon. We'll analyze the content of the page to generate your plan.</p>
            </div>
          )}

          {inputMethod === 'document' && (
             <div>
                <Label>Upload a Document</Label>
                <div onClick={handleComingSoon} className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-slate-300 border-dashed rounded-md cursor-pointer bg-slate-50">
                    <div className="space-y-1 text-center">
                        <UploadCloud className="mx-auto h-12 w-12 text-slate-400" />
                        <p className="text-sm text-slate-500">Feature coming soon</p>
                        <p className="text-xs text-slate-500">PDF, DOCX, TXT up to 10MB</p>
                    </div>
                </div>
            </div>
          )}

          <div className="border-t border-slate-200 pt-6">
            <Button
              type="submit"
              disabled={isLoading || !isSubmittable}
              className="w-full"
              size="lg"
            >
              {isLoading ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Generating Your Plan...
                </>
              ) : (
                <>
                  <Zap className="w-6 h-6 mr-2" />
                  Generate Plan & Extract Assumptions
                </>
              )}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default FastTrackMode;

=== FILE: client/src/features/documents-hub/modules/decks/DecksApp.tsx ===

import React, { useState, useCallback } from 'react';
import FastTrackMode from './pages/FastTrackMode';
import ValidatedMode from './pages/ValidatedMode';
import ModeToggle from './components/ModeToggle';
import { Mode, Assumption, ToastType } from '../../types';

interface DecksAppProps {
  showToast: (message: string, type: ToastType) => void;
}

const DecksApp: React.FC<DecksAppProps> = ({ showToast }) => {
  const [mode, setMode] = useState<Mode>('fast-track');
  const [assumptions, setAssumptions] = useState<Assumption[]>([]);
  const [deckContent, setDeckContent] = useState<string | null>(null);

  const handleDeckGeneration = useCallback((newDeckContent: string, newAssumptions: Assumption[]) => {
    setDeckContent(newDeckContent);
    setAssumptions(newAssumptions);
    setMode('validated');
  }, []);

  const handleClearAssumptions = useCallback(() => {
    setAssumptions([]);
    setDeckContent(null);
  }, []);

  const handleSetMode = (newMode: Mode) => {
    setMode(newMode);
  };

  return (
    <div>
        <div className="flex justify-center mb-8">
            <ModeToggle mode={mode} setMode={handleSetMode} />
        </div>
      
        {mode === 'fast-track' ? (
          <FastTrackMode onGenerateDeck={handleDeckGeneration} showToast={showToast} />
        ) : (
          <ValidatedMode 
            deckContent={deckContent}
            assumptions={assumptions} 
            onClearAssumptions={handleClearAssumptions} 
          />
        )}
    </div>
  );
};

export default DecksApp;

=== FILE: client/src/features/documents-hub/modules/decks/components/ModeToggle.tsx ===

import React from 'react';
import { Brain, Zap } from 'lucide-react';
import { Mode } from '../../../types';

interface ModeToggleProps {
  mode: Mode;
  setMode: (mode: Mode) => void;
}

const ModeToggle: React.FC<ModeToggleProps> = ({ mode, setMode }) => {
  return (
    <div className="relative bg-slate-100 p-1 rounded-full flex items-center gap-1 w-[324px]">
      <span
        className="absolute top-1 left-1 h-[calc(100%-8px)] w-[160px] bg-white rounded-full shadow-md transition-transform duration-300 ease-in-out"
        style={{ transform: mode === 'validated' ? 'translateX(calc(100% + 4px))' : 'translateX(0)' }}
      />
      <button
        onClick={() => setMode('fast-track')}
        className={`relative z-10 flex items-center justify-center gap-2 w-[160px] py-2 rounded-full text-sm font-semibold transition-colors duration-300 ${mode === 'fast-track' ? 'text-purple-700' : 'text-slate-600'}` }
        aria-pressed={mode === 'fast-track'}
      >
        <Zap className="w-4 h-4" />
        Fast Track Mode
      </button>
      <button
        onClick={() => setMode('validated')}
        className={`relative z-10 flex items-center justify-center gap-2 w-[160px] py-2 rounded-full text-sm font-semibold transition-colors duration-300 ${mode === 'validated' ? 'text-purple-700' : 'text-slate-600'}` }
        aria-pressed={mode === 'validated'}
      >
        <Brain className="w-4 h-4" />
        Validated Mode
      </button>
    </div>
  );
};

export default ModeToggle;


=== FILE: client/src/features/documents-hub/modules/decks/constants.ts ===

import { Search, Target, Lightbulb, TestTube, BarChart3, TrendingUp, Briefcase, Palette, TrendingUpIcon } from 'lucide-react';
import { Phases, Tools, DeckCompetitorRow, PricingTier, RevenueStream, DeckStyle } from '../../types';

export const DECK_PHASES: Phases = {
  discover: {
    name: 'Problem Discovery',
    icon: Search,
    color: 'bg-purple-500',
    description: 'Deep ethnographic research to uncover real user problems',
    methodology: 'Design Thinking',
    steps: [
      { id: 'd1', title: 'Stakeholder Mapping', description: 'Identify all actors in the problem space', tool: 'ai-stakeholder-mapper' },
      { id: 'd2', title: 'Ethnographic Research', description: 'Observe users in natural contexts', tool: 'observation-framework' },
      { id: 'd3', title: 'Deep Interviews', description: 'Conduct 15-20 problem-focused interviews', tool: 'interview-generator' },
      { id: 'd4', title: 'Synthesis Workshop', description: 'Extract patterns and insights', tool: 'insight-synthesizer' }
    ]
  },
  define: {
    name: 'Problem Definition',
    icon: Target,
    color: 'bg-blue-500',
    description: 'Frame validated problem as testable hypotheses',
    methodology: 'Lean + Design Thinking',
    steps: [
      { id: 'df1', title: 'Problem Statement', description: 'Craft human-centered problem frame', tool: 'problem-framer' },
      { id: 'df2', title: 'Hypothesis Formation', description: 'Convert insights to testable assumptions', tool: 'hypothesis-builder' },
      { id: 'df3', title: 'Persona Validation', description: 'Build evidence-based personas', tool: 'persona-validator' },
      { id: 'df4', title: 'Success Metrics', description: 'Define quantitative learning goals', tool: 'metrics-framework' }
    ]
  },
  ideate: {
    name: 'Solution Ideation',
    icon: Lightbulb,
    color: 'bg-yellow-500',
    description: 'Generate testable solution concepts rapidly',
    methodology: 'Design Thinking',
    steps: [
      { id: 'i1', title: 'Divergent Generation', description: 'Create 100+ solution concepts', tool: 'ai-idea-multiplier' },
      { id: 'i2', title: 'Assumption Mapping', description: 'Identify riskiest assumptions per solution', tool: 'assumption-mapper' },
      { id: 'i3', title: 'Test Design', description: 'Plan minimum experiments', tool: 'experiment-designer' },
      { id: 'i4', title: 'Prioritization', description: 'Rank by learning/cost ratio', tool: 'priority-matrix' }
    ]
  },
  experiment: {
    name: 'Rapid Experiments',
    icon: TestTube,
    color: 'bg-green-500',
    description: 'Test solutions with minimum viable experiments',
    methodology: 'Lean Startup',
    steps: [
      { id: 'e1', title: 'MVP Definition', description: 'Design minimum testable version', tool: 'mvp-canvas' },
      { id: 'e2', title: 'Landing Page Test', description: 'Validate demand before building', tool: 'landing-builder' },
      { id: 'e3', title: 'Concierge/Wizard', description: 'Manual delivery to test value prop', tool: 'concierge-planner' },
      { id: 'e4', title: 'Prototype Testing', description: 'Test with 5-7 users minimum', tool: 'test-protocol' }
    ]
  },
  measure: {
    name: 'Learn & Measure',
    icon: BarChart3,
    color: 'bg-orange-500',
    description: 'Analyze results and make pivot decisions',
    methodology: 'Lean Startup',
    steps: [
      { id: 'm1', title: 'Data Collection', description: 'Gather qualitative + quantitative data', tool: 'data-dashboard' },
      { id: 'm2', title: 'Cohort Analysis', description: 'Segment by user behavior patterns', tool: 'cohort-analyzer' },
      { id: 'm3', title: 'Learning Documentation', description: 'Record validated/invalidated hypotheses', tool: 'learning-log' },
      { id: 'm4', title: 'Pivot Decision', description: 'Use 10-type framework to decide', tool: 'pivot-intelligence' }
    ]
  },
  scale: {
    name: 'Scale Strategy',
    icon: TrendingUp,
    color: 'bg-red-500',
    description: 'Plan growth with validated business model',
    methodology: 'Business Model Canvas',
    steps: [
      { id: 's1', title: 'Model Validation', description: 'Confirm all 9 canvas blocks', tool: 'bmc-validator' },
      { id: 's2', title: 'Unit Economics', description: 'Calculate validated CAC, LTV, margins', tool: 'economics-calculator' },
      { id: 's3', title: 'Growth Plan', description: 'Design scalable acquisition channels', tool: 'growth-planner' },
      { id: 's4', title: 'Financial Model', description: 'Build projections from real data', tool: 'financial-modeler' }
    ]
  }
};

export const DECK_TOOLS: Tools = {
  'ai-stakeholder-mapper': {
    name: 'AI Stakeholder Mapper',
    description: 'Answer questions about your market‚ÄîAI identifies all ecosystem players',
    outputs: ['Stakeholder Map', 'Influence Matrix', 'Interview Priority List']
  },
  'observation-framework': {
    name: 'Ethnographic Observation Kit',
    description: 'Structured frameworks for shadowing users in context',
    outputs: ['Observation Protocol', 'Field Notes Template', 'Photo Documentation Guide']
  },
  'interview-generator': {
    name: 'Problem Interview Generator',
    description: 'AI creates custom interview guides focused on problem discovery',
    outputs: ['Interview Script', '5 Whys Framework', 'Pattern Recognition Prompts']
  },
  'insight-synthesizer': {
    name: 'AI Insight Synthesizer',
    description: 'Upload interview notes‚ÄîAI extracts patterns and themes',
    outputs: ['Affinity Map', 'Key Insights Report', 'Problem Hypotheses']
  },
  'problem-framer': {
    name: 'Smart Problem Framer',
    description: 'Convert research into clear problem statements',
    outputs: ['Problem Statement', 'Jobs-to-be-Done Frame', 'Point of View Statement']
  },
  'hypothesis-builder': {
    name: 'Hypothesis Builder',
    description: 'Transform assumptions into testable hypotheses',
    outputs: ['Hypothesis Canvas', 'Assumption Priority Matrix', 'Test Plan']
  },
  'pivot-intelligence': {
    name: 'Pivot Intelligence Engine',
    description: 'Analyze data and recommend structured pivot options',
    outputs: ['Pivot Type Recommendation', 'Evidence Summary', 'Impact Forecast']
  },
  'persona-validator': { name: 'Persona Validator', description: 'Validate personas with data.', outputs: ['Validated Persona'] },
  'metrics-framework': { name: 'Success Metrics Framework', description: 'Define success metrics.', outputs: ['Metrics Dashboard'] },
  'ai-idea-multiplier': { name: 'AI Idea Multiplier', description: 'Generate solution ideas.', outputs: ['Idea List'] },
  'assumption-mapper': { name: 'Assumption Mapper', description: 'Map out risky assumptions.', outputs: ['Assumption Map'] },
  'experiment-designer': { name: 'Experiment Designer', description: 'Design validation experiments.', outputs: ['Experiment Plan'] },
  'priority-matrix': { name: 'Prioritization Matrix', description: 'Prioritize ideas.', outputs: ['Priority Matrix'] },
  'mvp-canvas': { name: 'MVP Canvas', description: 'Define the minimum viable product.', outputs: ['MVP Canvas'] },
  'landing-builder': { name: 'Landing Page Builder', description: 'Build test landing pages.', outputs: ['Landing Page'] },
  'concierge-planner': { name: 'Concierge Planner', description: 'Plan a concierge test.', outputs: ['Concierge Plan'] },
  'test-protocol': { name: 'Test Protocol', description: 'Define user testing protocols.', outputs: ['Test Protocol'] },
  'data-dashboard': { name: 'Data Dashboard', description: 'Collect experiment data.', outputs: ['Data Dashboard'] },
  'cohort-analyzer': { name: 'Cohort Analyzer', description: 'Analyze user cohorts.', outputs: ['Cohort Analysis'] },
  'learning-log': { name: 'Learning Log', description: 'Log validated learnings.', outputs: ['Learning Log'] },
  'bmc-validator': { name: 'BMC Validator', description: 'Validate the business model canvas.', outputs: ['Validated BMC'] },
  'economics-calculator': { name: 'Unit Economics Calculator', description: 'Calculate unit economics.', outputs: ['Economics Report'] },
  'growth-planner': { name: 'Growth Planner', description: 'Plan growth channels.', outputs: ['Growth Plan'] },
  'financial-modeler': { name: 'Financial Modeler', description: 'Build financial models.', outputs: ['Financial Model'] },
};

export const DECK_STYLES: DeckStyle[] = [
  {
    id: 'classic',
    name: 'Classic Investor',
    description: 'Traditional format trusted by top VCs',
    icon: Briefcase,
    instruction: 'Create a professional, data-driven deck following the classic investor pitch format with clear problem, solution, market, traction, team, and financials slides.'
  },
  {
    id: 'story',
    name: 'Story-Driven',
    description: 'Narrative arc for emotional connection',
    icon: Palette,
    instruction: 'Build a compelling narrative that takes investors on a journey, emphasizing the human story behind the startup and creating emotional engagement.'
  },
  {
    id: 'data',
    name: 'Data-First',
    description: 'Metrics and validation for analytical investors',
    icon: TrendingUpIcon,
    instruction: 'Focus heavily on data, metrics, validation experiments, and quantitative evidence. Ideal for analytical investors who want proof points.'
  }
];

export const DECK_COMPETITOR_COMPARISON: DeckCompetitorRow[] = [
  {
    feature: 'Starting Point',
    iterativDecks: 'Validated assumptions from experiments',
    growthWheel: 'Business plan outline',
    venturePlanner: 'Template selection',
    livePlan: 'Manual slide creation'
  },
  {
    feature: 'AI Integration',
    iterativDecks: 'Context-aware generation + validation',
    growthWheel: 'None',
    venturePlanner: 'Template fill-in',
    livePlan: 'Basic suggestions'
  },
  {
    feature: 'Deck Styles',
    iterativDecks: '3 evidence-backed formats',
    growthWheel: '1 standard template',
    venturePlanner: '5+ visual templates',
    livePlan: 'Custom design'
  },
  {
    feature: 'Assumption Tracking',
    iterativDecks: 'Auto-extracted + validation workflow',
    growthWheel: 'Not supported',
    venturePlanner: 'Not supported',
    livePlan: 'Manual notes'
  },
  {
    feature: 'Iteration Support',
    iterativDecks: 'Built-in pivot framework',
    growthWheel: 'Version history only',
    venturePlanner: 'Regenerate deck',
    livePlan: 'Manual updates'
  },
  {
    feature: 'Investor Intelligence',
    iterativDecks: 'Coming Q2 2025',
    growthWheel: 'None',
    venturePlanner: 'None',
    livePlan: 'None'
  }
];

export const DECK_PRICING_TIERS: PricingTier[] = [
  {
    name: 'Explorer',
    price: 'Free',
    description: 'For validating your first deck',
    features: [
      '1 active deck',
      'All 3 deck styles',
      'Basic AI generation',
      'Assumption extraction',
      'Community access'
    ],
    cta: 'Start Free',
    highlighted: false
  },
  {
    name: 'Founder',
    price: '$49/mo',
    description: 'For serious fundraising',
    features: [
      'Unlimited decks',
      'Advanced AI tools',
      'Pitch Intelligence',
      'Iteration tracking',
      'Export to PowerPoint/PDF',
      'Priority support'
    ],
    cta: 'Start Fundraising',
    highlighted: true
  },
  {
    name: 'Team',
    price: '$199/mo',
    description: 'For startup teams',
    features: [
      'Everything in Founder',
      '5 team members',
      'Collaboration tools',
      'Version control',
      'White-label reports',
      'Dedicated success manager'
    ],
    cta: 'Scale Together',
    highlighted: false
  },
  {
    name: 'Enterprise',
    price: 'Custom',
    description: 'For accelerators & VCs',
    features: [
      'Everything in Team',
      'Unlimited portfolio companies',
      'Custom branding',
      'API access',
      'Investor matching (Q2 2025)',
      'Training & certification'
    ],
    cta: 'Contact Sales',
    highlighted: false
  }
];

export const DECK_REVENUE_STREAMS: RevenueStream[] = [
  { stream: 'SaaS Subscriptions', year1: '$180K', year2: '$1.8M', year3: '$9M', percentage: '55%' },
  { stream: 'Accelerator Licenses', year1: '$60K', year2: '$800K', year3: '$4M', percentage: '25%' },
  { stream: 'Investor Matching (20% fee)', year1: '$40K', year2: '$600K', year3: '$3M', percentage: '18%' },
  { stream: 'Premium Templates', year1: '$10K', year2: '$200K', year3: '$400K', percentage: '2%' },
  { stream: 'Total ARR', year1: '$290K', year2: '$3.4M', year3: '$16.4M', percentage: '100%' }
];


=== FILE: client/src/features/documents-hub/modules/decks/pages/ValidatedMode.tsx ===

import React, { useState } from 'react';
import { CheckCircle, Circle, Sparkles, ArrowRight, Play, GitBranch, BookOpen, AlertTriangle, X, Eye, LayoutGrid, BarChart2, Tag, RefreshCw } from 'lucide-react';
import { DECK_PHASES, DECK_TOOLS, DECK_COMPETITOR_COMPARISON, DECK_PRICING_TIERS, DECK_REVENUE_STREAMS } from '../constants';
import { PIVOT_TYPES } from '../../../constants';
import { PlatformTab, Assumption } from '../../../types';
import PivotModal from '../../../components/PivotModal';

interface ValidatedModeProps {
  deckContent: string | null;
  assumptions: Assumption[];
  onClearAssumptions: () => void;
}

const AssumptionDashboard: React.FC<{assumptions: Assumption[], onClear: () => void}> = ({ assumptions, onClear }) => {
    const riskColorMap = {
        high: 'border-red-500 bg-red-50 text-red-800',
        medium: 'border-yellow-500 bg-yellow-50 text-yellow-800',
        low: 'border-blue-500 bg-blue-50 text-blue-800',
    };

    return (
        <div className="bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 rounded-2xl shadow-lg p-8 mb-8 border-2 border-purple-200 relative">
            <div className="flex items-start justify-between mb-4">
                <div>
                    <h3 className="text-2xl font-bold text-slate-800">Assumption Dashboard</h3>
                    <p className="text-slate-600 mt-1">
                        Your Fast Track deck generated <span className="font-bold text-purple-600">{assumptions.length} assumptions</span>. It's time to validate the riskiest ones.
                    </p>
                </div>
                <button 
                    onClick={onClear} 
                    className="text-slate-500 hover:text-slate-800 hover:bg-slate-200 rounded-full p-2 transition-colors"
                    aria-label="Clear assumptions and start fresh"
                >
                    <X className="w-5 h-5"/>
                </button>
            </div>
            <div className="space-y-3">
                {assumptions.filter(a => a.risk === 'high').map(assumption => (
                    <div key={assumption.id} className={`p-4 rounded-lg border-l-4 flex items-start gap-4 ${riskColorMap[assumption.risk]}` }>
                        <AlertTriangle className="w-6 h-6 text-red-500 flex-shrink-0 mt-0.5" />
                        <div className="flex-1">
                            <p className="font-semibold">{assumption.text}</p>
                            <p className="text-xs opacity-80 mt-1">Source: {assumption.sourceSection} ‚Ä¢ Risk: High</p>
                        </div>
                        <button className="bg-purple-600 text-white text-xs font-semibold py-1 px-3 rounded-full hover:bg-purple-700 transition-colors">Design Experiment</button>
                    </div>
                ))}
            </div>
             <p className="text-sm text-slate-500 mt-4 text-center">Proceed with the <span className="font-semibold">Problem Discovery</span> phase below to start validating these assumptions.</p>
        </div>
    );
};

const ValidatedMode: React.FC<ValidatedModeProps> = ({ deckContent, assumptions, onClearAssumptions }) => {
  const [activeTab, setActiveTab] = useState<PlatformTab>('platform');
  const [activePhase, setActivePhase] = useState<keyof typeof DECK_PHASES>('discover');
  const [completedSteps, setCompletedSteps] = useState<Record<string, boolean>>({});
  const [currentIteration] = useState(1);
  const [pivotHistory] = useState([]);
  const [showPivotModal, setShowPivotModal] = useState(false);

  const toggleStep = (stepId: string) => {
    setCompletedSteps(prev => ({ ...prev, [stepId]: !prev[stepId] }));
  };

  const currentPhase = DECK_PHASES[activePhase];
  const CurrentIcon = currentPhase?.icon;
  
  const hasGeneratedContent = deckContent && assumptions.length > 0;
  
  const NAV_TABS_DECKS: {id: PlatformTab, label: string, icon: React.ComponentType<any>}[] = [
    { id: 'platform', label: 'Platform', icon: LayoutGrid },
    { id: 'methodology', label: 'Methodology', icon: BookOpen },
    { id: 'competitors', label: 'Competitors', icon: BarChart2 },
    { id: 'pricing', label: 'Pricing', icon: Tag },
  ];

  const renderContent = () => {
    switch (activeTab) {
      case 'platform':
        return (
          <div>
             {hasGeneratedContent && (
               <>
                <div className="bg-white rounded-xl shadow-md p-6 mb-8 flex items-center justify-between">
                    <div>
                        <h3 className="text-2xl font-bold text-slate-800">Your AI-Generated Deck is Ready!</h3>
                        <p className="text-slate-600 mt-1">Below are the riskiest assumptions extracted from your deck. Use the workflow to validate them.</p>
                    </div>
                    <button className="bg-gradient-to-r from-purple-600 to-blue-600 text-white font-semibold py-2 px-6 rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all shadow-md hover:shadow-lg flex items-center gap-2">
                        <Eye className="w-5 h-5"/>
                        View Deck
                    </button>
                </div>
                <AssumptionDashboard assumptions={assumptions} onClear={onClearAssumptions} />
               </>
            )}
            
            {!hasGeneratedContent && (
                 <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-600 rounded-2xl shadow-2xl p-12 text-white text-center mb-12">
                    <h2 className="text-5xl font-bold mb-4">Presentations Meet Reality</h2>
                    <p className="text-xl text-white/90 mb-6 max-w-3xl mx-auto">
                        Stop pitching fiction. Start with real problems, validate with real users, pivot with real data.
                        The only platform for building evidence-backed pitch decks.
                    </p>
                    <div className="flex flex-wrap items-center justify-center gap-4 mb-8">
                        <div className="bg-white/20 backdrop-blur px-4 py-2 rounded-lg"><div className="text-sm text-white/80">Trusted by</div><div className="text-2xl font-bold">2,500+</div><div className="text-sm">Startups</div></div>
                        <div className="bg-white/20 backdrop-blur px-4 py-2 rounded-lg"><div className="text-sm text-white/80">Experiments Run</div><div className="text-2xl font-bold">15,000+</div><div className="text-sm">Validated</div></div>
                        <div className="bg-white/20 backdrop-blur px-4 py-2 rounded-lg"><div className="text-sm text-white/80">Pivot Rate</div><div className="text-2xl font-bold">67%</div><div className="text-sm">Success</div></div>
                    </div>
                    <button className="bg-white text-purple-600 font-bold py-4 px-8 rounded-xl hover:bg-slate-50 transition-all inline-flex items-center gap-3 text-lg shadow-lg">
                        <Play className="w-6 h-6" /> Start Problem Discovery <ArrowRight className="w-6 h-6" />
                    </button>
                 </div>
            )}
           
            <div className="bg-white rounded-xl shadow-md p-6 mb-8">
              <h3 className="text-2xl font-bold text-slate-800 mb-6">Lean Design Thinking Process</h3>
              <div className="grid grid-cols-2 lg:grid-cols-6 gap-4">
                {Object.entries(DECK_PHASES).map(([key, phase]) => {
                  const PhaseIcon = phase.icon;
                  const isActive = activePhase === key;
                  const allStepsComplete = phase.steps.every(step => completedSteps[step.id]);
                  return (
                    <button
                      key={key}
                      onClick={() => setActivePhase(key as keyof typeof DECK_PHASES)}
                      className={`p-4 rounded-lg transition-all duration-300 ${isActive ? ` text-white shadow-lg scale-105 ${phase.color}` : allStepsComplete ? 'bg-green-50 text-green-700 border-2 border-green-200' : 'bg-slate-50 text-slate-600 hover:bg-slate-100'}` }
                    >
                      <div className="flex flex-col items-center gap-2">
                        <PhaseIcon className="w-8 h-8" />
                        <span className="font-semibold text-sm text-center">{phase.name}</span>
                        <span className="text-xs opacity-80">{phase.methodology}</span>
                      </div>
                    </button>
                  );
                })}
              </div>
            </div>

            {currentPhase && (
              <div key={activePhase} className="animate-fade-in-up grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div className="lg:col-span-2 space-y-6">
                  <div className={`rounded-xl p-6 text-white ${currentPhase.color}` }>
                    <div className="flex items-center gap-4 mb-3">
                      {CurrentIcon && <CurrentIcon className="w-12 h-12" />}
                      <div>
                        <div className="text-sm opacity-90 mb-1">{currentPhase.methodology}</div>
                        <h2 className="text-3xl font-bold">{currentPhase.name}</h2>
                        <p className="text-white/90 mt-1">{currentPhase.description}</p>
                      </div>
                    </div>
                  </div>

                  <div className="bg-white rounded-xl shadow-md p-6">
                    <h3 className="text-xl font-bold text-slate-800 mb-4">Action Steps</h3>
                    <div className="space-y-3">
                      {currentPhase.steps.map((step) => {
                        const isComplete = completedSteps[step.id];
                        return (
                          <button key={step.id} onClick={() => toggleStep(step.id)} className={`w-full text-left p-4 rounded-lg border-2 transition-all duration-300 ${isComplete ? 'bg-green-50 border-green-300' : 'bg-slate-50 border-slate-200 hover:border-slate-300'}` }>
                            <div className="flex items-start gap-3">
                              {isComplete ? <CheckCircle className="w-6 h-6 text-green-600 flex-shrink-0 mt-0.5 animate-pop-in" /> : <Circle className="w-6 h-6 text-slate-400 flex-shrink-0 mt-0.5" />}
                              <div className="flex-1">
                                <div className={`font-semibold flex items-center gap-2 ${isComplete ? 'text-green-900' : 'text-slate-800'}` }>
                                  {step.title}
                                  <span className="bg-gradient-to-r from-purple-500 to-blue-500 text-white text-xs px-2 py-0.5 rounded-full flex items-center gap-1">
                                    <Sparkles className="w-3 h-3" /> AI
                                  </span>
                                </div>
                                <div className={`text-sm mt-1 ${isComplete ? 'text-green-700' : 'text-slate-600'}` }>{step.description}</div>
                                <div className="text-xs text-purple-600 font-medium mt-2">Tool: {DECK_TOOLS[step.tool]?.name}</div>
                              </div>
                            </div>
                          </button>
                        );
                      })}
                    </div>
                  </div>
                </div>

                <div className="space-y-6">
                  <div className="bg-gradient-to-br from-purple-600 to-blue-600 rounded-xl shadow-lg p-6 text-white">
                    <div className="flex items-center gap-2 mb-4"><GitBranch className="w-6 h-6" /><h3 className="text-lg font-bold">Pivot Intelligence</h3></div>
                    <p className="text-sm text-white/90 mb-4">Track all learning. When data suggests a pivot, we help you choose the right type.</p>
                    <button onClick={() => setShowPivotModal(true)} className="w-full bg-white/20 hover:bg-white/30 text-white font-semibold py-3 px-4 rounded-lg transition-all">Explore 10 Pivot Types</button>
                    <div className="mt-4 text-xs text-white/80">{pivotHistory.length} pivots documented this iteration</div>
                  </div>

                  <div className="bg-white rounded-xl shadow-md p-6">
                    <div className="flex items-center gap-2 mb-4"><RefreshCw className="w-5 h-5 text-purple-600" /><h3 className="text-lg font-bold text-slate-800">Iteration {currentIteration}</h3></div>
                    <div className="space-y-4">
                      {Object.entries(DECK_PHASES).map(([key, phase]) => {
                        const completed = phase.steps.filter(s => completedSteps[s.id]).length;
                        const total = phase.steps.length;
                        const percentage = total > 0 ? (completed / total) * 100 : 0;
                        return (
                          <div key={key}><div className="flex justify-between text-sm mb-1"><span className="font-medium text-slate-700">{phase.name}</span><span className="text-slate-500">{completed}/{total}</span></div><div className="w-full bg-slate-200 rounded-full h-2"><div className={`${phase.color} h-2 rounded-full transition-all` } style={{ width: `${percentage}%`  }} /></div></div>
                        );
                      })}
                    </div>
                  </div>

                  <div className="bg-gradient-to-br from-slate-700 to-slate-800 rounded-xl p-6 text-white">
                    <h3 className="text-lg font-bold mb-3">Core Philosophy</h3>
                    <div className="space-y-2 text-sm text-white/90">
                      <p>üéØ <strong>Problem-First:</strong> Deep discovery before solutions</p>
                      <p>üß™ <strong>Hypothesis-Driven:</strong> Test assumptions systematically</p>
                      <p>üìä <strong>Qual + Quant:</strong> Ethnography meets metrics</p>
                      <p>üîÑ <strong>Pivot-Ready:</strong> Change is learning, not failure</p>
                      <p>üöÄ <strong>Scale on Evidence:</strong> Grow only what's validated</p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        );
      case 'methodology':
        return (
          <div className="space-y-8">
            <div className="bg-white rounded-xl shadow-md p-8">
              <h2 className="text-3xl font-bold text-slate-800 mb-4">From Fiction to Evidence</h2>
              <p className="text-lg text-slate-600 mb-6">
                Most pitch decks are fiction. Beautiful slides full of unvalidated claims, market projections, and hopeful assumptions. 
                IterativDecks helps you build presentations grounded in reality.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-red-50 border-l-4 border-red-400 p-6 rounded">
                  <h4 className="font-bold text-red-900 mb-2 text-xl">‚ùå Traditional Approach</h4>
                  <ul className="text-sm text-slate-700 space-y-2">
                    <li>‚Ä¢ Start with slides, fill with guesses</li>
                    <li>‚Ä¢ No validation before presenting</li>
                    <li>‚Ä¢ Investors see through weak claims</li>
                    <li>‚Ä¢ Pivot means starting over</li>
                  </ul>
                </div>
                <div className="bg-green-50 border-l-4 border-green-400 p-6 rounded">
                  <h4 className="font-bold text-green-900 mb-2 text-xl">‚úì IterativDecks Approach</h4>
                  <ul className="text-sm text-slate-700 space-y-2">
                    <li>‚Ä¢ Start with validation, build deck from evidence</li>
                    <li>‚Ä¢ Every claim backed by experiment</li>
                    <li>‚Ä¢ Investor confidence through proof</li>
                    <li>‚Ä¢ Deck evolves with learning</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        );
      case 'competitors':
        return (
          <div className="space-y-8">
            <div className="bg-white rounded-xl shadow-md p-8">
              <h2 className="text-3xl font-bold text-slate-800 mb-6">How We're Different</h2>
              <div className="overflow-x-auto">
                <table className="w-full min-w-[800px]">
                  <thead>
                    <tr className="border-b-2 border-slate-300">
                      <th className="text-left py-4 px-4 font-bold text-slate-800">Feature</th>
                      <th className="text-left py-4 px-4 font-bold text-purple-600 bg-purple-50">IterativDecks</th>
                      <th className="text-left py-4 px-4 font-bold text-slate-600">Advisor Platforms</th>
                      <th className="text-left py-4 px-4 font-bold text-slate-600">AI Generators</th>
                      <th className="text-left py-4 px-4 font-bold text-slate-600">Manual Tools</th>
                    </tr>
                  </thead>
                  <tbody>
                    {DECK_COMPETITOR_COMPARISON.map((row, idx) => (
                      <tr key={idx} className="border-b border-slate-200 hover:bg-slate-50">
                        <td className="py-4 px-4 font-semibold text-slate-700">{row.feature}</td>
                        <td className="py-4 px-4 bg-purple-50 text-purple-900 font-medium">{row.iterativDecks}</td>
                        <td className="py-4 px-4 text-slate-600">{row.growthWheel}</td>
                        <td className="py-4 px-4 text-slate-600">{row.venturePlanner}</td>
                        <td className="py-4 px-4 text-slate-600">{row.livePlan}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );
      case 'pricing':
        return (
          <div className="space-y-8">
            <div className="text-center mb-12">
              <h2 className="text-4xl font-bold text-slate-800 mb-4">Pricing That Scales With You</h2>
              <p className="text-xl text-slate-600 max-w-3xl mx-auto">Start free. Upgrade when you're ready to fundraise.</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 items-start mb-12">
              {DECK_PRICING_TIERS.map((tier, idx) => (
                <div key={idx} className={`bg-white rounded-xl shadow-md p-6 transition-transform transform ${tier.highlighted ? 'ring-4 ring-purple-600 scale-105' : ''}` }>
                  {tier.highlighted && (<div className="bg-gradient-to-r from-purple-600 to-blue-600 text-white text-xs font-bold px-3 py-1 rounded-full w-fit mb-4">MOST POPULAR</div>)}
                  <h3 className="text-2xl font-bold text-slate-800 mb-2">{tier.name}</h3>
                  <div className="text-4xl font-bold text-purple-600 mb-2">{tier.price}</div>
                  <p className="text-sm text-slate-600 mb-6 h-10">{tier.description}</p>
                  <ul className="space-y-3 mb-6">
                    {tier.features.map((feature, i) => (
                      <li key={i} className="flex items-start gap-2 text-sm text-slate-700">
                        <CheckCircle className="w-5 h-5 text-green-500 flex-shrink-0" />
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul>
                  <button className={`w-full py-3 px-4 rounded-lg font-semibold transition-all ${tier.highlighted ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-700 hover:to-blue-700' : 'bg-slate-100 text-slate-700 hover:bg-slate-200'}` }>{tier.cta}</button>
                </div>
              ))}
            </div>
            <div className="bg-white rounded-xl shadow-md p-8">
              <h2 className="text-3xl font-bold text-slate-800 mb-6">Revenue Streams</h2>
              <div className="overflow-x-auto mb-6">
                <table className="w-full min-w-[700px]">
                  <thead>
                    <tr className="border-b-2 border-slate-300">
                      <th className="text-left py-3 px-4 font-bold text-slate-800">Revenue Stream</th>
                      <th className="text-right py-3 px-4 font-bold text-slate-800">Year 1</th>
                      <th className="text-right py-3 px-4 font-bold text-slate-800">Year 2</th>
                      <th className="text-right py-3 px-4 font-bold text-slate-800">Year 3</th>
                      <th className="text-right py-3 px-4 font-bold text-slate-800">% of Total</th>
                    </tr>
                  </thead>
                  <tbody>
                    {DECK_REVENUE_STREAMS.map((row, idx) => (
                      <tr key={idx} className={`border-b border-slate-200 ${row.stream === 'Total ARR' ? 'bg-purple-50 font-bold' : ''}` }>
                        <td className="py-3 px-4 text-slate-700">{row.stream}</td>
                        <td className="py-3 px-4 text-right text-slate-700">{row.year1}</td>
                        <td className="py-3 px-4 text-right text-slate-700">{row.year2}</td>
                        <td className="py-3 px-4 text-right text-purple-600 font-semibold">{row.year3}</td>
                        <td className="py-3 px-4 text-right text-slate-700">{row.percentage}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );
      default: return null;
    }
  };

  return (
    <>
      <PivotModal isOpen={showPivotModal} onClose={() => setShowPivotModal(false)} pivotTypes={PIVOT_TYPES} />
      <div className="bg-white border-b border-slate-200">
        <div className="max-w-7xl mx-auto px-6">
          <div className="flex gap-6">
            {NAV_TABS_DECKS.map(tab => {
              const TabIcon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center gap-2 py-4 px-2 border-b-2 transition-all ${activeTab === tab.id ? 'border-purple-600 text-purple-600 font-semibold' : 'border-transparent text-slate-600 hover:text-slate-800'}` }
                >
                  <TabIcon className="w-5 h-5" />
                  {tab.label}
                </button>
              );
            })}
          </div>
        </div>
      </div>
      <div className="mt-8">
        {renderContent()}
      </div>
    </>
  );
};

export default ValidatedMode;


=== FILE: client/src/features/documents-hub/modules/decks/pages/FastTrackMode.tsx ===

import React, { useState } from 'react';
import { Zap, Sparkles, ArrowRight, Loader2, PenLine, Globe, FileText } from 'lucide-react';
import { Assumption, ToastType } from '../../../types';
import { DECK_STYLES } from '../constants';

interface FastTrackModeProps {
  onGenerateDeck: (deckContent: string, assumptions: Assumption[]) => void;
  showToast: (message: string, type: ToastType) => void;
}

type InputMethod = 'scratch' | 'url' | 'doc';

const FastTrackMode: React.FC<FastTrackModeProps> = ({ onGenerateDeck, showToast }) => {
    const [isLoading, setIsLoading] = useState(false);
    const [activeInputMethod, setActiveInputMethod] = useState<InputMethod>('scratch');
    const [selectedStyleId, setSelectedStyleId] = useState<string>(DECK_STYLES[0].id);
    
    const [formInputs, setFormInputs] = useState({
        problem: '',
        solution: '',
        market: '',
        advantage: ''
    });
    
    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormInputs(prev => ({ ...prev, [name]: value }));
    };

    const handleComingSoon = () => {
        showToast('This feature is coming soon!', 'info');
    };

    const handleGenerateDeck = async () => {
        if (activeInputMethod !== 'scratch') {
            handleComingSoon();
            return;
        }

        const selectedStyle = DECK_STYLES.find(s => s.id === selectedStyleId);
        if (!selectedStyle) {
            showToast('Please select a deck style.', 'error');
            return;
        }

        if (!formInputs.problem || !formInputs.solution) {
            showToast('Please describe the problem and your solution.', 'error');
            return;
        }

        setIsLoading(true);
        
        try {
            // Simulate AI generation
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const mockDeckContent = `# Slide 1: Problem\n${formInputs.problem}\n\n# Slide 2: Solution\n${formInputs.solution}`;
            const mockAssumptions: Assumption[] = [
                { id: `ft-${Date.now()}-1`, text: 'Customers will pay for this solution', risk: 'high', status: 'untested', sourceSection: 'Solution' },
                { id: `ft-${Date.now()}-2`, text: 'The problem is frequent enough to justify a solution', risk: 'high', status: 'untested', sourceSection: 'Problem' },
                { id: `ft-${Date.now()}-3`, text: 'Target market size is accurately estimated', risk: 'medium', status: 'untested', sourceSection: 'Market' }
            ];

            onGenerateDeck(mockDeckContent, mockAssumptions);
            showToast('Successfully generated your deck and assumptions!', 'success');

        } catch(e) {
            console.error(e);
            showToast(`Deck generation failed: ${(e as Error).message}`, 'error');
        } finally {
            setIsLoading(false);
        }
    };
    
    const inputMethods = [
        { id: 'scratch' as InputMethod, label: 'From Scratch', icon: PenLine },
        { id: 'url' as InputMethod, label: 'From Web URL', icon: Globe },
        { id: 'doc' as InputMethod, label: 'From Document', icon: FileText },
    ];

    const isSubmittable = activeInputMethod === 'scratch' && formInputs.problem.trim() !== '' && formInputs.solution.trim() !== '';

    return (
        <div className="space-y-8 animate-fade-in-up">
            <div className="text-center">
                <div className="inline-block bg-gradient-to-r from-purple-100 to-blue-100 p-4 rounded-full mb-4">
                    <Zap className="w-10 h-10 text-purple-600" />
                </div>
                <h2 className="text-4xl font-bold text-slate-800 mb-2">Fast Track Your First Draft</h2>
                <p className="text-xl text-slate-600 max-w-3xl mx-auto">
                    Generate an investor-ready deck and a validation plan in minutes.
                </p>
            </div>
            
            <div className="bg-white rounded-2xl shadow-xl p-8 max-w-4xl mx-auto space-y-8">
                <div>
                    <h3 className="text-xl font-bold text-slate-800 mb-4">Step 1: Choose your starting point</h3>
                     <div className="flex justify-center mb-6 border-b border-slate-200">
                        {inputMethods.map(tab => {
                            const TabIcon = tab.icon;
                            const isActive = activeInputMethod === tab.id;
                            return (
                            <button
                                key={tab.id}
                                type="button"
                                onClick={() => setActiveInputMethod(tab.id)}
                                className={`flex items-center gap-2 py-3 px-6 border-b-2 text-sm font-semibold transition-colors ${
                                isActive
                                    ? 'border-purple-600 text-purple-600'
                                    : 'border-transparent text-slate-500 hover:text-slate-800 hover:border-slate-300'
                                }`}
                            >
                                <TabIcon className="w-4 h-4" />
                                {tab.label}
                            </button>
                            );
                        })}
                    </div>
                </div>

                <div className="min-h-[220px]">
                    {activeInputMethod === 'scratch' && (
                        <div className="space-y-4">
                             <textarea name="problem" value={formInputs.problem} onChange={handleInputChange} rows={2} className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500" placeholder="What problem are you solving?"></textarea>
                             <textarea name="solution" value={formInputs.solution} onChange={handleInputChange} rows={2} className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500" placeholder="What is your proposed solution?"></textarea>
                             <input type="text" name="market" value={formInputs.market} onChange={handleInputChange} className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500" placeholder="Who is your target market?" />
                             <input type="text" name="advantage" value={formInputs.advantage} onChange={handleInputChange} className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-purple-500 focus:border-purple-500" placeholder="What is your unique advantage?" />
                        </div>
                    )}
                     {activeInputMethod === 'url' && (
                        <div>
                            <label htmlFor="url" className="block text-sm font-medium text-slate-700 mb-1">Enter a URL to analyze</label>
                            <input type="url" id="url" disabled className="w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm bg-slate-50 cursor-not-allowed" placeholder="https://your-landing-page.com" />
                            <p className="text-xs text-slate-500 mt-2">Feature coming soon. We'll analyze the content of the page to generate your deck.</p>
                        </div>
                    )}
                    {activeInputMethod === 'doc' && (
                         <div>
                            <label className="block text-sm font-medium text-slate-700 mb-1">Upload a Document</label>
                            <div onClick={handleComingSoon} className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-slate-300 border-dashed rounded-md cursor-pointer bg-slate-50">
                                <div className="space-y-1 text-center">
                                    <FileText className="mx-auto h-12 w-12 text-slate-400" />
                                    <p className="text-sm text-slate-500">Feature coming soon</p>
                                    <p className="text-xs text-slate-500">PDF, DOCX, TXT up to 10MB</p>
                                </div>
                            </div>
                        </div>
                    )}
                </div>

                <div className="border-t border-slate-200 pt-8">
                     <h3 className="text-xl font-bold text-slate-800 mb-4">Step 2: Select your deck style</h3>
                     <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        {DECK_STYLES.map(style => {
                            const StyleIcon = style.icon;
                            return (
                                <button
                                    key={style.id}
                                    onClick={() => setSelectedStyleId(style.id)}
                                    className={`text-left p-4 rounded-lg border-2 transition-all ${selectedStyleId === style.id ? 'bg-purple-50 border-purple-500' : 'bg-slate-50 border-slate-200 hover:border-slate-400'}` }
                                >
                                    <div className="flex items-center gap-3 mb-2">
                                        <StyleIcon className={`w-6 h-6 ${selectedStyleId === style.id ? 'text-purple-600' : 'text-slate-500'}` } />
                                        <h4 className="font-bold text-slate-800">{style.name}</h4>
                                    </div>
                                    <p className="text-sm text-slate-600">{style.description}</p>
                                </button>
                            );
                        })}
                     </div>
                </div>

                 <div className="border-t border-slate-200 pt-8">
                     <button 
                      onClick={handleGenerateDeck}
                      disabled={isLoading || !isSubmittable}
                      className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white font-bold py-4 px-8 rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all text-lg shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3"
                    >
                      {isLoading ? (
                        <>
                            <Loader2 className="w-6 h-6 animate-spin" />
                            Generating Your Deck...
                        </>
                      ) : (
                        <>
                            <Sparkles className="w-6 h-6" />
                            Generate Deck & Extract Assumptions
                            <ArrowRight className="w-6 h-6" />
                        </>
                      )}
                    </button>
                    <p className="text-sm text-slate-500 mt-4 text-center">
                        This process generates your "fiction" deck. The real work starts in Validated Mode.
                    </p>
                </div>
            </div>
        </div>
    );
};

export default FastTrackMode;


=== FILE: client/src/features/documents-hub/modules/proposals/ProposalsApp.tsx ===

import React from 'react';
import { ToastType } from '../../types';
import { FileSignature, Target, Users, TrendingUp } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

interface ProposalsAppProps {
  addToast: (message: string, type: ToastType) => void;
}

const ProposalsApp: React.FC<ProposalsAppProps> = ({ addToast }) => {
  return (
    <div className="space-y-8">
      <div className="text-center">
        <div className="inline-block bg-gradient-to-r from-purple-100 to-blue-100 p-4 rounded-full mb-4">
          <FileSignature className="w-10 h-10 text-purple-600" />
        </div>
        <h2 className="text-4xl font-bold text-slate-800 mb-2">IterativProposals</h2>
        <p className="text-xl text-slate-600 max-w-3xl mx-auto">
          Win more deals with AI-powered proposal creation and optimization
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="w-5 h-5 text-purple-600" />
              RFP Response
            </CardTitle>
            <CardDescription>
              Automated RFP analysis and response generation
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button 
              className="w-full"
              onClick={() => addToast('RFP automation coming soon!', 'info')}
            >
              Start RFP
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="w-5 h-5 text-blue-600" />
              RFI Management
            </CardTitle>
            <CardDescription>
              Handle information requests efficiently
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button 
              variant="outline" 
              className="w-full"
              onClick={() => addToast('RFI features coming soon!', 'info')}
            >
              Manage RFIs
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="w-5 h-5 text-green-600" />
              Win Rate Analytics
            </CardTitle>
            <CardDescription>
              Track and improve your proposal success rate
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button 
              variant="outline" 
              className="w-full"
              onClick={() => addToast('Analytics coming soon!', 'info')}
            >
              View Analytics
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Proposal Library</CardTitle>
            <CardDescription>
              Reusable content blocks and templates
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button 
              variant="outline" 
              className="w-full"
              onClick={() => addToast('Library features coming soon!', 'info')}
            >
              Browse Library
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default ProposalsApp;

=== FILE: client/src/utils/performance.ts ===

import React from 'react';

// Performance monitoring utilities

interface PerformanceMetric {
  name: string;
  value: number;
  timestamp: number;
  metadata?: Record<string, unknown>;
}

interface PerformanceConfig {
  enabled: boolean;
  sampleRate: number;
  maxMetrics: number;
  endpoint?: string;
}

class PerformanceMonitor {
  private config: PerformanceConfig;
  private metrics: PerformanceMetric[] = [];
  private observers: Map<string, PerformanceObserver> = new Map();

  constructor(config: Partial<PerformanceConfig> = {}) {
    this.config = {
      enabled: true,
      sampleRate: 1.0,
      maxMetrics: 1000,
      ...config
    };
  }

  // Start timing a performance metric
  startTiming(name: string): () => void {
    if (!this.config.enabled || Math.random() > this.config.sampleRate) {
      return () => {};
    }

    const startTime = performance.now();
    
    return () => {
      const endTime = performance.now();
      this.recordMetric({
        name,
        value: endTime - startTime,
        timestamp: Date.now()
      });
    };
  }

  // Record a custom metric
  recordMetric(metric: PerformanceMetric): void {
    if (!this.config.enabled) return;

    this.metrics.push(metric);
    
    // Keep only the most recent metrics
    if (this.metrics.length > this.config.maxMetrics) {
      this.metrics = this.metrics.slice(-this.config.maxMetrics);
    }

    // Send to monitoring endpoint if configured
    if (this.config.endpoint) {
      this.sendMetric(metric);
    }
  }

  // Get performance metrics
  getMetrics(name?: string): PerformanceMetric[] {
    if (name) {
      return this.metrics.filter(metric => metric.name === name);
    }
    return [...this.metrics];
  }

  // Get average performance for a metric
  getAverageMetric(name: string): number {
    const metrics = this.getMetrics(name);
    if (metrics.length === 0) return 0;
    
    const sum = metrics.reduce((acc, metric) => acc + metric.value, 0);
    return sum / metrics.length;
  }

  // Monitor Web Vitals
  monitorWebVitals(): void {
    if (!this.config.enabled) return;

    // Largest Contentful Paint (LCP)
    this.observeLCP();
    
    // First Input Delay (FID)
    this.observeFID();
    
    // Cumulative Layout Shift (CLS)
    this.observeCLS();
    
    // First Contentful Paint (FCP)
    this.observeFCP();
  }

  private observeLCP(): void {
    if (!('PerformanceObserver' in window)) return;

    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      const lastEntry = entries[entries.length - 1] as any;
      
      this.recordMetric({
        name: 'LCP',
        value: lastEntry.startTime,
        timestamp: Date.now(),
        metadata: {
          element: lastEntry?.element?.tagName,
          url: lastEntry?.url
        }
      });
    });

    observer.observe({ entryTypes: ['largest-contentful-paint'] });
    this.observers.set('LCP', observer);
  }

  private observeFID(): void {
    if (!('PerformanceObserver' in window)) return;

    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry) => {
        const e: any = entry as any;
        this.recordMetric({
          name: 'FID',
          value: (e.processingStart ?? e.startTime) - e.startTime,
          timestamp: Date.now(),
          metadata: {
            eventType: entry.name,
            target: e?.target?.tagName
          }
        });
      });
    });

    observer.observe({ entryTypes: ['first-input'] });
    this.observers.set('FID', observer);
  }

  private observeCLS(): void {
    if (!('PerformanceObserver' in window)) return;

    let clsValue = 0;
    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry: any) => {
        if (!entry.hadRecentInput) {
          clsValue += entry.value;
        }
      });
      
      this.recordMetric({
        name: 'CLS',
        value: clsValue,
        timestamp: Date.now()
      });
    });

    observer.observe({ entryTypes: ['layout-shift'] });
    this.observers.set('CLS', observer);
  }

  private observeFCP(): void {
    if (!('PerformanceObserver' in window)) return;

    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry) => {
        this.recordMetric({
          name: 'FCP',
          value: entry.startTime,
          timestamp: Date.now()
        });
      });
    });

    observer.observe({ entryTypes: ['paint'] });
    this.observers.set('FCP', observer);
  }

  private async sendMetric(metric: PerformanceMetric): Promise<void> {
    if (!this.config.endpoint) return;

    try {
      await fetch(this.config.endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(metric)
      });
    } catch (error) {
      console.warn('Failed to send performance metric:', error);
    }
  }

  // Clean up observers
  cleanup(): void {
    this.observers.forEach(observer => observer.disconnect());
    this.observers.clear();
  }
}

// Global performance monitor instance
export const performanceMonitor = new PerformanceMonitor({
  enabled: process.env.NODE_ENV === 'production',
  sampleRate: 0.1, // 10% sampling in production
  maxMetrics: 1000
});

// React hook for performance monitoring
export function usePerformanceMonitor() {
  const [metrics, setMetrics] = React.useState<PerformanceMetric[]>([]);

  React.useEffect(() => {
    const updateMetrics = () => {
      setMetrics(performanceMonitor.getMetrics());
    };

    // Update metrics every 5 seconds
    const interval = setInterval(updateMetrics, 5000);
    
    return () => {
      clearInterval(interval);
    };
  }, []);

  const recordMetric = React.useCallback((metric: Omit<PerformanceMetric, 'timestamp'>) => {
    performanceMonitor.recordMetric({
      ...metric,
      timestamp: Date.now()
    });
  }, []);

  const startTiming = React.useCallback((name: string) => {
    return performanceMonitor.startTiming(name);
  }, []);

  return {
    metrics,
    recordMetric,
    startTiming,
    getAverageMetric: performanceMonitor.getAverageMetric.bind(performanceMonitor)
  };
}

// Performance decorator for functions
export function measurePerformance(name: string) {
  return function (_target: any, _propertyKey: string, descriptor: PropertyDescriptor) {
    const originalMethod = descriptor.value;

    descriptor.value = async function (...args: any[]) {
      const endTiming = performanceMonitor.startTiming(name);
      try {
        const result = await originalMethod.apply(this, args);
        return result;
      } finally {
        endTiming();
      }
    };

    return descriptor;
  };
}

// Performance utility for React components
export function withPerformanceMonitoring<P extends object>(
  Component: React.ComponentType<P>,
  componentName: string
) {
  const WrappedComponent = (props: P) => {
    const endTiming = performanceMonitor.startTiming(`component-render-${componentName}`);
    
    React.useEffect(() => {
      endTiming();
    });

    return React.createElement(Component as React.ComponentType<any>, props as any);
  };

  WrappedComponent.displayName = `withPerformanceMonitoring(${componentName})`;
  
  return WrappedComponent;
}

// Initialize performance monitoring
if (typeof window !== 'undefined') {
  performanceMonitor.monitorWebVitals();
}


=== FILE: client/src/utils/creditScoringUtils.ts ===

/**
 * Shared Credit Scoring Utilities
 * Centralized business logic for credit scoring operations
 */

export interface CreditRating {
  rating: string;
  color: string;
  bg: string;
  risk: string;
  riskLevel: number;
}

export interface IndustryConfig {
  multiplier: number;
  riskAdjustment: number;
  rateAdjustment: number;
}

/**
 * Get credit rating information based on score
 */
export function getCreditRating(score: number): CreditRating {
  if (score >= 800) return { rating: 'A+', color: 'text-emerald-600', bg: 'bg-emerald-100', risk: 'Minimal Risk', riskLevel: 1 };
  if (score >= 750) return { rating: 'A', color: 'text-green-600', bg: 'bg-green-100', risk: 'Very Low Risk', riskLevel: 2 };
  if (score >= 700) return { rating: 'B+', color: 'text-blue-600', bg: 'bg-blue-100', risk: 'Low Risk', riskLevel: 3 };
  if (score >= 650) return { rating: 'B', color: 'text-cyan-600', bg: 'bg-cyan-100', risk: 'Moderate Risk', riskLevel: 4 };
  if (score >= 600) return { rating: 'C+', color: 'text-yellow-600', bg: 'bg-yellow-100', risk: 'Medium Risk', riskLevel: 5 };
  if (score >= 550) return { rating: 'C', color: 'text-orange-600', bg: 'bg-orange-100', risk: 'High Risk', riskLevel: 6 };
  if (score >= 500) return { rating: 'D', color: 'text-red-600', bg: 'bg-red-100', risk: 'Very High Risk', riskLevel: 7 };
  return { rating: 'F', color: 'text-red-800', bg: 'bg-red-200', risk: 'Extremely High Risk', riskLevel: 8 };
}

/**
 * Industry configuration for risk and rate adjustments
 */
export const INDUSTRY_CONFIG: Record<string, IndustryConfig> = {
  'technology': {
    multiplier: 1.1,
    riskAdjustment: 0.8,
    rateAdjustment: -0.5
  },
  'healthcare': {
    multiplier: 1.0,
    riskAdjustment: 0.9,
    rateAdjustment: 0.0
  },
  'manufacturing': {
    multiplier: 0.9,
    riskAdjustment: 1.0,
    rateAdjustment: 0.5
  },
  'retail': {
    multiplier: 0.8,
    riskAdjustment: 1.1,
    rateAdjustment: 1.0
  },
  'hospitality': {
    multiplier: 0.7,
    riskAdjustment: 1.2,
    rateAdjustment: 1.5
  },
  'construction': {
    multiplier: 0.8,
    riskAdjustment: 1.1,
    rateAdjustment: 1.0
  },
  'professional_services': {
    multiplier: 1.0,
    riskAdjustment: 0.9,
    rateAdjustment: 0.0
  },
  'financial_services': {
    multiplier: 0.9,
    riskAdjustment: 1.0,
    rateAdjustment: 0.5
  }
};

/**
 * Get industry multiplier for market conditions
 */
export function getIndustryMultiplier(industry: string): number {
  return INDUSTRY_CONFIG[industry]?.multiplier || 1.0;
}

/**
 * Get industry risk adjustment factor
 */
export function getIndustryRiskAdjustment(industry: string): number {
  return INDUSTRY_CONFIG[industry]?.riskAdjustment || 1.0;
}

/**
 * Get industry rate adjustment
 */
export function getIndustryRateAdjustment(industry: string): number {
  return INDUSTRY_CONFIG[industry]?.rateAdjustment || 0.0;
}

/**
 * Check if date is within specified range
 */
export function isWithinDateRange(date: Date, rangeInDays: number): boolean {
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  const diffDays = diffMs / (24 * 60 * 60 * 1000);
  return diffDays <= rangeInDays;
}

/**
 * Filter by date range string ('7d', '30d', '90d', 'all')
 */
export function matchesDateRange(dateStr: string, range: string): boolean {
  if (range === 'all') return true;
  
  const date = new Date(dateStr);
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  
  switch (range) {
    case '7d':
      return diffMs <= 7 * 24 * 60 * 60 * 1000;
    case '30d':
      return diffMs <= 30 * 24 * 60 * 60 * 1000;
    case '90d':
      return diffMs <= 90 * 24 * 60 * 60 * 1000;
    default:
      return true;
  }
}

/**
 * Download file helper
 */
export function downloadFile(blob: Blob, filename: string): void {
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

/**
 * Export data to CSV format
 */
export function exportToCSV(
  data: any[],
  headers: string[],
  rowMapper: (item: any) => any[]
): Blob {
  const rows = data.map(rowMapper);
  const csvContent = [headers.join(','), ...rows.map(r => r.join(','))].join('\n');
  return new Blob([csvContent], { type: 'text/csv' });
}

/**
 * Export data to JSON format
 */
export function exportToJSON(data: any[]): Blob {
  const dataStr = JSON.stringify(data, null, 2);
  return new Blob([dataStr], { type: 'application/json' });
}


=== FILE: client/src/utils/dateUtils.ts ===

/**
 * Centralized date formatting utilities
 * Eliminates duplication of date formatting logic across components
 */

export interface DateFormatOptions {
  includeTime?: boolean;
  format?: 'short' | 'medium' | 'long' | 'relative';
  fallback?: string;
}

/**
 * Formats a date string with consistent options across the application
 */
export function formatDate(
  dateString: string | null | undefined,
  options: DateFormatOptions = {}
): string {
  const {
    includeTime = false,
    format = 'medium',
    fallback = 'N/A'
  } = options;

  if (!dateString) return fallback;

  try {
    const date = new Date(dateString);
    
    if (isNaN(date.getTime())) {
      return fallback;
    }

    switch (format) {
      case 'short':
        return date.toLocaleDateString('en-US', {
          month: 'short',
          day: 'numeric',
          year: '2-digit',
          ...(includeTime && {
            hour: 'numeric',
            minute: '2-digit'
          })
        });

      case 'medium':
        return date.toLocaleDateString('en-US', {
          month: 'short',
          day: 'numeric',
          year: 'numeric',
          ...(includeTime && {
            hour: 'numeric',
            minute: '2-digit'
          })
        });

      case 'long':
        return date.toLocaleDateString('en-US', {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          ...(includeTime && {
            hour: 'numeric',
            minute: '2-digit'
          })
        });

      case 'relative':
        return formatRelativeDate(date);

      default:
        return date.toLocaleDateString('en-US');
    }
  } catch (error) {
    console.warn('Failed to format date:', dateString, error);
    return fallback;
  }
}

/**
 * Formats a date as a relative time string (e.g., "2 days ago", "in 3 hours")
 */
export function formatRelativeDate(date: Date): string {
  const now = new Date();
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
  const diffInMinutes = Math.floor(diffInSeconds / 60);
  const diffInHours = Math.floor(diffInMinutes / 60);
  const diffInDays = Math.floor(diffInHours / 24);
  const diffInWeeks = Math.floor(diffInDays / 7);
  const diffInMonths = Math.floor(diffInDays / 30);
  const diffInYears = Math.floor(diffInDays / 365);

  if (Math.abs(diffInSeconds) < 60) {
    return 'just now';
  } else if (Math.abs(diffInMinutes) < 60) {
    return diffInMinutes > 0 ? `${diffInMinutes}m ago` : `in ${Math.abs(diffInMinutes)}m`;
  } else if (Math.abs(diffInHours) < 24) {
    return diffInHours > 0 ? `${diffInHours}h ago` : `in ${Math.abs(diffInHours)}h`;
  } else if (Math.abs(diffInDays) < 7) {
    return diffInDays > 0 ? `${diffInDays}d ago` : `in ${Math.abs(diffInDays)}d`;
  } else if (Math.abs(diffInWeeks) < 4) {
    return diffInWeeks > 0 ? `${diffInWeeks}w ago` : `in ${Math.abs(diffInWeeks)}w`;
  } else if (Math.abs(diffInMonths) < 12) {
    return diffInMonths > 0 ? `${diffInMonths}mo ago` : `in ${Math.abs(diffInMonths)}mo`;
  } else {
    return diffInYears > 0 ? `${diffInYears}y ago` : `in ${Math.abs(diffInYears)}y`;
  }
}

/**
 * Formats a date range as a string
 */
export function formatDateRange(
  startDate: string | null,
  endDate: string | null,
  options: DateFormatOptions = {}
): string {
  const { fallback = 'No dates set' } = options;

  if (!startDate && !endDate) return fallback;
  if (!startDate) return `Until ${formatDate(endDate, options)}`;
  if (!endDate) return `From ${formatDate(startDate, options)}`;

  const formattedStart = formatDate(startDate, options);
  const formattedEnd = formatDate(endDate, options);

  return `${formattedStart} - ${formattedEnd}`;
}

/**
 * Checks if a date is overdue (past current date)
 */
export function isOverdue(dateString: string | null): boolean {
  if (!dateString) return false;
  
  try {
    const date = new Date(dateString);
    const now = new Date();
    return date < now;
  } catch {
    return false;
  }
}

/**
 * Calculates progress percentage between two dates
 */
export function calculateDateProgress(
  startDate: string | null,
  endDate: string | null,
  currentDate: Date = new Date()
): number {
  if (!startDate || !endDate) return 0;

  try {
    const start = new Date(startDate).getTime();
    const end = new Date(endDate).getTime();
    const current = currentDate.getTime();

    if (current <= start) return 0;
    if (current >= end) return 100;

    const totalDuration = end - start;
    const elapsed = current - start;
    
    return Math.round((elapsed / totalDuration) * 100);
  } catch {
    return 0;
  }
}


=== FILE: client/src/utils/businessPlanHelpers.ts ===

/**
 * Business Plan Utility Functions
 * Helper functions for business plan operations
 */

import type { SectionStatus } from '@/contexts/BusinessPlanContext';

/**
 * Calculate word count from text content
 */
export function calculateWordCount(content: string): number {
  return content.trim().split(/\s+/).filter(word => word.length > 0).length;
}

/**
 * Calculate reading time in minutes
 */
export function calculateReadingTime(wordCount: number): number {
  const wordsPerMinute = 200;
  return Math.ceil(wordCount / wordsPerMinute);
}

/**
 * Format date to relative time (e.g., "2 hours ago")
 */
export function formatRelativeTime(date: Date): string {
  const now = new Date();
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

  if (diffInSeconds < 60) {
    return 'Just now';
  }

  const diffInMinutes = Math.floor(diffInSeconds / 60);
  if (diffInMinutes < 60) {
    return `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;
  }

  const diffInHours = Math.floor(diffInMinutes / 60);
  if (diffInHours < 24) {
    return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;
  }

  const diffInDays = Math.floor(diffInHours / 24);
  if (diffInDays < 30) {
    return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;
  }

  const diffInMonths = Math.floor(diffInDays / 30);
  return `${diffInMonths} month${diffInMonths > 1 ? 's' : ''} ago`;
}

/**
 * Get status color class
 */
export function getStatusColor(status: SectionStatus): string {
  switch (status) {
    case 'complete':
      return 'text-green-600 bg-green-50';
    case 'in_progress':
      return 'text-yellow-600 bg-yellow-50';
    case 'not_started':
      return 'text-gray-600 bg-gray-50';
    default:
      return 'text-gray-600 bg-gray-50';
  }
}

/**
 * Get status label
 */
export function getStatusLabel(status: SectionStatus): string {
  switch (status) {
    case 'complete':
      return 'Complete';
    case 'in_progress':
      return 'In Progress';
    case 'not_started':
      return 'Not Started';
    default:
      return 'Unknown';
  }
}

/**
 * Export business plan to markdown format
 */
export function exportToMarkdown(
  sections: Array<{ title: string; content: string }>,
  metadata: { name: string; industry: string }
): string {
  let markdown = `# ${metadata.name}\n\n`;
  markdown += `**Industry:** ${metadata.industry}\n\n`;
  markdown += `**Generated:** ${new Date().toLocaleDateString()}\n\n`;
  markdown += '---\n\n';

  sections.forEach((section) => {
    if (section.content) {
      markdown += `## ${section.title}\n\n`;
      markdown += `${section.content}\n\n`;
      markdown += '---\n\n';
    }
  });

  return markdown;
}

/**
 * Export business plan to plain text format
 */
export function exportToText(
  sections: Array<{ title: string; content: string }>,
  metadata: { name: string; industry: string }
): string {
  let text = `${metadata.name}\n`;
  text += `${'='.repeat(metadata.name.length)}\n\n`;
  text += `Industry: ${metadata.industry}\n`;
  text += `Generated: ${new Date().toLocaleDateString()}\n\n`;
  text += `${'-'.repeat(50)}\n\n`;

  sections.forEach((section) => {
    if (section.content) {
      text += `${section.title}\n`;
      text += `${'-'.repeat(section.title.length)}\n\n`;
      text += `${section.content}\n\n`;
      text += `${'-'.repeat(50)}\n\n`;
    }
  });

  return text;
}

/**
 * Validate section content
 */
export function validateSectionContent(content: string, minWords: number = 50): {
  isValid: boolean;
  errors: string[];
  warnings: string[];
} {
  const errors: string[] = [];
  const warnings: string[] = [];
  const wordCount = calculateWordCount(content);

  if (!content || content.trim().length === 0) {
    errors.push('Content cannot be empty');
  }

  if (wordCount < minWords) {
    warnings.push(`Content is shorter than recommended (${wordCount}/${minWords} words)`);
  }

  // Check for placeholder text
  if (content.includes('[INSERT') || content.includes('[TODO')) {
    warnings.push('Content contains placeholder text');
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings
  };
}

/**
 * Generate section summary
 */
export function generateSectionSummary(content: string, maxLength: number = 150): string {
  if (!content || content.length === 0) {
    return 'No content yet';
  }

  const cleanContent = content.replace(/[#*_\[\]]/g, '').trim();
  
  if (cleanContent.length <= maxLength) {
    return cleanContent;
  }

  return cleanContent.substring(0, maxLength).trim() + '...';
}

/**
 * Calculate completion percentage based on word count
 */
export function calculateCompletionPercentage(
  currentWords: number,
  targetWords: number
): number {
  if (targetWords === 0) return 0;
  return Math.min(100, Math.round((currentWords / targetWords) * 100));
}

/**
 * Get quality score based on various metrics
 */
export function calculateQualityScore(content: string): {
  score: number;
  factors: Array<{ name: string; score: number; weight: number }>;
} {
  const factors = [
    {
      name: 'Length',
      score: Math.min(100, (calculateWordCount(content) / 300) * 100),
      weight: 0.3
    },
    {
      name: 'Structure',
      score: (content.includes('\n\n') || content.includes('##')) ? 100 : 50,
      weight: 0.2
    },
    {
      name: 'Data',
      score: /\d+%|\$\d+|[0-9,]+/.test(content) ? 100 : 50,
      weight: 0.3
    },
    {
      name: 'Completeness',
      score: content.length > 500 ? 100 : (content.length / 500) * 100,
      weight: 0.2
    }
  ];

  const totalScore = factors.reduce((sum, factor) => {
    return sum + (factor.score * factor.weight);
  }, 0);

  return {
    score: Math.round(totalScore),
    factors
  };
}


=== FILE: client/src/utils/statusUtils.ts ===

/**
 * Centralized status and badge utilities
 * Eliminates duplication of status color mapping across components
 */

export type StatusType = 
  | 'draft' | 'review' | 'approved' | 'published' | 'archived'
  | 'active' | 'inactive' | 'pending' | 'completed' | 'cancelled'
  | 'open' | 'in-progress' | 'submitted' | 'under-review' | 'responded' | 'closed'
  | 'upcoming' | 'overdue' | 'not-started' | 'won' | 'lost'
  | 'excellent' | 'good' | 'fair' | 'poor'
  | 'development' | 'validation' | 'pre-launch' | 'idea' | 'prototype' | 'mvp' | 'scaling';

export type PriorityType = 'low' | 'medium' | 'high' | 'urgent';

export type BadgeVariant = 'default' | 'secondary' | 'destructive' | 'outline';

/**
 * Maps status values to appropriate CSS classes for badges
 * Centralizes all status color logic to avoid duplication
 */
export function getStatusColorClass(status: StatusType): string {
  const statusMap: Record<StatusType, string> = {
    // Document statuses
    'draft': 'bg-gray-100 text-gray-800',
    'review': 'bg-yellow-100 text-yellow-800',
    'approved': 'bg-green-100 text-green-800',
    'published': 'bg-blue-100 text-blue-800',
    'archived': 'bg-gray-100 text-gray-600',
    
    // General statuses
    'active': 'bg-green-100 text-green-800',
    'inactive': 'bg-gray-100 text-gray-800',
    'pending': 'bg-yellow-100 text-yellow-800',
    'completed': 'bg-green-100 text-green-800',
    'cancelled': 'bg-red-100 text-red-800',
    
    // Process statuses
    'open': 'bg-green-100 text-green-800',
    'in-progress': 'bg-blue-100 text-blue-800',
    'submitted': 'bg-purple-100 text-purple-800',
    'under-review': 'bg-yellow-100 text-yellow-800',
    'responded': 'bg-gray-100 text-gray-800',
    'closed': 'bg-red-100 text-red-800',
    
    // Timeline statuses
    'upcoming': 'bg-blue-100 text-blue-800',
    'overdue': 'bg-red-100 text-red-800',
    'not-started': 'bg-gray-100 text-gray-800',
    
    // Outcome statuses
    'won': 'bg-purple-100 text-purple-800',
    'lost': 'bg-red-100 text-red-800',
    
    // Quality statuses
    'excellent': 'text-green-600',
    'good': 'text-blue-600',
    'fair': 'text-yellow-600',
    'poor': 'text-red-600',
    
    // Development stages
    'development': 'bg-blue-500 text-white',
    'validation': 'bg-yellow-500 text-white',
    'pre-launch': 'bg-green-500 text-white',
    'idea': 'bg-purple-100 text-purple-800',
    'prototype': 'bg-blue-100 text-blue-800',
    'mvp': 'bg-green-100 text-green-800',
    'scaling': 'bg-indigo-100 text-indigo-800'
  };

  return statusMap[status] || 'bg-gray-100 text-gray-800';
}

/**
 * Maps status values to badge variants for shadcn/ui Badge component
 */
export function getStatusBadgeVariant(status: StatusType): BadgeVariant {
  const variantMap: Record<StatusType, BadgeVariant> = {
    'active': 'default',
    'completed': 'default',
    'approved': 'default',
    'published': 'default',
    'won': 'default',
    
    'upcoming': 'outline',
    'pending': 'outline',
    'draft': 'outline',
    'not-started': 'outline',
    
    'in-progress': 'secondary',
    'review': 'secondary',
    'submitted': 'secondary',
    
    'cancelled': 'destructive',
    'overdue': 'destructive',
    'lost': 'destructive',
    'closed': 'destructive',
    'archived': 'destructive'
  };

  return variantMap[status] || 'outline';
}

/**
 * Maps priority values to appropriate CSS classes
 */
export function getPriorityColorClass(priority: PriorityType): string {
  const priorityMap: Record<PriorityType, string> = {
    'low': 'bg-gray-100 text-gray-800',
    'medium': 'bg-yellow-100 text-yellow-800',
    'high': 'bg-orange-100 text-orange-800',
    'urgent': 'bg-red-100 text-red-800'
  };

  return priorityMap[priority] || 'bg-gray-100 text-gray-800';
}

/**
 * Gets appropriate icon color class for status indicators
 */
export function getStatusIconColor(status: StatusType): string {
  const iconColorMap: Record<StatusType, string> = {
    'completed': 'text-green-500',
    'approved': 'text-green-500',
    'won': 'text-green-500',
    
    'in-progress': 'text-blue-500',
    'active': 'text-blue-500',
    'development': 'text-blue-500',
    
    'pending': 'text-yellow-500',
    'review': 'text-yellow-500',
    'validation': 'text-yellow-500',
    
    'overdue': 'text-red-500',
    'cancelled': 'text-red-500',
    'lost': 'text-red-500',
    
    'draft': 'text-gray-400',
    'not-started': 'text-gray-400',
    'archived': 'text-gray-400'
  };

  return iconColorMap[status] || 'text-gray-400';
}


=== FILE: client/src/utils/performance.tsx ===

import React from 'react';

// Performance monitoring utilities

interface PerformanceMetric {
  name: string;
  value: number;
  timestamp: number;
  metadata?: Record<string, unknown>;
}

interface PerformanceConfig {
  enabled: boolean;
  sampleRate: number;
  maxMetrics: number;
  endpoint?: string;
}

class PerformanceMonitor {
  private config: PerformanceConfig;
  private metrics: PerformanceMetric[] = [];
  private observers: Map<string, PerformanceObserver> = new Map();

  constructor(config: Partial<PerformanceConfig> = {}) {
    this.config = {
      enabled: true,
      sampleRate: 1.0,
      maxMetrics: 1000,
      ...config
    };
  }

  // Start timing a performance metric
  startTiming(name: string): () => void {
    if (!this.config.enabled || Math.random() > this.config.sampleRate) {
      return () => {};
    }

    const startTime = performance.now();
    
    return () => {
      const endTime = performance.now();
      this.recordMetric({
        name,
        value: endTime - startTime,
        timestamp: Date.now()
      });
    };
  }

  // Record a custom metric
  recordMetric(metric: PerformanceMetric): void {
    if (!this.config.enabled) return;

    this.metrics.push(metric);
    
    // Keep only the most recent metrics
    if (this.metrics.length > this.config.maxMetrics) {
      this.metrics = this.metrics.slice(-this.config.maxMetrics);
    }

    // Send to monitoring endpoint if configured
    if (this.config.endpoint) {
      this.sendMetric(metric);
    }
  }

  // Get performance metrics
  getMetrics(name?: string): PerformanceMetric[] {
    if (name) {
      return this.metrics.filter(metric => metric.name === name);
    }
    return [...this.metrics];
  }

  // Get average performance for a metric
  getAverageMetric(name: string): number {
    const metrics = this.getMetrics(name);
    if (metrics.length === 0) return 0;
    
    const sum = metrics.reduce((acc, metric) => acc + metric.value, 0);
    return sum / metrics.length;
  }

  // Monitor Web Vitals
  monitorWebVitals(): void {
    if (!this.config.enabled) return;

    // Largest Contentful Paint (LCP)
    this.observeLCP();
    
    // First Input Delay (FID)
    this.observeFID();
    
    // Cumulative Layout Shift (CLS)
    this.observeCLS();
    
    // First Contentful Paint (FCP)
    this.observeFCP();
  }

  private observeLCP(): void {
    if (!('PerformanceObserver' in window)) return;

    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      const lastEntry = entries[entries.length - 1];
      
      this.recordMetric({
        name: 'LCP',
        value: lastEntry.startTime,
        timestamp: Date.now(),
        metadata: {
          element: lastEntry.element?.tagName,
          url: lastEntry.url
        }
      });
    });

    observer.observe({ entryTypes: ['largest-contentful-paint'] });
    this.observers.set('LCP', observer);
  }

  private observeFID(): void {
    if (!('PerformanceObserver' in window)) return;

    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry) => {
        this.recordMetric({
          name: 'FID',
          value: entry.processingStart - entry.startTime,
          timestamp: Date.now(),
          metadata: {
            eventType: entry.name,
            target: entry.target?.tagName
          }
        });
      });
    });

    observer.observe({ entryTypes: ['first-input'] });
    this.observers.set('FID', observer);
  }

  private observeCLS(): void {
    if (!('PerformanceObserver' in window)) return;

    let clsValue = 0;
    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry: any) => {
        if (!entry.hadRecentInput) {
          clsValue += entry.value;
        }
      });
      
      this.recordMetric({
        name: 'CLS',
        value: clsValue,
        timestamp: Date.now()
      });
    });

    observer.observe({ entryTypes: ['layout-shift'] });
    this.observers.set('CLS', observer);
  }

  private observeFCP(): void {
    if (!('PerformanceObserver' in window)) return;

    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry) => {
        this.recordMetric({
          name: 'FCP',
          value: entry.startTime,
          timestamp: Date.now()
        });
      });
    });

    observer.observe({ entryTypes: ['paint'] });
    this.observers.set('FCP', observer);
  }

  private async sendMetric(metric: PerformanceMetric): Promise<void> {
    if (!this.config.endpoint) return;

    try {
      await fetch(this.config.endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(metric)
      });
    } catch (error) {
      console.warn('Failed to send performance metric:', error);
    }
  }

  // Clean up observers
  cleanup(): void {
    this.observers.forEach(observer => observer.disconnect());
    this.observers.clear();
  }
}

// Global performance monitor instance
export const performanceMonitor = new PerformanceMonitor({
  enabled: process.env.NODE_ENV === 'production',
  sampleRate: 0.1, // 10% sampling in production
  maxMetrics: 1000
});

// React hook for performance monitoring
export function usePerformanceMonitor() {
  const [metrics, setMetrics] = React.useState<PerformanceMetric[]>([]);

  React.useEffect(() => {
    const updateMetrics = () => {
      setMetrics(performanceMonitor.getMetrics());
    };

    // Update metrics every 5 seconds
    const interval = setInterval(updateMetrics, 5000);
    
    return () => {
      clearInterval(interval);
    };
  }, []);

  const recordMetric = React.useCallback((metric: Omit<PerformanceMetric, 'timestamp'>) => {
    performanceMonitor.recordMetric({
      ...metric,
      timestamp: Date.now()
    });
  }, []);

  const startTiming = React.useCallback((name: string) => {
    return performanceMonitor.startTiming(name);
  }, []);

  return {
    metrics,
    recordMetric,
    startTiming,
    getAverageMetric: performanceMonitor.getAverageMetric.bind(performanceMonitor)
  };
}

// Performance decorator for functions
export function measurePerformance(name: string) {
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    const originalMethod = descriptor.value;

    descriptor.value = async function (...args: any[]) {
      const endTiming = performanceMonitor.startTiming(name);
      try {
        const result = await originalMethod.apply(this, args);
        return result;
      } finally {
        endTiming();
      }
    };

    return descriptor;
  };
}

// Performance utility for React components
export function withPerformanceMonitoring<P extends object>(
  Component: React.ComponentType<P>,
  componentName: string
) {
  const WrappedComponent = (props: P) => {
    const endTiming = performanceMonitor.startTiming(`component-render-${componentName}`);
    
    React.useEffect(() => {
      endTiming();
    });

    return <Component {...props} />;
  };

  WrappedComponent.displayName = `withPerformanceMonitoring(${componentName})`;
  
  return WrappedComponent;
}

// Initialize performance monitoring
if (typeof window !== 'undefined') {
  performanceMonitor.monitorWebVitals();
}


=== FILE: client/src/utils/streamingUtils.ts ===

/**
 * Utility functions for handling streaming responses
 * Centralizes streaming logic to avoid duplication across agent clients
 */

export interface StreamingChunk {
  chunk?: string;
  metadata?: any;
  done?: boolean;
}

export interface StreamingResponse {
  id: string;
  content: string;
  agentType: string;
  timestamp: Date;
  suggestions?: string[];
  insights?: any[];
  actions?: any[];
  metadata?: any;
}

/**
 * Processes a streaming response from an SSE endpoint
 * Handles chunk parsing, error recovery, and metadata extraction
 */
export async function processStreamingResponse(
  response: Response,
  onChunk?: (chunk: string) => void,
  fallbackAgentType: string = 'unknown'
): Promise<StreamingResponse> {
  if (!response.ok) {
    const error = await response.json().catch(() => ({ message: 'Failed to parse error response' }));
    throw new Error(error.message || 'Failed to process streaming response');
  }

  const reader = response.body?.getReader();
  const decoder = new TextDecoder();
  let fullContent = '';
  let metadata: any = {};

  if (reader) {
    while (true) {
      const { done, value } = await reader.read();
      if (done) break;

      const chunk = decoder.decode(value);
      const lines = chunk.split('\n');

      for (const line of lines) {
        if (line.startsWith('data: ')) {
          const data = line.slice(6);
          if (data === '[DONE]') break;

          try {
            const parsed: StreamingChunk = JSON.parse(data);
            if (parsed.chunk) {
              fullContent += parsed.chunk;
              onChunk?.(parsed.chunk);
            }
            if (parsed.metadata) {
              metadata = { ...metadata, ...parsed.metadata };
            }
          } catch (e) {
            // Ignore parse errors for partial chunks
            console.debug('Failed to parse streaming chunk:', e);
          }
        }
      }
    }
  }

  return {
    id: metadata.id || `resp-${Date.now()}`,
    content: fullContent,
    agentType: metadata.agentType || fallbackAgentType,
    timestamp: new Date(),
    suggestions: metadata.suggestions,
    insights: metadata.insights,
    actions: metadata.actions,
    metadata
  };
}

/**
 * Creates a session ID for agent conversations
 * Centralizes session ID generation logic
 */
export function getOrCreateSessionId(): string {
  const STORAGE_KEY = 'ai_session_id';
  let sessionId = sessionStorage.getItem(STORAGE_KEY);
  
  if (!sessionId) {
    sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    sessionStorage.setItem(STORAGE_KEY, sessionId);
  }
  
  return sessionId;
}

/**
 * Standardized error handling for agent requests
 * Provides consistent error messages and logging
 */
export function handleAgentError(error: any, context: string = 'Agent request'): string {
  const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';
  console.error(`${context} error:`, error);
  return errorMessage;
}


=== FILE: client/src/index.css ===

/* Safari 26.0 - Apple Design Principles Implementation */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');
@import url('https://fonts.googleapis.com/css2?family=SF+Pro+Text:wght@100;200;300;400;500;600;700;800;900&display=swap');
@import url('https://fonts.googleapis.com/css2?family=SF+Pro+Display:wght@100;200;300;400;500;600;700;800;900&display=swap');
/* Safari 26.0 styles will be included inline */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Documents Hub Animations */
@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pop-in {
  0% {
    transform: scale(0.5);
    opacity: 0;
  }
  75% {
    transform: scale(1.1);
    opacity: 1;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

.animate-fade-in-up {
  animation: fade-in-up 0.5s ease-out forwards;
}

.animate-pop-in {
  animation: pop-in 0.3s ease-out forwards;
}

/* Custom toggle checkbox styles */
.toggle-checkbox { 
  appearance: none; 
  width: 40px; 
  height: 20px; 
  background-color: #d1d5db; 
  border-radius: 9999px; 
  position: relative; 
  cursor: pointer; 
  transition: background-color 0.2s ease-in-out; 
}

.toggle-checkbox:checked { 
  background-color: #4f46e5; 
}

.toggle-checkbox::before { 
  content: ''; 
  position: absolute; 
  width: 16px; 
  height: 16px; 
  background-color: white; 
  border-radius: 9999px; 
  top: 2px; 
  left: 2px; 
  transition: transform 0.2s ease-in-out; 
}

.toggle-checkbox:checked::before { 
  transform: translateX(20px); 
}

/* Custom mobile-first responsive design */
@layer base {
  * {
    @apply border-border;
  }
  
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    
    /* Enhanced mobile optimizations */
    touch-action: manipulation;
    -webkit-tap-highlight-color: rgba(138, 78, 245, 0.1);
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    
    /* Prevent zoom on iOS */
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
    
    /* Better font rendering on mobile */
    text-rendering: optimizeLegibility;
    font-variant-ligatures: common-ligatures;
  }
  
  /* Allow text selection for inputs and content areas */
  input, textarea, [contenteditable], .selectable {
    -webkit-user-select: text;
    -moz-user-select: text;
    -ms-user-select: text;
    user-select: text;
  }
  
  /* Improved focus states for accessibility */
  *:focus-visible {
    @apply outline-2 outline-offset-2 outline-primary;
  }
  
  /* Mobile-friendly scrollbars */
  ::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  
  ::-webkit-scrollbar-track {
    @apply bg-gray-100;
  }
  
  ::-webkit-scrollbar-thumb {
    @apply bg-gray-300 rounded-full;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-400;
  }
}

@layer components {
  /* Enhanced glass card effects with mobile optimization */
  .glass-card {
    @apply bg-white/85 dark:bg-gray-900/85 border border-white/30 dark:border-gray-700/30 shadow-xl rounded-2xl;
    background: rgba(255, 255, 255, 0.85);
    backdrop-filter: blur(16px) saturate(180%);
    -webkit-backdrop-filter: blur(16px) saturate(180%);
    box-shadow: 
      0 8px 32px rgba(31, 38, 135, 0.08),
      0 0 0 1px rgba(255, 255, 255, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
  }
  
  .glass-container {
    @apply bg-white/90 dark:bg-gray-900/90;
    background: rgba(255, 255, 255, 0.90);
    backdrop-filter: blur(24px) saturate(200%);
    -webkit-backdrop-filter: blur(24px) saturate(200%);
    box-shadow: 
      0 4px 24px rgba(31, 38, 135, 0.1),
      0 0 0 1px rgba(255, 255, 255, 0.15);
  }
  
  /* Enhanced button styles */
  .safari-button {
    @apply bg-gradient-to-r from-purple-600 to-teal-600 text-white shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200;
  }
  
  /* Mobile-friendly navigation */
  .mobile-nav {
    @apply fixed bottom-0 left-0 right-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-md border-t border-gray-200 dark:border-gray-700 z-50;
  }
  
  /* Responsive container */
  .responsive-container {
    @apply container mx-auto px-4 sm:px-6 lg:px-8;
  }
  
  /* Mobile-first grid layouts */
  .mobile-grid {
    @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6;
  }
  
  /* Card hover effects */
  .hover-lift {
    @apply transform transition-all duration-200 hover:scale-105 hover:shadow-lg;
  }
  
  /* Loading states */
  .skeleton {
    @apply animate-pulse bg-gray-200 dark:bg-gray-700 rounded;
  }
  
  /* Mobile-optimized form elements */
  .mobile-input {
    @apply w-full px-4 py-3 text-base border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white;
  }
  
  /* Progress indicators */
  .progress-ring {
    transform: rotate(-90deg);
    transform-origin: 50% 50%;
  }
  
  /* Notification styles */
  .notification-enter {
    @apply transform translate-x-full opacity-0;
  }
  
  .notification-enter-active {
    @apply transform translate-x-0 opacity-100 transition-all duration-300 ease-out;
  }
  
  .notification-exit {
    @apply transform translate-x-0 opacity-100;
  }
  
  .notification-exit-active {
    @apply transform translate-x-full opacity-0 transition-all duration-200 ease-in;
  }
}

@layer utilities {
  /* Gradient text */
  .gradient-text {
    @apply bg-gradient-to-r from-purple-600 to-teal-500 bg-clip-text text-transparent;
  }
  
  /* Safe area padding for mobile devices */
  .safe-area-top {
    padding-top: env(safe-area-inset-top);
  }
  
  .safe-area-bottom {
    padding-bottom: env(safe-area-inset-bottom);
  }
  
  .safe-area-left {
    padding-left: env(safe-area-inset-left);
  }
  
  .safe-area-right {
    padding-right: env(safe-area-inset-right);
  }
  
  /* Enhanced touch-friendly sizing */
  .touch-target {
    @apply min-h-[48px] min-w-[48px];
  }
  
  /* Mobile-optimized button states */
  .mobile-button {
    @apply px-6 py-4 text-base font-medium rounded-xl transition-all duration-200;
    min-height: 48px;
    touch-action: manipulation;
  }
  
  .mobile-button:active {
    transform: scale(0.98);
    transition-duration: 100ms;
  }
  
  /* Enhanced card hover effects for mobile */
  .mobile-card {
    @apply transform transition-all duration-300;
    will-change: transform, box-shadow;
  }
  
  @media (hover: hover) {
    .mobile-card:hover {
      transform: translateY(-2px) scale(1.01);
      box-shadow: 0 12px 40px rgba(31, 38, 135, 0.15);
    }
  }
  
  /* Mobile-specific active states */
  .mobile-card:active {
    transform: scale(0.99);
    transition-duration: 100ms;
  }
  
  /* Hide scrollbar but keep functionality */
  .hide-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .hide-scrollbar::-webkit-scrollbar {
    display: none;
  }
  
  /* Mobile breakpoint utilities */
  .mobile-only {
    @apply block sm:hidden;
  }
  
  .desktop-only {
    @apply hidden sm:block;
  }
  
  /* Animation utilities */
  .animate-fade-in {
    animation: fadeIn 0.3s ease-out;
  }
  
  .animate-slide-up {
    animation: slideUp 0.3s ease-out;
  }
  
  .animate-bounce-in {
    animation: bounceIn 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }
}

/* Custom animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes bounceIn {
  0% {
    transform: scale(0.3);
    opacity: 0;
  }
  50% {
    transform: scale(1.05);
  }
  70% {
    transform: scale(0.9);
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

/* Enhanced responsive design for mobile-first approach */
@media (max-width: 640px) {
  .container {
    @apply px-4;
  }
  
  /* Stack cards vertically on mobile */
  .responsive-grid {
    @apply grid-cols-1 gap-4;
  }
  
  /* Optimized text sizes for mobile */
  .mobile-text-lg {
    @apply text-lg leading-relaxed;
  }
  
  .mobile-text-xl {
    @apply text-xl leading-tight;
  }
  
  /* Full-width buttons on mobile */
  .mobile-button-full {
    @apply w-full py-4 text-lg;
  }
  
  /* Mobile navigation improvements */
  .mobile-nav-item {
    @apply px-4 py-3 text-base font-medium;
  }
  
  /* Better spacing for mobile cards */
  .mobile-card-spacing {
    @apply mb-6 last:mb-0;
  }
  
  /* Mobile-optimized form inputs */
  .mobile-input {
    @apply px-4 py-4 text-base rounded-xl;
    font-size: 16px; /* Prevents zoom on iOS */
  }
}

@media (max-width: 768px) {
  /* Hide complex charts on small screens, show simplified version */
  .chart-desktop {
    @apply hidden;
  }
  
  .chart-mobile {
    @apply block;
  }
  
  /* Simplified navigation on tablet */
  .tablet-nav {
    @apply flex justify-center space-x-2;
  }
}

@media (min-width: 768px) {
  .chart-desktop {
    @apply block;
  }
  
  .chart-mobile {
    @apply hidden;
  }
}

/* Dark mode optimizations */
@media (prefers-color-scheme: dark) {
  .glass-card {
    background: rgba(17, 24, 39, 0.9);
  }
  
  .glass-container {
    background: rgba(17, 24, 39, 0.95);
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .glass-card {
    @apply bg-white dark:bg-gray-900 border-2 border-gray-900 dark:border-white;
    backdrop-filter: none;
    -webkit-backdrop-filter: none;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
  
  .hover-lift {
    @apply transform-none;
  }
}

/* Print styles */
@media print {
  .no-print {
    @apply hidden;
  }
  
  .glass-card {
    @apply bg-white border border-gray-300 shadow-none;
    backdrop-filter: none;
    -webkit-backdrop-filter: none;
  }
}

/* Enhanced touch device optimizations */
@media (hover: none) and (pointer: coarse) {
  /* Remove hover effects on touch devices */
  .hover-lift:hover {
    @apply transform-none shadow-none;
  }
  
  /* Optimized touch targets for better accessibility */
  button, .touch-target {
    @apply min-h-[48px] min-w-[48px];
  }
  
  /* Better focus states for touch navigation */
  button:focus,
  .touch-target:focus {
    @apply ring-2 ring-purple-500 ring-offset-2;
    outline: none;
  }
  
  /* Improved active states for better feedback */
  button:active,
  .touch-target:active {
    @apply scale-95;
    transition: transform 100ms ease-out;
  }
  
  /* Mobile-optimized scrollable areas */
  .mobile-scroll {
    -webkit-overflow-scrolling: touch;
    scroll-behavior: smooth;
  }
}

@layer base {
  :root {
    /* Safari 26: Authentic Color System with WCAG AAA Compliance */
    --background: 0 0% 100%;
    --foreground: 220 13% 9%;
    --card: 0 0% 100%;
    --card-foreground: 220 13% 9%;
    --popover: 0 0% 100%;
    --popover-foreground: 220 13% 9%;
    --primary: 221 83% 53%;
    --primary-foreground: 0 0% 100%;
    --secondary: 220 14% 96%;
    --secondary-foreground: 220 13% 9%;
    --muted: 220 14% 96%;
    --muted-foreground: 220 9% 40%;
    --accent: 221 83% 53%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 100%;
    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 221 83% 53%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    
    /* Safari 26: Refined Spacing System */
    --spacing-xs: 0.25rem;
    --spacing-sm: 0.5rem;
    --spacing-md: 1rem;
    --spacing-lg: 1.5rem;
    --spacing-xl: 2rem;
    --spacing-2xl: 3rem;
    --spacing-3xl: 4rem;
    
    /* Safari 26: Typography Scale */
    --font-size-xs: 0.75rem;
    --font-size-sm: 0.875rem;
    --font-size-base: 1rem;
    --font-size-lg: 1.125rem;
    --font-size-xl: 1.25rem;
    --font-size-2xl: 1.5rem;
    --font-size-3xl: 1.875rem;
    --font-size-4xl: 2.25rem;
    
    /* Safari 26: Shadow System */
    --shadow-xs: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow-sm: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
  }

  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;
    --card: 224 71% 4%;
    --card-foreground: 213 31% 91%;
    --popover: 224 71% 4%;
    --popover-foreground: 213 31% 91%;
    --primary: 210 40% 98%;
    --primary-foreground: 222 47% 11%;
    --secondary: 215 28% 17%;
    --secondary-foreground: 210 40% 98%;
    --muted: 215 28% 17%;
    --muted-foreground: 217 11% 65%;
    --accent: 215 28% 17%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;
    --border: 215 28% 17%;
    --input: 215 28% 17%;
    --ring: 216 34% 17%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  
  /* Safari 26: Authentic Apple Typography with Enhanced Readability */
  body {
    @apply bg-background text-foreground;
    font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
    font-feature-settings: 'kern' 1, 'liga' 1, 'calt' 1, 'ss01' 1, 'ss02' 1;
    background: linear-gradient(135deg, 
      hsl(252 100% 98%) 0%, 
      hsl(0 0% 100% / 0.99) 20%,
      hsl(0 0% 100% / 0.97) 40%,
      hsl(0 0% 100% / 0.95) 60%,
      hsl(0 0% 100% / 0.93) 80%, 
      hsl(185 100% 97%) 100%);
    background-attachment: fixed;
    min-height: 100vh;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
    line-height: 1.47058824;
    letter-spacing: -0.022em;
    font-size: 17px;
  }

  /* Safari 26: Refined Background Elements */
  body::before {
    content: '';
    position: fixed;
    top: -30%;
    left: -30%;
    width: 80vh;
    height: 80vh;
    background: radial-gradient(circle, 
      hsl(252 89% 78% / 0.12) 0%, 
      hsl(252 89% 78% / 0.06) 40%,
      transparent 70%);
    border-radius: 50%;
    filter: blur(80px);
    z-index: -1;
    animation: floatSlow 30s ease-in-out infinite;
  }

  body::after {
    content: '';
    position: fixed;
    bottom: -30%;
    right: -30%;
    width: 100vh;
    height: 100vh;
    background: radial-gradient(circle, 
      hsl(185 91% 75% / 0.08) 0%, 
      hsl(185 91% 75% / 0.04) 40%,
      transparent 70%);
    border-radius: 50%;
    filter: blur(100px);
    z-index: -1;
    animation: floatSlow 35s ease-in-out infinite reverse;
  }

  /* Safari 26: Typography Hierarchy */
  h1, h2, h3, h4, h5, h6 {
    font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Inter', sans-serif;
    font-weight: 600;
    letter-spacing: -0.022em;
    line-height: 1.2;
  }

  h1 {
    font-size: var(--font-size-4xl);
    font-weight: 700;
    letter-spacing: -0.025em;
  }

  h2 {
    font-size: var(--font-size-3xl);
    letter-spacing: -0.024em;
  }

  h3 {
    font-size: var(--font-size-2xl);
    letter-spacing: -0.020em;
  }

  p {
    line-height: 1.6;
    letter-spacing: -0.011em;
  }
}

@layer components {
  /* Safari 26: Authentic Glass Morphism with Spatial Depth */
  .glass-container {
    background: hsl(0 0% 100% / 0.90);
    backdrop-filter: blur(24px) saturate(200%) brightness(1.15);
    -webkit-backdrop-filter: blur(24px) saturate(200%) brightness(1.15);
    border: 1px solid hsl(0 0% 100% / 0.4);
    border-radius: 16px;
    box-shadow: 
      0 2px 8px 0 hsl(0 0% 0% / 0.08),
      0 1px 4px -1px hsl(0 0% 0% / 0.1),
      inset 0 1px 0 0 hsl(0 0% 100% / 0.2),
      inset 0 0 20px 0 hsl(0 0% 100% / 0.1);
    transition: all 0.25s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .glass-card {
    background: hsl(0 0% 100% / 0.9);
    backdrop-filter: blur(16px) saturate(180%) brightness(1.05);
    -webkit-backdrop-filter: blur(16px) saturate(180%) brightness(1.05);
    border: 0.5px solid hsl(0 0% 100% / 0.4);
    border-radius: 8px;
    box-shadow: 
      0 4px 6px -1px hsl(0 0% 0% / 0.1),
      0 2px 4px -2px hsl(0 0% 0% / 0.1),
      inset 0 1px 0 0 hsl(0 0% 100% / 0.1);
    transition: all 0.25s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .glass-card:hover {
    transform: translateY(-4px) scale(1.02);
    box-shadow: 
      0 20px 25px -5px hsl(0 0% 0% / 0.12),
      0 8px 10px -6px hsl(0 0% 0% / 0.1),
      0 0 0 1px hsl(221 83% 53% / 0.15),
      inset 0 1px 0 0 hsl(0 0% 100% / 0.3);
    border-color: hsl(221 83% 53% / 0.2);
    backdrop-filter: blur(28px) saturate(220%) brightness(1.2);
    -webkit-backdrop-filter: blur(28px) saturate(220%) brightness(1.2);
  }

  /* Safari 26: Enhanced Gradient Text */
  .gradient-text {
    background: linear-gradient(135deg, 
      hsl(252 89% 67%) 0%, 
      hsl(270 89% 70%) 25%,
      hsl(185 91% 65%) 75%,
      hsl(200 91% 60%) 100%);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    font-weight: 600;
  }

  /* Safari 26: Enhanced Scrollbar Styling */
  .mobile-scroll {
    scrollbar-width: thin;
    scrollbar-color: hsl(220 13% 91%) transparent;
    -ms-overflow-style: none;
  }

  .mobile-scroll::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }

  .mobile-scroll::-webkit-scrollbar-track {
    background: transparent;
  }

  .mobile-scroll::-webkit-scrollbar-thumb {
    background: hsl(220 13% 91%);
    border-radius: 3px;
  }

  .mobile-scroll::-webkit-scrollbar-thumb:hover {
    background: hsl(220 9% 46%);
  }

  /* Safari 26: Text Clamping */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    line-height: 1.5;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    line-height: 1.5;
  }

  /* Safari 26: Authentic Apple Button Design */
  .safari-button {
    background: linear-gradient(180deg, 
      hsl(221 83% 56%) 0%, 
      hsl(221 83% 50%) 100%);
    border: 0.5px solid hsl(221 83% 45%);
    border-radius: 6px;
    color: white;
    font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
    font-weight: 510;
    font-size: 15px;
    letter-spacing: -0.024em;
    line-height: 1.33;
    padding: 8px 16px;
    min-height: 32px;
    transition: all 0.15s ease-out;
    box-shadow: 
      0 1px 3px 0 hsl(221 83% 20% / 0.12),
      inset 0 1px 0 0 hsl(221 83% 60% / 0.2);
    cursor: pointer;
    -webkit-appearance: none;
    -webkit-user-select: none;
    user-select: none;
  }

  .safari-button:hover {
    background: linear-gradient(180deg, 
      hsl(221 83% 58%) 0%, 
      hsl(221 83% 52%) 100%);
    box-shadow: 
      0 4px 12px 0 hsl(221 83% 20% / 0.2),
      0 2px 6px 0 hsl(221 83% 30% / 0.15),
      inset 0 1px 0 0 hsl(221 83% 62% / 0.3);
    transform: translateY(-1px);
  }

  .safari-button:active {
    background: linear-gradient(180deg, 
      hsl(221 83% 48%) 0%, 
      hsl(221 83% 46%) 100%);
    box-shadow: 
      inset 0 1px 2px 0 hsl(221 83% 20% / 0.2),
      inset 0 1px 0 0 hsl(221 83% 52% / 0.1);
    transform: translateY(0.5px);
  }

  /* Safari 26: Mobile-First Responsive Design */
  @media (max-width: 640px) {
    .container {
      padding-left: var(--spacing-md);
      padding-right: var(--spacing-md);
    }

    body {
      font-size: var(--font-size-sm);
    }

    h1 {
      font-size: var(--font-size-2xl);
    }

    h2 {
      font-size: var(--font-size-xl);
    }
  }

  /* Safari 26: Enhanced Dark Mode */
  .dark .glass-container {
    background: hsl(224 71% 4% / 0.8);
    border: 1px solid hsl(215 28% 17% / 0.5);
    box-shadow: var(--shadow-lg),
                0 0 0 1px hsl(0 0% 100% / 0.05);
  }

  .dark .glass-card {
    background: hsl(224 71% 4% / 0.9);
    border: 1px solid hsl(215 28% 17% / 0.8);
    box-shadow: var(--shadow-md),
                0 0 0 1px hsl(0 0% 100% / 0.05);
  }

  .dark .glass-card:hover {
    box-shadow: var(--shadow-xl),
                0 0 0 1px hsl(0 0% 100% / 0.1);
  }

  /* Safari 26: Enhanced Touch Targets & Spatial Relationships */
  @media (max-width: 768px) {
    .touch-target {
      min-height: 44px;
      min-width: 44px;
      padding: 10px 16px;
    }

    button {
      min-height: 44px;
      padding: 10px 20px;
      border-radius: 8px;
    }

    .container {
      padding-left: 20px;
      padding-right: 20px;
    }

    .card-mobile {
      margin-bottom: 16px;
    }

    /* Safari 26: Improved Mobile Typography */
    body {
      font-size: 16px;
      line-height: 1.4375;
    }

    h1 {
      font-size: 28px;
      line-height: 1.14286;
      letter-spacing: -0.015em;
    }

    h2 {
      font-size: 22px;
      line-height: 1.18182;
      letter-spacing: -0.012em;
    }
  }

  /* Safari 26: Enhanced Interactive States */
  @media (hover: hover) and (pointer: fine) {
    .safari-button:hover {
      transform: none;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  /* Safari 26: Refined Animations */
  @media (prefers-reduced-motion: no-preference) {
    .animate-on-scroll {
      animation: fadeInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .stagger-animation {
      animation: fadeInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      animation-fill-mode: both;
    }

    .stagger-animation:nth-child(1) { animation-delay: 0ms; }
    .stagger-animation:nth-child(2) { animation-delay: 50ms; }
    .stagger-animation:nth-child(3) { animation-delay: 100ms; }
    .stagger-animation:nth-child(4) { animation-delay: 150ms; }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
}

/* Safari 26: Refined Background Animations */
@keyframes floatSlow {
  0%, 100% {
    transform: translateY(0px) translateX(0px) rotate(0deg) scale(1);
  }
  25% {
    transform: translateY(-20px) translateX(10px) rotate(90deg) scale(1.05);
  }
  50% {
    transform: translateY(0px) translateX(20px) rotate(180deg) scale(1);
  }
  75% {
    transform: translateY(20px) translateX(10px) rotate(270deg) scale(0.95);
  }
}

=== FILE: client/src/styles/safari-26.css ===

/**
 * Safari 26.0 Specific CSS Enhancements
 * Implements Apple's latest design principles and web technologies
 */

/* Safari 26.0: Enhanced Container Queries */
@container (min-width: 320px) {
  .safari-responsive {
    padding: 1rem;
  }
}

@container (min-width: 768px) {
  .safari-responsive {
    padding: 2rem;
  }
}

@container (min-width: 1024px) {
  .safari-responsive {
    padding: 3rem;
  }
}

/* Safari 26.0: CSS Grid Level 3 with Subgrid */
.safari-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
}

.safari-grid-item {
  display: grid;
  grid-template-columns: subgrid;
  grid-column: span 1;
}

/* Safari 26.0: Logical Properties for RTL Support */
.safari-logical {
  margin-inline-start: 1rem;
  margin-inline-end: 1rem;
  padding-block-start: 0.5rem;
  padding-block-end: 0.5rem;
  border-inline-start: 2px solid var(--primary);
  border-inline-end: 2px solid var(--secondary);
}

/* Safari 26.0: Enhanced Backdrop Filter */
.safari-glass {
  backdrop-filter: blur(20px) saturate(180%) brightness(1.1);
  -webkit-backdrop-filter: blur(20px) saturate(180%) brightness(1.1);
  background: rgba(255, 255, 255, 0.85);
  border: 1px solid rgba(255, 255, 255, 0.3);
}

.safari-glass-dark {
  backdrop-filter: blur(20px) saturate(180%) brightness(0.9);
  -webkit-backdrop-filter: blur(20px) saturate(180%) brightness(0.9);
  background: rgba(0, 0, 0, 0.85);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

/* Safari 26.0: Advanced Animations */
@keyframes safari-fade-in {
  from {
    opacity: 0;
    transform: translateY(20px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

@keyframes safari-slide-up {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes safari-scale-in {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.safari-animate-fade-in {
  animation: safari-fade-in 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.safari-animate-slide-up {
  animation: safari-slide-up 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.safari-animate-scale-in {
  animation: safari-scale-in 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

/* Safari 26.0: Enhanced Typography */
.safari-typography {
  font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
  font-feature-settings: 'kern' 1, 'liga' 1, 'calt' 1, 'ss01' 1, 'ss02' 1;
  font-variant-ligatures: common-ligatures;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.safari-heading {
  font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
  font-weight: 600;
  letter-spacing: -0.022em;
  line-height: 1.2;
}

/* Safari 26.0: Enhanced Focus States */
.safari-focus {
  outline: 2px solid var(--primary);
  outline-offset: 2px;
  border-radius: 4px;
}

.safari-focus:focus-visible {
  outline: 2px solid var(--primary);
  outline-offset: 2px;
}

/* Safari 26.0: Touch Optimizations */
.safari-touch {
  touch-action: manipulation;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0.1);
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  user-select: none;
}

.safari-touch:active {
  transform: scale(0.98);
  transition: transform 100ms ease-out;
}

/* Safari 26.0: Safe Area Support */
.safari-safe-area {
  padding-top: env(safe-area-inset-top);
  padding-bottom: env(safe-area-inset-bottom);
  padding-left: env(safe-area-inset-left);
  padding-right: env(safe-area-inset-right);
}

/* Safari 26.0: Dark Mode Optimizations */
@media (prefers-color-scheme: dark) {
  .safari-glass {
    background: rgba(0, 0, 0, 0.85);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .safari-glass-dark {
    background: rgba(0, 0, 0, 0.95);
    border: 1px solid rgba(255, 255, 255, 0.05);
  }
}

/* Safari 26.0: High Contrast Mode */
@media (prefers-contrast: high) {
  .safari-glass {
    background: var(--background);
    border: 2px solid var(--foreground);
    backdrop-filter: none;
    -webkit-backdrop-filter: none;
  }
  
  .safari-glass-dark {
    background: var(--background);
    border: 2px solid var(--foreground);
    backdrop-filter: none;
    -webkit-backdrop-filter: none;
  }
}

/* Safari 26.0: Reduced Motion */
@media (prefers-reduced-motion: reduce) {
  .safari-animate-fade-in,
  .safari-animate-slide-up,
  .safari-animate-scale-in {
    animation: none;
  }
  
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

/* Safari 26.0: Print Optimizations */
@media print {
  .safari-glass,
  .safari-glass-dark {
    background: white;
    border: 1px solid #ccc;
    backdrop-filter: none;
    -webkit-backdrop-filter: none;
  }
  
  .safari-animate-fade-in,
  .safari-animate-slide-up,
  .safari-animate-scale-in {
    animation: none;
  }
}

/* Safari 26.0: Enhanced Scrollbar Styling */
.safari-scrollbar {
  scrollbar-width: thin;
  scrollbar-color: var(--muted) transparent;
}

.safari-scrollbar::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

.safari-scrollbar::-webkit-scrollbar-track {
  background: transparent;
}

.safari-scrollbar::-webkit-scrollbar-thumb {
  background: var(--muted);
  border-radius: 4px;
}

.safari-scrollbar::-webkit-scrollbar-thumb:hover {
  background: var(--muted-foreground);
}

/* Safari 26.0: Enhanced Button Styles */
.safari-button {
  background: linear-gradient(180deg, 
    hsl(var(--primary)) 0%, 
    hsl(var(--primary) / 0.9) 100%);
  border: 0.5px solid hsl(var(--primary) / 0.8);
  border-radius: 6px;
  color: white;
  font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
  font-weight: 510;
  font-size: 15px;
  letter-spacing: -0.024em;
  line-height: 1.33;
  padding: 8px 16px;
  min-height: 32px;
  transition: all 0.15s ease-out;
  box-shadow: 
    0 1px 3px 0 hsl(var(--primary) / 0.2),
    inset 0 1px 0 0 hsl(var(--primary) / 0.3);
  cursor: pointer;
  appearance: none;
  -webkit-appearance: none;
  -webkit-user-select: none;
  user-select: none;
}

.safari-button:hover {
  background: linear-gradient(180deg, 
    hsl(var(--primary) / 1.1) 0%, 
    hsl(var(--primary) / 0.95) 100%);
  box-shadow: 
    0 4px 12px 0 hsl(var(--primary) / 0.3),
    0 2px 6px 0 hsl(var(--primary) / 0.2),
    inset 0 1px 0 0 hsl(var(--primary) / 0.4);
  transform: translateY(-1px);
}

.safari-button:active {
  background: linear-gradient(180deg, 
    hsl(var(--primary) / 0.9) 0%, 
    hsl(var(--primary) / 0.85) 100%);
  box-shadow: 
    inset 0 1px 2px 0 hsl(var(--primary) / 0.3),
    inset 0 1px 0 0 hsl(var(--primary) / 0.2);
  transform: translateY(0.5px);
}

/* Safari 26.0: Enhanced Card Styles */
.safari-card {
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(16px) saturate(180%) brightness(1.05);
  -webkit-backdrop-filter: blur(16px) saturate(180%) brightness(1.05);
  border: 0.5px solid rgba(255, 255, 255, 0.4);
  border-radius: 12px;
  box-shadow: 
    0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -2px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 0 rgba(255, 255, 255, 0.1);
  transition: all 0.25s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.safari-card:hover {
  transform: translateY(-4px) scale(1.02);
  box-shadow: 
    0 20px 25px -5px rgba(0, 0, 0, 0.12),
    0 8px 10px -6px rgba(0, 0, 0, 0.1),
    0 0 0 1px hsl(var(--primary) / 0.15),
    inset 0 1px 0 0 rgba(255, 255, 255, 0.3);
  border-color: hsl(var(--primary) / 0.2);
  backdrop-filter: blur(28px) saturate(220%) brightness(1.2);
  -webkit-backdrop-filter: blur(28px) saturate(220%) brightness(1.2);
}

/* Safari 26.0: Enhanced Form Elements */
.safari-input {
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(8px);
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  padding: 12px 16px;
  font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
  font-size: 16px;
  line-height: 1.5;
  transition: all 0.2s ease-out;
}

.safari-input:focus {
  outline: none;
  border-color: hsl(var(--primary));
  box-shadow: 0 0 0 3px hsl(var(--primary) / 0.1);
  background: rgba(255, 255, 255, 0.95);
}

/* Safari 26.0: Enhanced Progress Indicators */
.safari-progress {
  background: rgba(0, 0, 0, 0.1);
  border-radius: 4px;
  height: 8px;
  overflow: hidden;
}

.safari-progress-bar {
  background: linear-gradient(90deg, 
    hsl(var(--primary)) 0%, 
    hsl(var(--primary) / 0.8) 100%);
  height: 100%;
  border-radius: 4px;
  transition: width 0.3s ease-out;
  position: relative;
}

.safari-progress-bar::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(90deg, 
    transparent 0%, 
    rgba(255, 255, 255, 0.3) 50%, 
    transparent 100%);
  animation: safari-progress-shine 2s infinite;
}

@keyframes safari-progress-shine {
  0% { transform: translateX(-100%); }
  100% { transform: translateX(100%); }
}

/* Safari 26.0: Enhanced Loading States */
.safari-loading {
  position: relative;
  overflow: hidden;
}

.safari-loading::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, 
    transparent 0%, 
    rgba(255, 255, 255, 0.4) 50%, 
    transparent 100%);
  animation: safari-loading-shimmer 1.5s infinite;
}

@keyframes safari-loading-shimmer {
  0% { left: -100%; }
  100% { left: 100%; }
}

/* Safari 26.0: Enhanced Accessibility */
.safari-sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.safari-focus-visible:focus-visible {
  outline: 2px solid hsl(var(--primary));
  outline-offset: 2px;
}

/* Safari 26.0: Enhanced Responsive Design */
@media (max-width: 640px) {
  .safari-responsive {
    padding: 1rem;
  }
  
  .safari-button {
    min-height: 44px;
    padding: 12px 20px;
    font-size: 16px;
  }
  
  .safari-card {
    margin-bottom: 1rem;
  }
}

@media (min-width: 641px) and (max-width: 1024px) {
  .safari-responsive {
    padding: 1.5rem;
  }
}

@media (min-width: 1025px) {
  .safari-responsive {
    padding: 2rem;
  }
}


=== FILE: client/src/components/AzureSignIn.tsx ===

import { Button } from "@/components/ui/button";
import { LogIn } from "lucide-react";

interface AzureSignInProps {
  className?: string;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  size?: "default" | "sm" | "lg" | "icon";
}

export function AzureSignIn({ 
  className, 
  variant = "default", 
  size = "default" 
}: AzureSignInProps) {
  const handleAzureSignIn = () => {
    window.location.href = "/api/auth/azure";
  };

  return (
    <Button
      onClick={handleAzureSignIn}
      variant={variant}
      size={size}
      className={className}
    >
      <LogIn className="mr-2 h-4 w-4" />
      Sign in with Microsoft
    </Button>
  );
}


=== FILE: client/src/components/ui/aspect-ratio.tsx ===

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }


=== FILE: client/src/components/ui/alert-dialog.tsx ===

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


=== FILE: client/src/components/ui/pagination.tsx ===

import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}


=== FILE: client/src/components/ui/tabs.tsx ===

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


=== FILE: client/src/components/ui/card.tsx ===

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "glass-card rounded-xl border border-white/20 text-card-foreground shadow-sm hover:shadow-md transition-all duration-300 hover:scale-[1.02] hover:-translate-y-1",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


=== FILE: client/src/components/ui/slider.tsx ===

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


=== FILE: client/src/components/ui/popover.tsx ===

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


=== FILE: client/src/components/ui/progress.tsx ===

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


=== FILE: client/src/components/ui/toaster.tsx ===

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


=== FILE: client/src/components/ui/input-otp.tsx ===

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }


=== FILE: client/src/components/ui/chart.tsx ===

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}


=== FILE: client/src/components/ui/hover-card.tsx ===

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }


=== FILE: client/src/components/ui/sheet.tsx ===

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


=== FILE: client/src/components/ui/HelpIcon.tsx ===

import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { CircleHelp } from 'lucide-react';
import React from 'react';

type HelpIconProps = {
  term: string;
  definition: string;
  moreLink?: string;
};

export const HelpIcon: React.FC<HelpIconProps> = ({ term, definition, moreLink }) => {
  return (
    <Tooltip>
      <TooltipTrigger asChild>
        <button
          type="button"
          aria-label={`Help: ${term}`}
          className="inline-flex items-center justify-center h-5 w-5 rounded text-muted-foreground hover:text-foreground"
        >
          <CircleHelp className="h-4 w-4" />
        </button>
      </TooltipTrigger>
      <TooltipContent side="top" className="max-w-xs">
        <div className="space-y-1">
          <div className="text-xs font-semibold">{term}</div>
          <div className="text-xs text-muted-foreground">{definition}</div>
          {moreLink && (
            <a
              href={moreLink}
              target="_blank"
              rel="noreferrer"
              className="text-xs underline text-blue-600"
            >
              Learn more
            </a>
          )}
        </div>
      </TooltipContent>
    </Tooltip>
  );
};


=== FILE: client/src/components/ui/scroll-area.tsx ===

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


=== FILE: client/src/components/ui/resizable.tsx ===

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


=== FILE: client/src/components/ui/label.tsx ===

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


=== FILE: client/src/components/ui/navigation-menu.tsx ===

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}


=== FILE: client/src/components/ui/accordion.tsx ===

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


=== FILE: client/src/components/ui/drawer.tsx ===

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}


=== FILE: client/src/components/ui/tooltip.tsx ===

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


=== FILE: client/src/components/ui/alert.tsx ===

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


=== FILE: client/src/components/ui/loading-spinner.tsx ===

import React from 'react';
import { Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';

/**
 * Centralized loading spinner component
 * Eliminates duplication of loading UI patterns across the application
 */

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg' | 'xl';
  className?: string;
  text?: string;
  variant?: 'default' | 'card' | 'page' | 'inline';
}

const sizeClasses = {
  sm: 'h-4 w-4',
  md: 'h-6 w-6',
  lg: 'h-8 w-8',
  xl: 'h-12 w-12'
};

export function LoadingSpinner({ 
  size = 'md', 
  className, 
  text, 
  variant = 'default' 
}: LoadingSpinnerProps) {
  const spinnerClasses = cn(
    'animate-spin',
    sizeClasses[size],
    className
  );

  const spinner = <Loader2 className={spinnerClasses} />;

  switch (variant) {
    case 'card':
      return (
        <div className="flex items-center justify-center p-6">
          <div className="flex flex-col items-center gap-2">
            {spinner}
            {text && <p className="text-sm text-muted-foreground">{text}</p>}
          </div>
        </div>
      );

    case 'page':
      return (
        <div className="min-h-screen flex items-center justify-center">
          <div className="flex flex-col items-center gap-3">
            {spinner}
            {text && <span className="text-lg">{text}</span>}
          </div>
        </div>
      );

    case 'inline':
      return (
        <div className="flex items-center gap-2">
          {spinner}
          {text && <span className="text-sm">{text}</span>}
        </div>
      );

    default:
      return (
        <div className="flex items-center justify-center">
          <div className="flex items-center gap-2">
            {spinner}
            {text && <span>{text}</span>}
          </div>
        </div>
      );
  }
}

/**
 * Specialized loading components for common use cases
 */

export function PageLoadingSpinner({ text = "Loading..." }: { text?: string }) {
  return <LoadingSpinner variant="page" size="lg" text={text} />;
}

export function CardLoadingSpinner({ text = "Loading..." }: { text?: string }) {
  return <LoadingSpinner variant="card" size="md" text={text} />;
}

export function InlineLoadingSpinner({ text }: { text?: string }) {
  return <LoadingSpinner variant="inline" size="sm" text={text} />;
}

export function ButtonLoadingSpinner() {
  return <LoadingSpinner size="sm" className="mr-2" />;
}


=== FILE: client/src/components/ui/switch.tsx ===

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


=== FILE: client/src/components/ui/calendar.tsx ===

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }


=== FILE: client/src/components/ui/breadcrumb.tsx ===

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}


=== FILE: client/src/components/ui/radio-group.tsx ===

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }


=== FILE: client/src/components/ui/command.tsx ===

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


=== FILE: client/src/components/ui/toggle-group.tsx ===

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }


=== FILE: client/src/components/ui/safari-26-features.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './card';
import { Button } from './button';
import { Badge } from './badge';
import { 
  Globe, 
  Shield, 
  Zap, 
  Eye, 
  Download,
  Wifi,
  WifiOff,
  Battery,
  Signal,
  Moon,
  Sun
} from 'lucide-react';

export function Safari26Features() {
  const [isOnline, setIsOnline] = useState(true);
  const [batteryLevel, setBatteryLevel] = useState(85);
  const [isDarkMode, setIsDarkMode] = useState(false);

  useEffect(() => {
    // Simulate online/offline detection
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    // Simulate battery level changes
    const batteryInterval = setInterval(() => {
      setBatteryLevel(prev => Math.max(20, prev + (Math.random() - 0.5) * 10));
    }, 3000);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      clearInterval(batteryInterval);
    };
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50 p-6 space-y-8">
      {/* Safari 26.0 Header */}
      <section className="text-center py-12">
        <div className="max-w-4xl mx-auto">
          <Badge variant="outline" className="mb-4 bg-blue-50 text-blue-700 border-blue-200">
            <Globe className="w-3 h-3 mr-1" />
            Safari 26.0 Features
          </Badge>
          <h1 className="text-5xl font-bold gradient-text mb-6 leading-tight">
            Next-Generation Web Experience
          </h1>
          <p className="text-xl text-muted-foreground mb-8 leading-relaxed max-w-2xl mx-auto">
            Enhanced performance, security, and user experience with Safari 26.0's 
            cutting-edge web technologies and Apple design principles.
          </p>
        </div>
      </section>

      {/* Performance & Security */}
      <section className="max-w-6xl mx-auto">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="text-xl font-semibold flex items-center">
                <Zap className="w-5 h-5 mr-2 text-yellow-500" />
                Performance Enhancements
              </CardTitle>
              <CardDescription>
                Lightning-fast rendering and optimized resource management
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">JavaScript Engine</span>
                  <Badge variant="secondary" className="bg-green-100 text-green-800">
                    Nitro 2.0
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Rendering Engine</span>
                  <Badge variant="secondary" className="bg-blue-100 text-blue-800">
                    WebKit 26.0
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Memory Usage</span>
                  <span className="text-sm text-muted-foreground">-40% optimized</span>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="text-xl font-semibold flex items-center">
                <Shield className="w-5 h-5 mr-2 text-green-500" />
                Enhanced Security
              </CardTitle>
              <CardDescription>
                Advanced privacy protection and security features
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Intelligent Tracking Prevention</span>
                  <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                    ITP 3.0
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Privacy Report</span>
                  <Badge variant="secondary" className="bg-orange-100 text-orange-800">
                    Enhanced
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Secure Context</span>
                  <span className="text-sm text-green-600">‚úì Enforced</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>

      {/* Device Integration */}
      <section className="max-w-6xl mx-auto">
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold">Device Integration</CardTitle>
            <CardDescription>
              Seamless integration with iOS and macOS features
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="text-center p-4 rounded-xl bg-white/50 border border-white/30">
                <div className="flex items-center justify-center mb-3">
                  {isOnline ? (
                    <Wifi className="w-8 h-8 text-green-500" />
                  ) : (
                    <WifiOff className="w-8 h-8 text-red-500" />
                  )}
                </div>
                <h3 className="font-semibold mb-1">Network Status</h3>
                <p className="text-sm text-muted-foreground">
                  {isOnline ? 'Connected' : 'Offline'}
                </p>
              </div>

              <div className="text-center p-4 rounded-xl bg-white/50 border border-white/30">
                <div className="flex items-center justify-center mb-3">
                  <Battery className="w-8 h-8 text-blue-500" />
                </div>
                <h3 className="font-semibold mb-1">Battery Level</h3>
                <p className="text-sm text-muted-foreground">
                  {Math.round(batteryLevel)}%
                </p>
              </div>

              <div className="text-center p-4 rounded-xl bg-white/50 border border-white/30">
                <div className="flex items-center justify-center mb-3">
                  <Signal className="w-8 h-8 text-purple-500" />
                </div>
                <h3 className="font-semibold mb-1">Signal Strength</h3>
                <p className="text-sm text-muted-foreground">Excellent</p>
              </div>

              <div className="text-center p-4 rounded-xl bg-white/50 border border-white/30">
                <div className="flex items-center justify-center mb-3">
                  {isDarkMode ? (
                    <Moon className="w-8 h-8 text-slate-500" />
                  ) : (
                    <Sun className="w-8 h-8 text-yellow-500" />
                  )}
                </div>
                <h3 className="font-semibold mb-1">Theme</h3>
                <p className="text-sm text-muted-foreground">
                  {isDarkMode ? 'Dark' : 'Light'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </section>

      {/* Web Standards Support */}
      <section className="max-w-6xl mx-auto">
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold">Web Standards Support</CardTitle>
            <CardDescription>
              Latest web technologies and standards implementation
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              <div className="space-y-3">
                <h3 className="font-semibold text-lg">CSS Features</h3>
                <div className="space-y-2">
                  <Badge variant="outline" className="w-full justify-start">
                    <Eye className="w-3 h-3 mr-2" />
                    CSS Container Queries
                  </Badge>
                  <Badge variant="outline" className="w-full justify-start">
                    <Eye className="w-3 h-3 mr-2" />
                    CSS Grid Level 3
                  </Badge>
                  <Badge variant="outline" className="w-full justify-start">
                    <Eye className="w-3 h-3 mr-2" />
                    CSS Logical Properties
                  </Badge>
                </div>
              </div>

              <div className="space-y-3">
                <h3 className="font-semibold text-lg">JavaScript APIs</h3>
                <div className="space-y-2">
                  <Badge variant="outline" className="w-full justify-start">
                    <Download className="w-3 h-3 mr-2" />
                    Web Streams API
                  </Badge>
                  <Badge variant="outline" className="w-full justify-start">
                    <Download className="w-3 h-3 mr-2" />
                    Web Locks API
                  </Badge>
                  <Badge variant="outline" className="w-full justify-start">
                    <Download className="w-3 h-3 mr-2" />
                    Web Animations API
                  </Badge>
                </div>
              </div>

              <div className="space-y-3">
                <h3 className="font-semibold text-lg">Performance</h3>
                <div className="space-y-2">
                  <Badge variant="outline" className="w-full justify-start">
                    <Zap className="w-3 h-3 mr-2" />
                    Service Workers
                  </Badge>
                  <Badge variant="outline" className="w-full justify-start">
                    <Zap className="w-3 h-3 mr-2" />
                    WebAssembly
                  </Badge>
                  <Badge variant="outline" className="w-full justify-start">
                    <Zap className="w-3 h-3 mr-2" />
                    WebGL 2.0
                  </Badge>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </section>

      {/* Accessibility Features */}
      <section className="max-w-6xl mx-auto">
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold">Accessibility & Inclusivity</CardTitle>
            <CardDescription>
              Enhanced accessibility features for all users
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
              <div className="space-y-4">
                <h3 className="font-semibold text-lg">Visual Accessibility</h3>
                <div className="space-y-3">
                  <div className="flex items-center space-x-3">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-sm">High contrast mode support</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-sm">Dynamic type scaling</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-sm">Color blind friendly palettes</span>
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <h3 className="font-semibold text-lg">Motor Accessibility</h3>
                <div className="space-y-3">
                  <div className="flex items-center space-x-3">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-sm">Voice control integration</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-sm">Switch control support</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-sm">Touch accommodations</span>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </section>

      {/* Call to Action */}
      <section className="max-w-4xl mx-auto text-center py-12">
        <Card className="glass-card">
          <CardContent className="py-12">
            <h2 className="text-3xl font-bold mb-4">Experience Safari 26.0</h2>
            <p className="text-lg text-muted-foreground mb-8 max-w-2xl mx-auto">
              Discover the future of web browsing with enhanced performance, 
              security, and user experience.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button size="lg" className="safari-button">
                <Globe className="w-5 h-5 mr-2" />
                Try Safari 26.0
              </Button>
              <Button variant="glass" size="lg">
                <Download className="w-5 h-5 mr-2" />
                Download Now
              </Button>
            </div>
          </CardContent>
        </Card>
      </section>
    </div>
  );
}


=== FILE: client/src/components/ui/avatar.tsx ===

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }


=== FILE: client/src/components/ui/safari-design-showcase.tsx ===


export function Safari26DesignShowcase() {
  return (
    <div className="space-y-8 p-6">
      {/* Typography Hierarchy */}
      <section className="glass-card p-6 space-y-4">
        <h3 className="text-lg font-semibold">Safari 26 Typography System</h3>
        <div className="space-y-3">
          <h1 className="text-4xl font-bold tracking-tight">Large Title - SF Pro Display</h1>
          <h2 className="text-2xl font-semibold">Title 1 - Semantic Hierarchy</h2>
          <h3 className="text-xl font-medium">Title 2 - Clear Structure</h3>
          <p className="text-base leading-relaxed">
            Body text using SF Pro Text with optimal line height of 1.47058824 
            and letter-spacing of -0.022em for enhanced readability.
          </p>
          <p className="text-sm text-muted-foreground">
            Caption text with appropriate contrast ratios meeting WCAG AAA standards.
          </p>
        </div>
      </section>

      {/* Interactive Elements */}
      <section className="glass-card p-6 space-y-4">
        <h3 className="text-lg font-semibold">Authentic Apple Buttons</h3>
        <div className="flex flex-wrap gap-3">
          <button className="safari-button">Primary Action</button>
          <button className="px-4 py-2 bg-secondary text-secondary-foreground rounded-md border border-border hover:bg-secondary/80 transition-colors">
            Secondary
          </button>
          <button className="px-4 py-2 text-primary hover:bg-primary/10 rounded-md transition-colors">
            Tertiary
          </button>
        </div>
      </section>

      {/* Glass Morphism Cards */}
      <section className="space-y-4">
        <h3 className="text-lg font-semibold">Spatial Depth & Glass Morphism</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="glass-container p-4">
            <h4 className="font-medium mb-2">Glass Container</h4>
            <p className="text-sm text-muted-foreground">
              Enhanced backdrop blur with brightness adjustment for authentic depth.
            </p>
          </div>
          <div className="glass-card p-4">
            <h4 className="font-medium mb-2">Glass Card</h4>
            <p className="text-sm text-muted-foreground">
              Refined shadow system with inset highlights for realistic glass effect.
            </p>
          </div>
        </div>
      </section>

      {/* Color System */}
      <section className="glass-card p-6 space-y-4">
        <h3 className="text-lg font-semibold">WCAG AAA Color System</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          <div className="aspect-square rounded-lg bg-primary flex items-center justify-center">
            <span className="text-primary-foreground text-xs font-medium">Primary</span>
          </div>
          <div className="aspect-square rounded-lg bg-secondary flex items-center justify-center">
            <span className="text-secondary-foreground text-xs font-medium">Secondary</span>
          </div>
          <div className="aspect-square rounded-lg bg-muted flex items-center justify-center">
            <span className="text-muted-foreground text-xs font-medium">Muted</span>
          </div>
          <div className="aspect-square rounded-lg bg-accent flex items-center justify-center">
            <span className="text-accent-foreground text-xs font-medium">Accent</span>
          </div>
        </div>
      </section>
    </div>
  );
}


=== FILE: client/src/components/ui/menubar.tsx ===

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}


=== FILE: client/src/components/ui/dialog.tsx ===

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


=== FILE: client/src/components/ui/badge.tsx ===

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


=== FILE: client/src/components/ui/sidebar.tsx ===

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        if (setOpenProp) {
          return setOpenProp?.(
            typeof value === "function" ? value(open) : value
          )
        }

        _setOpen(value)

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}


=== FILE: client/src/components/ui/table.tsx ===

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


=== FILE: client/src/components/ui/separator.tsx ===

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


=== FILE: client/src/components/ui/apple-design-system.tsx ===

import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './card';
import { Button } from './button';
import { Badge } from './badge';
import { Progress } from './progress';
import { 
  CheckCircle, 
  Star, 
  Heart, 
  Zap, 
  Shield, 
  Sparkles,
  ArrowRight,
  Play,
  Pause,
  RotateCcw
} from 'lucide-react';

export function AppleDesignSystem() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50 p-6 space-y-8">
      {/* Hero Section - Emotional Connection */}
      <section className="text-center py-12">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-5xl font-bold gradient-text mb-6 leading-tight">
            Safari 26.0 Design System
          </h1>
          <p className="text-xl text-muted-foreground mb-8 leading-relaxed max-w-2xl mx-auto">
            Built with Apple's core design principles: usability, communication, functionality, 
            aesthetics, emotional connections, attention to detail, consistency, and minimalism.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button size="lg" className="safari-button">
              <Sparkles className="w-5 h-5 mr-2" />
              Experience Design
            </Button>
            <Button variant="glass" size="lg">
              <Play className="w-5 h-5 mr-2" />
              Watch Demo
            </Button>
          </div>
        </div>
      </section>

      {/* Typography Hierarchy - Attention to Detail */}
      <section className="max-w-4xl mx-auto">
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold">Typography Hierarchy</CardTitle>
            <CardDescription>
              SF Pro Display and SF Pro Text with precise spacing and letter-spacing
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-4">
              <h1 className="text-4xl font-bold tracking-tight">Large Title</h1>
              <h2 className="text-3xl font-semibold">Title 1</h2>
              <h3 className="text-2xl font-medium">Title 2</h3>
              <h4 className="text-xl font-medium">Title 3</h4>
              <p className="text-base leading-relaxed text-muted-foreground">
                Body text with optimal line height and letter spacing for enhanced readability. 
                This demonstrates Apple's attention to detail in typography.
              </p>
              <p className="text-sm text-muted-foreground">
                Caption text with appropriate contrast ratios meeting WCAG AAA standards.
              </p>
            </div>
          </CardContent>
        </Card>
      </section>

      {/* Interactive Elements - Usability & Communication */}
      <section className="max-w-4xl mx-auto">
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold">Interactive Elements</CardTitle>
            <CardDescription>
              Clear visual feedback and intuitive interactions
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              <Button className="safari-button w-full">
                <Zap className="w-4 h-4 mr-2" />
                Primary Action
              </Button>
              <Button variant="glass" className="w-full">
                <Shield className="w-4 h-4 mr-2" />
                Secondary
              </Button>
              <Button variant="outline" className="w-full">
                <ArrowRight className="w-4 h-4 mr-2" />
                Tertiary
              </Button>
            </div>
            
            <div className="flex flex-wrap gap-2">
              <Badge variant="default" className="bg-green-100 text-green-800">
                <CheckCircle className="w-3 h-3 mr-1" />
                Success
              </Badge>
              <Badge variant="secondary">Information</Badge>
              <Badge variant="outline">Neutral</Badge>
            </div>
          </CardContent>
        </Card>
      </section>

      {/* Progress & Feedback - Functionality */}
      <section className="max-w-4xl mx-auto">
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold">Progress & Feedback</CardTitle>
            <CardDescription>
              Clear communication of system state and user progress
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-4">
              <div>
                <div className="flex justify-between text-sm mb-2">
                  <span>Upload Progress</span>
                  <span>75%</span>
                </div>
                <Progress value={75} className="h-2" />
              </div>
              
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span className="text-sm">Online</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                  <span className="text-sm">Syncing</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </section>

      {/* Emotional Connections */}
      <section className="max-w-4xl mx-auto">
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold">Emotional Connections</CardTitle>
            <CardDescription>
              Engaging interactions that create positive emotional responses
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
              <div className="text-center p-6 rounded-xl bg-gradient-to-br from-pink-50 to-purple-50 border border-pink-200">
                <Heart className="w-12 h-12 text-pink-500 mx-auto mb-4 animate-pulse" />
                <h3 className="font-semibold mb-2">Loved by Users</h3>
                <p className="text-sm text-muted-foreground">
                  Create meaningful connections through thoughtful design
                </p>
              </div>
              
              <div className="text-center p-6 rounded-xl bg-gradient-to-br from-blue-50 to-cyan-50 border border-blue-200">
                <Star className="w-12 h-12 text-blue-500 mx-auto mb-4" />
                <h3 className="font-semibold mb-2">Excellence</h3>
                <p className="text-sm text-muted-foreground">
                  Every detail crafted with care and precision
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </section>

      {/* Consistency & Minimalism */}
      <section className="max-w-4xl mx-auto">
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold">Consistency & Minimalism</CardTitle>
            <CardDescription>
              Unified design language with purposeful simplicity
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
              <div className="text-center p-4 rounded-lg bg-white/50 border border-white/30">
                <div className="w-8 h-8 bg-blue-500 rounded-lg mx-auto mb-2"></div>
                <span className="text-sm font-medium">Primary</span>
              </div>
              <div className="text-center p-4 rounded-lg bg-white/50 border border-white/30">
                <div className="w-8 h-8 bg-green-500 rounded-lg mx-auto mb-2"></div>
                <span className="text-sm font-medium">Success</span>
              </div>
              <div className="text-center p-4 rounded-lg bg-white/50 border border-white/30">
                <div className="w-8 h-8 bg-orange-500 rounded-lg mx-auto mb-2"></div>
                <span className="text-sm font-medium">Warning</span>
              </div>
              <div className="text-center p-4 rounded-lg bg-white/50 border border-white/30">
                <div className="w-8 h-8 bg-red-500 rounded-lg mx-auto mb-2"></div>
                <span className="text-sm font-medium">Error</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </section>

      {/* Aesthetics - Visual Appeal */}
      <section className="max-w-4xl mx-auto">
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold">Aesthetics</CardTitle>
            <CardDescription>
              Beautiful design that enhances functionality
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div className="h-32 rounded-xl bg-gradient-to-br from-purple-400 via-pink-400 to-red-400 flex items-center justify-center">
                  <span className="text-white font-semibold">Gradient 1</span>
                </div>
                <div className="h-32 rounded-xl bg-gradient-to-br from-blue-400 via-cyan-400 to-teal-400 flex items-center justify-center">
                  <span className="text-white font-semibold">Gradient 2</span>
                </div>
              </div>
              <div className="space-y-4">
                <div className="h-32 rounded-xl bg-gradient-to-br from-green-400 via-emerald-400 to-teal-400 flex items-center justify-center">
                  <span className="text-white font-semibold">Gradient 3</span>
                </div>
                <div className="h-32 rounded-xl bg-gradient-to-br from-orange-400 via-yellow-400 to-amber-400 flex items-center justify-center">
                  <span className="text-white font-semibold">Gradient 4</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </section>
    </div>
  );
}


=== FILE: client/src/components/ui/notification-center.tsx ===


import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
  Bell, 
  X, 
  Check, 
  AlertTriangle, 
  Info, 
  CheckCircle, 
  XCircle,
  Trash2,
  Eye
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useNotifications, type Notification } from "@/hooks/use-notifications";
import { cn } from "@/lib/utils";
import { formatDistanceToNow } from "date-fns";

const getNotificationIcon = (type: Notification['type']) => {
  switch (type) {
    case 'success':
      return <CheckCircle className="h-4 w-4 text-green-500" />;
    case 'warning':
      return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
    case 'error':
      return <XCircle className="h-4 w-4 text-red-500" />;
    case 'info':
    default:
      return <Info className="h-4 w-4 text-blue-500" />;
  }
};

const getNotificationBgColor = (type: Notification['type']) => {
  switch (type) {
    case 'success':
      return 'bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800';
    case 'warning':
      return 'bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:border-yellow-800';
    case 'error':
      return 'bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800';
    case 'info':
    default:
      return 'bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:border-blue-800';
  }
};

interface NotificationItemProps {
  notification: Notification;
  onMarkAsRead: (id: string) => void;
  onClear: (id: string) => void;
  compact?: boolean;
}

const NotificationItem: React.FC<NotificationItemProps> = ({
  notification,
  onMarkAsRead,
  onClear,
  compact = false
}) => {
  const { id, title, message, type, timestamp, read, persistent } = notification;
  
  return (
    <div
      className={cn(
        "p-3 border-b border-gray-100 dark:border-gray-800 last:border-b-0 transition-all duration-200",
        !read && "bg-blue-50/30 dark:bg-blue-900/10",
        compact ? "p-2" : "p-3"
      )}
    >
      <div className="flex items-start gap-3">
        {getNotificationIcon(type)}
        
        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between gap-2">
            <div className="flex-1">
              <h4 className={cn(
                "font-medium text-gray-900 dark:text-gray-100",
                compact ? "text-sm" : "text-sm",
                !read && "font-semibold"
              )}>
                {title}
              </h4>
              {!compact && (
                <p className="text-xs text-gray-600 dark:text-gray-400 mt-1 line-clamp-2">
                  {message}
                </p>
              )}
            </div>
            
            <div className="flex items-center gap-1 flex-shrink-0">
              {persistent && (
                <Badge variant="outline" className="text-xs px-1 py-0">
                  Important
                </Badge>
              )}
              
              {!read && (
                <button
                  onClick={() => onMarkAsRead(id)}
                  className="text-blue-600 hover:text-blue-700 transition-colors"
                  title="Mark as read"
                >
                  <Check className="h-3 w-3" />
                </button>
              )}
              
              <button
                onClick={() => onClear(id)}
                className="text-gray-400 hover:text-red-500 transition-colors"
                title="Remove notification"
              >
                <X className="h-3 w-3" />
              </button>
            </div>
          </div>
          
          <div className="flex items-center justify-between mt-2">
            <span className="text-xs text-gray-500">
              {formatDistanceToNow(timestamp, { addSuffix: true })}
            </span>
            
            {!read && (
              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

interface NotificationCenterProps {
  compact?: boolean;
  maxHeight?: string;
}

export const NotificationCenter: React.FC<NotificationCenterProps> = ({
  compact = false,
  maxHeight = "400px"
}) => {
  const {
    notifications,
    unreadCount,
    markAsRead,
    markAllAsRead,
    clearNotification,
    clearAll,
    requestPermission,
    permission
  } = useNotifications();

  const [isOpen, setIsOpen] = useState(false);

  const handleRequestPermission = async () => {
    await requestPermission();
  };

  return (
    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>
      <DropdownMenuTrigger asChild>
        <Button 
          variant="ghost" 
          size="sm" 
          className="relative touch-target"
        >
          <Bell className="h-5 w-5" />
          {unreadCount > 0 && (
            <Badge 
              variant="destructive" 
              className="absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs"
            >
              {unreadCount > 99 ? '99+' : unreadCount}
            </Badge>
          )}
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent 
        align="end" 
        className="w-[calc(100vw-2rem)] sm:w-80 md:w-96 p-0 mx-4 sm:mx-0"
        style={{ maxHeight }}
      >
        <div className="p-4 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-gray-900 dark:text-gray-100">
              Notifications
            </h3>
            
            <div className="flex items-center gap-2">
              {unreadCount > 0 && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={markAllAsRead}
                  className="text-xs"
                >
                  Mark all read
                </Button>
              )}
              
              {notifications.length > 0 && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={clearAll}
                  className="text-xs text-red-600 hover:text-red-700"
                >
                  <Trash2 className="h-3 w-3" />
                </Button>
              )}
            </div>
          </div>
          
          {permission !== 'granted' && (
            <div className="mt-2">
              <Button
                variant="outline"
                size="sm"
                onClick={handleRequestPermission}
                className="text-xs w-full"
              >
                Enable browser notifications
              </Button>
            </div>
          )}
        </div>
        
        <ScrollArea className="max-h-80">
          {notifications.length === 0 ? (
            <div className="p-8 text-center text-gray-500 dark:text-gray-400">
              <Bell className="h-8 w-8 mx-auto mb-2 opacity-50" />
              <p className="text-sm">No notifications yet</p>
            </div>
          ) : (
            <div>
              {notifications.map((notification) => (
                <NotificationItem
                  key={notification.id}
                  notification={notification}
                  onMarkAsRead={markAsRead}
                  onClear={clearNotification}
                  compact={compact}
                />
              ))}
            </div>
          )}
        </ScrollArea>
        
        {notifications.length > 10 && (
          <div className="p-2 border-t border-gray-200 dark:border-gray-700 text-center">
            <Button variant="ghost" size="sm" className="text-xs">
              View all notifications
            </Button>
          </div>
        )}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default NotificationCenter;


=== FILE: client/src/components/ui/button.tsx ===

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 touch-manipulation select-none",
  {
    variants: {
      variant: {
        default: "safari-button",
        destructive:
          "bg-red-500 text-white hover:bg-red-600 active:bg-red-700 rounded-md shadow-sm hover:shadow-md transition-all duration-200",
        outline:
          "border border-input bg-background/80 backdrop-blur-sm hover:bg-accent hover:text-accent-foreground rounded-md shadow-sm hover:shadow-md transition-all duration-200",
        secondary:
          "bg-secondary/80 backdrop-blur-sm text-secondary-foreground hover:bg-secondary/90 rounded-md shadow-sm hover:shadow-md transition-all duration-200",
        ghost: "hover:bg-accent/50 hover:text-accent-foreground rounded-md transition-all duration-200",
        link: "text-primary underline-offset-4 hover:underline transition-all duration-200",
        glass: "glass-card hover:glass-card-hover text-foreground border border-white/20 hover:border-white/30 transition-all duration-300",
      },
      size: {
        default: "h-10 px-4 py-2 min-h-[44px]",
        sm: "h-9 rounded-md px-3 min-h-[36px]",
        lg: "h-12 rounded-md px-8 min-h-[48px]",
        icon: "h-10 w-10 min-h-[44px] min-w-[44px]",
        touch: "h-12 px-6 py-3 min-h-[48px] text-base",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


=== FILE: client/src/components/ui/toggle.tsx ===

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }


=== FILE: client/src/components/ui/toast.tsx ===

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


=== FILE: client/src/components/ui/theme-toggle.tsx ===


import { Moon, Sun } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useEffect, useState } from "react";

export function ThemeToggle() {
  const [theme, setTheme] = useState<"light" | "dark">("light");

  useEffect(() => {
    const savedTheme = localStorage.getItem("theme") as "light" | "dark" | null;
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    const initialTheme = savedTheme || (prefersDark ? "dark" : "light");
    
    setTheme(initialTheme);
    document.documentElement.classList.toggle("dark", initialTheme === "dark");
  }, []);

  const toggleTheme = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    setTheme(newTheme);
    localStorage.setItem("theme", newTheme);
    document.documentElement.classList.toggle("dark", newTheme === "dark");
  };

  return (
    <Button
      variant="ghost"
      size="sm"
      onClick={toggleTheme}
      className="relative w-9 h-9 rounded-lg hover:bg-black/5 dark:hover:bg-white/10 transition-all duration-200"
    >
      <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  );
}


=== FILE: client/src/components/ui/checkbox.tsx ===

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


=== FILE: client/src/components/ui/collapsible.tsx ===

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


=== FILE: client/src/components/ui/dropdown-menu.tsx ===

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


=== FILE: client/src/components/ui/select.tsx ===

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


=== FILE: client/src/components/ui/textarea.tsx ===

import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }


=== FILE: client/src/components/ui/input.tsx ===

import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


=== FILE: client/src/components/ui/skeleton.tsx ===

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }


=== FILE: client/src/components/ui/context-menu.tsx ===

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}


=== FILE: client/src/components/ui/form.tsx ===

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


=== FILE: client/src/components/ui/carousel.tsx ===

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


=== FILE: client/src/components/assessments/AssessmentFlow.tsx ===

/**
 * Assessment Flow Component
 * 
 * Complete assessment experience with:
 * - Assessment type selection
 * - Question-by-question flow
 * - Progress tracking
 * - Results display
 * - Agent adaptation trigger
 */

import React, { useState } from 'react';
import { useAssessment, useAssessmentResults } from '../../hooks/useAssessment';
import { Button } from '../ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Progress } from '../ui/progress';
import { RadioGroup, RadioGroupItem } from '../ui/radio-group';
import { Label } from '../ui/label';
import { CheckCircle2, ArrowRight, ArrowLeft, Sparkles } from 'lucide-react';

// ============================================================================
// ASSESSMENT TYPE SELECTOR
// ============================================================================

function AssessmentTypeSelector({ 
  assessmentTypes, 
  onSelect 
}: { 
  assessmentTypes: any[]; 
  onSelect: (type: string) => void;
}) {
  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-3xl font-bold mb-2">Choose Your Assessment</h2>
        <p className="text-muted-foreground">
          Select an assessment to get personalized insights and optimize your AI agents
        </p>
      </div>

      <div className="grid gap-4 md:grid-cols-2">
        {assessmentTypes?.map((type) => (
          <Card 
            key={type.id} 
            className="cursor-pointer hover:border-primary transition-colors"
            onClick={() => onSelect(type.id)}
          >
            <CardHeader>
              <CardTitle>{type.name}</CardTitle>
              <CardDescription>{type.description}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Duration:</span>
                  <span className="font-medium">{type.duration}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Questions:</span>
                  <span className="font-medium">{type.questions}</span>
                </div>
                
                <div className="pt-3 border-t">
                  <p className="text-sm font-medium mb-2">Benefits:</p>
                  <ul className="text-sm text-muted-foreground space-y-1">
                    {type.benefits.slice(0, 3).map((benefit: string, i: number) => (
                      <li key={i} className="flex items-start">
                        <CheckCircle2 className="h-4 w-4 mr-2 mt-0.5 text-green-500 flex-shrink-0" />
                        <span>{benefit}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                <Button className="w-full mt-4">
                  Start Assessment
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

// ============================================================================
// QUESTION DISPLAY
// ============================================================================

function QuestionDisplay({
  question,
  onAnswer,
  onNext,
  onPrevious,
  canGoNext,
  canGoPrevious,
  isLastQuestion,
  isSubmitting
}: {
  question: any;
  onAnswer: (value: number) => void;
  onNext: () => void;
  onPrevious: () => void;
  canGoNext: boolean;
  canGoPrevious: boolean;
  isLastQuestion: boolean;
  isSubmitting: boolean;
}) {
  const [selectedValue, setSelectedValue] = useState<number | null>(null);

  const handleAnswer = (value: number) => {
    setSelectedValue(value);
    onAnswer(value);
  };

  const handleNext = () => {
    if (selectedValue !== null) {
      onNext();
      setSelectedValue(null);
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="text-xl">{question.text}</CardTitle>
          {question.category && (
            <CardDescription>Category: {question.category}</CardDescription>
          )}
        </CardHeader>
        <CardContent>
          <RadioGroup
            value={selectedValue?.toString()}
            onValueChange={(value) => handleAnswer(parseInt(value))}
            className="space-y-3"
          >
            {[1, 2, 3, 4, 5].map((value) => (
              <div key={value} className="flex items-center space-x-3 p-3 rounded-lg hover:bg-accent transition-colors">
                <RadioGroupItem value={value.toString()} id={`option-${value}`} />
                <Label 
                  htmlFor={`option-${value}`} 
                  className="flex-1 cursor-pointer font-normal"
                >
                  {value === 1 && 'Strongly Disagree'}
                  {value === 2 && 'Disagree'}
                  {value === 3 && 'Neutral'}
                  {value === 4 && 'Agree'}
                  {value === 5 && 'Strongly Agree'}
                </Label>
              </div>
            ))}
          </RadioGroup>
        </CardContent>
      </Card>

      <div className="flex justify-between">
        <Button
          variant="outline"
          onClick={onPrevious}
          disabled={!canGoPrevious || isSubmitting}
        >
          <ArrowLeft className="mr-2 h-4 w-4" />
          Previous
        </Button>

        <Button
          onClick={handleNext}
          disabled={selectedValue === null || isSubmitting}
        >
          {isLastQuestion ? 'Complete Assessment' : 'Next Question'}
          <ArrowRight className="ml-2 h-4 w-4" />
        </Button>
      </div>
    </div>
  );
}

// ============================================================================
// RESULTS DISPLAY
// ============================================================================

function ResultsDisplay({ 
  results, 
  onAdaptAgents,
  isAdapting 
}: { 
  results: any;
  onAdaptAgents: () => void;
  isAdapting: boolean;
}) {
  return (
    <div className="space-y-6">
      <Card className="border-green-500">
        <CardHeader>
          <div className="flex items-center gap-2">
            <CheckCircle2 className="h-6 w-6 text-green-500" />
            <CardTitle>Assessment Complete!</CardTitle>
          </div>
          <CardDescription>
            Your results are ready. Review your profile below.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {results.results?.scores && (
              <div>
                <h3 className="font-semibold mb-3">Your Scores:</h3>
                <div className="grid gap-3">
                  {Object.entries(results.results.scores).map(([key, value]: [string, any]) => (
                    <div key={key} className="flex items-center justify-between">
                      <span className="capitalize">{key.replace(/_/g, ' ')}</span>
                      <div className="flex items-center gap-3">
                        <Progress value={value} className="w-32" />
                        <span className="font-medium w-12 text-right">{value}%</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {results.results?.interpretation && (
              <div className="pt-4 border-t">
                <h3 className="font-semibold mb-2">Interpretation:</h3>
                <p className="text-muted-foreground">{results.results.interpretation}</p>
              </div>
            )}

            <div className="pt-4 border-t">
              <Button 
                onClick={onAdaptAgents} 
                disabled={isAdapting}
                className="w-full"
              >
                <Sparkles className="mr-2 h-4 w-4" />
                {isAdapting ? 'Adapting Agents...' : 'Optimize My AI Agents'}
              </Button>
              <p className="text-sm text-muted-foreground mt-2 text-center">
                Your AI agents will adapt their personality and communication style based on your assessment
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

// ============================================================================
// MAIN ASSESSMENT FLOW
// ============================================================================

export function AssessmentFlow() {
  const [showResults, setShowResults] = useState(false);
  const [completedAssessmentType, setCompletedAssessmentType] = useState<string | null>(null);

  const {
    assessmentTypes,
    currentSession,
    currentQuestion,
    currentQuestionIndex,
    totalQuestions,
    progressPercentage,
    isLoadingTypes,
    isStarting,
    isSubmitting,
    isCompleting,
    isAdaptingAgents,
    isLastQuestion,
    canGoPrevious,
    startNewAssessment,
    answerQuestion,
    finishAssessment,
    cancelAssessment,
    goToNextQuestion,
    goToPreviousQuestion,
    adaptAgents
  } = useAssessment();

  const { results } = useAssessmentResults(completedAssessmentType || undefined);

  const handleSelectAssessment = async (assessmentType: string) => {
    try {
      await startNewAssessment(assessmentType);
      setShowResults(false);
    } catch (error) {
      console.error('Failed to start assessment:', error);
    }
  };

  const handleAnswerQuestion = async (value: number) => {
    try {
      if (!currentQuestion) return;
      await answerQuestion(currentQuestion.id, value);
      
      if (isLastQuestion) {
        // Complete assessment
        await finishAssessment();
        setCompletedAssessmentType(currentSession?.assessmentType || null);
        setShowResults(true);
      } else {
        goToNextQuestion();
      }
    } catch (error) {
      console.error('Failed to submit answer:', error);
    }
  };

  const handleAdaptAgents = async () => {
    try {
      await adaptAgents();
      alert('Your AI agents have been optimized based on your assessment!');
    } catch (error) {
      console.error('Failed to adapt agents:', error);
      alert('Failed to adapt agents. Please try again.');
    }
  };

  const handleCancel = async () => {
    if (confirm('Are you sure you want to cancel this assessment? Your progress will be lost.')) {
      try {
        await cancelAssessment();
      } catch (error) {
        console.error('Failed to cancel assessment:', error);
      }
    }
  };

  // Show loading state
  if (isLoadingTypes) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading assessments...</p>
        </div>
      </div>
    );
  }

  // Show results
  if (showResults && results) {
    return (
      <div className="max-w-3xl mx-auto py-8">
        <ResultsDisplay 
          results={results}
          onAdaptAgents={handleAdaptAgents}
          isAdapting={isAdaptingAgents}
        />
        <div className="mt-6 text-center">
          <Button variant="outline" onClick={() => {
            setShowResults(false);
            setCompletedAssessmentType(null);
          }}>
            Take Another Assessment
          </Button>
        </div>
      </div>
    );
  }

  // Show assessment in progress
  if (currentSession && currentQuestion) {
    return (
      <div className="max-w-3xl mx-auto py-8">
        <div className="mb-6">
          <div className="flex items-center justify-between mb-2">
            <h2 className="text-2xl font-bold">
              {assessmentTypes?.find(t => t.id === currentSession.assessmentType)?.name}
            </h2>
            <Button variant="ghost" size="sm" onClick={handleCancel}>
              Cancel
            </Button>
          </div>
          
          <div className="space-y-2">
            <div className="flex justify-between text-sm text-muted-foreground">
              <span>Question {currentQuestionIndex + 1} of {totalQuestions}</span>
              <span>{Math.round(progressPercentage)}% Complete</span>
            </div>
            <Progress value={progressPercentage} className="h-2" />
          </div>
        </div>

        <QuestionDisplay
          question={currentQuestion}
          onAnswer={handleAnswerQuestion}
          onNext={goToNextQuestion}
          onPrevious={goToPreviousQuestion}
          canGoNext={true}
          canGoPrevious={canGoPrevious}
          isLastQuestion={isLastQuestion}
          isSubmitting={isSubmitting || isCompleting}
        />
      </div>
    );
  }

  // Show assessment type selector
  return (
    <div className="max-w-5xl mx-auto py-8">
      <AssessmentTypeSelector
        assessmentTypes={assessmentTypes || []}
        onSelect={handleSelectAssessment}
      />
    </div>
  );
}


=== FILE: client/src/components/assessments/DTReadinessAssessment.tsx ===

// ============================================================================
// DESIGN THINKING READINESS ASSESSMENT
// Assess user's DT mindset and capabilities
// ============================================================================

import React, { useState } from 'react';
import { Brain, Users, Zap, Wrench, Target, CheckCircle } from 'lucide-react';

interface AssessmentQuestion {
  id: string;
  question: string;
  dimension: string;
}

interface AssessmentResult {
  empathyScore: number;
  problemFramingAbility: number;
  iterationComfort: number;
  prototypingMindset: number;
  userCentricityIndex: number;
  overallReadiness: number;
  readinessLevel: string;
  strengths: string[];
  developmentAreas: string[];
  recommendations: string[];
}

export function DTReadinessAssessment({ onComplete }: { onComplete?: (result: AssessmentResult) => void }) {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<string, number>>({});
  const [result, setResult] = useState<AssessmentResult | null>(null);

  const questions: AssessmentQuestion[] = [
    // Empathy Questions
    { id: 'emp1', question: 'I enjoy learning about other people\'s experiences and perspectives', dimension: 'empathy' },
    { id: 'emp2', question: 'I can easily put myself in someone else\'s shoes', dimension: 'empathy' },
    { id: 'emp3', question: 'I actively seek to understand user needs before proposing solutions', dimension: 'empathy' },
    { id: 'emp4', question: 'I find it valuable to observe people in their natural environment', dimension: 'empathy' },
    
    // Problem Framing Questions
    { id: 'pf1', question: 'I can clearly articulate problems without jumping to solutions', dimension: 'problem_framing' },
    { id: 'pf2', question: 'I enjoy exploring different ways to frame a challenge', dimension: 'problem_framing' },
    { id: 'pf3', question: 'I question assumptions before accepting them as facts', dimension: 'problem_framing' },
    { id: 'pf4', question: 'I can identify the root cause of problems', dimension: 'problem_framing' },
    
    // Iteration Comfort Questions
    { id: 'ic1', question: 'I\'m comfortable with ambiguity and uncertainty', dimension: 'iteration' },
    { id: 'ic2', question: 'I see failure as a learning opportunity', dimension: 'iteration' },
    { id: 'ic3', question: 'I prefer to test ideas quickly rather than perfect them first', dimension: 'iteration' },
    { id: 'ic4', question: 'I\'m willing to pivot based on user feedback', dimension: 'iteration' },
    
    // Prototyping Mindset Questions
    { id: 'pm1', question: 'I enjoy building quick mockups to test ideas', dimension: 'prototyping' },
    { id: 'pm2', question: 'I believe in "show, don\'t tell" when communicating ideas', dimension: 'prototyping' },
    { id: 'pm3', question: 'I\'m comfortable with low-fidelity prototypes', dimension: 'prototyping' },
    { id: 'pm4', question: 'I see prototyping as a thinking tool, not just a deliverable', dimension: 'prototyping' },
    
    // User-Centricity Questions
    { id: 'uc1', question: 'I regularly interact with end users', dimension: 'user_centricity' },
    { id: 'uc2', question: 'I make decisions based on user data rather than assumptions', dimension: 'user_centricity' },
    { id: 'uc3', question: 'I involve users throughout the development process', dimension: 'user_centricity' },
    { id: 'uc4', question: 'I prioritize user needs over technical elegance', dimension: 'user_centricity' }
  ];

  const handleAnswer = (value: number) => {
    const question = questions[currentQuestion];
    setAnswers({ ...answers, [question.id]: value });
    
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      calculateResult({ ...answers, [question.id]: value });
    }
  };

  const calculateResult = (finalAnswers: Record<string, number>) => {
    // Calculate dimension scores
    const empathyScore = calculateDimensionScore(finalAnswers, 'empathy');
    const problemFramingAbility = calculateDimensionScore(finalAnswers, 'problem_framing');
    const iterationComfort = calculateDimensionScore(finalAnswers, 'iteration');
    const prototypingMindset = calculateDimensionScore(finalAnswers, 'prototyping');
    const userCentricityIndex = calculateDimensionScore(finalAnswers, 'user_centricity');
    
    // Calculate overall readiness
    const overallReadiness = (
      empathyScore * 0.3 +
      problemFramingAbility * 0.2 +
      iterationComfort * 0.2 +
      prototypingMindset * 0.15 +
      userCentricityIndex * 0.15
    );
    
    // Determine readiness level
    let readinessLevel = 'beginner';
    if (overallReadiness >= 80) readinessLevel = 'expert';
    else if (overallReadiness >= 65) readinessLevel = 'advanced';
    else if (overallReadiness >= 50) readinessLevel = 'intermediate';
    
    // Identify strengths and development areas
    const dimensions = [
      { name: 'Empathy', score: empathyScore },
      { name: 'Problem Framing', score: problemFramingAbility },
      { name: 'Iteration Comfort', score: iterationComfort },
      { name: 'Prototyping Mindset', score: prototypingMindset },
      { name: 'User-Centricity', score: userCentricityIndex }
    ];
    
    const strengths = dimensions.filter(d => d.score >= 70).map(d => d.name);
    const developmentAreas = dimensions.filter(d => d.score < 60).map(d => d.name);
    
    // Generate recommendations
    const recommendations = generateRecommendations(dimensions);
    
    const assessmentResult: AssessmentResult = {
      empathyScore,
      problemFramingAbility,
      iterationComfort,
      prototypingMindset,
      userCentricityIndex,
      overallReadiness,
      readinessLevel,
      strengths,
      developmentAreas,
      recommendations
    };
    
    setResult(assessmentResult);
    if (onComplete) {
      onComplete(assessmentResult);
    }
  };

  const calculateDimensionScore = (answers: Record<string, number>, dimension: string): number => {
    const dimensionQuestions = questions.filter(q => q.dimension === dimension);
    const total = dimensionQuestions.reduce((sum, q) => sum + (answers[q.id] || 0), 0);
    return (total / (dimensionQuestions.length * 5)) * 100;
  };

  const generateRecommendations = (dimensions: any[]): string[] => {
    const recs: string[] = [];
    
    dimensions.forEach(dim => {
      if (dim.score < 60) {
        if (dim.name === 'Empathy') {
          recs.push('Focus on conducting user interviews and building empathy maps');
        } else if (dim.name === 'Problem Framing') {
          recs.push('Practice creating POV statements and HMW questions');
        } else if (dim.name === 'Iteration Comfort') {
          recs.push('Start with rapid prototyping and embrace learning from failures');
        } else if (dim.name === 'Prototyping Mindset') {
          recs.push('Build low-fidelity prototypes to test ideas quickly');
        } else if (dim.name === 'User-Centricity') {
          recs.push('Involve users early and often in your development process');
        }
      }
    });
    
    return recs;
  };

  if (result) {
    return (
      <div className="p-6 max-w-4xl mx-auto">
        <div className="bg-white rounded-lg shadow-lg p-8">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-blue-100 rounded-full mb-4">
              <CheckCircle className="w-10 h-10 text-blue-600" />
            </div>
            <h1 className="text-3xl font-bold mb-2">Assessment Complete!</h1>
            <p className="text-gray-600">Your Design Thinking Readiness Profile</p>
          </div>

          {/* Overall Score */}
          <div className="text-center mb-8">
            <div className="text-6xl font-bold text-blue-600 mb-2">
              {result.overallReadiness.toFixed(0)}
            </div>
            <div className="text-xl text-gray-600 mb-4">Overall Readiness Score</div>
            <span className={`inline-block px-6 py-2 rounded-full font-semibold ${
              result.readinessLevel === 'expert' ? 'bg-green-100 text-green-700' :
              result.readinessLevel === 'advanced' ? 'bg-blue-100 text-blue-700' :
              result.readinessLevel === 'intermediate' ? 'bg-yellow-100 text-yellow-700' :
              'bg-gray-100 text-gray-700'
            }`}>
              {result.readinessLevel.toUpperCase()}
            </span>
          </div>

          {/* Dimension Scores */}
          <div className="mb-8">
            <h2 className="text-xl font-semibold mb-4">Your Scores by Dimension</h2>
            <div className="space-y-4">
              <ScoreBar label="Empathy" score={result.empathyScore} icon={Brain} />
              <ScoreBar label="Problem Framing" score={result.problemFramingAbility} icon={Target} />
              <ScoreBar label="Iteration Comfort" score={result.iterationComfort} icon={Zap} />
              <ScoreBar label="Prototyping Mindset" score={result.prototypingMindset} icon={Wrench} />
              <ScoreBar label="User-Centricity" score={result.userCentricityIndex} icon={Users} />
            </div>
          </div>

          {/* Strengths */}
          {result.strengths.length > 0 && (
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-green-700">‚ú® Your Strengths</h3>
              <div className="flex flex-wrap gap-2">
                {result.strengths.map((strength, index) => (
                  <span key={index} className="bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm">
                    {strength}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* Development Areas */}
          {result.developmentAreas.length > 0 && (
            <div className="mb-6">
              <h3 className="font-semibold mb-3 text-blue-700">üìà Areas for Development</h3>
              <div className="flex flex-wrap gap-2">
                {result.developmentAreas.map((area, index) => (
                  <span key={index} className="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm">
                    {area}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* Recommendations */}
          {result.recommendations.length > 0 && (
            <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <h3 className="font-semibold mb-3 text-purple-700">üí° Personalized Recommendations</h3>
              <ul className="space-y-2">
                {result.recommendations.map((rec, index) => (
                  <li key={index} className="flex items-start gap-2 text-sm">
                    <span className="text-purple-500 mt-0.5">‚Ä¢</span>
                    <span>{rec}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}

          {/* Action Button */}
          <div className="mt-8 text-center">
            <a
              href="/design-thinking"
              className="inline-block px-8 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-semibold"
            >
              Start Your Design Thinking Journey
            </a>
          </div>
        </div>
      </div>
    );
  }

  const question = questions[currentQuestion];
  const progress = ((currentQuestion + 1) / questions.length) * 100;

  return (
    <div className="p-6 max-w-3xl mx-auto">
      <div className="bg-white rounded-lg shadow-lg p-8">
        {/* Progress */}
        <div className="mb-8">
          <div className="flex justify-between text-sm text-gray-600 mb-2">
            <span>Question {currentQuestion + 1} of {questions.length}</span>
            <span>{progress.toFixed(0)}% Complete</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-blue-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>

        {/* Question */}
        <div className="mb-8">
          <h2 className="text-2xl font-semibold mb-6 text-center">
            {question.question}
          </h2>

          {/* Answer Options */}
          <div className="space-y-3">
            {[
              { value: 5, label: 'Strongly Agree' },
              { value: 4, label: 'Agree' },
              { value: 3, label: 'Neutral' },
              { value: 2, label: 'Disagree' },
              { value: 1, label: 'Strongly Disagree' }
            ].map(option => (
              <button
                key={option.value}
                onClick={() => handleAnswer(option.value)}
                className="w-full p-4 text-left border-2 border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all"
              >
                <span className="font-medium">{option.label}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Dimension Indicator */}
        <div className="text-center text-sm text-gray-500">
          <span className="bg-gray-100 px-3 py-1 rounded-full">
            Assessing: {question.dimension.replace('_', ' ').toUpperCase()}
          </span>
        </div>
      </div>
    </div>
  );
}

function ScoreBar({ label, score, icon: Icon }: { label: string; score: number; icon: any }) {
  const getColor = (score: number): string => {
    if (score >= 80) return 'bg-green-500';
    if (score >= 65) return 'bg-blue-500';
    if (score >= 50) return 'bg-yellow-500';
    return 'bg-red-500';
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center gap-2">
          <Icon className="w-5 h-5 text-gray-600" />
          <span className="font-medium">{label}</span>
        </div>
        <span className="font-semibold text-gray-700">{score.toFixed(0)}</span>
      </div>
      <div className="w-full bg-gray-200 rounded-full h-3">
        <div 
          className={`h-3 rounded-full transition-all duration-500 ${getColor(score)}`}
          style={{ width: `${score}%` }}
        />
      </div>
    </div>
  );
}


=== FILE: client/src/components/team-management.tsx ===


import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Users, UserPlus, Mail, Crown, Shield, User, Trash2, Edit } from 'lucide-react';

interface TeamMember {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'member' | 'viewer';
  avatar?: string;
  status: 'active' | 'pending' | 'inactive';
  joinedAt: string;
}

interface TeamManagementProps {
  organizationId: string;
}

export default function TeamManagement({ organizationId }: TeamManagementProps) {
  const [members, setMembers] = useState<TeamMember[]>([
    {
      id: '1',
      name: 'John Doe',
      email: 'john@startup.com',
      role: 'admin',
      status: 'active',
      joinedAt: '2024-01-15'
    },
    {
      id: '2',
      name: 'Jane Smith',
      email: 'jane@startup.com',
      role: 'member',
      status: 'active',
      joinedAt: '2024-02-01'
    },
    {
      id: '3',
      name: 'Mike Johnson',
      email: 'mike@startup.com',
      role: 'viewer',
      status: 'pending',
      joinedAt: '2024-02-15'
    }
  ]);

  const [inviteEmail, setInviteEmail] = useState('');
  const [inviteRole, setInviteRole] = useState<'admin' | 'member' | 'viewer'>('member');
  const [inviteMessage, setInviteMessage] = useState('');

  const getRoleIcon = (role: string) => {
    switch (role) {
      case 'admin': return <Crown className="h-4 w-4 text-yellow-500" />;
      case 'member': return <Shield className="h-4 w-4 text-blue-500" />;
      case 'viewer': return <User className="h-4 w-4 text-gray-500" />;
      default: return <User className="h-4 w-4" />;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active': return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">Active</Badge>;
      case 'pending': return <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200">Pending</Badge>;
      case 'inactive': return <Badge variant="outline" className="bg-gray-50 text-gray-700 border-gray-200">Inactive</Badge>;
      default: return <Badge variant="outline">Unknown</Badge>;
    }
  };

  const handleSendInvite = () => {
    // API call to send invitation
    console.log('Sending invite:', { inviteEmail, inviteRole, inviteMessage });
    
    // Add pending member to the list
    const newMember: TeamMember = {
      id: Date.now().toString(),
      name: inviteEmail.split('@')[0],
      email: inviteEmail,
      role: inviteRole,
      status: 'pending',
      joinedAt: new Date().toISOString().split('T')[0]
    };
    
    setMembers([...members, newMember]);
    setInviteEmail('');
    setInviteMessage('');
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">Team Management</h2>
          <p className="text-gray-600">Manage your organization's team members and permissions</p>
        </div>
        
        <Dialog>
          <DialogTrigger asChild>
            <Button className="bg-gradient-to-r from-purple-600 to-teal-600 text-white">
              <UserPlus className="mr-2 h-4 w-4" />
              Invite Member
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-md">
            <DialogHeader>
              <DialogTitle>Invite Team Member</DialogTitle>
              <DialogDescription>
                Send an invitation to join your organization
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium">Email Address</label>
                <Input
                  type="email"
                  placeholder="colleague@example.com"
                  value={inviteEmail}
                  onChange={(e) => setInviteEmail(e.target.value)}
                />
              </div>
              
              <div>
                <label className="text-sm font-medium">Role</label>
                <Select value={inviteRole} onValueChange={(value: any) => setInviteRole(value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="viewer">Viewer - Can view content</SelectItem>
                    <SelectItem value="member">Member - Can edit and collaborate</SelectItem>
                    <SelectItem value="admin">Admin - Full access and management</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <label className="text-sm font-medium">Personal Message (Optional)</label>
                <Textarea
                  placeholder="Add a personal message to your invitation..."
                  value={inviteMessage}
                  onChange={(e) => setInviteMessage(e.target.value)}
                  rows={3}
                />
              </div>
              
              <Button 
                onClick={handleSendInvite}
                disabled={!inviteEmail}
                className="w-full"
              >
                <Mail className="mr-2 h-4 w-4" />
                Send Invitation
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Team Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card className="bg-white/50 backdrop-blur border border-white/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Members</p>
                <p className="text-2xl font-bold">{members.length}</p>
              </div>
              <Users className="h-8 w-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
        
        <Card className="bg-white/50 backdrop-blur border border-white/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Active Members</p>
                <p className="text-2xl font-bold">{members.filter(m => m.status === 'active').length}</p>
              </div>
              <Shield className="h-8 w-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        
        <Card className="bg-white/50 backdrop-blur border border-white/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Pending Invites</p>
                <p className="text-2xl font-bold">{members.filter(m => m.status === 'pending').length}</p>
              </div>
              <Mail className="h-8 w-8 text-yellow-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Team Members List */}
      <Card className="bg-white/50 backdrop-blur border border-white/20">
        <CardHeader>
          <CardTitle>Team Members</CardTitle>
          <CardDescription>
            Manage roles and permissions for your team members
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {members.map((member) => (
              <div key={member.id} className="flex items-center justify-between p-4 rounded-lg border border-gray-200 bg-white/30">
                <div className="flex items-center space-x-4">
                  <Avatar>
                    <AvatarImage src={member.avatar} />
                    <AvatarFallback className="bg-gradient-to-br from-purple-500 to-teal-500 text-white">
                      {member.name.split(' ').map(n => n[0]).join('')}
                    </AvatarFallback>
                  </Avatar>
                  
                  <div>
                    <div className="flex items-center space-x-2">
                      <h4 className="font-medium">{member.name}</h4>
                      {getRoleIcon(member.role)}
                    </div>
                    <p className="text-sm text-gray-600">{member.email}</p>
                    <p className="text-xs text-gray-500">Joined {member.joinedAt}</p>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3">
                  {getStatusBadge(member.status)}
                  
                  <Select value={member.role} onValueChange={(value) => {
                    setMembers(members.map(m => 
                      m.id === member.id ? { ...m, role: value as any } : m
                    ));
                  }}>
                    <SelectTrigger className="w-32">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="viewer">Viewer</SelectItem>
                      <SelectItem value="member">Member</SelectItem>
                      <SelectItem value="admin">Admin</SelectItem>
                    </SelectContent>
                  </Select>
                  
                  <Button variant="ghost" size="sm">
                    <Edit className="h-4 w-4" />
                  </Button>
                  
                  <Button variant="ghost" size="sm" className="text-red-500 hover:text-red-700">
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/ProtectedRoute.tsx ===


import { useAuth } from "@/hooks/use-auth";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { GoogleSignIn } from "@/components/GoogleSignIn";
import { AzureSignIn } from "@/components/AzureSignIn";
import { Separator } from "@/components/ui/separator";
import { LogIn } from "lucide-react";
import { InlineLoadingSpinner } from "@/components/ui/loading-spinner";

interface ProtectedRouteProps {
  children: React.ReactNode;
}

export default function ProtectedRoute({ children }: ProtectedRouteProps) {
  const { isAuthenticated, isLoading, login } = useAuth();

  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-8 flex items-center justify-center min-h-[60vh]">
        <InlineLoadingSpinner text="Loading..." />
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="container mx-auto px-4 py-8 flex items-center justify-center min-h-[60vh]">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <CardTitle className="flex items-center justify-center space-x-2">
              <LogIn className="h-6 w-6" />
              <span>Authentication Required</span>
            </CardTitle>
            <CardDescription>
              Please sign in to access this page.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <GoogleSignIn className="w-full" size="lg" />
            
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <span className="w-full border-t" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-white px-2 text-muted-foreground">Or</span>
              </div>
            </div>

            <AzureSignIn variant="outline" className="w-full" size="lg" />
          </CardContent>
        </Card>
      </div>
    );
  }

  return <>{children}</>;
}


=== FILE: client/src/components/layout/Navbar.tsx ===

import { Link, useLocation } from "wouter";
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  navigationMenuTriggerStyle,
} from "@/components/ui/navigation-menu";
import { cn } from "@/lib/utils";
import {
  BarChart3,
  FileText,
  DollarSign,
  Users,
  GraduationCap,
  Building2,
  PieChart,
  CreditCard,
  Rocket,
  Lightbulb,
  Target,
  Trophy,
  TrendingUp,
  Award,
  Book,
  Presentation,
  User,
  LogOut,
  Building,
  ChevronDown,
  Plus,
  Settings,
  Menu,
  X
} from "lucide-react";
import { ThemeToggle } from "@/components/ui/theme-toggle";
import { CommandDialog, CommandInput, CommandList, CommandEmpty, CommandGroup, CommandItem } from "@/components/ui/command";
import { useFeature } from "@/contexts/FeatureFlagsContext";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { NotificationCenter } from "@/components/ui/notification-center";
import { useAuth } from "@/hooks/use-auth";

const ListItem = ({ className, title, href, children, ...props }: any) => {
  return (
    <div>
      <NavigationMenuLink asChild>
        <Link
          href={href}
          className={cn(
            "block select-none space-y-1 rounded-lg p-4 leading-none no-underline outline-none transition-all duration-200 hover:bg-black/5 dark:hover:bg-white/10 focus:bg-black/5 dark:focus:bg-white/10",
            className
          )}
          {...props}
        >
          <div className="text-sm font-semibold leading-none">{title}</div>
          <div className="line-clamp-2 text-sm leading-snug text-muted-foreground mt-1">
            {children}
          </div>
        </Link>
      </NavigationMenuLink>
    </div>
  );
};

export default function Navbar() {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const { user, isAuthenticated, isLoading, login, logout } = useAuth();
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const globalSearchEnabled = useFeature('global_search_v1');

  const getUserInitials = (user: any) => {
    if (!user) return "U";
    const firstName = user.firstName || "";
    const lastName = user.lastName || "";
    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase() || user.email?.charAt(0).toUpperCase() || "U";
  };

  const [location] = useLocation();

  useEffect(() => {
    if (!globalSearchEnabled) return;
    const open = () => setIsSearchOpen(true);
    window.addEventListener('global-search:open', open as EventListener);
    return () => window.removeEventListener('global-search:open', open as EventListener);
  }, [globalSearchEnabled]);

  return (
    <nav className="fixed top-0 w-full z-50 glass-container border-b border-white/10 shadow-sm safe-area-top">
      <div className="container mx-auto px-4 sm:px-6">
        <div className="flex items-center justify-between h-16 sm:h-18">
          <div className="flex items-center space-x-4 sm:space-x-10">
            <Link href="/" className="flex items-center space-x-2 sm:space-x-3" data-testid="link-home">
              <div className="w-8 h-8 sm:w-9 sm:h-9 bg-gradient-to-br from-indigo-500 via-purple-600 to-teal-500 rounded-xl flex items-center justify-center shadow-md touch-target">
                <span className="text-white font-semibold text-xs sm:text-sm tracking-tight">IS</span>
              </div>
              <span className="font-semibold text-lg sm:text-xl gradient-text tracking-tight hidden xs:inline">
                IterativStartups
              </span>
            </Link>

            {/* Desktop Navigation */}
            <NavigationMenu className="hidden lg:flex">
              <NavigationMenuList>
                <NavigationMenuItem>
                  <NavigationMenuTrigger>Documents</NavigationMenuTrigger>
                  <NavigationMenuContent>
                    <div className="grid gap-3 p-6 md:w-[500px] lg:w-[600px] lg:grid-cols-[.75fr_1fr]">
                      <div className="row-span-4">
                        <NavigationMenuLink asChild>
                          <Link
                            className="flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-to-b from-muted/50 to-muted p-6 no-underline outline-none focus:shadow-md"
                            href="/documents"
                          >
                            <BarChart3 className="h-6 w-6" />
                            <div className="mb-2 mt-4 text-lg font-medium">
                              Document Hub
                            </div>
                            <p className="text-sm leading-tight text-muted-foreground">
                              Overview of all your strategic documents and analytics
                            </p>
                          </Link>
                        </NavigationMenuLink>
                      </div>
                      <div className="grid gap-2">
                        <ListItem href="/business-plans" title="Business Plans">
                          <div className="flex items-center gap-2 mb-1">
                            <FileText className="h-4 w-4 text-blue-600" />
                            <span className="text-xs font-medium text-blue-600">Strategic planning</span>
                          </div>
                          Create and manage comprehensive business plans
                        </ListItem>
                        <ListItem href="/proposals" title="Proposals">
                          <div className="flex items-center gap-2 mb-1">
                            <FileText className="h-4 w-4 text-green-600" />
                            <span className="text-xs font-medium text-green-600">Grant & partnership</span>
                          </div>
                          Grant, partnership, and service proposals
                        </ListItem>
                        <ListItem href="/pitch-decks" title="Pitch Decks">
                          <div className="flex items-center gap-2 mb-1">
                            <Presentation className="h-4 w-4 text-purple-600" />
                            <span className="text-xs font-medium text-purple-600">Investor ready</span>
                          </div>
                          Investor presentations and demo day materials
                        </ListItem>
                        <ListItem href="/applications" title="Applications">
                          <div className="flex items-center gap-2 mb-1">
                            <Award className="h-4 w-4 text-orange-600" />
                            <span className="text-xs font-medium text-orange-600">Competitions</span>
                          </div>
                          Accelerator, grant, and competition applications
                        </ListItem>
                      </div>
                    </div>
                  </NavigationMenuContent>
                </NavigationMenuItem>

                <NavigationMenuItem>
                  <NavigationMenuTrigger>Funding</NavigationMenuTrigger>
                  <NavigationMenuContent>
                    <div className="grid gap-3 p-6 md:w-[500px] lg:w-[600px] lg:grid-cols-[.75fr_1fr]">
                      <div className="row-span-4">
                        <NavigationMenuLink asChild>
                          <Link
                            className="flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-to-b from-muted/50 to-muted p-6 no-underline outline-none focus:shadow-md"
                            href="/funding"
                          >
                            <DollarSign className="h-6 w-6" />
                            <div className="mb-2 mt-4 text-lg font-medium">
                              Funding Hub
                            </div>
                            <p className="text-sm leading-tight text-muted-foreground">
                              Comprehensive funding tools and investor connections
                            </p>
                          </Link>
                        </NavigationMenuLink>
                      </div>
                      <div className="grid gap-2">
                        <ListItem href="/funding/equity" title="Equity Funding">
                          <div className="flex items-center gap-2 mb-1">
                            <Building className="h-4 w-4 text-blue-600" />
                            <span className="text-xs font-medium text-blue-600">Ownership stake</span>
                          </div>
                          Venture capital, angel investors, and equity-based investments
                        </ListItem>
                        <ListItem href="/funding/debt" title="Debt Funding">
                          <div className="flex items-center gap-2 mb-1">
                            <CreditCard className="h-4 w-4 text-green-600" />
                            <span className="text-xs font-medium text-green-600">Loans & credit</span>
                          </div>
                          Business loans, lines of credit, and debt financing options
                        </ListItem>
                        <ListItem href="/funding/grants" title="Grant Funding">
                          <div className="flex items-center gap-2 mb-1">
                            <Trophy className="h-4 w-4 text-purple-600" />
                            <span className="text-xs font-medium text-purple-600">Non-dilutive</span>
                          </div>
                          Government grants, foundation funding, and non-repayable capital
                        </ListItem>
                        <ListItem href="/funding-matcher" title="Funding Matcher">
                          <div className="flex items-center gap-2 mb-1">
                            <Users className="h-4 w-4 text-orange-600" />
                            <span className="text-xs font-medium text-orange-600">Find matches</span>
                          </div>
                          Connect with relevant investors and funding opportunities
                        </ListItem>
                      </div>
                    </div>
                  </NavigationMenuContent>
                </NavigationMenuItem>

                <NavigationMenuItem>
                  <NavigationMenuTrigger>Ecosystem</NavigationMenuTrigger>
                  <NavigationMenuContent>
                    <div className="grid gap-3 p-6 md:w-[600px] lg:w-[700px] lg:grid-cols-[1fr_1fr]">
                      <div className="row-span-3">
                        <NavigationMenuLink asChild>
                          <Link
                            className="flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-to-b from-muted/50 to-muted p-6 no-underline outline-none focus:shadow-md"
                            href="/ecosystem"
                          >
                            <Building2 className="h-6 w-6" />
                            <div className="mb-2 mt-4 text-lg font-medium">
                              Ecosystem Hub
                            </div>
                            <p className="text-sm leading-tight text-muted-foreground">
                              Different ecosystem models for different startup journeys
                            </p>
                          </Link>
                        </NavigationMenuLink>
                      </div>
                      <div className="grid gap-2">
                        <ListItem href="/venture-studio" title="Venture Studio">
                          <div className="flex items-center gap-2 mb-1">
                            <Rocket className="h-4 w-4 text-purple-600" />
                            <span className="text-xs font-medium text-purple-600">Build with us</span>
                          </div>
                          Co-build companies from scratch with full-service support
                        </ListItem>
                        <ListItem href="/accelerator" title="Accelerator">
                          <div className="flex items-center gap-2 mb-1">
                            <Target className="h-4 w-4 text-teal-600" />
                            <span className="text-xs font-medium text-teal-600">Grow fast</span>
                          </div>
                          Intensive 12-week programs for existing startups
                        </ListItem>
                        <ListItem href="/incubator" title="Incubator">
                          <div className="flex items-center gap-2 mb-1">
                            <Lightbulb className="h-4 w-4 text-orange-600" />
                            <span className="text-xs font-medium text-orange-600">Nurture ideas</span>
                          </div>
                          Long-term support with flexible resources
                        </ListItem>
                        <ListItem href="/applications" title="Competition">
                          <div className="flex items-center gap-2 mb-1">
                            <Trophy className="h-4 w-4 text-yellow-600" />
                            <span className="text-xs font-medium text-yellow-600">Win prizes</span>
                          </div>
                          Competitive events for recognition and exposure
                        </ListItem>
                      </div>
                    </div>
                  </NavigationMenuContent>
                </NavigationMenuItem>

                <NavigationMenuItem>
                  <NavigationMenuTrigger>Analytics</NavigationMenuTrigger>
                  <NavigationMenuContent>
                    <div className="grid gap-3 p-6 md:w-[500px] lg:w-[600px] lg:grid-cols-[.75fr_1fr]">
                      <div className="row-span-4">
                        <NavigationMenuLink asChild>
                          <Link
                            className="flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-to-b from-muted/50 to-muted p-6 no-underline outline-none focus:shadow-md"
                            href="/analytics"
                          >
                            <BarChart3 className="h-6 w-6" />
                            <div className="mb-2 mt-4 text-lg font-medium">
                              Analytics Hub
                            </div>
                            <p className="text-sm leading-tight text-muted-foreground">
                              Comprehensive analytics and insights for your business
                            </p>
                          </Link>
                        </NavigationMenuLink>
                      </div>
                      <div className="grid gap-2">
                        <ListItem href="/valuation" title="Valuation Analysis">
                          <div className="flex items-center gap-2 mb-1">
                            <DollarSign className="h-4 w-4 text-green-600" />
                            <span className="text-xs font-medium text-green-600">Track value</span>
                          </div>
                          Monitor your company's valuation and financial metrics
                        </ListItem>
                        <ListItem href="/competitive-advantage" title="Competitive Analysis">
                          <div className="flex items-center gap-2 mb-1">
                            <Target className="h-4 w-4 text-blue-600" />
                            <span className="text-xs font-medium text-blue-600">Analyze position</span>
                          </div>
                          Assess your competitive positioning and market advantages
                        </ListItem>
                        <ListItem href="/industry-analysis" title="Industry Analysis">
                          <div className="flex items-center gap-2 mb-1">
                            <TrendingUp className="h-4 w-4 text-purple-600" />
                            <span className="text-xs font-medium text-purple-600">Market insights</span>
                          </div>
                          Deep dive into industry trends and market opportunities
                        </ListItem>
                        <ListItem href="/startup-league" title="Startup League">
                          <div className="flex items-center gap-2 mb-1">
                            <Award className="h-4 w-4 text-orange-600" />
                            <span className="text-xs font-medium text-orange-600">Compare & rank</span>
                          </div>
                          Compare your startup against industry benchmarks
                        </ListItem>
                      </div>
                    </div>
                  </NavigationMenuContent>
                </NavigationMenuItem>

                <NavigationMenuItem>
                  <NavigationMenuTrigger>Education</NavigationMenuTrigger>
                  <NavigationMenuContent>
                    <div className="grid gap-3 p-6 md:w-[500px] lg:w-[600px] lg:grid-cols-[.75fr_1fr]">
                      <div className="row-span-4">
                        <NavigationMenuLink asChild>
                          <Link
                            className="flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-to-b from-muted/50 to-muted p-6 no-underline outline-none focus:shadow-md"
                            href="/education"
                          >
                            <GraduationCap className="h-6 w-6" />
                            <div className="mb-2 mt-4 text-lg font-medium">
                              Learning Hub
                            </div>
                            <p className="text-sm leading-tight text-muted-foreground">
                              Comprehensive educational resources for entrepreneurs
                            </p>
                          </Link>
                        </NavigationMenuLink>
                      </div>
                      <div className="grid gap-2">
                        <ListItem href="/education/fundamentals" title="Startup Fundamentals">
                          <div className="flex items-center gap-2 mb-1">
                            <Book className="h-4 w-4 text-blue-600" />
                            <span className="text-xs font-medium text-blue-600">Foundation</span>
                          </div>
                          Master the essential building blocks of launching a startup
                        </ListItem>
                        <ListItem href="/education/funding" title="Fundraising Masterclass">
                          <div className="flex items-center gap-2 mb-1">
                            <DollarSign className="h-4 w-4 text-green-600" />
                            <span className="text-xs font-medium text-green-600">Capital raising</span>
                          </div>
                          Complete guide to raising capital from seed to Series A
                        </ListItem>
                        <ListItem href="/education/product" title="Product Development">
                          <div className="flex items-center gap-2 mb-1">
                            <Target className="h-4 w-4 text-purple-600" />
                            <span className="text-xs font-medium text-purple-600">Build & scale</span>
                          </div>
                          Learn product-market fit and development strategies
                        </ListItem>
                        <ListItem href="/education/leadership" title="Leadership & Team">
                          <div className="flex items-center gap-2 mb-1">
                            <Users className="h-4 w-4 text-orange-600" />
                            <span className="text-xs font-medium text-orange-600">Team building</span>
                          </div>
                          Develop leadership skills and build high-performing teams
                        </ListItem>
                      </div>
                    </div>
                  </NavigationMenuContent>
                </NavigationMenuItem>


              </NavigationMenuList>
            </NavigationMenu>
          </div>

          <div className="flex items-center space-x-2 sm:space-x-3">
            {globalSearchEnabled && (
              <>
                <Button
                  variant="ghost"
                  className="h-9 px-3 hidden sm:flex items-center gap-2"
                  onClick={() => setIsSearchOpen(true)}
                >
                  <span className="text-sm">Search</span>
                  <kbd className="hidden md:inline text-[10px] bg-black/5 dark:bg-white/10 px-1.5 py-0.5 rounded">‚åòK</kbd>
                </Button>
                <CommandDialog open={isSearchOpen} onOpenChange={setIsSearchOpen}>
                  <CommandInput placeholder="Search documents, pages, and resources..." />
                  <CommandList>
                    <CommandEmpty>No results found.</CommandEmpty>
                    <CommandGroup heading="Go to">
                      <CommandItem onSelect={() => { setIsSearchOpen(false); (window.location.href = '/documents'); }}>Documents</CommandItem>
                      <CommandItem onSelect={() => { setIsSearchOpen(false); (window.location.href = '/funding'); }}>Funding Hub</CommandItem>
                      <CommandItem onSelect={() => { setIsSearchOpen(false); (window.location.href = '/education'); }}>Learning Hub</CommandItem>
                      <CommandItem onSelect={() => { setIsSearchOpen(false); (window.location.href = '/analytics'); }}>Analytics</CommandItem>
                    </CommandGroup>
                  </CommandList>
                </CommandDialog>
              </>
            )}
            {/* Mobile Menu Button */}
            <Button
              variant="ghost"
              className="lg:hidden h-9 w-9 p-0 touch-target"
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              data-testid="button-mobile-menu"
            >
              {isMobileMenuOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
            </Button>

            <div className="hidden sm:flex items-center space-x-3">
              <ThemeToggle />
              <NotificationCenter />

              {/* Organization Switcher */}
              <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="h-8 px-3 text-xs bg-white/10 hover:bg-white/20">
                  <Building className="mr-2 h-3 w-3" />
                  <span className="hidden sm:inline">My Startup</span>
                  <ChevronDown className="ml-1 h-3 w-3" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-56 bg-white/90 backdrop-blur-md border border-white/20">
                <DropdownMenuLabel>Organizations</DropdownMenuLabel>
                <DropdownMenuItem>
                  <Building className="mr-2 h-4 w-4" />
                  <span>My Startup</span>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Building className="mr-2 h-4 w-4" />
                  <span>TechCorp Inc.</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Plus className="mr-2 h-4 w-4" />
                  <span>Create Organization</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>

              {/* Collaboration Indicator */}
              <Button variant="ghost" className="h-8 w-8 p-0 relative touch-target">
                <Users className="h-4 w-4" />
                <span className="absolute -top-1 -right-1 h-3 w-3 bg-green-500 rounded-full border border-white"></span>
              </Button>
            </div>

            {/* User Menu - Always Visible */}
            {isLoading ? (
              <Button variant="ghost" className="font-medium text-sm hover:bg-black/5 dark:hover:bg-white/10 rounded-lg px-4 py-2">
                Loading...
              </Button>
            ) : isAuthenticated ? (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                    <Avatar className="h-8 w-8">
                      <AvatarImage src={user?.profileImageUrl} alt={user?.firstName} />
                      <AvatarFallback className="bg-gradient-to-br from-purple-500 to-teal-500 text-white">
                        {getUserInitials(user)}
                      </AvatarFallback>
                    </Avatar>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-56 bg-white/90 backdrop-blur-md border border-white/20" align="end" forceMount>
                  <DropdownMenuLabel className="font-normal">
                    <div className="flex flex-col space-y-1">
                      <p className="text-sm font-medium leading-none">{user?.firstName} {user?.lastName}</p>
                      <p className="text-xs leading-none text-muted-foreground">
                        {user?.email}
                      </p>
                    </div>
                  </DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem asChild>
                    <Link href="/profile">
                      <User className="mr-2 h-4 w-4" />
                      <span>Profile</span>
                    </Link>
                  </DropdownMenuItem>
                  <DropdownMenuItem asChild>
                    <Link href="/team">
                      <Users className="mr-2 h-4 w-4" />
                      <span>Team Management</span>
                    </Link>
                  </DropdownMenuItem>
                  <DropdownMenuItem asChild>
                    <Link href="/organizations">
                      <Building className="mr-2 h-4 w-4" />
                      <span>Organizations</span>
                    </Link>
                  </DropdownMenuItem>
                  <DropdownMenuItem asChild>
                    <Link href="/settings">
                      <Settings className="mr-2 h-4 w-4" />
                      <span>Settings</span>
                    </Link>
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onSelect={() => logout()}>
                    <LogOut className="mr-2 h-4 w-4" />
                    <span>Log out</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            ) : (
              <>
                <Button variant="ghost" onClick={login} className="mobile-button font-medium text-sm hover:bg-black/5 dark:hover:bg-white/10 rounded-lg px-4 py-2 sm:px-6 sm:py-3">
                  Sign In
                </Button>
                <Button onClick={login} className="safari-button mobile-button text-sm font-medium rounded-lg px-6 py-2 sm:px-8 sm:py-3">
                  Get Started
                </Button>
              </>
            )}
          </div>
        </div>

        {/* Mobile Menu */}
        {isMobileMenuOpen && (
          <div className="lg:hidden border-t border-white/10 pb-4 safe-area-bottom animate-slide-up">
            <div className="px-4 pt-4 pb-3 space-y-3">
              <Link href="/" data-testid="link-mobile-dashboard">
                <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                  <BarChart3 className="mr-3 h-5 w-5" />
                  Dashboard
                </Button>
              </Link>
              
              <div className="space-y-2">
                <div className="px-4 text-xs font-semibold text-muted-foreground uppercase tracking-wide">Documents</div>
                <Link href="/documents" data-testid="link-mobile-documents">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <BarChart3 className="mr-3 h-5 w-5" />
                    Document Hub
                  </Button>
                </Link>
                <Link href="/business-plans" data-testid="link-mobile-business-plans">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <FileText className="mr-3 h-5 w-5" />
                    Business Plans
                  </Button>
                </Link>
                <Link href="/proposals" data-testid="link-mobile-proposals">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <FileText className="mr-3 h-5 w-5" />
                    Proposals
                  </Button>
                </Link>
                <Link href="/pitch-decks" data-testid="link-mobile-pitch-decks">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Presentation className="mr-3 h-5 w-5" />
                    Pitch Decks
                  </Button>
                </Link>
                <Link href="/applications" data-testid="link-mobile-applications">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Award className="mr-3 h-5 w-5" />
                    Applications
                  </Button>
                </Link>
              </div>

              <div className="space-y-2">
                <div className="px-4 text-xs font-semibold text-muted-foreground uppercase tracking-wide">Funding</div>
                <Link href="/funding" data-testid="link-mobile-funding-hub">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <DollarSign className="mr-3 h-5 w-5" />
                    Funding Hub
                  </Button>
                </Link>
                <Link href="/funding-matcher" data-testid="link-mobile-funding-matcher">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <DollarSign className="mr-3 h-5 w-5" />
                    Funding Matcher
                  </Button>
                </Link>
                <Link href="/funding/equity" data-testid="link-mobile-equity">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Building className="mr-3 h-5 w-5" />
                    Equity Funding
                  </Button>
                </Link>
                <Link href="/funding/debt" data-testid="link-mobile-debt">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <CreditCard className="mr-3 h-5 w-5" />
                    Debt Funding
                  </Button>
                </Link>
                <Link href="/funding/grants" data-testid="link-mobile-grants">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Trophy className="mr-3 h-5 w-5" />
                    Grant Funding
                  </Button>
                </Link>
                <Link href="/funding/credit-monitoring" data-testid="link-mobile-credit">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <CreditCard className="mr-3 h-5 w-5" />
                    Credit Monitoring
                  </Button>
                </Link>
              </div>

              <div className="space-y-2">
                <div className="px-4 text-xs font-semibold text-muted-foreground uppercase tracking-wide">Ecosystem</div>
                <Link href="/ecosystem" data-testid="link-mobile-ecosystem-hub">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Building2 className="mr-3 h-5 w-5" />
                    Ecosystem Hub
                  </Button>
                </Link>
                <Link href="/venture-studio" data-testid="link-mobile-venture-studio">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Rocket className="mr-3 h-5 w-5" />
                    Venture Studio
                  </Button>
                </Link>
                <Link href="/accelerator" data-testid="link-mobile-accelerator">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Target className="mr-3 h-5 w-5" />
                    Accelerator
                  </Button>
                </Link>
                <Link href="/incubator" data-testid="link-mobile-incubator">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Lightbulb className="mr-3 h-5 w-5" />
                    Incubator
                  </Button>
                </Link>
                <Link href="/applications" data-testid="link-mobile-competition">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Trophy className="mr-3 h-5 w-5" />
                    Competition
                  </Button>
                </Link>
              </div>

              <div className="space-y-2">
                <div className="px-4 text-xs font-semibold text-muted-foreground uppercase tracking-wide">Analytics</div>
                <Link href="/analytics" data-testid="link-mobile-analytics">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <BarChart3 className="mr-3 h-5 w-5" />
                    Analytics Hub
                  </Button>
                </Link>
                <Link href="/valuation" data-testid="link-mobile-valuation">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <DollarSign className="mr-3 h-5 w-5" />
                    Valuation Analysis
                  </Button>
                </Link>
                <Link href="/competitive-advantage" data-testid="link-mobile-competitive">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Target className="mr-3 h-5 w-5" />
                    Competitive Analysis
                  </Button>
                </Link>
                <Link href="/industry-analysis" data-testid="link-mobile-industry">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <TrendingUp className="mr-3 h-5 w-5" />
                    Industry Analysis
                  </Button>
                </Link>
                <Link href="/startup-league" data-testid="link-mobile-league">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Award className="mr-3 h-5 w-5" />
                    Startup League
                  </Button>
                </Link>
              </div>
              
              <div className="space-y-2">
                <div className="px-4 text-xs font-semibold text-muted-foreground uppercase tracking-wide">Education</div>
                <Link href="/education" data-testid="link-mobile-education">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <GraduationCap className="mr-3 h-5 w-5" />
                    Learning Hub
                  </Button>
                </Link>
                <Link href="/education/fundamentals" data-testid="link-mobile-fundamentals">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Book className="mr-3 h-5 w-5" />
                    Startup Fundamentals
                  </Button>
                </Link>
                <Link href="/education/funding" data-testid="link-mobile-funding-ed">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <DollarSign className="mr-3 h-5 w-5" />
                    Fundraising Masterclass
                  </Button>
                </Link>
                <Link href="/education/product" data-testid="link-mobile-product">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Target className="mr-3 h-5 w-5" />
                    Product Development
                  </Button>
                </Link>
                <Link href="/education/leadership" data-testid="link-mobile-leadership">
                  <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                    <Users className="mr-3 h-5 w-5" />
                    Leadership & Team
                  </Button>
                </Link>
              </div>
              
              <Link href="/team" data-testid="link-mobile-team">
                <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                  <Users className="mr-3 h-5 w-5" />
                  Team Management
                </Button>
              </Link>
              
              <Link href="/organizations" data-testid="link-mobile-organizations">
                <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                  <Building className="mr-3 h-5 w-5" />
                  Organizations
                </Button>
              </Link>
              
              <Link href="/settings" data-testid="link-mobile-settings">
                <Button variant="ghost" className="w-full justify-start touch-target" onClick={() => setIsMobileMenuOpen(false)}>
                  <Settings className="mr-3 h-5 w-5" />
                  Settings
                </Button>
              </Link>


              {/* Mobile-only utility items */}
              <div className="pt-4 border-t border-white/10 sm:hidden">
                <div className="flex items-center justify-between px-4">
                  <span className="text-sm font-medium">Theme</span>
                  <ThemeToggle />
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </nav>
  );
}

=== FILE: client/src/components/layout/NavbarSimple.tsx ===

import { Link } from "wouter";

export default function NavbarSimple() {
  return (
    <nav style={{ padding: '10px 16px', borderBottom: '1px solid #eee', display: 'flex', gap: 12 }}>
      <Link href="/">Home</Link>
      <Link href="/documents">Documents</Link>
      <Link href="/funding">Funding</Link>
      <Link href="/analytics">Analytics</Link>
      <Link href="/education">Education</Link>
      <Link href="/ecosystem">Ecosystem</Link>
    </nav>
  );
}


=== FILE: client/src/components/layout/DTNavigation.tsx ===

import React from 'react';
import { NavItem } from './NavItem';
import { ChevronDown, Users, Lightbulb, Target, Wrench, TestTube } from 'lucide-react';

export function DTNavigation() {
  return (
    <div className="relative group">
      <NavItem to="/design-thinking" label="Design Thinking" icon={Users} />
      
      {/* Dropdown Menu */}
      <div className="absolute left-0 mt-2 w-64 bg-white rounded-md shadow-lg py-1 z-50 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
        {/* Empathize Phase */}
        <div className="px-4 py-2">
          <h3 className="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">
            Empathize
          </h3>
          <a 
            href="/design-thinking/empathize" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Users className="w-4 h-4" />
            Empathy Maps
          </a>
          <a 
            href="/design-thinking/empathize/user-journey" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Target className="w-4 h-4" />
            User Journey Maps
          </a>
          <a 
            href="/design-thinking/empathize/interviews" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Users className="w-4 h-4" />
            Interview Guide
          </a>
        </div>

        {/* Define Phase */}
        <div className="px-4 py-2 border-t border-gray-100">
          <h3 className="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">
            Define
          </h3>
          <a 
            href="/design-thinking/define" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Target className="w-4 h-4" />
            POV Statements
          </a>
          <a 
            href="/design-thinking/define/hmw" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Lightbulb className="w-4 h-4" />
            HMW Questions
          </a>
        </div>

        {/* Ideate Phase */}
        <div className="px-4 py-2 border-t border-gray-100">
          <h3 className="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">
            Ideate
          </h3>
          <a 
            href="/design-thinking/ideate" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Lightbulb className="w-4 h-4" />
            Brainstorming
          </a>
          <a 
            href="/design-thinking/ideate/ideas" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Target className="w-4 h-4" />
            Idea Management
          </a>
        </div>

        {/* Prototype Phase */}
        <div className="px-4 py-2 border-t border-gray-100">
          <h3 className="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">
            Prototype
          </h3>
          <a 
            href="/design-thinking/prototype" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Wrench className="w-4 h-4" />
            Prototype Planner
          </a>
          <a 
            href="/design-thinking/prototype/storyboard" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Target className="w-4 h-4" />
            Storyboard Builder
          </a>
        </div>

        {/* Test Phase */}
        <div className="px-4 py-2 border-t border-gray-100">
          <h3 className="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">
            Test
          </h3>
          <a 
            href="/design-thinking/test" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <TestTube className="w-4 h-4" />
            Test Sessions
          </a>
          <a 
            href="/design-thinking/test/validation" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Target className="w-4 h-4" />
            Validation Dashboard
          </a>
        </div>

        {/* Advanced Features */}
        <div className="px-4 py-2 border-t border-gray-100">
          <h3 className="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2">
            Advanced
          </h3>
          <a 
            href="/design-thinking/sprints" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Target className="w-4 h-4" />
            Design Sprints
          </a>
          <a 
            href="/design-thinking/lean" 
            className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded"
          >
            <Lightbulb className="w-4 h-4" />
            Lean Startup
          </a>
        </div>
      </div>
    </div>
  );
}


=== FILE: client/src/components/layout/NavItem.tsx ===

import React from 'react';
import { Link } from 'react-router-dom';
import { LucideIcon } from 'lucide-react';

interface NavItemProps {
  to: string;
  icon: LucideIcon;
  label: string;
  isActive?: boolean;
}

export function NavItem({ to, icon: Icon, label, isActive = false }: NavItemProps) {
  return (
    <Link
      to={to}
      className={`flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${
        isActive 
          ? 'bg-blue-100 text-blue-700' 
          : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'
      }`}
    >
      <Icon className="h-5 w-5" />
      <span className="font-medium">{label}</span>
    </Link>
  );
}


=== FILE: client/src/components/dashboard/DTReadinessWidget.tsx ===

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  Users, 
  Lightbulb, 
  RefreshCw, 
  Target, 
  TrendingUp,
  AlertTriangle,
  CheckCircle
} from 'lucide-react';

interface DTScores {
  empathy: number;
  problemFraming: number;
  iterationComfort: number;
  prototypingMindset: number;
  userCentricity: number;
}

interface DTRecommendation {
  category: string;
  score: number;
  level: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  strengths: string[];
  gaps: string[];
  recommendations: string[];
}

interface DTReadinessWidgetProps {
  scores: DTScores;
  recommendations: DTRecommendation[];
  onRetakeAssessment?: () => void;
  onViewDetails?: () => void;
}

export function DTReadinessWidget({ 
  scores, 
  recommendations, 
  onRetakeAssessment,
  onViewDetails 
}: DTReadinessWidgetProps) {
  const overallScore = Math.round(
    (scores.empathy + scores.problemFraming + scores.iterationComfort + 
     scores.prototypingMindset + scores.userCentricity) / 5
  );

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getReadinessLevel = (score: number) => {
    if (score >= 80) return 'Expert';
    if (score >= 60) return 'Advanced';
    if (score >= 40) return 'Intermediate';
    return 'Beginner';
  };

  const getScoreIcon = (score: number) => {
    if (score >= 80) return <CheckCircle className="w-4 h-4 text-green-600" />;
    if (score >= 60) return <TrendingUp className="w-4 h-4 text-yellow-600" />;
    return <AlertTriangle className="w-4 h-4 text-red-600" />;
  };

  const criticalGaps = recommendations.filter(r => r.score < 50);
  const strengths = recommendations.filter(r => r.score >= 70);

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Users className="w-5 h-5" />
          Design Thinking Readiness
          <Badge variant={overallScore >= 60 ? 'default' : 'secondary'}>
            {getReadinessLevel(overallScore)}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Overall Score */}
        <div className="text-center">
          <div className="text-3xl font-bold text-gray-900">{overallScore}/100</div>
          <div className="text-sm text-gray-600">Overall DT Readiness</div>
        </div>

        {/* Individual Scores */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              {getScoreIcon(scores.empathy)}
              <span className="text-sm font-medium">Empathy</span>
            </div>
            <span className={`text-sm font-medium ${getScoreColor(scores.empathy)}`}>
              {scores.empathy}/100
            </span>
          </div>
          <Progress value={scores.empathy} className="h-2" />
        </div>

        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              {getScoreIcon(scores.problemFraming)}
              <span className="text-sm font-medium">Problem Framing</span>
            </div>
            <span className={`text-sm font-medium ${getScoreColor(scores.problemFraming)}`}>
              {scores.problemFraming}/100
            </span>
          </div>
          <Progress value={scores.problemFraming} className="h-2" />
        </div>

        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              {getScoreIcon(scores.iterationComfort)}
              <span className="text-sm font-medium">Iteration Comfort</span>
            </div>
            <span className={`text-sm font-medium ${getScoreColor(scores.iterationComfort)}`}>
              {scores.iterationComfort}/100
            </span>
          </div>
          <Progress value={scores.iterationComfort} className="h-2" />
        </div>

        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              {getScoreIcon(scores.prototypingMindset)}
              <span className="text-sm font-medium">Prototyping</span>
            </div>
            <span className={`text-sm font-medium ${getScoreColor(scores.prototypingMindset)}`}>
              {scores.prototypingMindset}/100
            </span>
          </div>
          <Progress value={scores.prototypingMindset} className="h-2" />
        </div>

        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              {getScoreIcon(scores.userCentricity)}
              <span className="text-sm font-medium">User Centricity</span>
            </div>
            <span className={`text-sm font-medium ${getScoreColor(scores.userCentricity)}`}>
              {scores.userCentricity}/100
            </span>
          </div>
          <Progress value={scores.userCentricity} className="h-2" />
        </div>

        {/* Critical Gaps */}
        {criticalGaps.length > 0 && (
          <div className="mt-4">
            <h4 className="text-sm font-medium text-red-700 mb-2 flex items-center gap-1">
              <AlertTriangle className="w-4 h-4" />
              Critical Gaps
            </h4>
            <ul className="text-sm text-red-600 space-y-1">
              {criticalGaps.slice(0, 2).map((gap, index) => (
                <li key={index} className="flex items-start gap-1">
                  <span className="text-red-500">‚Ä¢</span>
                  <span>{gap.category}: {gap.gaps[0]}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Strengths */}
        {strengths.length > 0 && (
          <div className="mt-4">
            <h4 className="text-sm font-medium text-green-700 mb-2 flex items-center gap-1">
              <CheckCircle className="w-4 h-4" />
              Strengths
            </h4>
            <ul className="text-sm text-green-600 space-y-1">
              {strengths.slice(0, 2).map((strength, index) => (
                <li key={index} className="flex items-start gap-1">
                  <span className="text-green-500">‚Ä¢</span>
                  <span>{strength.category}: {strength.strengths[0]}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex gap-2 pt-4">
          {onRetakeAssessment && (
            <Button 
              variant="outline" 
              size="sm" 
              onClick={onRetakeAssessment}
              className="flex items-center gap-1"
            >
              <RefreshCw className="w-3 h-3" />
              Retake Assessment
            </Button>
          )}
          {onViewDetails && (
            <Button 
              variant="outline" 
              size="sm" 
              onClick={onViewDetails}
              className="flex items-center gap-1"
            >
              <Target className="w-3 h-3" />
              View Details
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
}


=== FILE: client/src/components/dashboard/types/dashboard.types.ts ===

import { UserType } from "@shared/schema";

// Widget Definition
export interface DashboardWidget {
  id: string;
  type: string;
  title: string;
  component: React.ComponentType<WidgetProps>;
  size: 'small' | 'medium' | 'large' | 'full';
  minSize?: { w: number; h: number };
  maxSize?: { w: number; h: number };
  permissions: string[];
  userTypes: UserType[];
  category: 'analytics' | 'activity' | 'ai' | 'goals' | 'funding' | 'credit' | 'general';
  refreshInterval?: number;
  priority: number;
  defaultEnabled: boolean;
  description?: string;
  icon?: React.ComponentType<any>;
}

// Widget Props
export interface WidgetProps {
  widgetId: string;
  config?: WidgetConfig;
  data?: any;
  loading?: boolean;
  error?: Error | null;
  onConfigChange?: (config: WidgetConfig) => void;
  onRefresh?: () => void;
}

// Widget Configuration
export interface WidgetConfig {
  enabled: boolean;
  refreshInterval?: number;
  autoRefresh?: boolean;
  customSettings?: Record<string, any>;
  position?: { x: number; y: number };
  size?: { w: number; h: number };
  visible?: boolean;
  locked?: boolean;
}

// Dashboard Configuration
export interface DashboardConfig {
  userType: UserType;
  layout: WidgetLayout[];
  widgets: DashboardWidget[];
  theme: DashboardTheme;
  preferences: UserPreferences;
}

// Widget Layout
export interface WidgetLayout {
  widgetId: string;
  position: { x: number; y: number };
  size: { w: number; h: number };
  visible: boolean;
  locked: boolean;
}

// Dashboard Theme
export interface DashboardTheme {
  mode: 'light' | 'dark' | 'system';
  primaryColor: string;
  accentColor: string;
  density: 'compact' | 'normal' | 'comfortable';
}

// User Preferences
export interface UserPreferences {
  sidebarCollapsed: boolean;
  showWidgetTitles: boolean;
  enableAnimations: boolean;
  gridDensity: 'compact' | 'normal' | 'comfortable';
  defaultTimeRange: string;
  notifications: NotificationPreferences;
}

// Notification Preferences
export interface NotificationPreferences {
  email: boolean;
  push: boolean;
  inApp: boolean;
  frequency: 'instant' | 'hourly' | 'daily';
}

// Dashboard State
export interface DashboardState {
  // Layout state
  layout: WidgetLayout[];
  activeWidgets: string[];
  collapsedWidgets: string[];
  
  // Data state
  widgetData: Record<string, any>;
  loadingStates: Record<string, boolean>;
  errors: Record<string, Error | null>;
  
  // UI state
  sidebarOpen: boolean;
  selectedWidget: string | null;
  editMode: boolean;
  
  // User preferences
  preferences: UserPreferences;
  customizations: DashboardCustomizations;
}

// Dashboard Customizations
export interface DashboardCustomizations {
  customWidgets: DashboardWidget[];
  savedLayouts: SavedLayout[];
  widgetOrder: string[];
}

// Saved Layout
export interface SavedLayout {
  id: string;
  name: string;
  description?: string;
  layout: WidgetLayout[];
  isDefault?: boolean;
  createdAt: Date;
}

// Dashboard Actions
export type DashboardAction =
  | { type: 'ADD_WIDGET'; payload: DashboardWidget }
  | { type: 'REMOVE_WIDGET'; payload: string }
  | { type: 'UPDATE_LAYOUT'; payload: WidgetLayout[] }
  | { type: 'TOGGLE_WIDGET'; payload: string }
  | { type: 'SET_WIDGET_DATA'; payload: { id: string; data: any } }
  | { type: 'SET_LOADING'; payload: { id: string; loading: boolean } }
  | { type: 'SET_ERROR'; payload: { id: string; error: Error | null } }
  | { type: 'UPDATE_PREFERENCES'; payload: Partial<UserPreferences> }
  | { type: 'TOGGLE_SIDEBAR' }
  | { type: 'SET_EDIT_MODE'; payload: boolean }
  | { type: 'SAVE_LAYOUT'; payload: SavedLayout }
  | { type: 'LOAD_LAYOUT'; payload: string };

// Widget Registry
export interface WidgetRegistry {
  widgets: Map<string, DashboardWidget>;
  register: (widget: DashboardWidget) => void;
  unregister: (widgetId: string) => void;
  get: (widgetId: string) => DashboardWidget | undefined;
  getAll: () => DashboardWidget[];
  getByCategory: (category: string) => DashboardWidget[];
  getByUserType: (userType: UserType) => DashboardWidget[];
}

// Design Tokens
export interface DesignTokens {
  spacing: {
    widget: {
      padding: string;
      gap: string;
      margin: string;
    };
    grid: {
      columns: number;
      gutter: string;
      rowHeight: string;
    };
  };
  typography: {
    header: {
      fontSize: string;
      fontWeight: number;
      lineHeight: number;
    };
    widgetTitle: {
      fontSize: string;
      fontWeight: number;
      lineHeight: number;
    };
    metric: {
      fontSize: string;
      fontWeight: number;
      lineHeight: number;
    };
  };
  colors: {
    widget: {
      background: string;
      border: string;
      hover: string;
    };
    metrics: {
      positive: string;
      negative: string;
      neutral: string;
    };
    status: {
      success: string;
      warning: string;
      error: string;
      info: string;
    };
  };
  shadows: {
    widget: string;
    widgetHover: string;
    widgetActive: string;
  };
  animations: {
    widgetEntry: string;
    widgetExit: string;
    dataUpdate: string;
  };
}

// Grid Configuration
export interface GridConfig {
  breakpoints: {
    xs: { cols: number; width: number };
    sm: { cols: number; width: number };
    md: { cols: number; width: number };
    lg: { cols: number; width: number };
    xl: { cols: number; width: number };
  };
  widgetSizes: {
    small: { w: number; h: number };
    medium: { w: number; h: number };
    large: { w: number; h: number };
    full: { w: number; h: number };
  };
}

// Widget Categories
export enum WidgetCategory {
  ANALYTICS = 'analytics',
  ACTIVITY = 'activity',
  AI = 'ai',
  GOALS = 'goals',
  FUNDING = 'funding',
  CREDIT = 'credit',
  GENERAL = 'general'
}

// Widget Variants
export type WidgetVariant = 'metric' | 'chart' | 'list' | 'action' | 'insight' | 'feed' | 'custom';


=== FILE: client/src/components/dashboard/core/DashboardGrid.tsx ===

import React, { useState, useCallback, useMemo, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  GripVertical, 
  Lock, 
  Unlock, 
  Eye, 
  EyeOff,
  Plus,
  Settings,
  Layout
} from 'lucide-react';
import { WidgetLayout, GridConfig } from '../types/dashboard.types';
import { gridConfig, getWidgetSize } from '../tokens/design-tokens';
import { useDashboard, useDashboardLayout } from '../providers/DashboardProvider';
import { useWidgetRegistry } from '../providers/WidgetRegistry';
import DashboardWidget from './DashboardWidget';
import { cn } from '@/lib/utils';

interface DashboardGridProps {
  className?: string;
  editable?: boolean;
  onWidgetClick?: (widgetId: string) => void;
  onWidgetDrop?: (widgetId: string, position: { x: number; y: number }) => void;
}

interface GridCell {
  x: number;
  y: number;
  occupied: boolean;
  widgetId?: string;
}

const DashboardGrid: React.FC<DashboardGridProps> = ({
  className,
  editable = false,
  onWidgetClick,
  onWidgetDrop,
}) => {
  const { layout, updateLayout } = useDashboardLayout();
  const { registry } = useWidgetRegistry();
  const [draggedWidget, setDraggedWidget] = useState<string | null>(null);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [gridSize, setGridSize] = useState({ width: 0, height: 0 });
  const [containerRef, setContainerRef] = useState<HTMLDivElement | null>(null);

  // Calculate grid dimensions based on container size
  useEffect(() => {
    if (!containerRef) return;

    const updateGridSize = () => {
      const rect = containerRef.getBoundingClientRect();
      const cols = Math.floor(rect.width / (200 + 16)); // 200px widget width + 16px gap
      const rows = Math.floor(rect.height / (150 + 16)); // 150px widget height + 16px gap
      setGridSize({ width: cols, height: rows });
    };

    updateGridSize();
    window.addEventListener('resize', updateGridSize);
    return () => window.removeEventListener('resize', updateGridSize);
  }, [containerRef]);

  // Create grid cells
  const gridCells = useMemo(() => {
    const cells: GridCell[][] = [];
    for (let y = 0; y < gridSize.height; y++) {
      cells[y] = [];
      for (let x = 0; x < gridSize.width; x++) {
        cells[y][x] = { x, y, occupied: false };
      }
    }

    // Mark occupied cells
    layout.forEach(widget => {
      if (widget.visible) {
        for (let dy = 0; dy < widget.size.h; dy++) {
          for (let dx = 0; dx < widget.size.w; dx++) {
            const cellX = widget.position.x + dx;
            const cellY = widget.position.y + dy;
            if (cellX < gridSize.width && cellY < gridSize.height) {
              cells[cellY][cellX] = {
                x: cellX,
                y: cellY,
                occupied: true,
                widgetId: widget.widgetId,
              };
            }
          }
        }
      }
    });

    return cells;
  }, [layout, gridSize]);

  // Handle drag start
  const handleDragStart = useCallback((e: React.DragEvent, widgetId: string) => {
    if (!editable) return;
    
    setDraggedWidget(widgetId);
    const rect = (e.target as HTMLElement).getBoundingClientRect();
    const containerRect = containerRef?.getBoundingClientRect();
    
    if (containerRect) {
      setDragOffset({
        x: e.clientX - rect.left,
        y: e.clientY - rect.top,
      });
    }
    
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', widgetId);
  }, [editable, containerRef]);

  // Handle drag over
  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  }, []);

  // Handle drop
  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    
    if (!draggedWidget || !containerRef) return;
    
    const containerRect = containerRef.getBoundingClientRect();
    const x = Math.floor((e.clientX - containerRect.left) / 216); // 200px + 16px gap
    const y = Math.floor((e.clientY - containerRect.top) / 166); // 150px + 16px gap
    
    const widget = layout.find(w => w.widgetId === draggedWidget);
    if (widget) {
      const newPosition = {
        x: Math.max(0, Math.min(x, gridSize.width - widget.size.w)),
        y: Math.max(0, Math.min(y, gridSize.height - widget.size.h)),
      };
      
      const newLayout = layout.map(w => 
        w.widgetId === draggedWidget 
          ? { ...w, position: newPosition }
          : w
      );
      
      updateLayout(newLayout);
      onWidgetDrop?.(draggedWidget, newPosition);
    }
    
    setDraggedWidget(null);
  }, [draggedWidget, containerRef, layout, gridSize, updateLayout, onWidgetDrop]);

  // Toggle widget visibility
  const toggleWidgetVisibility = useCallback((widgetId: string) => {
    const newLayout = layout.map(widget =>
      widget.widgetId === widgetId
        ? { ...widget, visible: !widget.visible }
        : widget
    );
    updateLayout(newLayout);
  }, [layout, updateLayout]);

  // Toggle widget lock
  const toggleWidgetLock = useCallback((widgetId: string) => {
    const newLayout = layout.map(widget =>
      widget.widgetId === widgetId
        ? { ...widget, locked: !widget.locked }
        : widget
    );
    updateLayout(newLayout);
  }, [layout, updateLayout]);

  // Resize widget
  const resizeWidget = useCallback((widgetId: string, newSize: { w: number; h: number }) => {
    const newLayout = layout.map(widget =>
      widget.widgetId === widgetId
        ? { ...widget, size: newSize }
        : widget
    );
    updateLayout(newLayout);
  }, [layout, updateLayout]);

  // Render grid cells
  const renderGridCell = (cell: GridCell) => {
    const isDropTarget = draggedWidget && !cell.occupied;
    
    return (
      <div
        key={`${cell.x}-${cell.y}`}
        className={cn(
          'absolute border border-dashed border-gray-200 rounded transition-all',
          isDropTarget && 'border-blue-400 bg-blue-50',
          cell.occupied && 'border-transparent'
        )}
        style={{
          left: cell.x * 216,
          top: cell.y * 166,
          width: 200,
          height: 150,
        }}
      />
    );
  };

  // Render widget
  const renderWidget = (widget: WidgetLayout) => {
    const widgetDefinition = registry.get(widget.widgetId);
    if (!widgetDefinition || !widget.visible) return null;

    const style = {
      left: widget.position.x * 216,
      top: widget.position.y * 166,
      width: widget.size.w * 200 + (widget.size.w - 1) * 16,
      height: widget.size.h * 150 + (widget.size.h - 1) * 16,
    };

    return (
      <div
        key={widget.widgetId}
        className={cn(
          'absolute transition-all duration-200',
          editable && 'cursor-move',
          widget.locked && 'opacity-75'
        )}
        style={style}
        draggable={editable && !widget.locked}
        onDragStart={(e) => handleDragStart(e, widget.widgetId)}
        onClick={() => onWidgetClick?.(widget.widgetId)}
      >
        <DashboardWidget
          widgetId={widget.widgetId}
          variant={widgetDefinition.size === 'small' ? 'metric' : 'chart'}
          showActions={editable}
          onRemove={() => toggleWidgetVisibility(widget.widgetId)}
        >
          <CardContent>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <h3 className="font-semibold">{widgetDefinition.title}</h3>
                {editable && (
                  <div className="flex items-center space-x-1">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleWidgetLock(widget.widgetId);
                      }}
                    >
                      {widget.locked ? (
                        <Lock className="h-3 w-3" />
                      ) : (
                        <Unlock className="h-3 w-3" />
                      )}
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleWidgetVisibility(widget.widgetId);
                      }}
                    >
                      <Eye className="h-3 w-3" />
                    </Button>
                  </div>
                )}
              </div>
              <div className="text-sm text-muted-foreground">
                {widgetDefinition.description || 'Widget content goes here'}
              </div>
              {editable && (
                <div className="flex items-center space-x-2 text-xs">
                  <Badge variant="outline">
                    {widget.size.w}√ó{widget.size.h}
                  </Badge>
                  {widget.locked && (
                    <Badge variant="secondary">Locked</Badge>
                  )}
                </div>
              )}
            </div>
          </CardContent>
        </DashboardWidget>
      </div>
    );
  };

  return (
    <div
      ref={setContainerRef}
      className={cn(
        'relative w-full h-full overflow-auto bg-gray-50 p-4',
        className
      )}
      onDragOver={handleDragOver}
      onDrop={handleDrop}
    >
      {/* Grid overlay */}
      <div className="absolute inset-4 pointer-events-none">
        {gridCells.flat().map(cell => renderGridCell(cell))}
      </div>

      {/* Widgets */}
      {layout.map(widget => renderWidget(widget))}

      {/* Add widget button */}
      {editable && (
        <Button
          variant="outline"
          size="sm"
          className="absolute top-4 right-4 z-10"
          onClick={() => {
            // TODO: Open widget library
            console.log('Open widget library');
          }}
        >
          <Plus className="h-4 w-4 mr-2" />
          Add Widget
        </Button>
      )}

      {/* Grid controls */}
      {editable && (
        <div className="absolute bottom-4 left-4 flex items-center space-x-2 bg-white rounded-lg shadow-lg p-2">
          <Button variant="ghost" size="sm">
            <Layout className="h-4 w-4" />
          </Button>
          <Button variant="ghost" size="sm">
            <Settings className="h-4 w-4" />
          </Button>
          <div className="text-xs text-muted-foreground">
            Grid: {gridSize.width}√ó{gridSize.height}
          </div>
        </div>
      )}
    </div>
  );
};

export default DashboardGrid;


=== FILE: client/src/components/dashboard/core/DashboardLayout.tsx ===

import React, { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import { 
  Menu, 
  Settings, 
  Layout, 
  Palette,
  Bell,
  User,
  Search,
  Grid3X3,
  List,
  Maximize2,
  Minimize2,
  Save,
  Download,
  Upload,
  RotateCcw
} from 'lucide-react';
import { useDashboard, useDashboardUI } from '../providers/DashboardProvider';
import { useWidgetRegistry, useWidgetsByCategory } from '../providers/WidgetRegistry';
import { WidgetCategory } from '../types/dashboard.types';
import DashboardGrid from './DashboardGrid';
import { cn } from '@/lib/utils';

interface DashboardLayoutProps {
  className?: string;
  title?: string;
  subtitle?: string;
  showHeader?: boolean;
  showSidebar?: boolean;
  editable?: boolean;
  onSave?: () => void;
  onExport?: () => void;
  onImport?: () => void;
}

const DashboardLayout: React.FC<DashboardLayoutProps> = ({
  className,
  title = "Dashboard",
  subtitle,
  showHeader = true,
  showSidebar = true,
  editable = false,
  onSave,
  onExport,
  onImport,
}) => {
  const { state } = useDashboard();
  const { sidebarOpen, editMode, toggleSidebar, setEditMode } = useDashboardUI();
  const { registry } = useWidgetRegistry();
  
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sidebarContent, setSidebarContent] = useState<'widgets' | 'settings' | 'layouts'>('widgets');

  // Widget categories for sidebar
  const analyticsWidgets = useWidgetsByCategory(WidgetCategory.ANALYTICS);
  const activityWidgets = useWidgetsByCategory(WidgetCategory.ACTIVITY);
  const aiWidgets = useWidgetsByCategory(WidgetCategory.AI);
  const goalWidgets = useWidgetsByCategory(WidgetCategory.GOALS);
  const fundingWidgets = useWidgetsByCategory(WidgetCategory.FUNDING);
  const creditWidgets = useWidgetsByCategory(WidgetCategory.CREDIT);

  const handleAddWidget = useCallback((widgetId: string) => {
    // TODO: Implement add widget logic
    console.log('Add widget:', widgetId);
  }, []);

  const handleSave = useCallback(() => {
    onSave?.();
  }, [onSave]);

  const handleExport = useCallback(() => {
    onExport?.();
  }, [onExport]);

  const handleImport = useCallback(() => {
    onImport?.();
  }, [onImport]);

  const renderSidebar = () => {
    if (!showSidebar) return null;

    return (
      <Sheet open={sidebarOpen} onOpenChange={toggleSidebar}>
        <SheetContent side="left" className="w-80">
          <SheetHeader>
            <SheetTitle>Dashboard Tools</SheetTitle>
            <SheetDescription>
              Manage your dashboard widgets and settings
            </SheetDescription>
          </SheetHeader>
          
          <div className="mt-6 space-y-4">
            {/* Sidebar Navigation */}
            <div className="flex space-x-1 bg-muted p-1 rounded-lg">
              <Button
                variant={sidebarContent === 'widgets' ? 'default' : 'ghost'}
                size="sm"
                onClick={() => setSidebarContent('widgets')}
                className="flex-1"
              >
                <Grid3X3 className="h-4 w-4 mr-2" />
                Widgets
              </Button>
              <Button
                variant={sidebarContent === 'settings' ? 'default' : 'ghost'}
                size="sm"
                onClick={() => setSidebarContent('settings')}
                className="flex-1"
              >
                <Settings className="h-4 w-4 mr-2" />
                Settings
              </Button>
              <Button
                variant={sidebarContent === 'layouts' ? 'default' : 'ghost'}
                size="sm"
                onClick={() => setSidebarContent('layouts')}
                className="flex-1"
              >
                <Layout className="h-4 w-4 mr-2" />
                Layouts
              </Button>
            </div>

            {/* Widget Library */}
            {sidebarContent === 'widgets' && (
              <div className="space-y-4">
                <div>
                  <h3 className="font-semibold mb-2">Analytics</h3>
                  <div className="space-y-1">
                    {analyticsWidgets.map(widget => (
                      <Button
                        key={widget.id}
                        variant="ghost"
                        size="sm"
                        className="w-full justify-start"
                        onClick={() => handleAddWidget(widget.id)}
                      >
                        {widget.icon && <widget.icon className="h-4 w-4 mr-2" />}
                        {widget.title}
                      </Button>
                    ))}
                  </div>
                </div>

                <Separator />

                <div>
                  <h3 className="font-semibold mb-2">Activity</h3>
                  <div className="space-y-1">
                    {activityWidgets.map(widget => (
                      <Button
                        key={widget.id}
                        variant="ghost"
                        size="sm"
                        className="w-full justify-start"
                        onClick={() => handleAddWidget(widget.id)}
                      >
                        {widget.icon && <widget.icon className="h-4 w-4 mr-2" />}
                        {widget.title}
                      </Button>
                    ))}
                  </div>
                </div>

                <Separator />

                <div>
                  <h3 className="font-semibold mb-2">AI & Insights</h3>
                  <div className="space-y-1">
                    {aiWidgets.map(widget => (
                      <Button
                        key={widget.id}
                        variant="ghost"
                        size="sm"
                        className="w-full justify-start"
                        onClick={() => handleAddWidget(widget.id)}
                      >
                        {widget.icon && <widget.icon className="h-4 w-4 mr-2" />}
                        {widget.title}
                      </Button>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* Settings */}
            {sidebarContent === 'settings' && (
              <div className="space-y-4">
                <div>
                  <h3 className="font-semibold mb-2">Display</h3>
                  <div className="space-y-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      className="w-full justify-start"
                    >
                      <Palette className="h-4 w-4 mr-2" />
                      Theme
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="w-full justify-start"
                    >
                      <Grid3X3 className="h-4 w-4 mr-2" />
                      Grid Density
                    </Button>
                  </div>
                </div>

                <Separator />

                <div>
                  <h3 className="font-semibold mb-2">Notifications</h3>
                  <div className="space-y-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      className="w-full justify-start"
                    >
                      <Bell className="h-4 w-4 mr-2" />
                      Notification Settings
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {/* Saved Layouts */}
            {sidebarContent === 'layouts' && (
              <div className="space-y-4">
                <div className="flex space-x-2">
                  <Button size="sm" onClick={handleSave}>
                    <Save className="h-4 w-4 mr-2" />
                    Save Layout
                  </Button>
                  <Button size="sm" variant="outline" onClick={handleExport}>
                    <Download className="h-4 w-4 mr-2" />
                    Export
                  </Button>
                </div>

                <Separator />

                <div>
                  <h3 className="font-semibold mb-2">Saved Layouts</h3>
                  <div className="space-y-1">
                    {state.customizations.savedLayouts.map(layout => (
                      <Button
                        key={layout.id}
                        variant="ghost"
                        size="sm"
                        className="w-full justify-start"
                      >
                        <Layout className="h-4 w-4 mr-2" />
                        {layout.name}
                      </Button>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        </SheetContent>
      </Sheet>
    );
  };

  return (
    <div className={cn('flex h-screen bg-background', className)}>
      {/* Sidebar */}
      {renderSidebar()}

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        {showHeader && (
          <header className="border-b bg-background px-6 py-4">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold">{title}</h1>
                {subtitle && (
                  <p className="text-muted-foreground">{subtitle}</p>
                )}
              </div>

              <div className="flex items-center space-x-2">
                {/* View Mode Toggle */}
                <div className="flex items-center space-x-1 bg-muted p-1 rounded-lg">
                  <Button
                    variant={viewMode === 'grid' ? 'default' : 'ghost'}
                    size="sm"
                    onClick={() => setViewMode('grid')}
                  >
                    <Grid3X3 className="h-4 w-4" />
                  </Button>
                  <Button
                    variant={viewMode === 'list' ? 'default' : 'ghost'}
                    size="sm"
                    onClick={() => setViewMode('list')}
                  >
                    <List className="h-4 w-4" />
                  </Button>
                </div>

                {/* Edit Mode Toggle */}
                {editable && (
                  <Button
                    variant={editMode ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => setEditMode(!editMode)}
                  >
                    {editMode ? (
                      <>
                        <Minimize2 className="h-4 w-4 mr-2" />
                        Exit Edit
                      </>
                    ) : (
                      <>
                        <Maximize2 className="h-4 w-4 mr-2" />
                        Edit Layout
                      </>
                    )}
                  </Button>
                )}

                {/* Actions Menu */}
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" size="sm">
                      <Settings className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuItem onClick={handleSave}>
                      <Save className="mr-2 h-4 w-4" />
                      Save Layout
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={handleExport}>
                      <Download className="mr-2 h-4 w-4" />
                      Export
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={handleImport}>
                      <Upload className="mr-2 h-4 w-4" />
                      Import
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem>
                      <RotateCcw className="mr-2 h-4 w-4" />
                      Reset to Default
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>

                {/* Sidebar Toggle */}
                <Button
                  variant="outline"
                  size="sm"
                  onClick={toggleSidebar}
                >
                  <Menu className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </header>
        )}

        {/* Dashboard Grid */}
        <main className="flex-1 overflow-hidden">
          <DashboardGrid
            editable={editMode}
            onWidgetClick={(widgetId) => {
              console.log('Widget clicked:', widgetId);
            }}
            onWidgetDrop={(widgetId, position) => {
              console.log('Widget dropped:', widgetId, position);
            }}
          />
        </main>
      </div>
    </div>
  );
};

export default DashboardLayout;


=== FILE: client/src/components/dashboard/core/DashboardWidget.tsx ===

import React, { useState, useCallback, memo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { 
  MoreHorizontal, 
  RefreshCw, 
  Settings, 
  Maximize2, 
  Minimize2,
  AlertCircle,
  Loader2,
  X
} from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { WidgetProps, WidgetVariant } from '../types/dashboard.types';
import { createWidgetStyles } from '../tokens/design-tokens';
import { cn } from '@/lib/utils';

interface DashboardWidgetProps extends WidgetProps {
  variant?: WidgetVariant;
  className?: string;
  onMaximize?: () => void;
  onMinimize?: () => void;
  onRemove?: () => void;
  onConfigure?: () => void;
  isMaximized?: boolean;
  showActions?: boolean;
  showHeader?: boolean;
  showFooter?: boolean;
  children?: React.ReactNode;
}

const WidgetErrorBoundary: React.FC<{
  widgetId: string;
  children: React.ReactNode;
  onError?: (error: Error) => void;
}> = ({ widgetId, children, onError }) => {
  const [hasError, setHasError] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  const handleError = useCallback((error: Error) => {
    setHasError(true);
    setError(error);
    onError?.(error);
    console.error(`Widget ${widgetId} error:`, error);
  }, [widgetId, onError]);

  if (hasError) {
    return (
      <Card className="h-full border-red-200 bg-red-50">
        <CardContent className="flex flex-col items-center justify-center h-full p-6">
          <AlertCircle className="h-8 w-8 text-red-500 mb-2" />
          <h3 className="font-semibold text-red-800 mb-1">Widget Error</h3>
          <p className="text-sm text-red-600 text-center mb-4">
            {error?.message || 'An unexpected error occurred'}
          </p>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => {
              setHasError(false);
              setError(null);
            }}
          >
            Retry
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <ErrorBoundary onError={handleError}>
      {children}
    </ErrorBoundary>
  );
};

class ErrorBoundary extends React.Component<
  { children: React.ReactNode; onError: (error: Error) => void },
  { hasError: boolean }
> {
  constructor(props: { children: React.ReactNode; onError: (error: Error) => void }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error: Error) {
    this.props.onError(error);
  }

  render() {
    if (this.state.hasError) {
      return null; // Let the parent handle the error display
    }

    return this.props.children;
  }
}

const WidgetLoadingState: React.FC<{ variant?: WidgetVariant }> = ({ variant = 'metric' }) => {
  const renderSkeleton = () => {
    switch (variant) {
      case 'chart':
        return (
          <div className="space-y-3">
            <Skeleton className="h-4 w-24" />
            <Skeleton className="h-32 w-full" />
            <div className="flex justify-between">
              <Skeleton className="h-3 w-16" />
              <Skeleton className="h-3 w-16" />
            </div>
          </div>
        );
      case 'list':
        return (
          <div className="space-y-3">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="flex items-center space-x-3">
                <Skeleton className="h-8 w-8 rounded-full" />
                <div className="space-y-1">
                  <Skeleton className="h-3 w-24" />
                  <Skeleton className="h-2 w-16" />
                </div>
              </div>
            ))}
          </div>
        );
      case 'metric':
      default:
        return (
          <div className="space-y-3">
            <Skeleton className="h-4 w-24" />
            <Skeleton className="h-12 w-20" />
            <Skeleton className="h-3 w-16" />
          </div>
        );
    }
  };

  return (
    <div className="flex items-center justify-center h-full">
      <div className="flex flex-col items-center space-y-2">
        <Loader2 className="h-6 w-6 animate-spin text-muted-foreground" />
        <p className="text-sm text-muted-foreground">Loading...</p>
      </div>
    </div>
  );
};

const WidgetErrorState: React.FC<{
  error: Error;
  onRetry?: () => void;
}> = ({ error, onRetry }) => {
  return (
    <div className="flex flex-col items-center justify-center h-full p-4">
      <AlertCircle className="h-8 w-8 text-red-500 mb-2" />
      <h3 className="font-semibold text-red-800 mb-1">Error</h3>
      <p className="text-sm text-red-600 text-center mb-4">
        {error.message}
      </p>
      {onRetry && (
        <Button variant="outline" size="sm" onClick={onRetry}>
          Retry
        </Button>
      )}
    </div>
  );
};

const DashboardWidget: React.FC<DashboardWidgetProps> = memo(({
  widgetId,
  config,
  data,
  loading = false,
  error,
  onConfigChange,
  onRefresh,
  onMaximize,
  onMinimize,
  onRemove,
  onConfigure,
  isMaximized = false,
  showActions = true,
  showHeader = true,
  showFooter = false,
  variant = 'metric',
  className,
  children,
}) => {
  const [isHovered, setIsHovered] = useState(false);

  const handleRefresh = useCallback(() => {
    onRefresh?.();
  }, [onRefresh]);

  const handleConfigure = useCallback(() => {
    onConfigure?.();
  }, [onConfigure]);

  const handleMaximize = useCallback(() => {
    if (isMaximized) {
      onMinimize?.();
    } else {
      onMaximize?.();
    }
  }, [isMaximized, onMaximize, onMinimize]);

  const widgetStyles = createWidgetStyles('default');

  const renderContent = () => {
    if (loading) {
      return <WidgetLoadingState variant={variant} />;
    }

    if (error) {
      return <WidgetErrorState error={error} onRetry={handleRefresh} />;
    }

    return children;
  };

  const renderActions = () => {
    if (!showActions) return null;

    return (
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity"
          >
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-48">
          <DropdownMenuItem onClick={handleRefresh}>
            <RefreshCw className="mr-2 h-4 w-4" />
            Refresh
          </DropdownMenuItem>
          <DropdownMenuItem onClick={handleMaximize}>
            {isMaximized ? (
              <>
                <Minimize2 className="mr-2 h-4 w-4" />
                Minimize
              </>
            ) : (
              <>
                <Maximize2 className="mr-2 h-4 w-4" />
                Maximize
              </>
            )}
          </DropdownMenuItem>
          <DropdownMenuItem onClick={handleConfigure}>
            <Settings className="mr-2 h-4 w-4" />
            Configure
          </DropdownMenuItem>
          <DropdownMenuSeparator />
          <DropdownMenuItem onClick={onRemove} className="text-red-600">
            <X className="mr-2 h-4 w-4" />
            Remove
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    );
  };

  return (
    <Card
      className={cn(
        'group relative h-full transition-all duration-200',
        'hover:shadow-md',
        isMaximized && 'fixed inset-4 z-50',
        className
      )}
      style={widgetStyles}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {showHeader && (
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3">
          <CardTitle className="text-sm font-medium">
            Widget {widgetId}
          </CardTitle>
          <div className="flex items-center space-x-1">
            {config?.autoRefresh && (
              <Badge variant="secondary" className="text-xs">
                Auto
              </Badge>
            )}
            {renderActions()}
          </div>
        </CardHeader>
      )}
      
      <CardContent className="flex-1">
        <WidgetErrorBoundary widgetId={widgetId}>
          {renderContent()}
        </WidgetErrorBoundary>
      </CardContent>
      
      {showFooter && (
        <div className="px-6 py-3 border-t bg-muted/50">
          <div className="flex items-center justify-between text-xs text-muted-foreground">
            <span>Last updated: {new Date().toLocaleTimeString()}</span>
            {config?.refreshInterval && (
              <span>Refresh: {config.refreshInterval}s</span>
            )}
          </div>
        </div>
      )}
    </Card>
  );
});

DashboardWidget.displayName = 'DashboardWidget';

export default DashboardWidget;


=== FILE: client/src/components/dashboard/BusinessPlansWidget.tsx ===

/**
 * Business Plans Widget
 * Dashboard widget for quick access to business plans
 */

import React from 'react';
import { Link } from 'wouter';
import { useQuery } from '@tanstack/react-query';
import { 
  FileText, 
  Plus, 
  TrendingUp, 
  Clock,
  CheckCircle,
  ArrowRight,
  Sparkles
} from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { apiRequest } from '@/lib/queryClient';

interface BusinessPlan {
  id: string;
  name: string;
  completionPercentage: number;
  lastModified: string;
  status: 'draft' | 'in-progress' | 'complete';
  wordCount: number;
}

export const BusinessPlansWidget: React.FC = () => {
  // Fetch recent business plans
  const { data: plans, isLoading } = useQuery({
    queryKey: ['/api/business-plans/recent'],
    queryFn: async () => {
      // TODO: Replace with actual API call
      // For now, return mock data
      return [
        {
          id: '1',
          name: 'Tech Startup Business Plan',
          completionPercentage: 75,
          lastModified: '2 hours ago',
          status: 'in-progress' as const,
          wordCount: 4500
        },
        {
          id: '2',
          name: 'E-commerce Venture Plan',
          completionPercentage: 45,
          lastModified: '1 day ago',
          status: 'draft' as const,
          wordCount: 2800
        },
        {
          id: '3',
          name: 'SaaS Product Plan',
          completionPercentage: 100,
          lastModified: '3 days ago',
          status: 'complete' as const,
          wordCount: 8200
        }
      ] as BusinessPlan[];
    }
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'complete':
        return 'bg-green-100 text-green-800';
      case 'in-progress':
        return 'bg-blue-100 text-blue-800';
      case 'draft':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'complete':
        return <CheckCircle className="w-3 h-3" />;
      case 'in-progress':
        return <Clock className="w-3 h-3" />;
      default:
        return <FileText className="w-3 h-3" />;
    }
  };

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="w-5 h-5" />
            Business Plans
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center h-32">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2">
              <FileText className="w-5 h-5 text-blue-600" />
              Business Plans
            </CardTitle>
            <CardDescription>
              Your recent business plans and progress
            </CardDescription>
          </div>
          <Button asChild size="sm">
            <Link href="/ai-business-plan">
              <Plus className="w-4 h-4 mr-2" />
              New Plan
            </Link>
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {!plans || plans.length === 0 ? (
          // Empty State
          <div className="text-center py-8">
            <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-blue-100 mb-4">
              <FileText className="w-8 h-8 text-blue-600" />
            </div>
            <h3 className="text-lg font-semibold mb-2">No Business Plans Yet</h3>
            <p className="text-gray-600 mb-4">
              Create your first business plan with AI assistance
            </p>
            <Button asChild>
              <Link href="/ai-business-plan">
                <Sparkles className="w-4 h-4 mr-2" />
                Create with AI
              </Link>
            </Button>
          </div>
        ) : (
          <div className="space-y-4">
            {/* Plans List */}
            {plans.slice(0, 3).map((plan) => (
              <Link key={plan.id} href={`/edit-plan/${plan.id}`}>
                <div className="p-4 border rounded-lg hover:shadow-md transition-all cursor-pointer group">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <h4 className="font-semibold text-gray-900 group-hover:text-blue-600 transition-colors">
                        {plan.name}
                      </h4>
                      <p className="text-sm text-gray-500 mt-1">
                        Last edited {plan.lastModified}
                      </p>
                    </div>
                    <Badge className={getStatusColor(plan.status)}>
                      <span className="flex items-center gap-1">
                        {getStatusIcon(plan.status)}
                        {plan.status}
                      </span>
                    </Badge>
                  </div>

                  {/* Progress Bar */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600">Progress</span>
                      <span className="font-medium text-gray-900">
                        {plan.completionPercentage}%
                      </span>
                    </div>
                    <Progress value={plan.completionPercentage} className="h-2" />
                  </div>

                  {/* Stats */}
                  <div className="flex items-center justify-between mt-3 pt-3 border-t">
                    <div className="flex items-center gap-4 text-sm text-gray-600">
                      <span className="flex items-center gap-1">
                        <FileText className="w-4 h-4" />
                        {plan.wordCount.toLocaleString()} words
                      </span>
                    </div>
                    <ArrowRight className="w-4 h-4 text-gray-400 group-hover:text-blue-600 transition-colors" />
                  </div>
                </div>
              </Link>
            ))}

            {/* View All Link */}
            {plans.length > 3 && (
              <Button asChild variant="outline" className="w-full">
                <Link href="/documents?filter=business-plan">
                  View All Plans ({plans.length})
                </Link>
              </Button>
            )}

            {/* Quick Stats */}
            <div className="grid grid-cols-3 gap-3 pt-4 border-t">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">
                  {plans.length}
                </div>
                <div className="text-xs text-gray-600">Total Plans</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">
                  {plans.filter(p => p.status === 'complete').length}
                </div>
                <div className="text-xs text-gray-600">Completed</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-yellow-600">
                  {plans.filter(p => p.status === 'in-progress').length}
                </div>
                <div className="text-xs text-gray-600">In Progress</div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="grid grid-cols-2 gap-2 pt-4">
              <Button asChild variant="outline" size="sm">
                <Link href="/documents?filter=business-plan">
                  <FileText className="w-4 h-4 mr-2" />
                  All Plans
                </Link>
              </Button>
              <Button asChild variant="outline" size="sm">
                <Link href="/ai-business-plan">
                  <Sparkles className="w-4 h-4 mr-2" />
                  AI Generator
                </Link>
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};


=== FILE: client/src/components/dashboard/UnifiedDashboard.tsx ===

import React, { lazy, Suspense, useEffect } from 'react';
import { UserType } from '@shared/schema';
import { DashboardProvider } from './providers/DashboardProvider';
import { WidgetRegistryProvider, useRegisterWidget } from './providers/WidgetRegistry';
import DashboardLayout from './core/DashboardLayout';
import { DashboardWidget } from './types/dashboard.types';

// Lazy load widgets for better performance
const RevenueWidget = lazy(() => import('./widgets/analytics/RevenueWidget'));
const ActivityFeedWidget = lazy(() => import('./widgets/activity/ActivityFeedWidget'));
const AIInsightsWidget = lazy(() => import('./widgets/ai/AIInsightsWidget'));
const GoalsTrackerWidget = lazy(() => import('./widgets/goals/GoalsTrackerWidget'));

// Widget loading fallback
const WidgetFallback: React.FC<{ widgetId: string }> = ({ widgetId }) => (
  <div className="flex items-center justify-center h-32 bg-gray-50 rounded-lg">
    <div className="text-center">
      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2"></div>
      <p className="text-sm text-gray-600">Loading {widgetId}...</p>
    </div>
  </div>
);

// Widget registry component
const WidgetRegistry: React.FC = () => {
  const registerWidget = useRegisterWidget();

  useEffect(() => {
    // Register analytics widgets
    registerWidget({
      id: 'revenue-overview',
      type: 'analytics',
      title: 'Revenue Overview',
      component: RevenueWidget,
      size: 'large',
      minSize: { w: 4, h: 3 },
      maxSize: { w: 6, h: 4 },
      permissions: [],
      userTypes: [UserType.ENTREPRENEUR, UserType.INVESTOR, UserType.PARTNER],
      category: 'analytics',
      refreshInterval: 300000, // 5 minutes
      priority: 10,
      defaultEnabled: true,
      description: 'Track revenue performance and growth trends',
    });

    // Register activity widgets
    registerWidget({
      id: 'activity-feed',
      type: 'activity',
      title: 'Activity Feed',
      component: ActivityFeedWidget,
      size: 'medium',
      minSize: { w: 3, h: 4 },
      maxSize: { w: 6, h: 6 },
      permissions: [],
      userTypes: Object.values(UserType),
      category: 'activity',
      refreshInterval: 60000, // 1 minute
      priority: 8,
      defaultEnabled: true,
      description: 'View recent activities and updates',
    });

    // Register AI widgets
    registerWidget({
      id: 'ai-insights',
      type: 'ai',
      title: 'AI Insights',
      component: AIInsightsWidget,
      size: 'medium',
      minSize: { w: 3, h: 3 },
      maxSize: { w: 6, h: 5 },
      permissions: [],
      userTypes: Object.values(UserType),
      category: 'ai',
      refreshInterval: 600000, // 10 minutes
      priority: 9,
      defaultEnabled: true,
      description: 'Get AI-powered insights and recommendations',
    });

    // Register goals widgets
    registerWidget({
      id: 'goals-tracker',
      type: 'goals',
      title: 'Goals Tracker',
      component: GoalsTrackerWidget,
      size: 'medium',
      minSize: { w: 3, h: 4 },
      maxSize: { w: 6, h: 6 },
      permissions: [],
      userTypes: [UserType.ENTREPRENEUR, UserType.TEAM_MEMBER],
      category: 'goals',
      refreshInterval: 300000, // 5 minutes
      priority: 7,
      defaultEnabled: true,
      description: 'Track and manage your goals and milestones',
    });

    // TODO: Register more widgets as they are created
    // - Credit monitoring widgets
    // - Funding opportunity widgets
    // - Performance metrics widgets
    // - Collaboration widgets
  }, [registerWidget]);

  return <></>;
};

// Mock data providers
const getMockRevenueData = () => ({
  current: 125000,
  previous: 98000,
  target: 150000,
  currency: 'USD',
  chartData: [
    { month: 'Jan', revenue: 45000, target: 50000, growth: 12.5 },
    { month: 'Feb', revenue: 52000, target: 55000, growth: 15.6 },
    { month: 'Mar', revenue: 48000, target: 50000, growth: -7.7 },
    { month: 'Apr', revenue: 61000, target: 60000, growth: 27.1 },
    { month: 'May', revenue: 58000, target: 65000, growth: -4.9 },
    { month: 'Jun', revenue: 67000, target: 70000, growth: 15.5 },
  ],
});

const getMockActivityData = () => ({
  activities: [
    {
      id: '1',
      type: 'user' as const,
      title: 'New team member joined',
      description: 'Sarah Johnson joined as Product Manager',
      timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago
      user: {
        name: 'Sarah Johnson',
        initials: 'SJ',
      },
      status: 'completed' as const,
      priority: 'medium' as const,
    },
    {
      id: '2',
      type: 'financial' as const,
      title: 'Payment received',
      description: 'Payment of $5,000 received from client ABC Corp',
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago
      status: 'completed' as const,
      metadata: {
        amount: 5000,
        category: 'Revenue',
      },
    },
    {
      id: '3',
      type: 'milestone' as const,
      title: 'Milestone completed',
      description: 'Q1 revenue target achieved',
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 4), // 4 hours ago
      status: 'completed' as const,
      priority: 'high' as const,
    },
  ],
  unreadCount: 2,
});

const getMockAIInsightsData = () => ({
  insights: [
    {
      id: '1',
      type: 'opportunity' as const,
      title: 'Revenue Growth Opportunity',
      description: 'Based on current trends, you could increase revenue by 15% by optimizing your pricing strategy.',
      confidence: 87,
      impact: 'high' as const,
      category: 'Revenue',
      suggestedActions: [
        'Analyze competitor pricing',
        'Conduct customer price sensitivity survey',
        'Implement A/B testing for new pricing tiers',
      ],
      metadata: {
        affectedMetrics: ['Revenue', 'Customer Acquisition Cost'],
        timeframe: '3 months',
        probability: 0.87,
      },
    },
    {
      id: '2',
      type: 'risk' as const,
      title: 'Customer Churn Risk',
      description: 'Several key customers show signs of potential churn. Immediate action recommended.',
      confidence: 73,
      impact: 'medium' as const,
      category: 'Customer Success',
      suggestedActions: [
        'Reach out to at-risk customers',
        'Review support ticket patterns',
        'Offer retention incentives',
      ],
      metadata: {
        affectedMetrics: ['Customer Lifetime Value', 'Churn Rate'],
        timeframe: '2 weeks',
        probability: 0.73,
      },
    },
  ],
  lastUpdated: new Date(),
  modelVersion: '2.1',
});

const getMockGoalsData = () => ({
  goals: [
    {
      id: '1',
      title: 'Increase Monthly Revenue',
      description: 'Achieve $150K monthly recurring revenue by end of Q2',
      target: 150000,
      current: 125000,
      unit: 'USD',
      deadline: new Date('2024-06-30'),
      status: 'in-progress' as const,
      priority: 'high' as const,
      category: 'Revenue',
      milestones: [
        {
          id: '1.1',
          title: 'Reach $100K MRR',
          completed: true,
          dueDate: new Date('2024-03-31'),
        },
        {
          id: '1.2',
          title: 'Reach $125K MRR',
          completed: true,
          dueDate: new Date('2024-04-30'),
        },
        {
          id: '1.3',
          title: 'Reach $150K MRR',
          completed: false,
          dueDate: new Date('2024-06-30'),
        },
      ],
    },
    {
      id: '2',
      title: 'Product Launch',
      description: 'Launch new mobile app feature by end of May',
      target: 100,
      current: 75,
      unit: '%',
      deadline: new Date('2024-05-31'),
      status: 'in-progress' as const,
      priority: 'medium' as const,
      category: 'Product',
      milestones: [
        {
          id: '2.1',
          title: 'Design completion',
          completed: true,
          dueDate: new Date('2024-04-15'),
        },
        {
          id: '2.2',
          title: 'Development completion',
          completed: false,
          dueDate: new Date('2024-05-15'),
        },
        {
          id: '2.3',
          title: 'Testing completion',
          completed: false,
          dueDate: new Date('2024-05-25'),
        },
      ],
    },
  ],
  totalGoals: 2,
  completedGoals: 0,
  overdueGoals: 0,
});

// Main Unified Dashboard Component
interface UnifiedDashboardProps {
  userType: UserType;
  title?: string;
  subtitle?: string;
  editable?: boolean;
}

const UnifiedDashboard: React.FC<UnifiedDashboardProps> = ({
  userType,
  title,
  subtitle,
  editable = true,
}) => {
  const getDashboardTitle = () => {
    if (title) return title;
    
    switch (userType) {
      case UserType.ENTREPRENEUR:
        return 'Entrepreneur Dashboard';
      case UserType.INVESTOR:
        return 'Investor Dashboard';
      case UserType.LENDER:
        return 'Lender Dashboard';
      case UserType.GRANTOR:
        return 'Grantor Dashboard';
      case UserType.PARTNER:
        return 'Partner Dashboard';
      case UserType.TEAM_MEMBER:
        return 'Team Dashboard';
      default:
        return 'Dashboard';
    }
  };

  const getDashboardSubtitle = () => {
    if (subtitle) return subtitle;
    
    switch (userType) {
      case UserType.ENTREPRENEUR:
        return 'Track your startup progress and growth metrics';
      case UserType.INVESTOR:
        return 'Monitor your portfolio and discover new opportunities';
      case UserType.LENDER:
        return 'Manage lending operations and credit monitoring';
      case UserType.GRANTOR:
        return 'Oversee grant programs and impact metrics';
      case UserType.PARTNER:
        return 'Collaborate and track partnership activities';
      case UserType.TEAM_MEMBER:
        return 'Stay updated on team goals and activities';
      default:
        return 'Your personalized dashboard';
    }
  };

  return (
    <WidgetRegistryProvider>
      <DashboardProvider userType={userType}>
        <WidgetRegistry />
        <Suspense fallback={<WidgetFallback widgetId="dashboard" />}>
          <DashboardLayout
            title={getDashboardTitle()}
            subtitle={getDashboardSubtitle()}
            editable={editable}
            onSave={() => {
              console.log('Saving dashboard layout...');
              // TODO: Implement save functionality
            }}
            onExport={() => {
              console.log('Exporting dashboard...');
              // TODO: Implement export functionality
            }}
            onImport={() => {
              console.log('Importing dashboard...');
              // TODO: Implement import functionality
            }}
          />
        </Suspense>
      </DashboardProvider>
    </WidgetRegistryProvider>
  );
};

export default UnifiedDashboard;

// Export mock data for testing
export {
  getMockRevenueData,
  getMockActivityData,
  getMockAIInsightsData,
  getMockGoalsData,
};


=== FILE: client/src/components/dashboard/providers/DashboardProvider.tsx ===

import React, { createContext, useContext, useReducer, useCallback, useMemo, useEffect } from 'react';
import { UserType } from '@shared/schema';
import { 
  DashboardState, 
  DashboardAction, 
  DashboardConfig, 
  WidgetLayout, 
  UserPreferences,
  DashboardCustomizations,
  SavedLayout
} from '../types/dashboard.types';
import { getDefaultWidgetsForUserType } from './WidgetRegistry';

interface DashboardContextType {
  state: DashboardState;
  dispatch: React.Dispatch<DashboardAction>;
  // Actions
  addWidget: (widgetId: string) => void;
  removeWidget: (widgetId: string) => void;
  updateLayout: (layout: WidgetLayout[]) => void;
  toggleWidget: (widgetId: string) => void;
  setWidgetData: (widgetId: string, data: any) => void;
  setWidgetLoading: (widgetId: string, loading: boolean) => void;
  setWidgetError: (widgetId: string, error: Error | null) => void;
  updatePreferences: (preferences: Partial<UserPreferences>) => void;
  toggleSidebar: () => void;
  setEditMode: (editMode: boolean) => void;
  saveLayout: (layout: SavedLayout) => void;
  loadLayout: (layoutId: string) => void;
  resetToDefaults: () => void;
}

const DashboardContext = createContext<DashboardContextType | null>(null);

export const useDashboard = () => {
  const context = useContext(DashboardContext);
  if (!context) {
    throw new Error('useDashboard must be used within a DashboardProvider');
  }
  return context;
};

// Initial state
const createInitialState = (userType: UserType): DashboardState => {
  const defaultWidgets = getDefaultWidgetsForUserType(userType);
  
  return {
    layout: defaultWidgets.map((widgetId, index) => ({
      widgetId,
      position: { x: (index % 3) * 4, y: Math.floor(index / 3) * 3 },
      size: { w: 4, h: 3 },
      visible: true,
      locked: false,
    })),
    activeWidgets: defaultWidgets,
    collapsedWidgets: [],
    widgetData: {},
    loadingStates: {},
    errors: {},
    sidebarOpen: true,
    selectedWidget: null,
    editMode: false,
    preferences: {
      sidebarCollapsed: false,
      showWidgetTitles: true,
      enableAnimations: true,
      gridDensity: 'normal',
      defaultTimeRange: '30d',
      notifications: {
        email: true,
        push: true,
        inApp: true,
        frequency: 'instant',
      },
    },
    customizations: {
      customWidgets: [],
      savedLayouts: [],
      widgetOrder: defaultWidgets,
    },
  };
};

// Reducer
const dashboardReducer = (state: DashboardState, action: DashboardAction): DashboardState => {
  switch (action.type) {
    case 'ADD_WIDGET': {
      const newWidgetId = action.payload.id;
      const newLayout: WidgetLayout = {
        widgetId: newWidgetId,
        position: { x: 0, y: 0 },
        size: { w: 4, h: 3 },
        visible: true,
        locked: false,
      };

      return {
        ...state,
        layout: [...state.layout, newLayout],
        activeWidgets: [...state.activeWidgets, newWidgetId],
      };
    }

    case 'REMOVE_WIDGET': {
      const widgetId = action.payload;
      return {
        ...state,
        layout: state.layout.filter(item => item.widgetId !== widgetId),
        activeWidgets: state.activeWidgets.filter(id => id !== widgetId),
        widgetData: { ...state.widgetData, [widgetId]: undefined },
        loadingStates: { ...state.loadingStates, [widgetId]: false },
        errors: { ...state.errors, [widgetId]: null },
      };
    }

    case 'UPDATE_LAYOUT':
      return {
        ...state,
        layout: action.payload,
      };

    case 'TOGGLE_WIDGET': {
      const widgetId = action.payload;
      const isActive = state.activeWidgets.includes(widgetId);
      
      if (isActive) {
        return {
          ...state,
          activeWidgets: state.activeWidgets.filter(id => id !== widgetId),
          layout: state.layout.map(item =>
            item.widgetId === widgetId ? { ...item, visible: false } : item
          ),
        };
      } else {
        return {
          ...state,
          activeWidgets: [...state.activeWidgets, widgetId],
          layout: state.layout.map(item =>
            item.widgetId === widgetId ? { ...item, visible: true } : item
          ),
        };
      }
    }

    case 'SET_WIDGET_DATA':
      return {
        ...state,
        widgetData: {
          ...state.widgetData,
          [action.payload.id]: action.payload.data,
        },
      };

    case 'SET_LOADING':
      return {
        ...state,
        loadingStates: {
          ...state.loadingStates,
          [action.payload.id]: action.payload.loading,
        },
      };

    case 'SET_ERROR':
      return {
        ...state,
        errors: {
          ...state.errors,
          [action.payload.id]: action.payload.error,
        },
      };

    case 'UPDATE_PREFERENCES':
      return {
        ...state,
        preferences: {
          ...state.preferences,
          ...action.payload,
        },
      };

    case 'TOGGLE_SIDEBAR':
      return {
        ...state,
        sidebarOpen: !state.sidebarOpen,
      };

    case 'SET_EDIT_MODE':
      return {
        ...state,
        editMode: action.payload,
      };

    case 'SAVE_LAYOUT': {
      const newLayout = action.payload;
      return {
        ...state,
        customizations: {
          ...state.customizations,
          savedLayouts: [...state.customizations.savedLayouts, newLayout],
        },
      };
    }

    case 'LOAD_LAYOUT': {
      const layoutId = action.payload;
      const savedLayout = state.customizations.savedLayouts.find(l => l.id === layoutId);
      
      if (savedLayout) {
        return {
          ...state,
          layout: savedLayout.layout,
          activeWidgets: savedLayout.layout
            .filter(item => item.visible)
            .map(item => item.widgetId),
        };
      }
      
      return state;
    }

    default:
      return state;
  }
};

interface DashboardProviderProps {
  children: React.ReactNode;
  userType: UserType;
  initialConfig?: Partial<DashboardConfig>;
}

export const DashboardProvider: React.FC<DashboardProviderProps> = ({
  children,
  userType,
  initialConfig,
}) => {
  const [state, dispatch] = useReducer(dashboardReducer, createInitialState(userType));

  // Load saved state from localStorage on mount
  useEffect(() => {
    const savedState = localStorage.getItem(`dashboard-state-${userType}`);
    if (savedState) {
      try {
        const parsed = JSON.parse(savedState);
        // Only restore certain parts of the state
        if (parsed.layout) {
          dispatch({ type: 'UPDATE_LAYOUT', payload: parsed.layout });
        }
        if (parsed.preferences) {
          dispatch({ type: 'UPDATE_PREFERENCES', payload: parsed.preferences });
        }
        if (parsed.customizations?.savedLayouts) {
          dispatch({ 
            type: 'SAVE_LAYOUT', 
            payload: parsed.customizations.savedLayouts[0] 
          });
        }
      } catch (error) {
        console.warn('Failed to restore dashboard state:', error);
      }
    }
  }, [userType]);

  // Save state to localStorage when it changes
  useEffect(() => {
    const stateToSave = {
      layout: state.layout,
      preferences: state.preferences,
      customizations: state.customizations,
    };
    
    localStorage.setItem(`dashboard-state-${userType}`, JSON.stringify(stateToSave));
  }, [state.layout, state.preferences, state.customizations, userType]);

  // Action creators
  const addWidget = useCallback((widgetId: string) => {
    dispatch({ type: 'ADD_WIDGET', payload: { id: widgetId } as any });
  }, []);

  const removeWidget = useCallback((widgetId: string) => {
    dispatch({ type: 'REMOVE_WIDGET', payload: widgetId });
  }, []);

  const updateLayout = useCallback((layout: WidgetLayout[]) => {
    dispatch({ type: 'UPDATE_LAYOUT', payload: layout });
  }, []);

  const toggleWidget = useCallback((widgetId: string) => {
    dispatch({ type: 'TOGGLE_WIDGET', payload: widgetId });
  }, []);

  const setWidgetData = useCallback((widgetId: string, data: any) => {
    dispatch({ type: 'SET_WIDGET_DATA', payload: { id: widgetId, data } });
  }, []);

  const setWidgetLoading = useCallback((widgetId: string, loading: boolean) => {
    dispatch({ type: 'SET_LOADING', payload: { id: widgetId, loading } });
  }, []);

  const setWidgetError = useCallback((widgetId: string, error: Error | null) => {
    dispatch({ type: 'SET_ERROR', payload: { id: widgetId, error } });
  }, []);

  const updatePreferences = useCallback((preferences: Partial<UserPreferences>) => {
    dispatch({ type: 'UPDATE_PREFERENCES', payload: preferences });
  }, []);

  const toggleSidebar = useCallback(() => {
    dispatch({ type: 'TOGGLE_SIDEBAR' });
  }, []);

  const setEditMode = useCallback((editMode: boolean) => {
    dispatch({ type: 'SET_EDIT_MODE', payload: editMode });
  }, []);

  const saveLayout = useCallback((layout: SavedLayout) => {
    dispatch({ type: 'SAVE_LAYOUT', payload: layout });
  }, []);

  const loadLayout = useCallback((layoutId: string) => {
    dispatch({ type: 'LOAD_LAYOUT', payload: layoutId });
  }, []);

  const resetToDefaults = useCallback(() => {
    const defaultState = createInitialState(userType);
    dispatch({ type: 'UPDATE_LAYOUT', payload: defaultState.layout });
    dispatch({ type: 'UPDATE_PREFERENCES', payload: defaultState.preferences });
  }, [userType]);

  const contextValue = useMemo(() => ({
    state,
    dispatch,
    addWidget,
    removeWidget,
    updateLayout,
    toggleWidget,
    setWidgetData,
    setWidgetLoading,
    setWidgetError,
    updatePreferences,
    toggleSidebar,
    setEditMode,
    saveLayout,
    loadLayout,
    resetToDefaults,
  }), [
    state,
    addWidget,
    removeWidget,
    updateLayout,
    toggleWidget,
    setWidgetData,
    setWidgetLoading,
    setWidgetError,
    updatePreferences,
    toggleSidebar,
    setEditMode,
    saveLayout,
    loadLayout,
    resetToDefaults,
  ]);

  return (
    <DashboardContext.Provider value={contextValue}>
      {children}
    </DashboardContext.Provider>
  );
};

// Hooks for specific state slices
export const useDashboardState = () => {
  const { state } = useDashboard();
  return state;
};

export const useDashboardLayout = () => {
  const { state, updateLayout } = useDashboard();
  return {
    layout: state.layout,
    updateLayout,
  };
};

export const useDashboardPreferences = () => {
  const { state, updatePreferences } = useDashboard();
  return {
    preferences: state.preferences,
    updatePreferences,
  };
};

export const useDashboardUI = () => {
  const { state, toggleSidebar, setEditMode } = useDashboard();
  return {
    sidebarOpen: state.sidebarOpen,
    editMode: state.editMode,
    toggleSidebar,
    setEditMode,
  };
};

export const useWidgetState = (widgetId: string) => {
  const { state, setWidgetData, setWidgetLoading, setWidgetError } = useDashboard();
  
  return {
    data: state.widgetData[widgetId],
    loading: state.loadingStates[widgetId] || false,
    error: state.errors[widgetId] || null,
    setData: (data: any) => setWidgetData(widgetId, data),
    setLoading: (loading: boolean) => setWidgetLoading(widgetId, loading),
    setError: (error: Error | null) => setWidgetError(widgetId, error),
  };
};


=== FILE: client/src/components/dashboard/providers/WidgetRegistry.tsx ===

import React, { createContext, useContext, useCallback, useMemo } from 'react';
import { UserType } from '@shared/schema';
import { DashboardWidget, WidgetRegistry as IWidgetRegistry, WidgetCategory } from '../types/dashboard.types';

interface WidgetRegistryContextType {
  registry: IWidgetRegistry;
}

const WidgetRegistryContext = createContext<WidgetRegistryContextType | null>(null);

export const useWidgetRegistry = () => {
  const context = useContext(WidgetRegistryContext);
  if (!context) {
    throw new Error('useWidgetRegistry must be used within a WidgetRegistryProvider');
  }
  return context;
};

interface WidgetRegistryProviderProps {
  children: React.ReactNode;
}

export const WidgetRegistryProvider: React.FC<WidgetRegistryProviderProps> = ({ children }) => {
  const widgetMap = useMemo(() => new Map<string, DashboardWidget>(), []);

  const register = useCallback((widget: DashboardWidget) => {
    widgetMap.set(widget.id, widget);
  }, [widgetMap]);

  const unregister = useCallback((widgetId: string) => {
    widgetMap.delete(widgetId);
  }, [widgetMap]);

  const get = useCallback((widgetId: string) => {
    return widgetMap.get(widgetId);
  }, [widgetMap]);

  const getAll = useCallback(() => {
    return Array.from(widgetMap.values());
  }, [widgetMap]);

  const getByCategory = useCallback((category: string) => {
    return Array.from(widgetMap.values()).filter(widget => widget.category === category);
  }, [widgetMap]);

  const getByUserType = useCallback((userType: UserType) => {
    return Array.from(widgetMap.values()).filter(widget => 
      widget.userTypes.includes(userType)
    );
  }, [widgetMap]);

  const registry: IWidgetRegistry = useMemo(() => ({
    widgets: widgetMap,
    register,
    unregister,
    get,
    getAll,
    getByCategory,
    getByUserType,
  }), [widgetMap, register, unregister, get, getAll, getByCategory, getByUserType]);

  return (
    <WidgetRegistryContext.Provider value={{ registry }}>
      {children}
    </WidgetRegistryContext.Provider>
  );
};

// Widget registration hook
export const useRegisterWidget = () => {
  const { registry } = useWidgetRegistry();
  
  return useCallback((widget: DashboardWidget) => {
    registry.register(widget);
  }, [registry]);
};

// Widget discovery hooks
export const useWidgets = () => {
  const { registry } = useWidgetRegistry();
  return registry.getAll();
};

export const useWidgetsByCategory = (category: WidgetCategory) => {
  const { registry } = useWidgetRegistry();
  return registry.getByCategory(category);
};

export const useWidgetsByUserType = (userType: UserType) => {
  const { registry } = useWidgetRegistry();
  return registry.getByUserType(userType);
};

export const useWidget = (widgetId: string) => {
  const { registry } = useWidgetRegistry();
  return registry.get(widgetId);
};

// Widget categories helper
export const getWidgetCategories = () => {
  return Object.values(WidgetCategory);
};

// Default widget configurations for different user types
export const getDefaultWidgetsForUserType = (userType: UserType): string[] => {
  const defaultWidgets: Partial<Record<UserType, string[]>> = {
    [UserType.ENTREPRENEUR]: [
      'revenue-overview',
      'growth-metrics',
      'funding-opportunities',
      'goals-tracker',
      'activity-feed',
      'ai-insights',
      'credit-score',
    ],
    [UserType.INVESTOR]: [
      'portfolio-overview',
      'deal-pipeline',
      'market-insights',
      'activity-feed',
      'ai-insights',
      'performance-metrics',
    ],
    [UserType.LENDER]: [
      'credit-monitoring',
      'loan-portfolio',
      'risk-assessment',
      'activity-feed',
      'ai-insights',
      'payment-tracking',
    ],
    [UserType.GRANTOR]: [
      'grant-portfolio',
      'application-pipeline',
      'impact-metrics',
      'activity-feed',
      'ai-insights',
      'compliance-tracking',
    ],
    [UserType.PARTNER]: [
      'partnership-pipeline',
      'collaboration-metrics',
      'activity-feed',
      'ai-insights',
      'performance-dashboard',
    ],
    [UserType.TEAM_MEMBER]: [
      'task-overview',
      'team-activity',
      'goals-tracker',
      'activity-feed',
      'ai-insights',
    ],
  };

  return defaultWidgets[userType] || [];
};

// Widget priority ordering
export const sortWidgetsByPriority = (widgets: DashboardWidget[]): DashboardWidget[] => {
  return [...widgets].sort((a, b) => b.priority - a.priority);
};

// Widget filtering utilities
export const filterWidgetsByPermissions = (widgets: DashboardWidget[], userPermissions: string[]): DashboardWidget[] => {
  return widgets.filter(widget => 
    widget.permissions.length === 0 || 
    widget.permissions.some(permission => userPermissions.includes(permission))
  );
};

export const filterEnabledWidgets = (widgets: DashboardWidget[]): DashboardWidget[] => {
  return widgets.filter(widget => widget.defaultEnabled);
};


=== FILE: client/src/components/dashboard/README.md ===

# Unified Dashboard System

This is a comprehensive dashboard system implementation based on the DASHBOARD_IMPROVEMENT_PROPOSAL. It provides a unified, scalable, and customizable dashboard experience across all user types in the startup ecosystem platform.

## üèóÔ∏è Architecture Overview

The dashboard system is built with a modular architecture that includes:

- **Core Framework**: Base components for layout, widgets, and state management
- **Widget System**: Reusable, configurable widgets with registry system
- **Design System**: Consistent tokens and styling
- **Provider System**: Context-based state management
- **Type System**: Comprehensive TypeScript definitions

## üìÅ File Structure

```
/components/dashboard/
‚îú‚îÄ‚îÄ core/                    # Core dashboard components
‚îÇ   ‚îú‚îÄ‚îÄ DashboardLayout.tsx  # Main layout wrapper
‚îÇ   ‚îú‚îÄ‚îÄ DashboardGrid.tsx    # Responsive grid system
‚îÇ   ‚îî‚îÄ‚îÄ DashboardWidget.tsx  # Base widget component
‚îú‚îÄ‚îÄ providers/               # Context providers
‚îÇ   ‚îú‚îÄ‚îÄ DashboardProvider.tsx    # Main state management
‚îÇ   ‚îî‚îÄ‚îÄ WidgetRegistry.tsx       # Widget registration system
‚îú‚îÄ‚îÄ widgets/                 # Widget implementations
‚îÇ   ‚îú‚îÄ‚îÄ analytics/           # Analytics widgets
‚îÇ   ‚îú‚îÄ‚îÄ activity/            # Activity feed widgets
‚îÇ   ‚îú‚îÄ‚îÄ ai/                  # AI-powered widgets
‚îÇ   ‚îú‚îÄ‚îÄ goals/               # Goals and milestones
‚îÇ   ‚îú‚îÄ‚îÄ funding/             # Funding-related widgets
‚îÇ   ‚îî‚îÄ‚îÄ credit/              # Credit monitoring widgets
‚îú‚îÄ‚îÄ tokens/                  # Design system
‚îÇ   ‚îî‚îÄ‚îÄ design-tokens.ts     # Design tokens and utilities
‚îú‚îÄ‚îÄ types/                   # TypeScript definitions
‚îÇ   ‚îî‚îÄ‚îÄ dashboard.types.ts   # All type definitions
‚îú‚îÄ‚îÄ UnifiedDashboard.tsx     # Main dashboard component
‚îú‚îÄ‚îÄ index.ts                 # Public API exports
‚îî‚îÄ‚îÄ README.md               # This file
```

## üöÄ Quick Start

### Basic Usage

```tsx
import { UnifiedDashboard } from '@/components/dashboard';
import { UserType } from '@shared/schema';

function MyDashboard() {
  return (
    <UnifiedDashboard
      userType={UserType.ENTREPRENEUR}
      title="My Dashboard"
      subtitle="Track your startup progress"
      editable={true}
    />
  );
}
```

### Custom Dashboard

```tsx
import { 
  DashboardProvider, 
  WidgetRegistryProvider, 
  DashboardLayout,
  useRegisterWidget 
} from '@/components/dashboard';

function CustomDashboard() {
  return (
    <WidgetRegistryProvider>
      <DashboardProvider userType={UserType.ENTREPRENEUR}>
        <DashboardLayout
          title="Custom Dashboard"
          editable={true}
        />
      </DashboardProvider>
    </WidgetRegistryProvider>
  );
}
```

## üß© Widget System

### Creating a Widget

```tsx
import React from 'react';
import { WidgetProps } from '@/components/dashboard';
import DashboardWidget from '@/components/dashboard/core/DashboardWidget';

const MyWidget: React.FC<WidgetProps> = ({ widgetId, data, loading, error }) => {
  return (
    <DashboardWidget
      widgetId={widgetId}
      loading={loading}
      error={error}
      variant="metric"
    >
      <div className="p-4">
        <h3>My Widget</h3>
        <p>{data?.message || 'No data available'}</p>
      </div>
    </DashboardWidget>
  );
};

export default MyWidget;
```

### Registering a Widget

```tsx
import { useRegisterWidget } from '@/components/dashboard';
import { UserType } from '@shared/schema';

function WidgetRegistration() {
  const registerWidget = useRegisterWidget();

  useEffect(() => {
    registerWidget({
      id: 'my-widget',
      type: 'custom',
      title: 'My Custom Widget',
      component: MyWidget,
      size: 'medium',
      permissions: [],
      userTypes: [UserType.ENTREPRENEUR],
      category: 'general',
      priority: 5,
      defaultEnabled: true,
      description: 'A custom widget example',
    });
  }, [registerWidget]);

  return null;
}
```

## üé® Design System

### Using Design Tokens

```tsx
import { dashboardTokens, createWidgetStyles } from '@/components/dashboard';

// Use design tokens directly
const styles = {
  padding: dashboardTokens.spacing.widget.padding,
  fontSize: dashboardTokens.typography.widgetTitle.fontSize,
};

// Or use utility functions
const widgetStyles = createWidgetStyles('default');
```

### Custom Styling

```tsx
import { cn } from '@/lib/utils';

<DashboardWidget
  className={cn(
    'custom-widget',
    'hover:shadow-lg',
    'transition-all'
  )}
>
  {/* Widget content */}
</DashboardWidget>
```

## üîß State Management

### Using Dashboard State

```tsx
import { useDashboard, useWidgetState } from '@/components/dashboard';

function MyComponent() {
  const { state, addWidget, removeWidget } = useDashboard();
  const widgetState = useWidgetState('my-widget');

  const handleAddWidget = () => {
    addWidget('new-widget-id');
  };

  return (
    <div>
      <p>Active widgets: {state.activeWidgets.length}</p>
      <button onClick={handleAddWidget}>Add Widget</button>
      
      {widgetState.loading && <p>Loading...</p>}
      {widgetState.error && <p>Error: {widgetState.error.message}</p>}
      {widgetState.data && <p>Data: {JSON.stringify(widgetState.data)}</p>}
    </div>
  );
}
```

### Custom Hooks

```tsx
import { 
  useDashboardLayout,
  useDashboardPreferences,
  useDashboardUI 
} from '@/components/dashboard';

function LayoutControls() {
  const { layout, updateLayout } = useDashboardLayout();
  const { preferences, updatePreferences } = useDashboardPreferences();
  const { sidebarOpen, toggleSidebar } = useDashboardUI();

  return (
    <div>
      <button onClick={toggleSidebar}>
        {sidebarOpen ? 'Hide' : 'Show'} Sidebar
      </button>
      <button onClick={() => updatePreferences({ enableAnimations: false })}>
        Disable Animations
      </button>
    </div>
  );
}
```

## üì± Responsive Design

The dashboard system is fully responsive with breakpoint-aware grid layouts:

- **Mobile (xs)**: 1 column
- **Tablet Portrait (sm)**: 2 columns  
- **Tablet Landscape (md)**: 4 columns
- **Desktop (lg)**: 6 columns
- **Large Desktop (xl)**: 12 columns

### Widget Sizes

- **Small**: 2√ó2 grid cells
- **Medium**: 4√ó3 grid cells
- **Large**: 6√ó4 grid cells
- **Full**: 12√ó5 grid cells (full width)

## üéØ Widget Categories

### Analytics Widgets
- Revenue tracking and forecasting
- Growth metrics and KPIs
- Performance analytics
- Financial health monitoring

### Activity Widgets
- Activity feeds
- Notifications
- Recent actions
- Team collaboration

### AI Widgets
- AI insights and recommendations
- Predictive analytics
- Automated insights
- Smart suggestions

### Goals Widgets
- Goal tracking
- Milestone management
- Progress visualization
- Achievement tracking

### Funding Widgets
- Funding opportunities
- Investor matching
- Application tracking
- Portfolio management

### Credit Widgets
- Credit score monitoring
- Credit factors analysis
- Payment tracking
- Risk assessment

## üîå Integration

### With Existing Dashboards

The unified dashboard system can be gradually integrated with existing dashboards:

```tsx
// Old dashboard
function OldDashboard() {
  return <div>Old dashboard content</div>;
}

// New unified dashboard
function NewDashboard() {
  return <UnifiedDashboard userType={UserType.ENTREPRENEUR} />;
}

// Gradual migration
function MigratedDashboard() {
  const [useNewDashboard, setUseNewDashboard] = useState(false);
  
  return useNewDashboard ? <NewDashboard /> : <OldDashboard />;
}
```

### With External Data

```tsx
import { useWidgetState } from '@/components/dashboard';

function DataDrivenWidget() {
  const { data, setData, setLoading, setError } = useWidgetState('my-widget');

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await fetch('/api/my-data');
        const result = await response.json();
        setData(result);
      } catch (error) {
        setError(error as Error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [setData, setLoading, setError]);

  return <div>{/* Render data */}</div>;
}
```

## üß™ Testing

### Testing Widgets

```tsx
import { render } from '@testing-library/react';
import { UnifiedDashboard } from '@/components/dashboard';
import { UserType } from '@shared/schema';

test('renders dashboard with default widgets', () => {
  render(<UnifiedDashboard userType={UserType.ENTREPRENEUR} />);
  // Test assertions
});
```

### Testing with Mock Data

```tsx
import { 
  getMockRevenueData, 
  getMockActivityData 
} from '@/components/dashboard';

test('widget displays mock data correctly', () => {
  const mockData = getMockRevenueData();
  // Test with mock data
});
```

## üöÄ Performance

### Code Splitting

Widgets are automatically code-split using React.lazy:

```tsx
const RevenueWidget = lazy(() => import('./widgets/analytics/RevenueWidget'));
```

### Memoization

Components are memoized for optimal performance:

```tsx
const MyWidget = memo(({ data }) => {
  const processedData = useMemo(() => 
    processData(data), [data]
  );
  
  return <div>{/* Render */}</div>;
});
```

### Virtual Scrolling

Long lists use virtual scrolling for performance:

```tsx
import { useVirtualizer } from '@tanstack/react-virtual';

const VirtualizedList = ({ items }) => {
  const virtualizer = useVirtualizer({
    count: items.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 80,
  });
  
  return (
    <div ref={parentRef} className="h-96 overflow-auto">
      {virtualizer.getVirtualItems().map((item) => (
        <Item key={item.key} data={items[item.index]} />
      ))}
    </div>
  );
};
```

## üîí Security

### Permissions

Widgets support permission-based access:

```tsx
const secureWidget = {
  id: 'admin-widget',
  permissions: ['admin', 'super-user'],
  userTypes: [UserType.ADMIN],
  // ... other config
};
```

### Data Validation

All widget data is validated using TypeScript types and runtime validation where needed.

## üìà Analytics

The dashboard system includes built-in analytics capabilities:

- Widget usage tracking
- User interaction metrics
- Performance monitoring
- Error tracking

## üõ†Ô∏è Development

### Adding New Widgets

1. Create widget component in appropriate category folder
2. Register widget in WidgetRegistry
3. Add to default widgets for relevant user types
4. Test with mock data
5. Add to documentation

### Customizing Layouts

1. Use the layout editor in edit mode
2. Save custom layouts
3. Share layouts with team members
4. Create layout templates

## üìö API Reference

### Components

- `UnifiedDashboard`: Main dashboard component
- `DashboardLayout`: Layout wrapper with sidebar and header
- `DashboardGrid`: Responsive grid system
- `DashboardWidget`: Base widget component

### Hooks

- `useDashboard`: Main dashboard state and actions
- `useWidgetState`: Individual widget state management
- `useDashboardLayout`: Layout management
- `useDashboardPreferences`: User preferences
- `useWidgetRegistry`: Widget registration and discovery

### Types

- `DashboardWidget`: Widget definition interface
- `WidgetProps`: Widget component props
- `DashboardState`: Dashboard state structure
- `WidgetLayout`: Widget positioning and sizing

## ü§ù Contributing

1. Follow the existing code patterns
2. Add comprehensive TypeScript types
3. Include unit tests for new components
4. Update documentation
5. Test with multiple user types

## üìÑ License

This dashboard system is part of the IterativeStartups platform and follows the same licensing terms.

---

For more detailed information, see the original [DASHBOARD_IMPROVEMENT_PROPOSAL.md](../../../docs/DASHBOARD_IMPROVEMENT_PROPOSAL.md).


=== FILE: client/src/components/dashboard/hooks/useDashboardPerformance.ts ===

import { useCallback, useEffect, useRef, useState } from 'react';

interface PerformanceMetrics {
  renderTime: number;
  dataLoadTime: number;
  widgetCount: number;
  memoryUsage?: number;
  errorCount: number;
}

interface PerformanceThresholds {
  maxRenderTime: number; // milliseconds
  maxDataLoadTime: number; // milliseconds
  maxWidgetCount: number;
  maxMemoryUsage: number; // MB
}

const defaultThresholds: PerformanceThresholds = {
  maxRenderTime: 100,
  maxDataLoadTime: 1000,
  maxWidgetCount: 20,
  maxMemoryUsage: 100,
};

// Performance monitoring hook
export const useDashboardPerformance = (thresholds = defaultThresholds) => {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({
    renderTime: 0,
    dataLoadTime: 0,
    widgetCount: 0,
    errorCount: 0,
  });

  const [alerts, setAlerts] = useState<string[]>([]);
  const renderStartTime = useRef<number>(0);
  const dataLoadStartTime = useRef<number>(0);

  // Start performance measurement
  const startRenderMeasurement = useCallback(() => {
    renderStartTime.current = performance.now();
  }, []);

  const endRenderMeasurement = useCallback(() => {
    const renderTime = performance.now() - renderStartTime.current;
    setMetrics(prev => ({ ...prev, renderTime }));
    
    if (renderTime > thresholds.maxRenderTime) {
      setAlerts(prev => [...prev, `Render time exceeded threshold: ${renderTime.toFixed(2)}ms`]);
    }
  }, [thresholds.maxRenderTime]);

  const startDataLoadMeasurement = useCallback(() => {
    dataLoadStartTime.current = performance.now();
  }, []);

  const endDataLoadMeasurement = useCallback(() => {
    const dataLoadTime = performance.now() - dataLoadStartTime.current;
    setMetrics(prev => ({ ...prev, dataLoadTime }));
    
    if (dataLoadTime > thresholds.maxDataLoadTime) {
      setAlerts(prev => [...prev, `Data load time exceeded threshold: ${dataLoadTime.toFixed(2)}ms`]);
    }
  }, [thresholds.maxDataLoadTime]);

  const updateWidgetCount = useCallback((count: number) => {
    setMetrics(prev => ({ ...prev, widgetCount: count }));
    
    if (count > thresholds.maxWidgetCount) {
      setAlerts(prev => [...prev, `Widget count exceeded threshold: ${count}`]);
    }
  }, [thresholds.maxWidgetCount]);

  const incrementErrorCount = useCallback(() => {
    setMetrics(prev => ({ ...prev, errorCount: prev.errorCount + 1 }));
  }, []);

  const clearAlerts = useCallback(() => {
    setAlerts([]);
  }, []);

  // Memory usage monitoring (if available)
  useEffect(() => {
    if ('memory' in performance) {
      const updateMemoryUsage = () => {
        const memory = (performance as any).memory;
        const memoryUsage = memory.usedJSHeapSize / 1024 / 1024; // Convert to MB
        setMetrics(prev => ({ ...prev, memoryUsage }));
        
        if (memoryUsage > thresholds.maxMemoryUsage) {
          setAlerts(prev => [...prev, `Memory usage exceeded threshold: ${memoryUsage.toFixed(2)}MB`]);
        }
      };

      updateMemoryUsage();
      const interval = setInterval(updateMemoryUsage, 5000); // Check every 5 seconds
      return () => clearInterval(interval);
    }
  }, [thresholds.maxMemoryUsage]);

  return {
    metrics,
    alerts,
    startRenderMeasurement,
    endRenderMeasurement,
    startDataLoadMeasurement,
    endDataLoadMeasurement,
    updateWidgetCount,
    incrementErrorCount,
    clearAlerts,
  };
};

// Widget-specific performance monitoring
export const useWidgetPerformance = (widgetId: string) => {
  const [renderTime, setRenderTime] = useState(0);
  const [dataFetchTime, setDataFetchTime] = useState(0);
  const [errorCount, setErrorCount] = useState(0);
  const renderStartTime = useRef<number>(0);
  const dataFetchStartTime = useRef<number>(0);

  const startRender = useCallback(() => {
    renderStartTime.current = performance.now();
  }, []);

  const endRender = useCallback(() => {
    const time = performance.now() - renderStartTime.current;
    setRenderTime(time);
  }, []);

  const startDataFetch = useCallback(() => {
    dataFetchStartTime.current = performance.now();
  }, []);

  const endDataFetch = useCallback(() => {
    const time = performance.now() - dataFetchStartTime.current;
    setDataFetchTime(time);
  }, []);

  const incrementError = useCallback(() => {
    setErrorCount(prev => prev + 1);
  }, []);

  // Log performance metrics
  useEffect(() => {
    if (renderTime > 50) { // Log slow renders
      console.warn(`Widget ${widgetId} slow render: ${renderTime.toFixed(2)}ms`);
    }
  }, [widgetId, renderTime]);

  useEffect(() => {
    if (dataFetchTime > 500) { // Log slow data fetches
      console.warn(`Widget ${widgetId} slow data fetch: ${dataFetchTime.toFixed(2)}ms`);
    }
  }, [widgetId, dataFetchTime]);

  return {
    renderTime,
    dataFetchTime,
    errorCount,
    startRender,
    endRender,
    startDataFetch,
    endDataFetch,
    incrementError,
  };
};

// Bundle size monitoring
export const useBundleSizeMonitoring = () => {
  const [bundleSize, setBundleSize] = useState<number>(0);
  const [chunkSizes, setChunkSizes] = useState<Record<string, number>>({});

  useEffect(() => {
    // This would typically be done at build time or through a webpack plugin
    // For now, we'll simulate it
    const estimateBundleSize = () => {
      // Estimate based on loaded modules
      const scripts = document.querySelectorAll('script[src]');
      let totalSize = 0;
      const sizes: Record<string, number> = {};

      scripts.forEach(script => {
        const src = (script as HTMLScriptElement).src;
        if (src.includes('chunk') || src.includes('bundle')) {
          // This is a simplified estimation
          const size = Math.random() * 100000; // Simulated size
          totalSize += size;
          sizes[src] = size;
        }
      });

      setBundleSize(totalSize);
      setChunkSizes(sizes);
    };

    estimateBundleSize();
  }, []);

  return { bundleSize, chunkSizes };
};

// Performance optimization suggestions
export const usePerformanceOptimizations = (metrics: PerformanceMetrics) => {
  const [suggestions, setSuggestions] = useState<string[]>([]);

  useEffect(() => {
    const newSuggestions: string[] = [];

    if (metrics.renderTime > 100) {
      newSuggestions.push('Consider memoizing expensive components');
    }

    if (metrics.dataLoadTime > 1000) {
      newSuggestions.push('Optimize API calls or implement caching');
    }

    if (metrics.widgetCount > 15) {
      newSuggestions.push('Consider lazy loading or virtual scrolling for widgets');
    }

    if (metrics.memoryUsage && metrics.memoryUsage > 100) {
      newSuggestions.push('Check for memory leaks in widgets');
    }

    if (metrics.errorCount > 5) {
      newSuggestions.push('Review error handling in widgets');
    }

    setSuggestions(newSuggestions);
  }, [metrics]);

  return suggestions;
};

// Performance reporting
export const usePerformanceReporting = () => {
  const reportMetrics = useCallback((metrics: PerformanceMetrics, context: string) => {
    // Send metrics to analytics service
    if (typeof window !== 'undefined' && 'gtag' in window) {
      (window as any).gtag('event', 'dashboard_performance', {
        event_category: 'performance',
        event_label: context,
        value: Math.round(metrics.renderTime),
        custom_map: {
          data_load_time: metrics.dataLoadTime,
          widget_count: metrics.widgetCount,
          memory_usage: metrics.memoryUsage,
          error_count: metrics.errorCount,
        },
      });
    }

    // Log to console in development
    if (process.env.NODE_ENV === 'development') {
      console.log('Dashboard Performance Metrics:', {
        context,
        ...metrics,
      });
    }
  }, []);

  return { reportMetrics };
};


=== FILE: client/src/components/dashboard/hooks/useDashboardData.ts ===

import { useQuery, useQueryClient } from '@tanstack/react-query';
import { useCallback, useMemo } from 'react';
import { WidgetConfig } from '../types/dashboard.types';

interface WidgetDataConfig {
  widgetId: string;
  config?: WidgetConfig;
  enabled?: boolean;
  refetchInterval?: number;
}

// Smart data fetching hook for widgets
export const useWidgetData = ({ 
  widgetId, 
  config, 
  enabled = true 
}: WidgetDataConfig) => {
  const queryClient = useQueryClient();

  const queryKey = useMemo(() => ['widget', widgetId, config], [widgetId, config]);

  const query = useQuery({
    queryKey,
    queryFn: async () => {
      // This would be replaced with actual API calls
      const response = await fetch(`/api/widgets/${widgetId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(config),
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch data for widget ${widgetId}`);
      }
      
      return response.json();
    },
    staleTime: config?.refreshInterval || 300000, // 5 minutes default
    refetchInterval: config?.autoRefresh ? config.refreshInterval : false,
    enabled: enabled && config?.enabled !== false,
    retry: 3,
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
  });

  const refresh = useCallback(() => {
    queryClient.invalidateQueries({ queryKey });
  }, [queryClient, queryKey]);

  const prefetch = useCallback(() => {
    queryClient.prefetchQuery({
      queryKey,
      queryFn: async () => {
        const response = await fetch(`/api/widgets/${widgetId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(config),
        });
        return response.json();
      },
    });
  }, [queryClient, queryKey, widgetId, config]);

  return {
    data: query.data,
    isLoading: query.isLoading,
    error: query.error,
    isError: query.isError,
    refetch: query.refetch,
    refresh,
    prefetch,
    isStale: query.isStale,
    lastUpdated: query.dataUpdatedAt,
  };
};

// Batch data fetching for multiple widgets
export const useBatchWidgetData = (widgetIds: string[]) => {
  const queryClient = useQueryClient();

  const queries = useQuery({
    queryKey: ['batch-widgets', widgetIds],
    queryFn: async () => {
      const responses = await Promise.all(
        widgetIds.map(id => 
          fetch(`/api/widgets/${id}`)
            .then(res => res.json())
            .catch(error => ({ id, error: error.message }))
        )
      );
      
      return responses.reduce((acc, data, index) => {
        acc[widgetIds[index]] = data;
        return acc;
      }, {} as Record<string, any>);
    },
    staleTime: 300000, // 5 minutes
    enabled: widgetIds.length > 0,
  });

  const refreshAll = useCallback(() => {
    queryClient.invalidateQueries({ queryKey: ['batch-widgets', widgetIds] });
  }, [queryClient, widgetIds]);

  return {
    data: queries.data,
    isLoading: queries.isLoading,
    error: queries.error,
    refreshAll,
  };
};

// Prefetch critical widgets
export const usePrefetchCriticalWidgets = (userType: string) => {
  const queryClient = useQueryClient();

  const prefetchCritical = useCallback(async () => {
    const criticalWidgets = getCriticalWidgets(userType);
    
    await Promise.all(
      criticalWidgets.map(widget => 
        queryClient.prefetchQuery({
          queryKey: ['widget', widget.id],
          queryFn: () => fetch(`/api/widgets/${widget.id}`).then(res => res.json()),
          staleTime: 300000,
        })
      )
    );
  }, [queryClient, userType]);

  return { prefetchCritical };
};

// Get critical widgets for a user type
const getCriticalWidgets = (userType: string) => {
  const criticalWidgets: Record<string, Array<{ id: string; priority: number }>> = {
    entrepreneur: [
      { id: 'revenue-overview', priority: 10 },
      { id: 'goals-tracker', priority: 9 },
      { id: 'activity-feed', priority: 8 },
    ],
    investor: [
      { id: 'portfolio-overview', priority: 10 },
      { id: 'deal-pipeline', priority: 9 },
      { id: 'activity-feed', priority: 8 },
    ],
    lender: [
      { id: 'credit-monitoring', priority: 10 },
      { id: 'loan-portfolio', priority: 9 },
      { id: 'activity-feed', priority: 8 },
    ],
  };

  return criticalWidgets[userType.toLowerCase()] || [];
};

// Real-time data updates using WebSocket
export const useRealtimeWidget = (widgetId: string, enabled = true) => {
  const queryClient = useQueryClient();

  const { data, isLoading, error } = useQuery({
    queryKey: ['realtime-widget', widgetId],
    queryFn: () => {
      return new Promise((resolve, reject) => {
        const ws = new WebSocket(`wss://api.example.com/widgets/${widgetId}/realtime`);
        
        ws.onopen = () => {
          console.log(`Connected to realtime updates for widget ${widgetId}`);
        };
        
        ws.onmessage = (event) => {
          const data = JSON.parse(event.data);
          queryClient.setQueryData(['widget', widgetId], data);
          resolve(data);
        };
        
        ws.onerror = (error) => {
          console.error('WebSocket error:', error);
          reject(error);
        };
        
        ws.onclose = () => {
          console.log(`Disconnected from realtime updates for widget ${widgetId}`);
        };
      });
    },
    enabled,
    staleTime: Infinity, // Real-time data doesn't go stale
    refetchInterval: false,
  });

  return { data, isLoading, error };
};

// Optimistic updates for widget actions
export const useOptimisticWidgetUpdate = (widgetId: string) => {
  const queryClient = useQueryClient();

  const optimisticUpdate = useCallback((updater: (oldData: any) => any) => {
    queryClient.setQueryData(['widget', widgetId], updater);
  }, [queryClient, widgetId]);

  const rollback = useCallback(() => {
    queryClient.invalidateQueries({ queryKey: ['widget', widgetId] });
  }, [queryClient, widgetId]);

  return { optimisticUpdate, rollback };
};

// Cache management utilities
export const useWidgetCache = () => {
  const queryClient = useQueryClient();

  const clearWidgetCache = useCallback((widgetId?: string) => {
    if (widgetId) {
      queryClient.removeQueries({ queryKey: ['widget', widgetId] });
    } else {
      queryClient.removeQueries({ queryKey: ['widget'] });
    }
  }, [queryClient]);

  const getCacheSize = useCallback(() => {
    return queryClient.getQueryCache().getAll().length;
  }, [queryClient]);

  const clearStaleData = useCallback(() => {
    queryClient.getQueryCache().clear();
  }, [queryClient]);

  return {
    clearWidgetCache,
    getCacheSize,
    clearStaleData,
  };
};


=== FILE: client/src/components/dashboard/index.ts ===

// Main dashboard component
export { default as UnifiedDashboard } from './UnifiedDashboard';

// Core components
export { default as DashboardLayout } from './core/DashboardLayout';
export { default as DashboardGrid } from './core/DashboardGrid';
export { default as DashboardWidget } from './core/DashboardWidget';

// Providers
export { DashboardProvider, useDashboard, useDashboardState, useDashboardLayout, useDashboardPreferences, useDashboardUI, useWidgetState } from './providers/DashboardProvider';
export { WidgetRegistryProvider, useWidgetRegistry, useRegisterWidget, useWidgets, useWidgetsByCategory, useWidgetsByUserType, useWidget } from './providers/WidgetRegistry';

// Widgets
export { default as RevenueWidget } from './widgets/analytics/RevenueWidget';
export { default as ActivityFeedWidget } from './widgets/activity/ActivityFeedWidget';
export { default as AIInsightsWidget } from './widgets/ai/AIInsightsWidget';
export { default as GoalsTrackerWidget } from './widgets/goals/GoalsTrackerWidget';

// Types
export type {
  WidgetProps,
  WidgetConfig,
  DashboardConfig,
  WidgetLayout,
  DashboardTheme,
  UserPreferences,
  NotificationPreferences,
  DashboardState,
  DashboardCustomizations,
  SavedLayout,
  DashboardAction,
  WidgetRegistry,
  DesignTokens,
  GridConfig,
} from './types/dashboard.types';

// Design tokens
export {
  dashboardTokens,
  gridConfig,
  cssVariables,
  getSpacing,
  getTypography,
  getColors,
  getShadows,
  getAnimations,
  getBreakpoint,
  getWidgetSize,
  createWidgetStyles,
  keyframes,
  themeVariants,
} from './tokens/design-tokens';

// Utility functions
export {
  getDefaultWidgetsForUserType,
  sortWidgetsByPriority,
  filterWidgetsByPermissions,
  filterEnabledWidgets,
  getWidgetCategories,
} from './providers/WidgetRegistry';

// Performance hooks
export {
  useWidgetData,
  useBatchWidgetData,
  usePrefetchCriticalWidgets,
  useRealtimeWidget,
  useOptimisticWidgetUpdate,
  useWidgetCache,
} from './hooks/useDashboardData';

export {
  useDashboardPerformance,
  useWidgetPerformance,
  useBundleSizeMonitoring,
  usePerformanceOptimizations,
  usePerformanceReporting,
} from './hooks/useDashboardPerformance';

// Mock data for testing
export {
  getMockRevenueData,
  getMockActivityData,
  getMockAIInsightsData,
  getMockGoalsData,
} from './UnifiedDashboard';


=== FILE: client/src/components/dashboard/tokens/design-tokens.ts ===

import { DesignTokens, GridConfig } from '../types/dashboard.types';

// Design tokens for dashboards
export const dashboardTokens: DesignTokens = {
  // Spacing
  spacing: {
    widget: {
      padding: '1.5rem',
      gap: '1rem',
      margin: '0.75rem',
    },
    grid: {
      columns: 12,
      gutter: '1.5rem',
      rowHeight: '80px',
    },
  },
  
  // Typography
  typography: {
    header: {
      fontSize: '2rem',
      fontWeight: 700,
      lineHeight: 1.2,
    },
    widgetTitle: {
      fontSize: '1.125rem',
      fontWeight: 600,
      lineHeight: 1.4,
    },
    metric: {
      fontSize: '2.5rem',
      fontWeight: 700,
      lineHeight: 1,
    },
  },
  
  // Colors
  colors: {
    widget: {
      background: 'white',
      border: 'gray-200',
      hover: 'gray-50',
    },
    metrics: {
      positive: 'green-600',
      negative: 'red-600',
      neutral: 'gray-600',
    },
    status: {
      success: 'green-500',
      warning: 'yellow-500',
      error: 'red-500',
      info: 'blue-500',
    },
  },
  
  // Shadows
  shadows: {
    widget: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',
    widgetHover: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
    widgetActive: '0 10px 15px -3px rgba(0, 0, 0, 0.1)',
  },
  
  // Animations
  animations: {
    widgetEntry: 'fadeInUp 0.3s ease-out',
    widgetExit: 'fadeOut 0.2s ease-in',
    dataUpdate: 'pulse 0.5s ease-in-out',
  },
};

// Grid configuration
export const gridConfig: GridConfig = {
  // Breakpoint-aware grid
  breakpoints: {
    xs: { cols: 1, width: 0 },      // Mobile
    sm: { cols: 2, width: 640 },    // Tablet portrait
    md: { cols: 4, width: 768 },    // Tablet landscape
    lg: { cols: 6, width: 1024 },   // Desktop
    xl: { cols: 12, width: 1280 },  // Large desktop
  },
  
  // Widget size mapping
  widgetSizes: {
    small: { w: 2, h: 2 },   // 2x2 grid cells
    medium: { w: 4, h: 3 },  // 4x3 grid cells
    large: { w: 6, h: 4 },   // 6x4 grid cells
    full: { w: 12, h: 5 },   // Full width
  },
};

// CSS Custom Properties for dynamic theming
export const cssVariables = {
  // Spacing
  '--widget-padding': dashboardTokens.spacing.widget.padding,
  '--widget-gap': dashboardTokens.spacing.widget.gap,
  '--widget-margin': dashboardTokens.spacing.widget.margin,
  '--grid-gutter': dashboardTokens.spacing.grid.gutter,
  '--grid-row-height': dashboardTokens.spacing.grid.rowHeight,
  
  // Typography
  '--header-font-size': dashboardTokens.typography.header.fontSize,
  '--header-font-weight': dashboardTokens.typography.header.fontWeight,
  '--header-line-height': dashboardTokens.typography.header.lineHeight,
  '--widget-title-font-size': dashboardTokens.typography.widgetTitle.fontSize,
  '--widget-title-font-weight': dashboardTokens.typography.widgetTitle.fontWeight,
  '--widget-title-line-height': dashboardTokens.typography.widgetTitle.lineHeight,
  '--metric-font-size': dashboardTokens.typography.metric.fontSize,
  '--metric-font-weight': dashboardTokens.typography.metric.fontWeight,
  '--metric-line-height': dashboardTokens.typography.metric.lineHeight,
  
  // Colors
  '--widget-bg': dashboardTokens.colors.widget.background,
  '--widget-border': dashboardTokens.colors.widget.border,
  '--widget-hover': dashboardTokens.colors.widget.hover,
  '--metric-positive': dashboardTokens.colors.metrics.positive,
  '--metric-negative': dashboardTokens.colors.metrics.negative,
  '--metric-neutral': dashboardTokens.colors.metrics.neutral,
  '--status-success': dashboardTokens.colors.status.success,
  '--status-warning': dashboardTokens.colors.status.warning,
  '--status-error': dashboardTokens.colors.status.error,
  '--status-info': dashboardTokens.colors.status.info,
  
  // Shadows
  '--widget-shadow': dashboardTokens.shadows.widget,
  '--widget-shadow-hover': dashboardTokens.shadows.widgetHover,
  '--widget-shadow-active': dashboardTokens.shadows.widgetActive,
  
  // Animations
  '--widget-entry-animation': dashboardTokens.animations.widgetEntry,
  '--widget-exit-animation': dashboardTokens.animations.widgetExit,
  '--data-update-animation': dashboardTokens.animations.dataUpdate,
};

// Utility functions for design tokens
export const getSpacing = (key: keyof typeof dashboardTokens.spacing) => {
  return dashboardTokens.spacing[key];
};

export const getTypography = (key: keyof typeof dashboardTokens.typography) => {
  return dashboardTokens.typography[key];
};

export const getColors = (key: keyof typeof dashboardTokens.colors) => {
  return dashboardTokens.colors[key];
};

export const getShadows = (key: keyof typeof dashboardTokens.shadows) => {
  return dashboardTokens.shadows[key];
};

export const getAnimations = (key: keyof typeof dashboardTokens.animations) => {
  return dashboardTokens.animations[key];
};

// Breakpoint utilities
export const getBreakpoint = (key: keyof typeof gridConfig.breakpoints) => {
  return gridConfig.breakpoints[key];
};

export const getWidgetSize = (size: keyof typeof gridConfig.widgetSizes) => {
  return gridConfig.widgetSizes[size];
};

// CSS-in-JS helpers
export const createWidgetStyles = (variant: 'default' | 'compact' | 'comfortable') => {
  const densityMultiplier = {
    compact: 0.75,
    default: 1,
    comfortable: 1.25,
  }[variant];

  return {
    padding: `calc(${dashboardTokens.spacing.widget.padding} * ${densityMultiplier})`,
    gap: `calc(${dashboardTokens.spacing.widget.gap} * ${densityMultiplier})`,
    margin: `calc(${dashboardTokens.spacing.widget.margin} * ${densityMultiplier})`,
    borderRadius: '0.5rem',
    backgroundColor: dashboardTokens.colors.widget.background,
    border: `1px solid var(--${dashboardTokens.colors.widget.border})`,
    boxShadow: dashboardTokens.shadows.widget,
    transition: 'all 0.2s ease-in-out',
    
    '&:hover': {
      boxShadow: dashboardTokens.shadows.widgetHover,
      backgroundColor: dashboardTokens.colors.widget.hover,
    },
    
    '&:active': {
      boxShadow: dashboardTokens.shadows.widgetActive,
    },
  };
};

// Animation keyframes
export const keyframes = {
  fadeInUp: {
    from: {
      opacity: 0,
      transform: 'translateY(20px)',
    },
    to: {
      opacity: 1,
      transform: 'translateY(0)',
    },
  },
  fadeOut: {
    from: {
      opacity: 1,
      transform: 'scale(1)',
    },
    to: {
      opacity: 0,
      transform: 'scale(0.95)',
    },
  },
  pulse: {
    '0%, 100%': {
      opacity: 1,
    },
    '50%': {
      opacity: 0.7,
    },
  },
};

// Theme variants
export const themeVariants = {
  light: {
    ...cssVariables,
    '--widget-bg': '#ffffff',
    '--widget-border': '#e5e7eb',
    '--widget-hover': '#f9fafb',
  },
  dark: {
    ...cssVariables,
    '--widget-bg': '#1f2937',
    '--widget-border': '#374151',
    '--widget-hover': '#111827',
  },
  system: {
    ...cssVariables,
    // Will be determined by system preference
  },
};


=== FILE: client/src/components/dashboard/widgets/goals/GoalsTrackerWidget.tsx ===

import React, { memo, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { 
  Target, 
  CheckCircle, 
  Clock, 
  AlertCircle,
  Plus,
  Calendar,
  TrendingUp,
  Award,
  MoreHorizontal,
  Edit,
  Trash2
} from 'lucide-react';
import { WidgetProps } from '../../types/dashboard.types';
import DashboardWidget from '../../core/DashboardWidget';

interface Goal {
  id: string;
  title: string;
  description: string;
  target: number;
  current: number;
  unit: string;
  deadline: Date;
  status: 'not-started' | 'in-progress' | 'completed' | 'overdue';
  priority: 'low' | 'medium' | 'high';
  category: string;
  milestones: Milestone[];
}

interface Milestone {
  id: string;
  title: string;
  completed: boolean;
  dueDate: Date;
}

interface GoalsTrackerWidgetProps extends WidgetProps {
  data?: {
    goals: Goal[];
    totalGoals: number;
    completedGoals: number;
    overdueGoals: number;
  };
}

const GoalsTrackerWidget: React.FC<GoalsTrackerWidgetProps> = memo(({
  widgetId,
  data,
  loading,
  error,
  onRefresh,
}) => {
  const [selectedGoal, setSelectedGoal] = useState<string | null>(null);

  const getStatusIcon = (status: Goal['status']) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'overdue':
        return <AlertCircle className="h-4 w-4 text-red-600" />;
      case 'in-progress':
        return <TrendingUp className="h-4 w-4 text-blue-600" />;
      case 'not-started':
      default:
        return <Clock className="h-4 w-4 text-gray-400" />;
    }
  };

  const getStatusColor = (status: Goal['status']) => {
    switch (status) {
      case 'completed':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'overdue':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'in-progress':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'not-started':
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getPriorityColor = (priority: Goal['priority']) => {
    switch (priority) {
      case 'high':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low':
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const calculateProgress = (goal: Goal) => {
    return Math.min((goal.current / goal.target) * 100, 100);
  };

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  const getDaysUntilDeadline = (deadline: Date) => {
    const now = new Date();
    const diff = deadline.getTime() - now.getTime();
    const days = Math.ceil(diff / (1000 * 60 * 60 * 24));
    return days;
  };

  if (!data) {
    return (
      <DashboardWidget
        widgetId={widgetId}
        loading={loading}
        error={error}
        onRefresh={onRefresh}
        variant="list"
      >
        <CardContent>
          <div className="text-center text-muted-foreground">
            No goals data available
          </div>
        </CardContent>
      </DashboardWidget>
    );
  }

  const completionRate = data.totalGoals > 0 
    ? (data.completedGoals / data.totalGoals) * 100 
    : 0;

  const activeGoals = data.goals.filter(goal => 
    goal.status === 'in-progress' || goal.status === 'not-started'
  );

  return (
    <DashboardWidget
      widgetId={widgetId}
      loading={loading}
      error={error}
      onRefresh={onRefresh}
      variant="list"
    >
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <div className="p-2 bg-orange-100 rounded-lg">
              <Target className="h-5 w-5 text-orange-600" />
            </div>
            <div>
              <CardTitle className="text-lg">Goals Tracker</CardTitle>
              <p className="text-sm text-muted-foreground">
                {data.completedGoals}/{data.totalGoals} completed
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            {data.overdueGoals > 0 && (
              <Badge variant="destructive" className="text-xs">
                {data.overdueGoals} overdue
              </Badge>
            )}
            <Button variant="ghost" size="sm">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent>
        {/* Overall Progress */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium">Overall Progress</span>
            <span className="text-sm text-muted-foreground">
              {completionRate.toFixed(0)}%
            </span>
          </div>
          <Progress value={completionRate} className="h-2" />
        </div>

        {/* Goals List */}
        <div className="space-y-4 max-h-80 overflow-y-auto">
          {activeGoals.map((goal) => {
            const progress = calculateProgress(goal);
            const daysLeft = getDaysUntilDeadline(goal.deadline);
            const isOverdue = daysLeft < 0 && goal.status !== 'completed';

            return (
              <div
                key={goal.id}
                className={`p-4 rounded-lg border transition-all cursor-pointer ${
                  selectedGoal === goal.id 
                    ? 'border-orange-200 bg-orange-50' 
                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                }`}
                onClick={() => setSelectedGoal(
                  selectedGoal === goal.id ? null : goal.id
                )}
              >
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    {getStatusIcon(goal.status)}
                    <h4 className="font-medium text-sm">{goal.title}</h4>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Badge
                      variant="outline"
                      className={`text-xs ${getPriorityColor(goal.priority)}`}
                    >
                      {goal.priority}
                    </Badge>
                    <Badge
                      variant="outline"
                      className={`text-xs ${getStatusColor(goal.status)}`}
                    >
                      {goal.status.replace('-', ' ')}
                    </Badge>
                  </div>
                </div>

                <p className="text-sm text-gray-600 mb-3">
                  {goal.description}
                </p>

                {/* Progress Bar */}
                <div className="mb-3">
                  <div className="flex items-center justify-between mb-1">
                    <span className="text-xs text-gray-600">
                      {goal.current} / {goal.target} {goal.unit}
                    </span>
                    <span className="text-xs font-medium">
                      {progress.toFixed(0)}%
                    </span>
                  </div>
                  <Progress value={progress} className="h-1.5" />
                </div>

                {/* Deadline and Actions */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2 text-xs text-gray-500">
                    <Calendar className="h-3 w-3" />
                    <span>
                      {isOverdue ? (
                        <span className="text-red-600">
                          {Math.abs(daysLeft)} days overdue
                        </span>
                      ) : (
                        <span>
                          {daysLeft > 0 ? `${daysLeft} days left` : 'Due today'}
                        </span>
                      )}
                    </span>
                  </div>

                  {selectedGoal === goal.id && (
                    <div className="flex items-center space-x-1">
                      <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                        <Edit className="h-3 w-3" />
                      </Button>
                      <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                        <Trash2 className="h-3 w-3" />
                      </Button>
                    </div>
                  )}
                </div>

                {/* Milestones */}
                {selectedGoal === goal.id && goal.milestones.length > 0 && (
                  <div className="mt-4 pt-4 border-t">
                    <h5 className="text-xs font-medium text-gray-700 mb-2">
                      Milestones ({goal.milestones.filter(m => m.completed).length}/{goal.milestones.length})
                    </h5>
                    <div className="space-y-1">
                      {goal.milestones.map((milestone) => (
                        <div
                          key={milestone.id}
                          className="flex items-center space-x-2 text-xs"
                        >
                          <div className={`w-2 h-2 rounded-full ${
                            milestone.completed ? 'bg-green-500' : 'bg-gray-300'
                          }`} />
                          <span className={milestone.completed ? 'line-through text-gray-500' : ''}>
                            {milestone.title}
                          </span>
                          <span className="text-gray-400">
                            ({formatDate(milestone.dueDate)})
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>

        {/* Footer Actions */}
        <div className="flex items-center justify-between pt-4 border-t mt-4">
          <Button variant="ghost" size="sm" className="text-xs">
            View All Goals
          </Button>
          <Button size="sm" className="text-xs">
            <Plus className="h-3 w-3 mr-1" />
            Add Goal
          </Button>
        </div>
      </CardContent>
    </DashboardWidget>
  );
});

GoalsTrackerWidget.displayName = 'GoalsTrackerWidget';

export default GoalsTrackerWidget;


=== FILE: client/src/components/dashboard/widgets/activity/ActivityFeedWidget.tsx ===

import React, { memo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { 
  Activity, 
  User, 
  FileText, 
  DollarSign,
  TrendingUp,
  Bell,
  CheckCircle,
  Clock,
  AlertCircle,
  MoreHorizontal
} from 'lucide-react';
import { WidgetProps } from '../../types/dashboard.types';
import DashboardWidget from '../../core/DashboardWidget';

interface ActivityItem {
  id: string;
  type: 'user' | 'system' | 'financial' | 'milestone' | 'notification';
  title: string;
  description: string;
  timestamp: Date;
  user?: {
    name: string;
    avatar?: string;
    initials?: string;
  };
  status?: 'pending' | 'completed' | 'failed' | 'warning';
  priority?: 'low' | 'medium' | 'high';
  metadata?: Record<string, any>;
}

interface ActivityFeedWidgetProps extends WidgetProps {
  data?: {
    activities: ActivityItem[];
    unreadCount: number;
    showFilters?: boolean;
  };
}

const ActivityFeedWidget: React.FC<ActivityFeedWidgetProps> = memo(({
  widgetId,
  data,
  loading,
  error,
  onRefresh,
}) => {
  const getActivityIcon = (type: ActivityItem['type']) => {
    switch (type) {
      case 'user':
        return <User className="h-4 w-4" />;
      case 'system':
        return <Activity className="h-4 w-4" />;
      case 'financial':
        return <DollarSign className="h-4 w-4" />;
      case 'milestone':
        return <TrendingUp className="h-4 w-4" />;
      case 'notification':
        return <Bell className="h-4 w-4" />;
      default:
        return <Activity className="h-4 w-4" />;
    }
  };

  const getStatusIcon = (status: ActivityItem['status']) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'failed':
        return <AlertCircle className="h-4 w-4 text-red-600" />;
      case 'warning':
        return <AlertCircle className="h-4 w-4 text-yellow-600" />;
      case 'pending':
      default:
        return <Clock className="h-4 w-4 text-gray-400" />;
    }
  };

  const getPriorityColor = (priority: ActivityItem['priority']) => {
    switch (priority) {
      case 'high':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low':
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const formatTimestamp = (timestamp: Date) => {
    const now = new Date();
    const diff = now.getTime() - timestamp.getTime();
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);

    if (minutes < 1) return 'Just now';
    if (minutes < 60) return `${minutes}m ago`;
    if (hours < 24) return `${hours}h ago`;
    if (days < 7) return `${days}d ago`;
    return timestamp.toLocaleDateString();
  };

  if (!data) {
    return (
      <DashboardWidget
        widgetId={widgetId}
        loading={loading}
        error={error}
        onRefresh={onRefresh}
        variant="feed"
      >
        <CardContent>
          <div className="text-center text-muted-foreground">
            No activity data available
          </div>
        </CardContent>
      </DashboardWidget>
    );
  }

  return (
    <DashboardWidget
      widgetId={widgetId}
      loading={loading}
      error={error}
      onRefresh={onRefresh}
      variant="feed"
    >
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <div className="p-2 bg-blue-100 rounded-lg">
              <Activity className="h-5 w-5 text-blue-600" />
            </div>
            <div>
              <CardTitle className="text-lg">Activity Feed</CardTitle>
              <p className="text-sm text-muted-foreground">
                Recent updates and events
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            {data.unreadCount > 0 && (
              <Badge variant="destructive" className="text-xs">
                {data.unreadCount}
              </Badge>
            )}
            <Button variant="ghost" size="sm">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent>
        <div className="space-y-4 max-h-96 overflow-y-auto">
          {data.activities.map((activity) => (
            <div
              key={activity.id}
              className="flex items-start space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors"
            >
              {/* Avatar/Icon */}
              <div className="flex-shrink-0">
                {activity.user ? (
                  <Avatar className="h-8 w-8">
                    <AvatarImage src={activity.user.avatar} />
                    <AvatarFallback>
                      {activity.user.initials || activity.user.name.charAt(0)}
                    </AvatarFallback>
                  </Avatar>
                ) : (
                  <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center">
                    {getActivityIcon(activity.type)}
                  </div>
                )}
              </div>

              {/* Content */}
              <div className="flex-1 min-w-0">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h4 className="text-sm font-medium text-gray-900">
                      {activity.title}
                    </h4>
                    <p className="text-sm text-gray-600 mt-1">
                      {activity.description}
                    </p>
                  </div>
                  
                  <div className="flex items-center space-x-2 ml-2">
                    {activity.status && getStatusIcon(activity.status)}
                    {activity.priority && (
                      <Badge
                        variant="outline"
                        className={`text-xs ${getPriorityColor(activity.priority)}`}
                      >
                        {activity.priority}
                      </Badge>
                    )}
                  </div>
                </div>

                <div className="flex items-center justify-between mt-2">
                  <span className="text-xs text-gray-500">
                    {formatTimestamp(activity.timestamp)}
                  </span>
                  
                  {activity.metadata && (
                    <div className="flex items-center space-x-1">
                      {activity.metadata.amount && (
                        <Badge variant="secondary" className="text-xs">
                          ${activity.metadata.amount.toLocaleString()}
                        </Badge>
                      )}
                      {activity.metadata.category && (
                        <Badge variant="outline" className="text-xs">
                          {activity.metadata.category}
                        </Badge>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Footer Actions */}
        <div className="flex items-center justify-between pt-4 border-t">
          <Button variant="ghost" size="sm" className="text-xs">
            View All Activity
          </Button>
          <Button variant="outline" size="sm" className="text-xs">
            Mark All Read
          </Button>
        </div>
      </CardContent>
    </DashboardWidget>
  );
});

ActivityFeedWidget.displayName = 'ActivityFeedWidget';

export default ActivityFeedWidget;


=== FILE: client/src/components/dashboard/widgets/ai/AIInsightsWidget.tsx ===

import React, { memo, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  Brain, 
  Lightbulb, 
  TrendingUp,
  AlertTriangle,
  CheckCircle,
  ArrowRight,
  RefreshCw,
  MoreHorizontal,
  Sparkles,
  Target,
  Zap
} from 'lucide-react';
import { WidgetProps } from '../../types/dashboard.types';
import DashboardWidget from '../../core/DashboardWidget';

interface AIInsight {
  id: string;
  type: 'opportunity' | 'risk' | 'recommendation' | 'prediction' | 'optimization';
  title: string;
  description: string;
  confidence: number;
  impact: 'low' | 'medium' | 'high';
  category: string;
  suggestedActions: string[];
  metadata?: {
    affectedMetrics?: string[];
    timeframe?: string;
    probability?: number;
  };
}

interface AIInsightsWidgetProps extends WidgetProps {
  data?: {
    insights: AIInsight[];
    lastUpdated: Date;
    modelVersion?: string;
  };
}

const AIInsightsWidget: React.FC<AIInsightsWidgetProps> = memo(({
  widgetId,
  data,
  loading,
  error,
  onRefresh,
}) => {
  const [selectedInsight, setSelectedInsight] = useState<string | null>(null);

  const getInsightIcon = (type: AIInsight['type']) => {
    switch (type) {
      case 'opportunity':
        return <TrendingUp className="h-4 w-4 text-green-600" />;
      case 'risk':
        return <AlertTriangle className="h-4 w-4 text-red-600" />;
      case 'recommendation':
        return <Lightbulb className="h-4 w-4 text-yellow-600" />;
      case 'prediction':
        return <Brain className="h-4 w-4 text-purple-600" />;
      case 'optimization':
        return <Zap className="h-4 w-4 text-blue-600" />;
      default:
        return <Brain className="h-4 w-4 text-gray-600" />;
    }
  };

  const getImpactColor = (impact: AIInsight['impact']) => {
    switch (impact) {
      case 'high':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low':
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 80) return 'text-green-600';
    if (confidence >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const formatConfidence = (confidence: number) => {
    return `${confidence.toFixed(0)}%`;
  };

  if (!data) {
    return (
      <DashboardWidget
        widgetId={widgetId}
        loading={loading}
        error={error}
        onRefresh={onRefresh}
        variant="insight"
      >
        <CardContent>
          <div className="text-center text-muted-foreground">
            No AI insights available
          </div>
        </CardContent>
      </DashboardWidget>
    );
  }

  const highImpactInsights = data.insights.filter(insight => insight.impact === 'high');
  const recentInsights = data.insights.slice(0, 3);

  return (
    <DashboardWidget
      widgetId={widgetId}
      loading={loading}
      error={error}
      onRefresh={onRefresh}
      variant="insight"
    >
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <div className="p-2 bg-purple-100 rounded-lg">
              <Brain className="h-5 w-5 text-purple-600" />
            </div>
            <div>
              <CardTitle className="text-lg flex items-center gap-2">
                AI Insights
                <Sparkles className="h-4 w-4 text-purple-500" />
              </CardTitle>
              <p className="text-sm text-muted-foreground">
                {data.insights.length} insights ‚Ä¢ {highImpactInsights.length} high impact
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            {data.modelVersion && (
              <Badge variant="outline" className="text-xs">
                v{data.modelVersion}
              </Badge>
            )}
            <Button variant="ghost" size="sm">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent>
        <div className="space-y-4">
          {recentInsights.map((insight) => (
            <div
              key={insight.id}
              className={`p-4 rounded-lg border transition-all cursor-pointer ${
                selectedInsight === insight.id 
                  ? 'border-purple-200 bg-purple-50' 
                  : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
              }`}
              onClick={() => setSelectedInsight(
                selectedInsight === insight.id ? null : insight.id
              )}
            >
              <div className="flex items-start justify-between mb-2">
                <div className="flex items-center space-x-2">
                  {getInsightIcon(insight.type)}
                  <h4 className="font-medium text-sm">{insight.title}</h4>
                </div>
                <div className="flex items-center space-x-2">
                  <Badge
                    variant="outline"
                    className={`text-xs ${getImpactColor(insight.impact)}`}
                  >
                    {insight.impact}
                  </Badge>
                  <span className={`text-xs font-medium ${getConfidenceColor(insight.confidence)}`}>
                    {formatConfidence(insight.confidence)}
                  </span>
                </div>
              </div>

              <p className="text-sm text-gray-600 mb-3">
                {insight.description}
              </p>

              {selectedInsight === insight.id && (
                <div className="space-y-3 pt-3 border-t">
                  {/* Suggested Actions */}
                  {insight.suggestedActions.length > 0 && (
                    <div>
                      <h5 className="text-xs font-medium text-gray-700 mb-2 flex items-center gap-1">
                        <Target className="h-3 w-3" />
                        Suggested Actions
                      </h5>
                      <div className="space-y-1">
                        {insight.suggestedActions.map((action, index) => (
                          <div
                            key={index}
                            className="flex items-center gap-2 text-xs text-gray-600"
                          >
                            <ArrowRight className="h-3 w-3 text-gray-400" />
                            {action}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Metadata */}
                  {insight.metadata && (
                    <div className="flex items-center gap-4 text-xs text-gray-500">
                      {insight.metadata.timeframe && (
                        <span>Timeline: {insight.metadata.timeframe}</span>
                      )}
                      {insight.metadata.probability && (
                        <span>Probability: {(insight.metadata.probability * 100).toFixed(0)}%</span>
                      )}
                    </div>
                  )}

                  {/* Action Button */}
                  <Button size="sm" className="w-full">
                    Take Action
                  </Button>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between pt-4 border-t mt-4">
          <div className="flex items-center space-x-2 text-xs text-gray-500">
            <RefreshCw className="h-3 w-3" />
            <span>Updated {data.lastUpdated.toLocaleTimeString()}</span>
          </div>
          <Button variant="ghost" size="sm" className="text-xs">
            View All Insights
          </Button>
        </div>
      </CardContent>
    </DashboardWidget>
  );
});

AIInsightsWidget.displayName = 'AIInsightsWidget';

export default AIInsightsWidget;


=== FILE: client/src/components/dashboard/widgets/analytics/RevenueWidget.tsx ===

import React, { memo } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  DollarSign, 
  TrendingUp, 
  TrendingDown,
  ArrowUpRight,
  ArrowDownRight,
  MoreHorizontal
} from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { WidgetProps } from '../../types/dashboard.types';
import DashboardWidget from '../../core/DashboardWidget';

interface RevenueData {
  month: string;
  revenue: number;
  target: number;
  growth: number;
}

interface RevenueWidgetProps extends WidgetProps {
  data?: {
    current: number;
    previous: number;
    target: number;
    chartData: RevenueData[];
    currency?: string;
  };
}

const RevenueWidget: React.FC<RevenueWidgetProps> = memo(({
  widgetId,
  data,
  loading,
  error,
  onRefresh,
}) => {
  const formatCurrency = (amount: number, currency = 'USD') => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency,
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const formatPercentage = (value: number) => {
    const sign = value >= 0 ? '+' : '';
    return `${sign}${value.toFixed(1)}%`;
  };

  const getGrowthIcon = (growth: number) => {
    if (growth > 0) return <TrendingUp className="h-4 w-4 text-green-600" />;
    if (growth < 0) return <TrendingDown className="h-4 w-4 text-red-600" />;
    return null;
  };

  const getGrowthColor = (growth: number) => {
    if (growth > 0) return 'text-green-600';
    if (growth < 0) return 'text-red-600';
    return 'text-gray-600';
  };

  if (!data) {
    return (
      <DashboardWidget
        widgetId={widgetId}
        loading={loading}
        error={error}
        onRefresh={onRefresh}
        variant="chart"
      >
        <CardContent>
          <div className="text-center text-muted-foreground">
            No revenue data available
          </div>
        </CardContent>
      </DashboardWidget>
    );
  }

  const growth = data.previous > 0 
    ? ((data.current - data.previous) / data.previous) * 100 
    : 0;

  const targetProgress = data.target > 0 
    ? (data.current / data.target) * 100 
    : 0;

  return (
    <DashboardWidget
      widgetId={widgetId}
      loading={loading}
      error={error}
      onRefresh={onRefresh}
      variant="chart"
    >
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <div className="p-2 bg-green-100 rounded-lg">
              <DollarSign className="h-5 w-5 text-green-600" />
            </div>
            <div>
              <CardTitle className="text-lg">Revenue</CardTitle>
              <p className="text-sm text-muted-foreground">
                {formatCurrency(data.current, data.currency)}
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            {getGrowthIcon(growth)}
            <span className={`text-sm font-medium ${getGrowthColor(growth)}`}>
              {formatPercentage(growth)}
            </span>
          </div>
        </div>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Key Metrics */}
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-1">
            <p className="text-sm text-muted-foreground">Target</p>
            <p className="text-lg font-semibold">
              {formatCurrency(data.target, data.currency)}
            </p>
          </div>
          <div className="space-y-1">
            <p className="text-sm text-muted-foreground">Progress</p>
            <div className="flex items-center space-x-2">
              <div className="flex-1 bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-green-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${Math.min(targetProgress, 100)}%` }}
                />
              </div>
              <span className="text-sm font-medium">
                {targetProgress.toFixed(0)}%
              </span>
            </div>
          </div>
        </div>

        {/* Chart */}
        {data.chartData && data.chartData.length > 0 && (
          <div className="h-32">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={data.chartData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis 
                  dataKey="month" 
                  axisLine={false}
                  tickLine={false}
                  tick={{ fontSize: 12 }}
                />
                <YAxis 
                  axisLine={false}
                  tickLine={false}
                  tick={{ fontSize: 12 }}
                  tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}
                />
                <Tooltip
                  formatter={(value: number) => [formatCurrency(value), 'Revenue']}
                  labelFormatter={(label) => `Month: ${label}`}
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
                  }}
                />
                <Line
                  type="monotone"
                  dataKey="revenue"
                  stroke="#10b981"
                  strokeWidth={2}
                  dot={{ fill: '#10b981', strokeWidth: 2, r: 4 }}
                  activeDot={{ r: 6, stroke: '#10b981', strokeWidth: 2 }}
                />
                <Line
                  type="monotone"
                  dataKey="target"
                  stroke="#6b7280"
                  strokeWidth={2}
                  strokeDasharray="5 5"
                  dot={{ fill: '#6b7280', strokeWidth: 2, r: 4 }}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        )}

        {/* Quick Actions */}
        <div className="flex items-center justify-between pt-2">
          <div className="flex items-center space-x-2">
            <Badge variant="outline" className="text-xs">
              {targetProgress >= 100 ? 'Target Met' : 'In Progress'}
            </Badge>
          </div>
          <Button variant="ghost" size="sm">
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </div>
      </CardContent>
    </DashboardWidget>
  );
});

RevenueWidget.displayName = 'RevenueWidget';

export default RevenueWidget;


=== FILE: client/src/components/ai/InsightCards.tsx ===

import { AlertTriangle, Lightbulb, TrendingUp, AlertCircle } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

interface Insight {
  type: 'warning' | 'recommendation' | 'opportunity' | 'risk';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
}

interface InsightCardsProps {
  insights: Insight[];
}

export function InsightCards({ insights }: InsightCardsProps) {
  if (!insights || insights.length === 0) return null;

  return (
    <div className="space-y-3">
      <p className="text-sm font-semibold text-gray-700">AI Insights</p>
      <div className="grid gap-3">
        {insights.map((insight, index) => (
          <InsightCard key={index} insight={insight} />
        ))}
      </div>
    </div>
  );
}

function InsightCard({ insight }: { insight: Insight }) {
  const config = getInsightConfig(insight.type);
  const priorityColor = getPriorityColor(insight.priority);

  return (
    <Card className={`p-4 border-l-4 ${config.borderColor}`}>
      <div className="flex items-start gap-3">
        <div className={`p-2 rounded-lg ${config.bgColor} flex-shrink-0`}>
          {config.icon}
        </div>
        <div className="flex-1 min-w-0">
          <div className="flex items-center gap-2 mb-1">
            <h4 className="font-semibold text-sm">{insight.title}</h4>
            <Badge variant="outline" className={`text-xs ${priorityColor}`}>
              {insight.priority}
            </Badge>
          </div>
          <p className="text-sm text-gray-600 mb-2">{insight.description}</p>
          {insight.actionable && (
            <Badge variant="secondary" className="text-xs">
              Actionable
            </Badge>
          )}
        </div>
      </div>
    </Card>
  );
}

function getInsightConfig(type: string) {
  const configs = {
    warning: {
      icon: <AlertTriangle className="w-4 h-4 text-orange-600" />,
      bgColor: 'bg-orange-100',
      borderColor: 'border-orange-500'
    },
    recommendation: {
      icon: <Lightbulb className="w-4 h-4 text-blue-600" />,
      bgColor: 'bg-blue-100',
      borderColor: 'border-blue-500'
    },
    opportunity: {
      icon: <TrendingUp className="w-4 h-4 text-green-600" />,
      bgColor: 'bg-green-100',
      borderColor: 'border-green-500'
    },
    risk: {
      icon: <AlertCircle className="w-4 h-4 text-red-600" />,
      bgColor: 'bg-red-100',
      borderColor: 'border-red-500'
    }
  };

  return configs[type as keyof typeof configs] || configs.recommendation;
}

function getPriorityColor(priority: string) {
  const colors = {
    low: 'text-gray-600 border-gray-300',
    medium: 'text-orange-600 border-orange-300',
    high: 'text-red-600 border-red-300'
  };

  return colors[priority as keyof typeof colors] || colors.medium;
}

=== FILE: client/src/components/ai/ChatInterface.tsx ===

import { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, Loader2, Sparkles } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useAgentChat } from '@/hooks/ai/useAgentChat';
import { useAuth } from '@/hooks/use-auth';
import { InsightCards } from './InsightCards';
import { SmartSuggestions } from './SmartSuggestions';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  insights?: any[];
  suggestions?: string[];
}

export function ChatInterface() {
  const { user } = useAuth();
  const [input, setInput] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const {
    messages,
    isLoading,
    sendMessage,
    clearHistory
  } = useAgentChat();

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSend = async () => {
    if (!input.trim() || isLoading) return;

    const message = input;
    setInput('');
    await sendMessage(message);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInput(suggestion);
  };

  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b bg-gradient-to-r from-purple-50 to-teal-50">
        <div className="flex items-center gap-3">
          <div className="p-2 bg-gradient-to-r from-purple-500 to-teal-500 rounded-lg">
            <Bot className="w-5 h-5 text-white" />
          </div>
          <div>
            <h2 className="font-semibold text-lg">AI Assistant</h2>
            <p className="text-sm text-gray-600">
              Your intelligent {user?.userType} advisor
            </p>
          </div>
        </div>
        <Button
          variant="ghost"
          size="sm"
          onClick={clearHistory}
        >
          Clear History
        </Button>
      </div>

      {/* Messages */}
      <ScrollArea className="flex-1 p-4">
        <div className="space-y-4 max-w-4xl mx-auto">
          {messages.length === 0 && (
            <div className="text-center py-12">
              <div className="inline-flex p-4 bg-gradient-to-r from-purple-100 to-teal-100 rounded-full mb-4">
                <Sparkles className="w-8 h-8 text-purple-600" />
              </div>
              <h3 className="text-lg font-semibold mb-2">
                Welcome to your AI Assistant!
              </h3>
              <p className="text-gray-600 mb-6">
                Ask me anything about your {user?.userType} journey
              </p>
              <SmartSuggestions onSuggestionClick={handleSuggestionClick} />
            </div>
          )}

          {messages.map((message) => (
            <div key={message.id}>
              <MessageBubble message={message} />
              {message.insights && message.insights.length > 0 && (
                <div className="mt-4">
                  <InsightCards insights={message.insights} />
                </div>
              )}
            </div>
          ))}

          {isLoading && (
            <div className="flex items-center gap-2 text-gray-500">
              <Loader2 className="w-4 h-4 animate-spin" />
              <span className="text-sm">AI is thinking...</span>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>
      </ScrollArea>

      {/* Input */}
      <div className="border-t p-4 bg-white">
        <div className="max-w-4xl mx-auto">
          <div className="flex gap-2">
            <Input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Ask your AI assistant..."
              disabled={isLoading}
              className="flex-1"
            />
            <Button
              onClick={handleSend}
              disabled={!input.trim() || isLoading}
              className="bg-gradient-to-r from-purple-500 to-teal-500 hover:from-purple-600 hover:to-teal-600"
            >
              {isLoading ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <Send className="w-4 h-4" />
              )}
            </Button>
          </div>
          <p className="text-xs text-gray-500 mt-2">
            Press Enter to send, Shift+Enter for new line
          </p>
        </div>
      </div>
    </div>
  );
}

function MessageBubble({ message }: { message: Message }) {
  const isUser = message.role === 'user';

  return (
    <div className={`flex gap-3 ${isUser ? 'flex-row-reverse' : ''}`}>
      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
        isUser
          ? 'bg-purple-500'
          : 'bg-gradient-to-r from-purple-500 to-teal-500'
      }`}>
        {isUser ? (
          <User className="w-4 h-4 text-white" />
        ) : (
          <Bot className="w-4 h-4 text-white" />
        )}
      </div>

      <div className={`flex-1 ${isUser ? 'flex justify-end' : ''}`}>
        <Card className={`p-4 max-w-2xl ${
          isUser
            ? 'bg-purple-50 border-purple-200'
            : 'bg-white'
        }`}>
          <div className="prose prose-sm max-w-none">
            {message.content.split('\n').map((line, i) => (
              <p key={i} className="mb-2 last:mb-0">
                {line}
              </p>
            ))}
          </div>

          {message.suggestions && message.suggestions.length > 0 && (
            <div className="mt-3 pt-3 border-t border-gray-200">
              <p className="text-xs font-semibold text-gray-700 mb-2">
                Suggested next steps:
              </p>
              <div className="flex flex-wrap gap-2">
                {message.suggestions.map((suggestion, i) => (
                  <Badge key={i} variant="secondary" className="text-xs">
                    {suggestion}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          <div className="text-xs text-gray-500 mt-2">
            {new Date(message.timestamp).toLocaleTimeString()}
          </div>
        </Card>
      </div>
    </div>
  );
}

=== FILE: client/src/components/ai/CoAgentInterface.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import { 
  Heart, 
  Brain, 
  Users, 
  MessageSquare, 
  TrendingUp, 
  Target,
  Clock,
  Star,
  Zap,
  Shield
} from 'lucide-react';

interface CoAgentInterfaceProps {
  agentType: 'CO_FOUNDER' | 'CO_INVESTOR' | 'CO_BUILDER';
  agentName: string;
  agentDescription: string;
  personalityTraits: {
    warmth: number;
    expertise: number;
    directness: number;
    creativity: number;
  };
  relationshipMetrics: {
    trust: number;
    communication: number;
    collaboration: number;
    satisfaction: number;
  };
  conversationModes: string[];
  capabilities: string[];
  onSendMessage: (message: string, mode?: string) => void;
  onSwitchMode: (mode: string) => void;
  messages: Array<{
    id: string;
    content: string;
    sender: 'user' | 'agent';
    timestamp: Date;
    mode?: string;
  }>;
  isTyping: boolean;
  currentMode: string;
}

export const CoAgentInterface: React.FC<CoAgentInterfaceProps> = ({
  agentType,
  agentName,
  agentDescription,
  personalityTraits,
  relationshipMetrics,
  conversationModes,
  capabilities,
  onSendMessage,
  onSwitchMode,
  messages,
  isTyping,
  currentMode
}) => {
  const [inputMessage, setInputMessage] = useState('');
  const [selectedMode, setSelectedMode] = useState(currentMode);

  const getAgentIcon = () => {
    switch (agentType) {
      case 'CO_FOUNDER':
        return <Target className="h-6 w-6" />;
      case 'CO_INVESTOR':
        return <TrendingUp className="h-6 w-6" />;
      case 'CO_BUILDER':
        return <Users className="h-6 w-6" />;
      default:
        return <Brain className="h-6 w-6" />;
    }
  };

  const getAgentColor = () => {
    switch (agentType) {
      case 'CO_FOUNDER':
        return 'bg-blue-500';
      case 'CO_INVESTOR':
        return 'bg-green-500';
      case 'CO_BUILDER':
        return 'bg-purple-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getPersonalityDescription = () => {
    const traits = [];
    if (personalityTraits.warmth > 0.7) traits.push('Warm & Supportive');
    if (personalityTraits.expertise > 0.7) traits.push('Highly Expert');
    if (personalityTraits.directness > 0.7) traits.push('Direct & Clear');
    if (personalityTraits.creativity > 0.7) traits.push('Creative & Innovative');
    return traits.join(', ');
  };

  const handleSendMessage = () => {
    if (inputMessage.trim()) {
      onSendMessage(inputMessage, selectedMode);
      setInputMessage('');
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const getModeIcon = (mode: string) => {
    switch (mode.toLowerCase()) {
      case 'strategic':
        return <Target className="h-4 w-4" />;
      case 'daily':
        return <Clock className="h-4 w-4" />;
      case 'crisis':
        return <Shield className="h-4 w-4" />;
      case 'brainstorming':
        return <Zap className="h-4 w-4" />;
      default:
        return <MessageSquare className="h-4 w-4" />;
    }
  };

  return (
    <div className="flex h-full">
      {/* Left Sidebar - Agent Profile & Controls */}
      <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
        {/* Agent Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3 mb-4">
            <Avatar className="h-12 w-12">
              <AvatarImage src={`/avatars/${agentType.toLowerCase()}.png`} />
              <AvatarFallback className={getAgentColor()}>
                {getAgentIcon()}
              </AvatarFallback>
            </Avatar>
            <div>
              <h2 className="text-lg font-semibold text-gray-900">{agentName}</h2>
              <p className="text-sm text-gray-600">{agentDescription}</p>
            </div>
          </div>
          
          <div className="space-y-3">
            <div>
              <div className="flex justify-between text-sm mb-1">
                <span className="text-gray-600">Personality</span>
                <span className="text-gray-900">{getPersonalityDescription()}</span>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-3">
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">
                  {Math.round(relationshipMetrics.trust * 100)}
                </div>
                <div className="text-xs text-gray-600">Trust</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">
                  {Math.round(relationshipMetrics.satisfaction * 100)}
                </div>
                <div className="text-xs text-gray-600">Satisfaction</div>
              </div>
            </div>
          </div>
        </div>

        {/* Conversation Modes */}
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-sm font-medium text-gray-900 mb-3">Conversation Modes</h3>
          <div className="space-y-2">
            {conversationModes.map((mode) => (
              <Button
                key={mode}
                variant={selectedMode === mode ? "default" : "outline"}
                size="sm"
                className="w-full justify-start"
                onClick={() => {
                  setSelectedMode(mode);
                  onSwitchMode(mode);
                }}
              >
                {getModeIcon(mode)}
                <span className="ml-2 capitalize">{mode}</span>
              </Button>
            ))}
          </div>
        </div>

        {/* Capabilities */}
        <div className="p-4 flex-1">
          <h3 className="text-sm font-medium text-gray-900 mb-3">Capabilities</h3>
          <div className="space-y-2">
            {capabilities.map((capability) => (
              <Badge key={capability} variant="secondary" className="w-full justify-start">
                {capability}
              </Badge>
            ))}
          </div>
        </div>

        {/* Relationship Metrics */}
        <div className="p-4 border-t border-gray-200">
          <h3 className="text-sm font-medium text-gray-900 mb-3">Relationship Health</h3>
          <div className="space-y-3">
            <div>
              <div className="flex justify-between text-xs mb-1">
                <span>Communication</span>
                <span>{Math.round(relationshipMetrics.communication * 100)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${relationshipMetrics.communication * 100}%` }}
                />
              </div>
            </div>
            <div>
              <div className="flex justify-between text-xs mb-1">
                <span>Collaboration</span>
                <span>{Math.round(relationshipMetrics.collaboration * 100)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-green-500 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${relationshipMetrics.collaboration * 100}%` }}
                />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Chat Header */}
        <div className="p-4 border-b border-gray-200 bg-gray-50">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className={`p-2 rounded-full ${getAgentColor()} text-white`}>
                {getAgentIcon()}
              </div>
              <div>
                <h3 className="font-medium text-gray-900">{agentName}</h3>
                <p className="text-sm text-gray-600">
                  {selectedMode} Mode ‚Ä¢ {messages.length} messages
                </p>
              </div>
            </div>
            <Badge variant="outline" className="flex items-center space-x-1">
              <Star className="h-3 w-3" />
              <span>Partnership Agent</span>
            </Badge>
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                  message.sender === 'user'
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100 text-gray-900'
                }`}
              >
                <div className="flex items-center space-x-2 mb-1">
                  {message.sender === 'agent' && (
                    <div className={`p-1 rounded-full ${getAgentColor()} text-white`}>
                      {getAgentIcon()}
                    </div>
                  )}
                  {message.mode && (
                    <Badge variant="outline" className="text-xs">
                      {message.mode}
                    </Badge>
                  )}
                </div>
                <p className="text-sm">{message.content}</p>
                <p className="text-xs opacity-70 mt-1">
                  {message.timestamp.toLocaleTimeString()}
                </p>
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-gray-100 rounded-lg px-4 py-2">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Message Input */}
        <div className="p-4 border-t border-gray-200">
          <div className="flex space-x-2">
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={`Message ${agentName}...`}
              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isTyping}
              className="px-4"
            >
              <MessageSquare className="h-4 w-4" />
            </Button>
          </div>
          <div className="mt-2 text-xs text-gray-500">
            Press Enter to send, Shift+Enter for new line
          </div>
        </div>
      </div>
    </div>
  );
};


=== FILE: client/src/components/ai/CreditScoringErrorBoundary.tsx ===

import React, { Component, ErrorInfo, ReactNode } from 'react';
import { AlertTriangle, RefreshCw, FileText, Mail } from 'lucide-react';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
}

/**
 * Error boundary specifically designed for credit scoring components
 */
export class CreditScoringErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null
    };
  }

  static getDerivedStateFromError(error: Error): State {
    return {
      hasError: true,
      error,
      errorInfo: null
    };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    this.setState({
      error,
      errorInfo
    });

    // Log error to monitoring service
    this.logErrorToService(error, errorInfo);
  }

  private logErrorToService(error: Error, errorInfo: ErrorInfo) {
    // In production, this would send to your error monitoring service
    console.error('Credit Scoring Error:', {
      error: error.message,
      stack: error.stack,
      componentStack: errorInfo.componentStack,
      timestamp: new Date().toISOString(),
      userAgent: navigator.userAgent,
      url: window.location.href
    });
  }

  private handleRetry = () => {
    this.setState({
      hasError: false,
      error: null,
      errorInfo: null
    });
  };

  private handleReportError = () => {
    const { error, errorInfo } = this.state;
    const errorReport = {
      message: error?.message,
      stack: error?.stack,
      componentStack: errorInfo?.componentStack,
      timestamp: new Date().toISOString(),
      url: window.location.href
    };

    // Create mailto link with error details
    const subject = encodeURIComponent('Credit Scoring System Error Report');
    const body = encodeURIComponent(`
Error Report:
${JSON.stringify(errorReport, null, 2)}

Please describe what you were doing when this error occurred:
[User description here]
    `);
    
    window.open(`mailto:support@example.com?subject=${subject}&body=${body}`);
  };

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return (
        <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-6 flex items-center justify-center">
          <div className="max-w-2xl w-full">
            <div className="bg-white rounded-xl shadow-2xl p-8">
              <div className="text-center mb-6">
                <div className="mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
                  <AlertTriangle className="text-red-600" size={32} />
                </div>
                <h1 className="text-2xl font-bold text-slate-800 mb-2">
                  Credit Scoring System Error
                </h1>
                <p className="text-slate-600">
                  We encountered an unexpected error while processing your request.
                </p>
              </div>

              <div className="bg-slate-50 rounded-lg p-4 mb-6">
                <h3 className="font-semibold text-slate-800 mb-2">Error Details:</h3>
                <p className="text-sm text-slate-600 font-mono bg-white p-3 rounded border">
                  {this.state.error?.message || 'Unknown error occurred'}
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <button
                  onClick={this.handleRetry}
                  className="flex items-center justify-center gap-2 bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition font-semibold"
                >
                  <RefreshCw size={20} />
                  Try Again
                </button>
                
                <button
                  onClick={() => window.location.reload()}
                  className="flex items-center justify-center gap-2 bg-slate-600 text-white px-4 py-3 rounded-lg hover:bg-slate-700 transition font-semibold"
                >
                  <RefreshCw size={20} />
                  Reload Page
                </button>
                
                <button
                  onClick={this.handleReportError}
                  className="flex items-center justify-center gap-2 bg-orange-600 text-white px-4 py-3 rounded-lg hover:bg-orange-700 transition font-semibold"
                >
                  <Mail size={20} />
                  Report Error
                </button>
              </div>

              <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                <h4 className="font-semibold text-blue-800 mb-2">Troubleshooting Tips:</h4>
                <ul className="text-sm text-blue-700 space-y-1">
                  <li>‚Ä¢ Check your internet connection</li>
                  <li>‚Ä¢ Clear your browser cache and cookies</li>
                  <li>‚Ä¢ Try using a different browser</li>
                  <li>‚Ä¢ Ensure all required fields are filled correctly</li>
                  <li>‚Ä¢ Contact support if the problem persists</li>
                </ul>
              </div>

              {process.env.NODE_ENV === 'development' && this.state.errorInfo && (
                <details className="mt-6">
                  <summary className="cursor-pointer font-semibold text-slate-700">
                    Developer Details (Development Mode)
                  </summary>
                  <div className="mt-2 p-4 bg-gray-100 rounded-lg">
                    <h4 className="font-semibold mb-2">Stack Trace:</h4>
                    <pre className="text-xs text-gray-700 overflow-auto">
                      {this.state.error?.stack}
                    </pre>
                    <h4 className="font-semibold mb-2 mt-4">Component Stack:</h4>
                    <pre className="text-xs text-gray-700 overflow-auto">
                      {this.state.errorInfo.componentStack}
                    </pre>
                  </div>
                </details>
              )}
            </div>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

/**
 * HOC for wrapping components with error boundary
 */
export function withErrorBoundary<T extends object>(
  Component: React.ComponentType<T>,
  fallback?: ReactNode
) {
  return function WrappedComponent(props: T) {
    return (
      <CreditScoringErrorBoundary fallback={fallback}>
        <Component {...props} />
      </CreditScoringErrorBoundary>
    );
  };
}

export default CreditScoringErrorBoundary;


=== FILE: client/src/components/ai/SmartSuggestions.tsx ===

import { Lightbulb, TrendingUp, FileText, DollarSign, Users, Target } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { useAuth } from '@/hooks/use-auth';

interface SmartSuggestionsProps {
  onSuggestionClick?: (suggestion: string) => void;
}

export function SmartSuggestions({ onSuggestionClick }: SmartSuggestionsProps) {
  const { user } = useAuth();

  const suggestions = getSuggestionsForUserType(user?.userType || 'entrepreneur');

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
      {suggestions.map((suggestion, index) => (
        <Card
          key={index}
          className="p-4 hover:shadow-md transition-shadow cursor-pointer border-2 hover:border-purple-300"
          onClick={() => onSuggestionClick?.(suggestion.prompt)}
        >
          <div className="flex items-start gap-3">
            <div className={`p-2 rounded-lg ${suggestion.color}`}>
              {suggestion.icon}
            </div>
            <div className="flex-1">
              <h4 className="font-semibold text-sm mb-1">{suggestion.title}</h4>
              <p className="text-xs text-gray-600">{suggestion.description}</p>
            </div>
          </div>
        </Card>
      ))}
    </div>
  );
}

function getSuggestionsForUserType(userType: string) {
  const suggestionMap: Record<string, any[]> = {
    entrepreneur: [
      {
        icon: <FileText className="w-4 h-4 text-purple-600" />,
        color: 'bg-purple-100',
        title: 'Review Business Plan',
        description: 'Get AI feedback on your business plan',
        prompt: 'Can you review my business plan and provide feedback?'
      },
      {
        icon: <DollarSign className="w-4 h-4 text-green-600" />,
        color: 'bg-green-100',
        title: 'Calculate Runway',
        description: 'Analyze your cash runway',
        prompt: 'Calculate my runway based on current burn rate'
      },
      {
        icon: <TrendingUp className="w-4 h-4 text-blue-600" />,
        color: 'bg-blue-100',
        title: 'Growth Strategy',
        description: 'Get strategic growth advice',
        prompt: 'What growth strategies should I focus on?'
      },
      {
        icon: <Target className="w-4 h-4 text-orange-600" />,
        color: 'bg-orange-100',
        title: 'Market Analysis',
        description: 'Analyze your target market',
        prompt: 'Help me analyze my target market and competition'
      }
    ],
    investor: [
      {
        icon: <FileText className="w-4 h-4 text-purple-600" />,
        color: 'bg-purple-100',
        title: 'Evaluate Deal',
        description: 'Analyze investment opportunity',
        prompt: 'Help me evaluate this investment deal'
      },
      {
        icon: <DollarSign className="w-4 h-4 text-green-600" />,
        color: 'bg-green-100',
        title: 'Valuation Analysis',
        description: 'Check valuation metrics',
        prompt: 'Analyze the valuation of this company'
      },
      {
        icon: <TrendingUp className="w-4 h-4 text-blue-600" />,
        color: 'bg-blue-100',
        title: 'Portfolio Review',
        description: 'Review portfolio performance',
        prompt: 'Review my investment portfolio'
      },
      {
        icon: <Target className="w-4 h-4 text-red-600" />,
        color: 'bg-red-100',
        title: 'Risk Assessment',
        description: 'Identify investment risks',
        prompt: 'What are the key risks in this investment?'
      }
    ],
    lender: [
      {
        icon: <FileText className="w-4 h-4 text-purple-600" />,
        color: 'bg-purple-100',
        title: 'Credit Assessment',
        description: 'Evaluate creditworthiness',
        prompt: 'Assess the credit risk of this application'
      },
      {
        icon: <DollarSign className="w-4 h-4 text-green-600" />,
        color: 'bg-green-100',
        title: 'Cash Flow Analysis',
        description: 'Analyze cash flows',
        prompt: 'Analyze the cash flow and DSCR'
      },
      {
        icon: <TrendingUp className="w-4 h-4 text-blue-600" />,
        color: 'bg-blue-100',
        title: 'Portfolio Risk',
        description: 'Review loan portfolio',
        prompt: 'Review my loan portfolio risk exposure'
      },
      {
        icon: <Target className="w-4 h-4 text-orange-600" />,
        color: 'bg-orange-100',
        title: 'Collateral Evaluation',
        description: 'Assess collateral value',
        prompt: 'Evaluate the collateral for this loan'
      }
    ],
    grantor: [
      {
        icon: <FileText className="w-4 h-4 text-purple-600" />,
        color: 'bg-purple-100',
        title: 'Impact Evaluation',
        description: 'Assess social impact',
        prompt: 'Evaluate the impact potential of this grant application'
      },
      {
        icon: <Lightbulb className="w-4 h-4 text-yellow-600" />,
        color: 'bg-yellow-100',
        title: 'ESG Analysis',
        description: 'Review sustainability',
        prompt: 'Analyze the ESG score of this program'
      },
      {
        icon: <TrendingUp className="w-4 h-4 text-green-600" />,
        color: 'bg-green-100',
        title: 'Outcome Prediction',
        description: 'Forecast program outcomes',
        prompt: 'Predict the outcomes of this grant program'
      },
      {
        icon: <Users className="w-4 h-4 text-blue-600" />,
        color: 'bg-blue-100',
        title: 'Beneficiary Impact',
        description: 'Assess reach and impact',
        prompt: 'How many people will this program impact?'
      }
    ],
    partner: [
      {
        icon: <Users className="w-4 h-4 text-purple-600" />,
        color: 'bg-purple-100',
        title: 'Startup Matching',
        description: 'Find compatible startups',
        prompt: 'Find startups that match our program criteria'
      },
      {
        icon: <Target className="w-4 h-4 text-blue-600" />,
        color: 'bg-blue-100',
        title: 'Program Optimization',
        description: 'Improve program performance',
        prompt: 'How can we optimize our partnership program?'
      },
      {
        icon: <TrendingUp className="w-4 h-4 text-green-600" />,
        color: 'bg-green-100',
        title: 'Success Prediction',
        description: 'Forecast partnership success',
        prompt: 'What is the success probability of this partnership?'
      },
      {
        icon: <Lightbulb className="w-4 h-4 text-orange-600" />,
        color: 'bg-orange-100',
        title: 'Resource Allocation',
        description: 'Optimize resource use',
        prompt: 'How should we allocate our partnership resources?'
      }
    ]
  };

  return suggestionMap[userType] || suggestionMap.entrepreneur;
}

=== FILE: client/src/components/ai/AICreditScoring.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Brain, 
  TrendingUp, 
  TrendingDown, 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  Target,
  BarChart,
  PieChart,
  LineChart,
  Zap,
  Star,
  Award,
  Clock,
  DollarSign,
  CreditCard,
  Wallet,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  Info,
  Lightbulb,
  Settings,
  Download,
  RefreshCw,
  Eye,
  Lock,
  ExternalLink
} from "lucide-react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

interface AICreditScore {
  overallScore: number;
  scoreRange: string;
  confidence: number;
  riskLevel: 'low' | 'medium' | 'high' | 'very_high';
  factors: {
    paymentHistory: number;
    creditUtilization: number;
    creditHistory: number;
    creditMix: number;
    newCredit: number;
    alternativeData: number;
    behavioralData: number;
    economicFactors: number;
  };
  recommendations: string[];
  nextSteps: string[];
  modelVersion: string;
  lastUpdated: string;
}

interface RiskPrediction {
  defaultProbability: number;
  riskLevel: 'very_low' | 'low' | 'medium' | 'high' | 'very_high';
  riskScore: number;
  confidence: number;
  timeHorizon: number;
  keyRiskFactors: string[];
  riskMitigationStrategies: string[];
  monitoringRecommendations: string[];
  modelVersion: string;
  lastUpdated: string;
}

export default function AICreditScoring() {
  const [selectedTab, setSelectedTab] = useState("overview");
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  // Mock data for demonstration
  const mockAIScore: AICreditScore = {
    overallScore: 823,
    scoreRange: "Exceptional",
    confidence: 0.94,
    riskLevel: "low",
    factors: {
      paymentHistory: 95,
      creditUtilization: 88,
      creditHistory: 82,
      creditMix: 75,
      newCredit: 90,
      alternativeData: 85,
      behavioralData: 78,
      economicFactors: 72
    },
    recommendations: [
      "Maintain your excellent payment history",
      "Keep credit utilization below 10%",
      "Consider diversifying your credit mix",
      "Monitor your credit reports regularly",
      "Continue building positive credit history"
    ],
    nextSteps: [
      "Apply for premium credit products",
      "Consider investment opportunities",
      "Help others improve their credit",
      "Review financial goals quarterly",
      "Stay informed about credit best practices"
    ],
    modelVersion: "AI-Credit-Scorer-v2.1",
    lastUpdated: "2024-01-15"
  };

  const mockRiskPrediction: RiskPrediction = {
    defaultProbability: 0.08,
    riskLevel: "low",
    riskScore: 15,
    confidence: 0.91,
    timeHorizon: 36,
    keyRiskFactors: [
      "High credit utilization on one account",
      "Recent credit inquiry",
      "Economic uncertainty"
    ],
    riskMitigationStrategies: [
      "Pay down high-utilization credit cards",
      "Avoid new credit applications for 6 months",
      "Build emergency fund to 6 months expenses"
    ],
    monitoringRecommendations: [
      "Monitor credit score monthly",
      "Set up payment reminders",
      "Review spending patterns weekly"
    ],
    modelVersion: "Credit-Risk-Predictor-v2.0",
    lastUpdated: "2024-01-15"
  };

  // Fetch AI credit score
  const { data: aiScore, isLoading: scoreLoading } = useQuery<AICreditScore>({
    queryKey: ['ai-credit-score'],
    queryFn: async () => {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      return mockAIScore;
    }
  });

  // Fetch risk prediction
  const { data: riskPrediction, isLoading: riskLoading } = useQuery<RiskPrediction>({
    queryKey: ['risk-prediction'],
    queryFn: async () => {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      return mockRiskPrediction;
    }
  });

  const analyzeCreditMutation = useMutation({
    mutationFn: async () => {
      setIsAnalyzing(true);
      // Simulate analysis
      await new Promise(resolve => setTimeout(resolve, 3000));
      setIsAnalyzing(false);
    }
  });

  const getScoreColor = (score: number) => {
    if (score >= 800) return "text-purple-600";
    if (score >= 740) return "text-green-600";
    if (score >= 670) return "text-blue-600";
    if (score >= 580) return "text-yellow-600";
    return "text-red-600";
  };

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'very_low': return "text-green-600";
      case 'low': return "text-blue-600";
      case 'medium': return "text-yellow-600";
      case 'high': return "text-orange-600";
      case 'very_high': return "text-red-600";
      default: return "text-gray-600";
    }
  };

  const getRiskBadgeColor = (level: string) => {
    switch (level) {
      case 'very_low': return "bg-green-100 text-green-700";
      case 'low': return "bg-blue-100 text-blue-700";
      case 'medium': return "bg-yellow-100 text-yellow-700";
      case 'high': return "bg-orange-100 text-orange-700";
      case 'very_high': return "bg-red-100 text-red-700";
      default: return "bg-gray-100 text-gray-700";
    }
  };

  if (scoreLoading || riskLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-teal-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Analyzing your credit profile with AI...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-teal-50">
      <div className="container mx-auto px-4 py-8 max-w-7xl">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-600 to-teal-600 bg-clip-text text-transparent flex items-center gap-3">
                <Brain className="h-10 w-10 text-purple-600" />
                AI Credit Scoring
              </h1>
              <p className="text-xl text-gray-600 mt-2">
                Advanced AI-powered credit assessment and risk prediction
              </p>
            </div>
            <div className="flex items-center gap-3">
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => analyzeCreditMutation.mutate()}
                disabled={isAnalyzing}
              >
                {isAnalyzing ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <RefreshCw className="h-4 w-4 mr-2" />
                )}
                {isAnalyzing ? 'Analyzing...' : 'Refresh Analysis'}
              </Button>
              <Button variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Export Report
              </Button>
              <Button size="sm">
                <Settings className="h-4 w-4 mr-2" />
                Settings
              </Button>
            </div>
          </div>

          {/* Quick Stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <Card className="glass-card">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">AI Credit Score</p>
                    <p className={`text-2xl font-bold ${getScoreColor(aiScore?.overallScore || 0)}`}>
                      {aiScore?.overallScore || 0}
                    </p>
                    <p className="text-xs text-gray-500">{aiScore?.scoreRange}</p>
                  </div>
                  <div className="p-2 bg-purple-100 rounded-lg">
                    <Brain className="h-6 w-6 text-purple-600" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="glass-card">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Default Risk</p>
                    <p className="text-2xl font-bold text-green-600">
                      {((riskPrediction?.defaultProbability || 0) * 100).toFixed(1)}%
                    </p>
                    <p className="text-xs text-gray-500">Low Risk</p>
                  </div>
                  <div className="p-2 bg-green-100 rounded-lg">
                    <Shield className="h-6 w-6 text-green-600" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="glass-card">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Confidence</p>
                    <p className="text-2xl font-bold text-blue-600">
                      {((aiScore?.confidence || 0) * 100).toFixed(0)}%
                    </p>
                    <p className="text-xs text-gray-500">High Confidence</p>
                  </div>
                  <div className="p-2 bg-blue-100 rounded-lg">
                    <Target className="h-6 w-6 text-blue-600" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="glass-card">
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Model Version</p>
                    <p className="text-lg font-bold text-teal-600">
                      v2.1
                    </p>
                    <p className="text-xs text-gray-500">Latest AI Model</p>
                  </div>
                  <div className="p-2 bg-teal-100 rounded-lg">
                    <Award className="h-6 w-6 text-teal-600" />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Main Content Tabs */}
        <Tabs value={selectedTab} onValueChange={setSelectedTab} className="space-y-6">
          <TabsList className="grid grid-cols-4 bg-white/70 backdrop-blur-sm">
            <TabsTrigger value="overview" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
              Overview
            </TabsTrigger>
            <TabsTrigger value="factors" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
              Score Factors
            </TabsTrigger>
            <TabsTrigger value="risk" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
              Risk Analysis
            </TabsTrigger>
            <TabsTrigger value="recommendations" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
              Recommendations
            </TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* AI Credit Score Overview */}
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Brain className="h-5 w-5 text-purple-600" />
                    AI Credit Score Analysis
                  </CardTitle>
                  <CardDescription>
                    Advanced AI-powered credit assessment using 50+ data points
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-center mb-6">
                    <div className="relative w-48 h-48 mx-auto mb-4">
                      <svg viewBox="0 0 200 200" className="w-full h-full">
                        <circle
                          cx="100"
                          cy="100"
                          r="80"
                          fill="none"
                          stroke="#e5e7eb"
                          strokeWidth="12"
                        />
                        <circle
                          cx="100"
                          cy="100"
                          r="80"
                          fill="none"
                          stroke="url(#gradient)"
                          strokeWidth="12"
                          strokeDasharray={`${(aiScore?.overallScore || 0) * 2.51} 502`}
                          strokeDashoffset="125.6"
                          strokeLinecap="round"
                          transform="rotate(-90 100 100)"
                        />
                        <defs>
                          <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
                            <stop offset="0%" stopColor="#8b5cf6" />
                            <stop offset="100%" stopColor="#06b6d4" />
                          </linearGradient>
                        </defs>
                        <text
                          x="100"
                          y="100"
                          textAnchor="middle"
                          dominantBaseline="middle"
                          className="text-3xl font-bold fill-gray-800"
                        >
                          {aiScore?.overallScore}
                        </text>
                        <text
                          x="100"
                          y="120"
                          textAnchor="middle"
                          className="text-sm fill-gray-600"
                        >
                          {aiScore?.scoreRange}
                        </text>
                      </svg>
                    </div>
                    <div className="flex items-center justify-center gap-2 mb-2">
                      <Badge className="bg-green-100 text-green-700">
                        <CheckCircle className="h-3 w-3 mr-1" />
                        Excellent
                      </Badge>
                      <Badge className="bg-blue-100 text-blue-700">
                        <Target className="h-3 w-3 mr-1" />
                        {((aiScore?.confidence || 0) * 100).toFixed(0)}% Confidence
                      </Badge>
                    </div>
                    <p className="text-sm text-gray-600">
                      Your AI-enhanced credit score is in the exceptional range
                    </p>
                  </div>

                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Model Version</span>
                      <Badge variant="outline">{aiScore?.modelVersion}</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Last Updated</span>
                      <span className="text-sm text-gray-600">{aiScore?.lastUpdated}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Data Points Analyzed</span>
                      <span className="text-sm text-gray-600">50+ factors</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Risk Prediction Overview */}
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Shield className="h-5 w-5 text-green-600" />
                    Risk Prediction
                  </CardTitle>
                  <CardDescription>
                    AI-powered default risk assessment
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-center mb-6">
                    <div className="text-4xl font-bold text-green-600 mb-2">
                      {((riskPrediction?.defaultProbability || 0) * 100).toFixed(1)}%
                    </div>
                    <Badge className={`${getRiskBadgeColor(riskPrediction?.riskLevel || 'low')} mb-2`}>
                      {riskPrediction?.riskLevel?.toUpperCase().replace('_', ' ')} RISK
                    </Badge>
                    <p className="text-sm text-gray-600">
                      Default probability over next {riskPrediction?.timeHorizon} months
                    </p>
                  </div>

                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Risk Score</span>
                      <span className="text-sm font-bold text-green-600">
                        {riskPrediction?.riskScore}/100
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Confidence</span>
                      <span className="text-sm text-gray-600">
                        {((riskPrediction?.confidence || 0) * 100).toFixed(0)}%
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Time Horizon</span>
                      <span className="text-sm text-gray-600">
                        {riskPrediction?.timeHorizon} months
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Key Insights */}
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Lightbulb className="h-5 w-5 text-yellow-600" />
                  Key Insights
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                    <div className="flex items-center gap-2 mb-2">
                      <CheckCircle className="h-5 w-5 text-green-600" />
                      <h4 className="font-semibold text-green-800">Excellent Credit Health</h4>
                    </div>
                    <p className="text-sm text-green-700">
                      Your AI credit score of {aiScore?.overallScore} places you in the top 20% of credit scores nationwide.
                    </p>
                  </div>
                  
                  <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <div className="flex items-center gap-2 mb-2">
                      <Shield className="h-5 w-5 text-blue-600" />
                      <h4 className="font-semibold text-blue-800">Low Default Risk</h4>
                    </div>
                    <p className="text-sm text-blue-700">
                      Your default probability of {((riskPrediction?.defaultProbability || 0) * 100).toFixed(1)}% is well below the average.
                    </p>
                  </div>
                  
                  <div className="p-4 bg-purple-50 rounded-lg border border-purple-200">
                    <div className="flex items-center gap-2 mb-2">
                      <Brain className="h-5 w-5 text-purple-600" />
                      <h4 className="font-semibold text-purple-800">AI-Enhanced Analysis</h4>
                    </div>
                    <p className="text-sm text-purple-700">
                      Our AI model analyzed 50+ factors including alternative data and behavioral patterns.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Score Factors Tab */}
          <TabsContent value="factors" className="space-y-6">
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart className="h-5 w-5 text-blue-600" />
                  Credit Score Factors
                </CardTitle>
                <CardDescription>
                  Detailed breakdown of how your AI credit score was calculated
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {/* Traditional Factors */}
                  <div>
                    <h4 className="text-lg font-semibold mb-4 text-gray-800">Traditional Credit Factors (70%)</h4>
                    <div className="space-y-4">
                      {[
                        { name: "Payment History", score: aiScore?.factors.paymentHistory || 0, weight: 35, description: "On-time payment record" },
                        { name: "Credit Utilization", score: aiScore?.factors.creditUtilization || 0, weight: 30, description: "Amount of credit used vs. available" },
                        { name: "Credit History", score: aiScore?.factors.creditHistory || 0, weight: 15, description: "Length of credit history" },
                        { name: "Credit Mix", score: aiScore?.factors.creditMix || 0, weight: 10, description: "Variety of credit types" },
                        { name: "New Credit", score: aiScore?.factors.newCredit || 0, weight: 10, description: "Recent credit applications" }
                      ].map((factor, index) => (
                        <div key={index} className="space-y-2">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <span className="font-medium">{factor.name}</span>
                              <Badge variant="outline" className="text-xs">
                                {factor.weight}% weight
                              </Badge>
                            </div>
                            <span className="font-semibold text-lg">
                              {factor.score}/100
                            </span>
                          </div>
                          <p className="text-sm text-gray-600">{factor.description}</p>
                          <Progress value={factor.score} className="h-2" />
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* AI-Enhanced Factors */}
                  <div>
                    <h4 className="text-lg font-semibold mb-4 text-gray-800">AI-Enhanced Factors (30%)</h4>
                    <div className="space-y-4">
                      {[
                        { name: "Alternative Data", score: aiScore?.factors.alternativeData || 0, weight: 20, description: "Income patterns, spending behavior, digital footprint" },
                        { name: "Behavioral Data", score: aiScore?.factors.behavioralData || 0, weight: 10, description: "Financial habits and decision patterns" }
                      ].map((factor, index) => (
                        <div key={index} className="space-y-2">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <span className="font-medium">{factor.name}</span>
                              <Badge variant="outline" className="text-xs">
                                {factor.weight}% weight
                              </Badge>
                            </div>
                            <span className="font-semibold text-lg">
                              {factor.score}/100
                            </span>
                          </div>
                          <p className="text-sm text-gray-600">{factor.description}</p>
                          <Progress value={factor.score} className="h-2" />
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Risk Analysis Tab */}
          <TabsContent value="risk" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Risk Factors */}
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <AlertTriangle className="h-5 w-5 text-orange-600" />
                    Key Risk Factors
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {riskPrediction?.keyRiskFactors.map((factor, index) => (
                      <div key={index} className="flex items-start gap-3 p-3 bg-orange-50 rounded-lg border border-orange-200">
                        <AlertTriangle className="h-4 w-4 text-orange-600 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-orange-800">{factor}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Risk Mitigation Strategies */}
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Shield className="h-5 w-5 text-green-600" />
                    Risk Mitigation Strategies
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {riskPrediction?.riskMitigationStrategies.map((strategy, index) => (
                      <div key={index} className="flex items-start gap-3 p-3 bg-green-50 rounded-lg border border-green-200">
                        <CheckCircle className="h-4 w-4 text-green-600 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-green-800">{strategy}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Monitoring Recommendations */}
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Eye className="h-5 w-5 text-blue-600" />
                  Monitoring Recommendations
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {riskPrediction?.monitoringRecommendations.map((rec, index) => (
                    <div key={index} className="flex items-start gap-3 p-3 bg-blue-50 rounded-lg border border-blue-200">
                      <Clock className="h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0" />
                      <div>
                        <p className="text-sm font-medium text-blue-800">{rec}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Recommendations Tab */}
          <TabsContent value="recommendations" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* AI Recommendations */}
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Lightbulb className="h-5 w-5 text-yellow-600" />
                    AI Recommendations
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {aiScore?.recommendations.map((rec, index) => (
                      <div key={index} className="flex items-start gap-3 p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                        <Lightbulb className="h-4 w-4 text-yellow-600 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-yellow-800">{rec}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Next Steps */}
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5 text-purple-600" />
                    Next Steps
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {aiScore?.nextSteps.map((step, index) => (
                      <div key={index} className="flex items-start gap-3 p-3 bg-purple-50 rounded-lg border border-purple-200">
                        <Target className="h-4 w-4 text-purple-600 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="text-sm font-medium text-purple-800">{step}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Action Buttons */}
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Zap className="h-5 w-5 text-blue-600" />
                  Take Action
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <Button className="w-full" variant="outline">
                    <ExternalLink className="h-4 w-4 mr-2" />
                    Apply for Credit
                  </Button>
                  <Button className="w-full" variant="outline">
                    <Download className="h-4 w-4 mr-2" />
                    Download Report
                  </Button>
                  <Button className="w-full" variant="outline">
                    <Settings className="h-4 w-4 mr-2" />
                    Set Goals
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}


=== FILE: client/src/components/ai/EnhancedCreditScoringMain.tsx ===

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, LineChart, Line, ScatterChart, Scatter, ZAxis, ComposedChart, Area, PieChart, Pie, Cell, Treemap, Sankey } from 'recharts';
import { TrendingUp, TrendingDown, AlertCircle, CheckCircle, Building2, DollarSign, Calendar, Users, Shield, Database, Cpu, FileText, Eye, Activity, Download, Upload, RefreshCw, Filter, Search, BarChart3, PieChart as PieChartIcon, Settings, Info, ChevronDown, ChevronUp, X, Plus, Zap, Brain, Target, Star, Award, Clock, Globe, Lock, Unlock, Lightbulb, Rocket, Bell, Hash, Gauge } from 'lucide-react';

// Import the enhanced scoring engine
import EnhancedCreditScorer from './EnhancedCreditScoring';

interface Business {
  id: number;
  companyName: string;
  ein: string;
  industry: string;
  finalScore: number;
  defaultProbability: number;
  confidence: number;
  assessmentDate: string;
  decision: any;
  requestedAmount: string;
  components: any;
  modelVersion: string;
  status: string;
  processingTime?: number;
  riskFactors?: any[];
  strengths?: any[];
  metrics?: any;
}

interface PortfolioMetrics {
  avgScore: number;
  totalApplications: number;
  totalExposure: number;
  avgDefaultProb: string;
  ratingDistribution: Record<string, number>;
  decisionDistribution: Record<string, number>;
  approvalRate: string;
  avgConfidence: string;
  processingTime: string;
  modelAccuracy: string;
}

interface AlertConfig {
  enabled: boolean;
  scoreThreshold: number;
  riskThreshold: number;
  volumeThreshold: number;
}

const EnhancedCreditScoringMain = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [selectedBusiness, setSelectedBusiness] = useState<Business | null>(null);
  const [businesses, setBusinesses] = useState<Business[]>([]);
  const [portfolioMetrics, setPortfolioMetrics] = useState<PortfolioMetrics | null>(null);
  const [showExportModal, setShowExportModal] = useState(false);
  const [showCompareModal, setShowCompareModal] = useState(false);
  const [showAlertsModal, setShowAlertsModal] = useState(false);
  const [compareBusinesses, setCompareBusinesses] = useState<Business[]>([]);
  const [filterCriteria, setFilterCriteria] = useState({ 
    minScore: 0, 
    maxScore: 850, 
    industry: 'all', 
    decision: 'all',
    dateRange: '30d'
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [realTimeAlerts, setRealTimeAlerts] = useState<any[]>([]);
  const [alertConfig, setAlertConfig] = useState<AlertConfig>({
    enabled: true,
    scoreThreshold: 600,
    riskThreshold: 0.25,
    volumeThreshold: 10
  });
  const [isCalculating, setIsCalculating] = useState(false);
  const [showStressTesting, setShowStressTesting] = useState(false);

  const [formData, setFormData] = useState({
    companyName: '',
    ein: '',
    industry: 'technology',
    yearsInBusiness: '',
    employeeCount: '',
    annualRevenue: '',
    totalDebt: '',
    currentAssets: '',
    currentLiabilities: '',
    accountsReceivable: '',
    accountsPayable: '',
    cashBalance: '',
    avgDailyBalance3mo: '',
    overdrafts12mo: '0',
    nsfIncidents: '0',
    depositConsistency: '85',
    personalFicoScore: '',
    businessCreditScore: '',
    paymentHistoryScore: '90',
    creditUtilization: '30',
    hardInquiries: '1',
    derogatoryMarks: '0',
    monthlyTraffic: '',
    socialFollowers: '',
    onlineReviewScore: '4.2',
    customerCount: '',
    customerRetention: '85',
    churnRate: '15',
    ltvCacRatio: '3.5',
    revenueGrowthRate: '',
    requestedAmount: '',
    requestedTerm: '36',
    loanPurpose: 'working_capital'
  });

  // Enhanced validation with more comprehensive checks
  const validateForm = useCallback(() => {
    const errors: Record<string, string> = {};
    
    if (!formData.companyName.trim()) errors.companyName = 'Company name is required';
    if (!formData.yearsInBusiness || parseFloat(formData.yearsInBusiness) < 0) {
      errors.yearsInBusiness = 'Valid years required';
    }
    if (!formData.employeeCount || parseFloat(formData.employeeCount) < 0) {
      errors.employeeCount = 'Valid employee count required';
    }
    if (!formData.annualRevenue || parseFloat(formData.annualRevenue) <= 0) {
      errors.annualRevenue = 'Valid revenue required';
    }
    if (!formData.currentAssets || parseFloat(formData.currentAssets) < 0) {
      errors.currentAssets = 'Valid assets required';
    }
    if (!formData.currentLiabilities || parseFloat(formData.currentLiabilities) < 0) {
      errors.currentLiabilities = 'Valid liabilities required';
    }
    if (!formData.totalDebt || parseFloat(formData.totalDebt) < 0) {
      errors.totalDebt = 'Valid debt amount required';
    }
    if (!formData.cashBalance || parseFloat(formData.cashBalance) < 0) {
      errors.cashBalance = 'Valid cash balance required';
    }
    if (!formData.avgDailyBalance3mo || parseFloat(formData.avgDailyBalance3mo) < 0) {
      errors.avgDailyBalance3mo = 'Valid balance required';
    }
    if (!formData.personalFicoScore || parseFloat(formData.personalFicoScore) < 300 || parseFloat(formData.personalFicoScore) > 850) {
      errors.personalFicoScore = 'FICO score must be between 300-850';
    }
    if (!formData.requestedAmount || parseFloat(formData.requestedAmount) <= 0) {
      errors.requestedAmount = 'Valid loan amount required';
    }
    
    // Business logic validations
    const revenue = parseFloat(formData.annualRevenue) || 0;
    const requested = parseFloat(formData.requestedAmount) || 0;
    if (requested > revenue * 2) {
      errors.requestedAmount = 'Requested amount exceeds 2x annual revenue';
    }
    
    const assets = parseFloat(formData.currentAssets) || 0;
    const liabilities = parseFloat(formData.currentLiabilities) || 0;
    if (assets < liabilities * 0.5) {
      errors.currentAssets = 'Assets seem low relative to liabilities';
    }
    
    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  }, [formData]);

  // Enhanced scoring with the new algorithm
  const calculateScore = useCallback(async (data: any) => {
    setIsCalculating(true);
    
    try {
      // Simulate API delay for better UX
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const scoreResult = EnhancedCreditScorer.calculateAdvancedScore(data);
      return scoreResult;
    } finally {
      setIsCalculating(false);
    }
  }, []);

  const getCreditRating = useCallback((score: number) => {
    if (score >= 800) return { rating: 'A+', color: 'text-emerald-600', bg: 'bg-emerald-100', risk: 'Minimal Risk', riskLevel: 1 };
    if (score >= 750) return { rating: 'A', color: 'text-green-600', bg: 'bg-green-100', risk: 'Very Low Risk', riskLevel: 2 };
    if (score >= 700) return { rating: 'B+', color: 'text-blue-600', bg: 'bg-blue-100', risk: 'Low Risk', riskLevel: 3 };
    if (score >= 650) return { rating: 'B', color: 'text-cyan-600', bg: 'bg-cyan-100', risk: 'Moderate Risk', riskLevel: 4 };
    if (score >= 600) return { rating: 'C+', color: 'text-yellow-600', bg: 'bg-yellow-100', risk: 'Medium Risk', riskLevel: 5 };
    if (score >= 550) return { rating: 'C', color: 'text-orange-600', bg: 'bg-orange-100', risk: 'High Risk', riskLevel: 6 };
    if (score >= 500) return { rating: 'D', color: 'text-red-600', bg: 'bg-red-100', risk: 'Very High Risk', riskLevel: 7 };
    return { rating: 'F', color: 'text-red-800', bg: 'bg-red-200', risk: 'Extremely High Risk', riskLevel: 8 };
  }, []);

  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear validation error for this field
    if (validationErrors[name]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  }, [validationErrors]);

  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      // Show toast notification instead of alert
      return;
    }
    
    setIsCalculating(true);
    
    try {
      const scoreResult = await calculateScore(formData);
      
      const newBusiness: Business = {
        id: Date.now(),
        ...formData,
        ...scoreResult,
        assessmentDate: new Date().toISOString().split('T')[0],
        status: 'active'
      };
      
      setBusinesses(prev => [newBusiness, ...prev]);
      setSelectedBusiness(newBusiness);
      updatePortfolioMetrics([newBusiness, ...businesses]);
      
      // Check for alerts
      checkForAlerts(newBusiness);
      
      setActiveTab('results');
    } catch (error) {
      console.error('Error calculating score:', error);
    }
  }, [formData, validateForm, calculateScore, businesses]);

  const updatePortfolioMetrics = useCallback((allBusinesses: Business[]) => {
    if (allBusinesses.length === 0) return;
    
    const avgScore = allBusinesses.reduce((sum, b) => sum + b.finalScore, 0) / allBusinesses.length;
    const totalExposure = allBusinesses.reduce((sum, b) => {
      const amt = parseFloat(b.requestedAmount) || 0;
      return sum + amt;
    }, 0);
    const avgDefaultProb = allBusinesses.reduce((sum, b) => sum + b.defaultProbability, 0) / allBusinesses.length;
    const avgProcessingTime = allBusinesses.reduce((sum, b) => sum + (b.processingTime || 0), 0) / allBusinesses.length;
    
    const ratingDist = allBusinesses.reduce((acc, b) => {
      const rating = getCreditRating(b.finalScore).rating;
      acc[rating] = (acc[rating] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    const decisionDist = allBusinesses.reduce((acc, b) => {
      acc[b.decision.decision] = (acc[b.decision.decision] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    setPortfolioMetrics({
      avgScore: Math.round(avgScore),
      totalApplications: allBusinesses.length,
      totalExposure,
      avgDefaultProb: (avgDefaultProb * 100).toFixed(2),
      ratingDistribution: ratingDist,
      decisionDistribution: decisionDist,
      approvalRate: (allBusinesses.filter(b => b.decision.decision === 'APPROVED').length / allBusinesses.length * 100).toFixed(1),
      avgConfidence: ((allBusinesses.reduce((sum, b) => sum + b.confidence, 0) / allBusinesses.length) * 100).toFixed(1),
      processingTime: avgProcessingTime.toFixed(1),
      modelAccuracy: '94.2' // This would come from model validation in production
    });
  }, [getCreditRating]);

  const checkForAlerts = useCallback((business: Business) => {
    const alerts: Array<{
      type: string;
      message: string;
      business: string;
      timestamp: string;
    }> = [];
    
    if (alertConfig.enabled) {
      if (business.finalScore < alertConfig.scoreThreshold) {
        alerts.push({
          type: 'warning',
          message: `Low credit score detected: ${business.finalScore}`,
          business: business.companyName,
          timestamp: new Date().toISOString()
        });
      }
      
      if (business.defaultProbability > alertConfig.riskThreshold) {
        alerts.push({
          type: 'danger',
          message: `High default risk: ${(business.defaultProbability * 100).toFixed(2)}%`,
          business: business.companyName,
          timestamp: new Date().toISOString()
        });
      }
    }
    
    if (alerts.length > 0) {
      setRealTimeAlerts(prev => [...alerts, ...prev].slice(0, 50)); // Keep last 50 alerts
    }
  }, [alertConfig]);

  const getFilteredBusinesses = useMemo(() => {
    return businesses.filter(b => {
      const matchesScore = b.finalScore >= filterCriteria.minScore && b.finalScore <= filterCriteria.maxScore;
      const matchesIndustry = filterCriteria.industry === 'all' || b.industry === filterCriteria.industry;
      const matchesDecision = filterCriteria.decision === 'all' || b.decision.decision === filterCriteria.decision;
      const matchesSearch = searchTerm === '' || 
        b.companyName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (b.ein && b.ein.includes(searchTerm));
      
      // Date range filter
      const businessDate = new Date(b.assessmentDate);
      const now = new Date();
      let dateMatch = true;
      
      if (filterCriteria.dateRange === '7d') {
        dateMatch = (now.getTime() - businessDate.getTime()) <= 7 * 24 * 60 * 60 * 1000;
      } else if (filterCriteria.dateRange === '30d') {
        dateMatch = (now.getTime() - businessDate.getTime()) <= 30 * 24 * 60 * 60 * 1000;
      }
      
      return matchesScore && matchesIndustry && matchesDecision && matchesSearch && dateMatch;
    });
  }, [businesses, filterCriteria, searchTerm]);

  const exportData = useCallback((format: string) => {
    const filteredData = getFilteredBusinesses;
    
    if (format === 'json') {
      const dataStr = JSON.stringify(filteredData, null, 2);
      const blob = new Blob([dataStr], { type: 'application/json' });
      downloadFile(blob, 'credit_assessments.json');
    } else if (format === 'csv') {
      const headers = ['Company', 'EIN', 'Score', 'Rating', 'Default Prob', 'Decision', 'Approved Amount', 'Interest Rate', 'Date', 'Processing Time'];
      const rows = filteredData.map(b => [
        b.companyName,
        b.ein || 'N/A',
        b.finalScore,
        getCreditRating(b.finalScore).rating,
        (b.defaultProbability * 100).toFixed(2) + '%',
        b.decision.decision,
        b.decision.approvedAmount || 0,
        b.decision.interestRate || 'N/A',
        b.assessmentDate,
        b.processingTime?.toFixed(1) + 'ms' || 'N/A'
      ]);
      
      const csvContent = [headers.join(','), ...rows.map(r => r.join(','))].join('\n');
      const blob = new Blob([csvContent], { type: 'text/csv' });
      downloadFile(blob, 'credit_assessments.csv');
    }
    
    setShowExportModal(false);
  }, [getFilteredBusinesses, getCreditRating]);

  const downloadFile = useCallback((blob: Blob, filename: string) => {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, []);

  const toggleCompareSelection = useCallback((business: Business) => {
    setCompareBusinesses(prev => {
      const existing = prev.find(b => b.id === business.id);
      if (existing) {
        return prev.filter(b => b.id !== business.id);
      } else if (prev.length < 3) {
        return [...prev, business];
      }
      return prev;
    });
  }, []);

  // Sample data initialization
  useEffect(() => {
    const sampleBusinesses: Business[] = [
      {
        id: 1,
        companyName: 'TechVenture Solutions LLC',
        ein: '12-3456789',
        industry: 'technology',
        finalScore: 782,
        defaultProbability: 0.08,
        confidence: 0.95,
        assessmentDate: '2025-10-01',
        decision: { decision: 'APPROVED', approvedAmount: 500000, interestRate: 7.2, monthlyPayment: 15234.56 },
        requestedAmount: '500000',
        components: { creditScore: 85, financialHealth: 88, bankingBehavior: 92, businessStability: 78, alternativeData: 75, marketConditions: 80, industryRisk: 90 },
        modelVersion: 'v4.0.0-enhanced',
        status: 'active',
        processingTime: 247.5
      },
      {
        id: 2,
        companyName: 'Retail Dynamics Inc',
        ein: '98-7654321',
        industry: 'retail',
        finalScore: 668,
        defaultProbability: 0.22,
        confidence: 0.88,
        assessmentDate: '2025-09-28',
        decision: { decision: 'CONDITIONAL_APPROVAL', approvedAmount: 187500, interestRate: 11.8, monthlyPayment: 6123.45 },
        requestedAmount: '250000',
        components: { creditScore: 72, financialHealth: 65, bankingBehavior: 68, businessStability: 70, alternativeData: 60, marketConditions: 75, industryRisk: 60 },
        modelVersion: 'v4.0.0-enhanced',
        status: 'active',
        processingTime: 189.3
      }
    ];
    
    setBusinesses(sampleBusinesses);
    updatePortfolioMetrics(sampleBusinesses);
  }, [updatePortfolioMetrics]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Enhanced Header with Real-time Status */}
        <div className="bg-gradient-to-r from-blue-600 to-blue-800 rounded-xl shadow-2xl p-8 mb-6">
          <div className="flex items-center justify-between flex-wrap gap-4">
            <div>
              <h1 className="text-4xl font-bold text-white flex items-center gap-3">
                <Shield className="text-blue-200" size={40} />
                Enterprise Credit Scoring Platform
                <span className="text-sm bg-green-500 text-white px-2 py-1 rounded-full ml-2">v4.0</span>
              </h1>
              <p className="text-blue-100 mt-2 text-lg">Advanced AI-Powered Risk Assessment & Decision Engine</p>
            </div>
            <div className="flex gap-3 items-center">
              {realTimeAlerts.length > 0 && (
                <button
                  onClick={() => setShowAlertsModal(true)}
                  className="bg-red-500 text-white px-4 py-2 rounded-lg font-semibold hover:bg-red-600 transition flex items-center gap-2 relative"
                >
                  <Bell size={20} />
                  Alerts
                  <span className="absolute -top-2 -right-2 bg-red-700 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center">
                    {realTimeAlerts.length}
                  </span>
                </button>
              )}
              <button
                onClick={() => setShowExportModal(true)}
                className="bg-white text-blue-600 px-4 py-2 rounded-lg font-semibold hover:bg-blue-50 transition flex items-center gap-2"
              >
                <Download size={20} />
                Export
              </button>
              <div className="text-right bg-white bg-opacity-10 backdrop-blur-lg rounded-lg px-4 py-2">
                <div className="text-sm text-blue-200">Model Version</div>
                <div className="text-xl font-bold text-white">v4.0.0</div>
                <div className="text-xs text-blue-200">Enhanced</div>
              </div>
            </div>
          </div>
        </div>

        {/* Enhanced Portfolio Metrics with Performance Indicators */}
        {portfolioMetrics && (
          <div className="grid grid-cols-1 md:grid-cols-6 gap-4 mb-6">
            <div className="bg-white rounded-lg shadow-lg p-4 hover:shadow-xl transition">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-600 text-sm font-semibold">Avg Score</p>
                  <p className="text-3xl font-bold text-slate-800 mt-1">{portfolioMetrics.avgScore}</p>
                  <p className="text-xs text-green-600">‚Üë 2.3% vs last week</p>
                </div>
                <Gauge className="text-blue-500" size={32} />
              </div>
            </div>
            <div className="bg-white rounded-lg shadow-lg p-4 hover:shadow-xl transition">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-600 text-sm font-semibold">Applications</p>
                  <p className="text-3xl font-bold text-slate-800 mt-1">{portfolioMetrics.totalApplications}</p>
                  <p className="text-xs text-blue-600">Processing: {portfolioMetrics.processingTime}ms avg</p>
                </div>
                <FileText className="text-green-500" size={32} />
              </div>
            </div>
            <div className="bg-white rounded-lg shadow-lg p-4 hover:shadow-xl transition">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-600 text-sm font-semibold">Approval Rate</p>
                  <p className="text-3xl font-bold text-slate-800 mt-1">{portfolioMetrics.approvalRate}%</p>
                  <p className="text-xs text-green-600">Target: 65-75%</p>
                </div>
                <CheckCircle className="text-emerald-500" size={32} />
              </div>
            </div>
            <div className="bg-white rounded-lg shadow-lg p-4 hover:shadow-xl transition">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-600 text-sm font-semibold">Avg Risk</p>
                  <p className="text-3xl font-bold text-slate-800 mt-1">{portfolioMetrics.avgDefaultProb}%</p>
                  <p className="text-xs text-orange-600">Model Accuracy: {portfolioMetrics.modelAccuracy}%</p>
                </div>
                <AlertCircle className="text-orange-500" size={32} />
              </div>
            </div>
            <div className="bg-white rounded-lg shadow-lg p-4 hover:shadow-xl transition">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-600 text-sm font-semibold">Total Exposure</p>
                  <p className="text-2xl font-bold text-slate-800 mt-1">${(portfolioMetrics.totalExposure / 1000000).toFixed(1)}M</p>
                  <p className="text-xs text-purple-600">Concentration risk: Low</p>
                </div>
                <DollarSign className="text-purple-500" size={32} />
              </div>
            </div>
            <div className="bg-white rounded-lg shadow-lg p-4 hover:shadow-xl transition">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-600 text-sm font-semibold">AI Confidence</p>
                  <p className="text-3xl font-bold text-slate-800 mt-1">{portfolioMetrics.avgConfidence}%</p>
                  <p className="text-xs text-indigo-600">Model drift: Stable</p>
                </div>
                <Brain className="text-indigo-500" size={32} />
              </div>
            </div>
          </div>
        )}

        {/* Enhanced Navigation with Indicators */}
        <div className="bg-white rounded-xl shadow-lg mb-6">
          <div className="flex border-b overflow-x-auto">
            {[
              { id: 'dashboard', label: 'Dashboard', icon: Activity },
              { id: 'assess', label: 'Assess', icon: Cpu },
              { id: 'results', label: 'Results', icon: Eye, disabled: !selectedBusiness },
              { id: 'analytics', label: 'Analytics', icon: BarChart3 },
              { id: 'compare', label: 'Compare', icon: Target },
              { id: 'monitoring', label: 'Monitoring', icon: Bell }
            ].map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  disabled={tab.disabled}
                  className={`px-6 py-4 font-semibold transition whitespace-nowrap flex items-center gap-2 ${
                    activeTab === tab.id
                      ? 'border-b-2 border-blue-600 text-blue-600'
                      : 'text-slate-600 hover:text-slate-800 disabled:text-slate-400 disabled:cursor-not-allowed'
                  }`}
                >
                  <Icon size={20} />
                  {tab.label}
                  {tab.id === 'compare' && compareBusinesses.length > 0 && (
                    <span className="bg-blue-100 text-blue-600 text-xs rounded-full px-2 py-1 min-w-[20px] h-5 flex items-center justify-center">
                      {compareBusinesses.length}
                    </span>
                  )}
                </button>
              );
            })}
          </div>
        </div>

        {/* Content will be rendered based on activeTab */}
        {/* Dashboard Tab with enhanced features */}
        {activeTab === 'dashboard' && (
          <div className="space-y-6">
            {/* Enhanced Filters and Search */}
            <div className="bg-white rounded-xl shadow-lg p-4">
              <div className="flex flex-wrap gap-4 items-center">
                <div className="flex-1 min-w-[200px]">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400" size={20} />
                    <input
                      type="text"
                      placeholder="Search by company, EIN, or industry..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>
                <select
                  value={filterCriteria.industry}
                  onChange={(e) => setFilterCriteria({...filterCriteria, industry: e.target.value})}
                  className="px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Industries</option>
                  <option value="technology">Technology</option>
                  <option value="retail">Retail</option>
                  <option value="construction">Construction</option>
                  <option value="healthcare">Healthcare</option>
                  <option value="manufacturing">Manufacturing</option>
                  <option value="professional_services">Professional Services</option>
                </select>
                <select
                  value={filterCriteria.decision}
                  onChange={(e) => setFilterCriteria({...filterCriteria, decision: e.target.value})}
                  className="px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Decisions</option>
                  <option value="APPROVED">Approved</option>
                  <option value="CONDITIONAL_APPROVAL">Conditional</option>
                  <option value="MANUAL_REVIEW">Manual Review</option>
                  <option value="DECLINED">Declined</option>
                </select>
                <select
                  value={filterCriteria.dateRange}
                  onChange={(e) => setFilterCriteria({...filterCriteria, dateRange: e.target.value})}
                  className="px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                >
                  <option value="7d">Last 7 days</option>
                  <option value="30d">Last 30 days</option>
                  <option value="90d">Last 90 days</option>
                  <option value="all">All time</option>
                </select>
                <button
                  onClick={() => setFilterCriteria({ minScore: 0, maxScore: 850, industry: 'all', decision: 'all', dateRange: '30d' })}
                  className="px-4 py-2 bg-slate-100 text-slate-700 rounded-lg hover:bg-slate-200 transition flex items-center gap-2"
                >
                  <RefreshCw size={16} />
                  Reset
                </button>
              </div>
            </div>

            {/* Enhanced Analytics Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
              {/* Score Distribution with Risk Heatmap */}
              <div className="bg-white rounded-xl shadow-lg p-6 col-span-1 lg:col-span-2">
                <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                  <BarChart3 className="text-blue-600" size={24} />
                  Score Distribution & Risk Analysis
                </h3>
                <ResponsiveContainer width="100%" height={300}>
                  <ComposedChart data={getFilteredBusinesses.map(b => ({ 
                    name: b.companyName.substring(0, 15), 
                    score: b.finalScore, 
                    risk: b.defaultProbability * 100,
                    confidence: b.confidence * 100
                  }))}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" angle={-45} textAnchor="end" height={100} fontSize={12} />
                    <YAxis yAxisId="left" domain={[300, 850]} />
                    <YAxis yAxisId="right" orientation="right" domain={[0, 50]} />
                    <Tooltip />
                    <Legend />
                    <Bar yAxisId="left" dataKey="score" fill="#3b82f6" name="Credit Score" />
                    <Line yAxisId="right" type="monotone" dataKey="risk" stroke="#f59e0b" strokeWidth={3} name="Default Risk %" />
                    <Area yAxisId="right" type="monotone" dataKey="confidence" fill="#10b981" fillOpacity={0.3} name="AI Confidence %" />
                  </ComposedChart>
                </ResponsiveContainer>
              </div>

              {/* Real-time Processing Metrics */}
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                  <Activity className="text-green-600" size={24} />
                  Real-time Metrics
                </h3>
                <div className="space-y-4">
                  <div className="border-l-4 border-blue-500 pl-4">
                    <p className="text-slate-600 text-sm font-semibold">Avg Processing Time</p>
                    <p className="text-3xl font-bold text-slate-800">{portfolioMetrics?.processingTime}ms</p>
                    <p className="text-xs text-green-600">‚Üì 15% vs yesterday</p>
                  </div>
                  <div className="border-l-4 border-green-500 pl-4">
                    <p className="text-slate-600 text-sm font-semibold">Model Accuracy</p>
                    <p className="text-3xl font-bold text-slate-800">{portfolioMetrics?.modelAccuracy}%</p>
                    <p className="text-xs text-blue-600">Target: &gt;90%</p>
                  </div>
                  <div className="border-l-4 border-purple-500 pl-4">
                    <p className="text-slate-600 text-sm font-semibold">System Uptime</p>
                    <p className="text-3xl font-bold text-slate-800">99.9%</p>
                    <p className="text-xs text-green-600">Last 30 days</p>
                  </div>
                  <div className="border-l-4 border-orange-500 pl-4">
                    <p className="text-slate-600 text-sm font-semibold">Active Alerts</p>
                    <p className="text-3xl font-bold text-slate-800">{realTimeAlerts.length}</p>
                    <p className="text-xs text-orange-600">Requires attention</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Enhanced Business Portfolio Table */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-bold text-slate-800 flex items-center gap-2">
                  <Database className="text-blue-600" size={24} />
                  Assessment Portfolio ({getFilteredBusinesses.length})
                </h2>
                <div className="flex gap-2">
                  <button
                    onClick={() => setShowStressTesting(true)}
                    className="px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition flex items-center gap-2"
                  >
                    <Zap size={16} />
                    Stress Test
                  </button>
                  <button
                    onClick={() => setShowCompareModal(true)}
                    disabled={compareBusinesses.length < 2}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition disabled:bg-slate-300 disabled:cursor-not-allowed flex items-center gap-2"
                  >
                    <BarChart3 size={16} />
                    Compare ({compareBusinesses.length})
                  </button>
                </div>
              </div>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b-2">
                      <th className="text-left py-3 px-4 text-slate-700 font-bold">
                        <input type="checkbox" className="mr-2" disabled />
                      </th>
                      <th className="text-left py-3 px-4 text-slate-700 font-bold">Company</th>
                      <th className="text-left py-3 px-4 text-slate-700 font-bold">Industry</th>
                      <th className="text-left py-3 px-4 text-slate-700 font-bold">Score</th>
                      <th className="text-left py-3 px-4 text-slate-700 font-bold">Rating</th>
                      <th className="text-left py-3 px-4 text-slate-700 font-bold">Risk</th>
                      <th className="text-left py-3 px-4 text-slate-700 font-bold">Decision</th>
                      <th className="text-left py-3 px-4 text-slate-700 font-bold">Approved</th>
                      <th className="text-left py-3 px-4 text-slate-700 font-bold">Confidence</th>
                      <th className="text-left py-3 px-4 text-slate-700 font-bold">Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    {getFilteredBusinesses.map((business) => {
                      const rating = getCreditRating(business.finalScore);
                      const isSelected = compareBusinesses.find(b => b.id === business.id);
                      return (
                        <tr key={business.id} className={`border-b hover:bg-slate-50 ${isSelected ? 'bg-blue-50' : ''}`}>
                          <td className="py-3 px-4">
                            <input
                              type="checkbox"
                              checked={!!isSelected}
                              onChange={() => toggleCompareSelection(business)}
                              disabled={!isSelected && compareBusinesses.length >= 3}
                              className="cursor-pointer"
                            />
                          </td>
                          <td className="py-3 px-4">
                            <div className="font-semibold text-slate-800">{business.companyName}</div>
                            <div className="text-xs text-slate-500 font-mono">{business.ein || 'N/A'}</div>
                          </td>
                          <td className="py-3 px-4 text-slate-600 capitalize">{business.industry}</td>
                          <td className="py-3 px-4">
                            <span className="text-2xl font-bold text-slate-800">{business.finalScore}</span>
                          </td>
                          <td className="py-3 px-4">
                            <span className={`px-3 py-1 rounded-full text-sm font-bold ${rating.bg} ${rating.color}`}>
                              {rating.rating}
                            </span>
                          </td>
                          <td className="py-3 px-4">
                            <div className="flex flex-col">
                              <span className="font-semibold">{(business.defaultProbability * 100).toFixed(2)}%</span>
                              <div className="w-full bg-gray-200 rounded-full h-1.5 mt-1">
                                <div 
                                  className={`h-1.5 rounded-full ${business.defaultProbability > 0.3 ? 'bg-red-600' : business.defaultProbability > 0.15 ? 'bg-yellow-600' : 'bg-green-600'}`}
                                  style={{width: `${Math.min(business.defaultProbability * 100 * 2, 100)}%`}}
                                ></div>
                              </div>
                            </div>
                          </td>
                          <td className="py-3 px-4">
                            <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                              business.decision.decision === 'APPROVED' ? 'bg-green-100 text-green-700' :
                              business.decision.decision === 'CONDITIONAL_APPROVAL' ? 'bg-yellow-100 text-yellow-700' :
                              business.decision.decision === 'MANUAL_REVIEW' ? 'bg-blue-100 text-blue-700' :
                              'bg-red-100 text-red-700'
                            }`}>
                              {business.decision.decision === 'APPROVED' ? 'APR' :
                               business.decision.decision === 'CONDITIONAL_APPROVAL' ? 'COND' :
                               business.decision.decision === 'MANUAL_REVIEW' ? 'REV' : 'DEC'}
                            </span>
                          </td>
                          <td className="py-3 px-4 font-semibold text-slate-800">
                            ${(business.decision.approvedAmount || 0).toLocaleString()}
                          </td>
                          <td className="py-3 px-4">
                            <div className="flex items-center gap-1">
                              <span className="text-sm font-semibold">{(business.confidence * 100).toFixed(0)}%</span>
                              <div className="w-8 bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-blue-600 h-2 rounded-full"
                                  style={{width: `${business.confidence * 100}%`}}
                                ></div>
                              </div>
                            </div>
                          </td>
                          <td className="py-3 px-4">
                            <button
                              onClick={() => {
                                setSelectedBusiness(business);
                                setActiveTab('results');
                              }}
                              className="text-blue-600 hover:text-blue-800 font-semibold flex items-center gap-1"
                            >
                              <Eye size={16} /> View
                            </button>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {/* Assessment Form Tab with enhanced validation */}
        {activeTab === 'assess' && (
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="flex items-center gap-3 mb-6">
              <Database className="text-blue-600" size={32} />
              <div>
                <h2 className="text-2xl font-bold text-slate-800">Enhanced Credit Assessment</h2>
                <p className="text-slate-600">AI-powered multi-factor risk evaluation with v4.0 enhanced scoring</p>
              </div>
              {isCalculating && (
                <div className="ml-auto flex items-center gap-2 bg-blue-100 text-blue-600 px-4 py-2 rounded-lg">
                  <RefreshCw className="animate-spin" size={20} />
                  Calculating...
                </div>
              )}
            </div>
            
            {Object.keys(validationErrors).length > 0 && (
              <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-6 rounded">
                <div className="flex items-center gap-2 mb-2">
                  <AlertCircle className="text-red-600" size={20} />
                  <h3 className="font-bold text-red-800">Please correct the following errors:</h3>
                </div>
                <ul className="list-disc list-inside text-red-700 text-sm">
                  {Object.entries(validationErrors).map(([field, error]) => (
                    <li key={field}>{error}</li>
                  ))}
                </ul>
              </div>
            )}
            
            <form onSubmit={handleSubmit} className="space-y-8">
              {/* Business Information Section - Enhanced */}
              <div>
                <h3 className="text-lg font-bold text-slate-700 mb-4 pb-2 border-b flex items-center gap-2">
                  <Building2 className="text-blue-600" size={20} />
                  1. Business Information
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="col-span-2">
                    <label className="block text-slate-700 font-semibold mb-2">Company Name *</label>
                    <input
                      type="text"
                      name="companyName"
                      value={formData.companyName}
                      onChange={handleInputChange}
                      className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition ${validationErrors.companyName ? 'border-red-500' : 'border-slate-300'}`}
                      required
                      disabled={isCalculating}
                    />
                    {validationErrors.companyName && <p className="text-red-600 text-sm mt-1">{validationErrors.companyName}</p>}
                  </div>
                  <div>
                    <label className="block text-slate-700 font-semibold mb-2">EIN</label>
                    <input
                      type="text"
                      name="ein"
                      value={formData.ein}
                      onChange={handleInputChange}
                      placeholder="XX-XXXXXXX"
                      className="w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition"
                      disabled={isCalculating}
                    />
                  </div>
                  <div>
                    <label className="block text-slate-700 font-semibold mb-2">Industry *</label>
                    <select
                      name="industry"
                      value={formData.industry}
                      onChange={handleInputChange}
                      className="w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition"
                      disabled={isCalculating}
                    >
                      <option value="technology">Technology</option>
                      <option value="healthcare">Healthcare</option>
                      <option value="manufacturing">Manufacturing</option>
                      <option value="retail">Retail</option>
                      <option value="hospitality">Hospitality</option>
                      <option value="construction">Construction</option>
                      <option value="professional_services">Professional Services</option>
                      <option value="financial_services">Financial Services</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-slate-700 font-semibold mb-2">Years in Business *</label>
                    <input
                      type="number"
                      name="yearsInBusiness"
                      value={formData.yearsInBusiness}
                      onChange={handleInputChange}
                      className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition ${validationErrors.yearsInBusiness ? 'border-red-500' : 'border-slate-300'}`}
                      required
                      min="0"
                      step="0.1"
                      disabled={isCalculating}
                    />
                    {validationErrors.yearsInBusiness && <p className="text-red-600 text-sm mt-1">{validationErrors.yearsInBusiness}</p>}
                  </div>
                  <div>
                    <label className="block text-slate-700 font-semibold mb-2">Employee Count *</label>
                    <input
                      type="number"
                      name="employeeCount"
                      value={formData.employeeCount}
                      onChange={handleInputChange}
                      className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition ${validationErrors.employeeCount ? 'border-red-500' : 'border-slate-300'}`}
                      required
                      min="0"
                      disabled={isCalculating}
                    />
                    {validationErrors.employeeCount && <p className="text-red-600 text-sm mt-1">{validationErrors.employeeCount}</p>}
                  </div>
                </div>
              </div>

              {/* Submit Button with Enhanced Loading State */}
              <button
                type="submit"
                disabled={isCalculating}
                className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-4 rounded-lg font-bold text-lg hover:from-blue-700 hover:to-blue-800 transition shadow-lg flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isCalculating ? (
                  <>
                    <RefreshCw className="animate-spin" size={24} />
                    Processing with AI v4.0...
                  </>
                ) : (
                  <>
                    <Brain size={24} />
                    Generate Enhanced AI Credit Score & Decision
                  </>
                )}
              </button>
            </form>
          </div>
        )}

        {/* Enhanced Results Tab */}
        {activeTab === 'results' && selectedBusiness && (
          <div className="space-y-6">
            {(() => {
              const rating = getCreditRating(selectedBusiness.finalScore);
              return (
                <>
                  {/* Enhanced Score Overview with Processing Info */}
                  <div className="bg-gradient-to-br from-blue-600 to-blue-800 rounded-xl shadow-2xl p-8 text-white relative overflow-hidden">
                    <div className="absolute top-0 right-0 bg-white bg-opacity-10 backdrop-blur-lg rounded-bl-xl px-4 py-2">
                      <div className="text-sm text-blue-100">Processing Time</div>
                      <div className="text-lg font-bold text-white">{selectedBusiness.processingTime?.toFixed(1)}ms</div>
                    </div>
                    <div className="text-center">
                      <h2 className="text-3xl font-bold mb-2">{selectedBusiness.companyName}</h2>
                      <p className="text-blue-100 mb-6 capitalize">
                        {selectedBusiness.industry} Industry ‚Ä¢ Assessment: {selectedBusiness.assessmentDate} ‚Ä¢ Model: {selectedBusiness.modelVersion}
                      </p>
                      <div className="inline-block bg-white bg-opacity-20 backdrop-blur-lg rounded-xl p-8">
                        <div className="text-7xl font-bold mb-3">{selectedBusiness.finalScore}</div>
                        <div className={`px-6 py-2 rounded-full text-xl font-bold ${rating.bg} ${rating.color} inline-block mb-3`}>
                          {rating.rating} - {rating.risk}
                        </div>
                        <div className="mt-4 text-blue-100 grid grid-cols-3 gap-4">
                          <div className="text-center">
                            <div className="text-sm">Default Risk</div>
                            <div className="text-2xl font-bold">{(selectedBusiness.defaultProbability * 100).toFixed(2)}%</div>
                          </div>
                          <div className="text-center">
                            <div className="text-sm">AI Confidence</div>
                            <div className="text-2xl font-bold">{(selectedBusiness.confidence * 100).toFixed(0)}%</div>
                          </div>
                          <div className="text-center">
                            <div className="text-sm">Risk Tier</div>
                            <div className="text-2xl font-bold">{selectedBusiness.decision.riskTier || 'N/A'}</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Enhanced Component Analysis with 7 Factors */}
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div className="bg-white rounded-xl shadow-lg p-6">
                      <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                        <Target className="text-blue-600" size={24} />
                        Enhanced Component Analysis (7 Factors)
                      </h3>
                      <ResponsiveContainer width="100%" height={350}>
                        <RadarChart data={[
                          { category: 'Credit', value: selectedBusiness.components.creditScore, fullMark: 100 },
                          { category: 'Financial', value: selectedBusiness.components.financialHealth, fullMark: 100 },
                          { category: 'Banking', value: selectedBusiness.components.bankingBehavior, fullMark: 100 },
                          { category: 'Stability', value: selectedBusiness.components.businessStability, fullMark: 100 },
                          { category: 'Alternative', value: selectedBusiness.components.alternativeData, fullMark: 100 },
                          { category: 'Market', value: selectedBusiness.components.marketConditions, fullMark: 100 },
                          { category: 'Industry', value: selectedBusiness.components.industryRisk, fullMark: 100 }
                        ]}>
                          <PolarGrid />
                          <PolarAngleAxis dataKey="category" />
                          <PolarRadiusAxis angle={90} domain={[0, 100]} />
                          <Radar name="Score" dataKey="value" stroke="#3b82f6" fill="#3b82f6" fillOpacity={0.6} />
                        </RadarChart>
                      </ResponsiveContainer>
                    </div>

                    <div className="bg-white rounded-xl shadow-lg p-6">
                      <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                        <BarChart3 className="text-green-600" size={24} />
                        Component Breakdown & Weights
                      </h3>
                      <div className="space-y-4">
                        {Object.entries(selectedBusiness.components).map(([key, value]) => {
                          const weights: Record<string, number> = {
                            creditScore: 20,
                            financialHealth: 25,
                            bankingBehavior: 18,
                            businessStability: 15,
                            alternativeData: 12,
                            marketConditions: 5,
                            industryRisk: 5
                          };
                          const weight = weights[key as keyof typeof weights] || 0;
                          const numericValue = Number(value);
                          return (
                            <div key={key}>
                              <div className="flex justify-between mb-2">
                                <span className="font-semibold text-slate-700 capitalize">
                                  {String(key).replace(/([A-Z])/g, ' $1')} ({weight}%)
                                </span>
                                <span className="font-bold text-slate-800">{numericValue}/100</span>
                              </div>
                              <div className="w-full bg-slate-200 rounded-full h-3 relative">
                                <div
                                  className={`h-3 rounded-full transition-all ${
                                    numericValue >= 80 ? 'bg-green-500' :
                                    numericValue >= 60 ? 'bg-blue-500' :
                                    numericValue >= 40 ? 'bg-yellow-500' : 'bg-red-500'
                                  }`}
                                  style={{ width: `${numericValue}%` }}
                                />
                                <div className="absolute inset-0 flex items-center justify-center">
                                  <span className="text-xs font-bold text-white drop-shadow">
                                    {numericValue}
                                  </span>
                                </div>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                </>
              );
            })()}
          </div>
        )}

        {/* Enhanced Analytics Tab */}
        {activeTab === 'analytics' && (
          <div className="space-y-6">
            {/* Advanced Portfolio Analytics */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                  <Activity className="text-blue-600" size={24} />
                  Portfolio Risk-Return Analysis
                </h3>
                <ResponsiveContainer width="100%" height={400}>
                  <ScatterChart>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" dataKey="score" name="Credit Score" domain={[300, 850]} label={{ value: 'Credit Score', position: 'bottom' }} />
                    <YAxis type="number" dataKey="risk" name="Default Risk %" domain={[0, 50]} label={{ value: 'Default Risk %', angle: -90, position: 'left' }} />
                    <ZAxis type="number" dataKey="amount" range={[50, 400]} />
                    <Tooltip cursor={{ strokeDasharray: '3 3' }} content={({ active, payload }) => {
                      if (active && payload && payload.length) {
                        return (
                          <div className="bg-white p-3 rounded shadow-lg border">
                            <p className="font-bold">{payload[0].payload.name}</p>
                            <p>Score: {payload[0].payload.score}</p>
                            <p>Risk: {payload[0].payload.risk.toFixed(2)}%</p>
                            <p>Amount: ${payload[0].payload.amount.toLocaleString()}</p>
                            <p>Confidence: {payload[0].payload.confidence.toFixed(1)}%</p>
                          </div>
                        );
                      }
                      return null;
                    }} />
                    <Scatter name="Businesses" data={businesses.map(b => ({
                      name: b.companyName,
                      score: b.finalScore,
                      risk: b.defaultProbability * 100,
                      amount: parseFloat(b.requestedAmount) || 0,
                      confidence: b.confidence * 100
                    }))} fill="#3b82f6" />
                  </ScatterChart>
                </ResponsiveContainer>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                  <PieChartIcon className="text-green-600" size={24} />
                  Industry Risk Distribution
                </h3>
                <ResponsiveContainer width="100%" height={400}>
                  <PieChart>
                    <Pie
                      data={Object.entries(
                        businesses.reduce((acc, b) => {
                          acc[b.industry] = (acc[b.industry] || 0) + 1;
                          return acc;
                        }, {} as Record<string, number>)
                      ).map(([industry, count]) => ({
                        name: industry,
                        value: count,
                        risk: businesses.filter(b => b.industry === industry)
                          .reduce((sum, b) => sum + b.defaultProbability, 0) / count * 100
                      }))}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({name, value, risk}) => `${name}: ${value} (${risk.toFixed(1)}%)`}
                      outerRadius={120}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {businesses.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'][index % 5]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* Model Performance Metrics */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <Brain className="text-purple-600" size={24} />
                Enhanced Model Performance Dashboard
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="border-l-4 border-blue-500 pl-4">
                  <p className="text-slate-600 text-sm font-semibold">Average Processing Time</p>
                  <p className="text-3xl font-bold text-slate-800">{portfolioMetrics?.processingTime}ms</p>
                  <p className="text-xs text-green-600">‚Üì 23% vs v3.0.1</p>
                </div>
                <div className="border-l-4 border-green-500 pl-4">
                  <p className="text-slate-600 text-sm font-semibold">Model Accuracy (AUC-ROC)</p>
                  <p className="text-3xl font-bold text-slate-800">0.942</p>
                  <p className="text-xs text-blue-600">Industry leading</p>
                </div>
                <div className="border-l-4 border-purple-500 pl-4">
                  <p className="text-slate-600 text-sm font-semibold">Precision @ 95% Recall</p>
                  <p className="text-3xl font-bold text-slate-800">87.3%</p>
                  <p className="text-xs text-green-600">‚Üë 4.2% vs baseline</p>
                </div>
                <div className="border-l-4 border-orange-500 pl-4">
                  <p className="text-slate-600 text-sm font-semibold">Model Drift Score</p>
                  <p className="text-3xl font-bold text-slate-800">0.02</p>
                  <p className="text-xs text-green-600">Stable (&lt; 0.05)</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Enhanced Monitoring Tab */}
        {activeTab === 'monitoring' && (
          <div className="space-y-6">
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold text-slate-800 flex items-center gap-2">
                  <Bell className="text-red-600" size={24} />
                  Real-time Monitoring & Alerts
                </h2>
                <button
                  onClick={() => setShowAlertsModal(true)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition flex items-center gap-2"
                >
                  <Settings size={16} />
                  Configure Alerts
                </button>
              </div>
              
              {realTimeAlerts.length === 0 ? (
                <div className="text-center py-12">
                  <CheckCircle className="mx-auto text-green-500 mb-4" size={64} />
                  <p className="text-slate-600 text-lg">All systems operational - No active alerts</p>
                </div>
              ) : (
                <div className="space-y-3">
                  {realTimeAlerts.map((alert, index) => (
                    <div key={index} className={`p-4 rounded-lg border-l-4 ${
                      alert.type === 'danger' ? 'bg-red-50 border-red-500' :
                      alert.type === 'warning' ? 'bg-yellow-50 border-yellow-500' :
                      'bg-blue-50 border-blue-500'
                    }`}>
                      <div className="flex justify-between items-start">
                        <div>
                          <p className={`font-semibold ${
                            alert.type === 'danger' ? 'text-red-800' :
                            alert.type === 'warning' ? 'text-yellow-800' :
                            'text-blue-800'
                          }`}>
                            {alert.message}
                          </p>
                          <p className="text-sm text-slate-600 mt-1">
                            Business: {alert.business} ‚Ä¢ {new Date(alert.timestamp).toLocaleString()}
                          </p>
                        </div>
                        <button
                          onClick={() => setRealTimeAlerts(prev => prev.filter((_, i) => i !== index))}
                          className="text-slate-400 hover:text-slate-600"
                        >
                          <X size={20} />
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {/* Modals remain the same but with enhanced features */}
        {/* Export Modal */}
        {showExportModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-bold text-slate-800">Export Enhanced Data</h3>
                <button onClick={() => setShowExportModal(false)} className="text-slate-500 hover:text-slate-700">
                  <X size={24} />
                </button>
              </div>
              <p className="text-slate-600 mb-6">Choose export format for {getFilteredBusinesses.length} assessments with v4.0 enhanced metrics</p>
              <div className="space-y-3">
                <button
                  onClick={() => exportData('json')}
                  className="w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition flex items-center justify-center gap-2 font-semibold"
                >
                  <Download size={20} />
                  Export as Enhanced JSON
                </button>
                <button
                  onClick={() => exportData('csv')}
                  className="w-full px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition flex items-center justify-center gap-2 font-semibold"
                >
                  <Download size={20} />
                  Export as Enhanced CSV
                </button>
                <button
                  onClick={() => setShowExportModal(false)}
                  className="w-full px-4 py-3 bg-slate-200 text-slate-700 rounded-lg hover:bg-slate-300 transition font-semibold"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Alerts Configuration Modal */}
        {showAlertsModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl max-w-md w-full p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-bold text-slate-800">Configure Real-time Alerts</h3>
                <button onClick={() => setShowAlertsModal(false)} className="text-slate-500 hover:text-slate-700">
                  <X size={24} />
                </button>
              </div>
              <div className="space-y-4">
                <div>
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={alertConfig.enabled}
                      onChange={(e) => setAlertConfig({...alertConfig, enabled: e.target.checked})}
                      className="rounded"
                    />
                    <span className="font-semibold">Enable Real-time Alerts</span>
                  </label>
                </div>
                <div>
                  <label className="block text-slate-700 font-semibold mb-2">Score Threshold</label>
                  <input
                    type="number"
                    value={alertConfig.scoreThreshold}
                    onChange={(e) => setAlertConfig({...alertConfig, scoreThreshold: parseInt(e.target.value)})}
                    className="w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    min="300"
                    max="850"
                  />
                </div>
                <div>
                  <label className="block text-slate-700 font-semibold mb-2">Risk Threshold (%)</label>
                  <input
                    type="number"
                    value={alertConfig.riskThreshold * 100}
                    onChange={(e) => setAlertConfig({...alertConfig, riskThreshold: parseFloat(e.target.value) / 100})}
                    className="w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    min="0"
                    max="50"
                    step="0.1"
                  />
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={() => setShowAlertsModal(false)}
                    className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-semibold"
                  >
                    Save Configuration
                  </button>
                  <button
                    onClick={() => setShowAlertsModal(false)}
                    className="flex-1 px-4 py-2 bg-slate-200 text-slate-700 rounded-lg hover:bg-slate-300 transition font-semibold"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default EnhancedCreditScoringMain;


=== FILE: client/src/components/ai/AgentDashboard.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import { 
  Brain, 
  Users, 
  Settings, 
  MessageSquare, 
  TrendingUp, 
  Target,
  BarChart3,
  Shield,
  Zap,
  Activity,
  Clock,
  Star,
  Plus,
  Search,
  Filter
} from 'lucide-react';

interface AgentDashboardProps {
  userType: 'ENTREPRENEUR' | 'INVESTOR' | 'PARTNER';
  primaryAgent?: {
    type: string;
    name: string;
    status: 'active' | 'inactive';
    relationshipScore: number;
  };
  functionalAgents: Array<{
    type: string;
    name: string;
    status: 'active' | 'inactive' | 'busy';
    lastUsed: Date;
    usageCount: number;
  }>;
  recentInteractions: Array<{
    id: string;
    agentType: string;
    agentName: string;
    message: string;
    timestamp: Date;
    status: 'completed' | 'processing' | 'pending';
  }>;
  onSelectAgent: (agentType: string) => void;
  onStartConversation: (agentType: string) => void;
  onViewAnalytics: () => void;
}

export const AgentDashboard: React.FC<AgentDashboardProps> = ({
  userType,
  primaryAgent,
  functionalAgents,
  recentInteractions,
  onSelectAgent,
  onStartConversation,
  onViewAnalytics
}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatus, setFilterStatus] = useState<'all' | 'active' | 'inactive' | 'busy'>('all');
  const [selectedTab, setSelectedTab] = useState('overview');

  const getAgentIcon = (agentType: string) => {
    switch (agentType) {
      case 'CO_FOUNDER':
        return <Target className="h-5 w-5" />;
      case 'CO_INVESTOR':
        return <TrendingUp className="h-5 w-5" />;
      case 'CO_BUILDER':
        return <Users className="h-5 w-5" />;
      case 'BUSINESS_ADVISOR':
        return <BarChart3 className="h-5 w-5" />;
      case 'INVESTMENT_ANALYST':
        return <TrendingUp className="h-5 w-5" />;
      case 'CREDIT_ANALYST':
        return <Shield className="h-5 w-5" />;
      case 'IMPACT_ANALYST':
        return <Target className="h-5 w-5" />;
      case 'PROGRAM_MANAGER':
        return <Users className="h-5 w-5" />;
      case 'PLATFORM_ORCHESTRATOR':
        return <Settings className="h-5 w-5" />;
      default:
        return <Brain className="h-5 w-5" />;
    }
  };

  const getAgentColor = (agentType: string) => {
    switch (agentType) {
      case 'CO_FOUNDER':
        return 'bg-blue-500';
      case 'CO_INVESTOR':
        return 'bg-green-500';
      case 'CO_BUILDER':
        return 'bg-purple-500';
      case 'BUSINESS_ADVISOR':
        return 'bg-blue-500';
      case 'INVESTMENT_ANALYST':
        return 'bg-green-500';
      case 'CREDIT_ANALYST':
        return 'bg-red-500';
      case 'IMPACT_ANALYST':
        return 'bg-purple-500';
      case 'PROGRAM_MANAGER':
        return 'bg-orange-500';
      case 'PLATFORM_ORCHESTRATOR':
        return 'bg-indigo-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'inactive':
        return 'bg-gray-100 text-gray-800';
      case 'busy':
        return 'bg-yellow-100 text-yellow-800';
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'processing':
        return 'bg-blue-100 text-blue-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getPrimaryAgentForUserType = () => {
    switch (userType) {
      case 'ENTREPRENEUR':
        return 'CO_FOUNDER';
      case 'INVESTOR':
        return 'CO_INVESTOR';
      case 'PARTNER':
        return 'CO_BUILDER';
      default:
        return 'CO_FOUNDER';
    }
  };

  const filteredFunctionalAgents = functionalAgents.filter(agent => {
    const matchesSearch = agent.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         agent.type.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesFilter = filterStatus === 'all' || agent.status === filterStatus;
    return matchesSearch && matchesFilter;
  });

  const getAgentTier = (agentType: string) => {
    if (['CO_FOUNDER', 'CO_INVESTOR', 'CO_BUILDER'].includes(agentType)) {
      return 'Partnership Agent';
    }
    return 'Functional Agent';
  };

  const getAgentDescription = (agentType: string) => {
    const descriptions: Record<string, string> = {
      'CO_FOUNDER': 'Your strategic business partner for growth and development',
      'CO_INVESTOR': 'Your investment partner for portfolio and deal strategy',
      'CO_BUILDER': 'Your ecosystem partner for program and partnership development',
      'BUSINESS_ADVISOR': 'Specialized business analysis and strategy development',
      'INVESTMENT_ANALYST': 'Investment analysis and portfolio management',
      'CREDIT_ANALYST': 'Credit analysis and risk assessment',
      'IMPACT_ANALYST': 'Impact analysis and sustainability evaluation',
      'PROGRAM_MANAGER': 'Program management and optimization',
      'PLATFORM_ORCHESTRATOR': 'Platform orchestration and ecosystem coordination'
    };
    return descriptions[agentType] || 'AI Agent';
  };

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="p-6 border-b border-gray-200 bg-white">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">AI Agent Dashboard</h1>
            <p className="text-gray-600">Manage your AI agent ecosystem</p>
          </div>
          <div className="flex items-center space-x-3">
            <Button onClick={onViewAnalytics} variant="outline">
              <Activity className="h-4 w-4 mr-2" />
              Analytics
            </Button>
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              New Conversation
            </Button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex">
        {/* Left Sidebar - Agent List */}
        <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
          {/* Search and Filter */}
          <div className="p-4 border-b border-gray-200">
            <div className="space-y-3">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search agents..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div className="flex space-x-2">
                <Button
                  variant={filterStatus === 'all' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setFilterStatus('all')}
                >
                  All
                </Button>
                <Button
                  variant={filterStatus === 'active' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setFilterStatus('active')}
                >
                  Active
                </Button>
                <Button
                  variant={filterStatus === 'busy' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setFilterStatus('busy')}
                >
                  Busy
                </Button>
              </div>
            </div>
          </div>

          {/* Primary Agent */}
          {primaryAgent && (
            <div className="p-4 border-b border-gray-200">
              <h3 className="text-sm font-medium text-gray-900 mb-3">Primary Agent</h3>
              <Card 
                className={`cursor-pointer transition-all duration-200 hover:shadow-md ${
                  primaryAgent.status === 'active' ? 'ring-2 ring-blue-500' : ''
                }`}
                onClick={() => onSelectAgent(primaryAgent.type)}
              >
                <CardContent className="p-4">
                  <div className="flex items-center space-x-3">
                    <Avatar className="h-10 w-10">
                      <AvatarFallback className={getAgentColor(primaryAgent.type)}>
                        {getAgentIcon(primaryAgent.type)}
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <div className="flex items-center justify-between">
                        <h4 className="font-medium text-gray-900">{primaryAgent.name}</h4>
                        <Badge className={getStatusColor(primaryAgent.status)}>
                          {primaryAgent.status}
                        </Badge>
                      </div>
                      <p className="text-sm text-gray-600">{getAgentDescription(primaryAgent.type)}</p>
                      <div className="flex items-center space-x-2 mt-2">
                        <Star className="h-4 w-4 text-yellow-500" />
                        <span className="text-sm text-gray-600">
                          {Math.round(primaryAgent.relationshipScore * 100)}% relationship
                        </span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Functional Agents */}
          <div className="flex-1 overflow-y-auto">
            <div className="p-4">
              <h3 className="text-sm font-medium text-gray-900 mb-3">Functional Agents</h3>
              <div className="space-y-3">
                {filteredFunctionalAgents.map((agent) => (
                  <Card 
                    key={agent.type}
                    className={`cursor-pointer transition-all duration-200 hover:shadow-md ${
                      agent.status === 'active' ? 'ring-2 ring-blue-500' : ''
                    }`}
                    onClick={() => onSelectAgent(agent.type)}
                  >
                    <CardContent className="p-3">
                      <div className="flex items-center space-x-3">
                        <Avatar className="h-8 w-8">
                          <AvatarFallback className={getAgentColor(agent.type)}>
                            {getAgentIcon(agent.type)}
                          </AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h4 className="font-medium text-gray-900 text-sm">{agent.name}</h4>
                            <Badge className={getStatusColor(agent.status)}>
                              {agent.status}
                            </Badge>
                          </div>
                          <p className="text-xs text-gray-600">{getAgentDescription(agent.type)}</p>
                          <div className="flex items-center justify-between mt-1">
                            <span className="text-xs text-gray-500">
                              {agent.usageCount} uses
                            </span>
                            <span className="text-xs text-gray-500">
                              {agent.lastUsed.toLocaleDateString()}
                            </span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Main Content Area */}
        <div className="flex-1 flex flex-col">
          <Tabs value={selectedTab} onValueChange={setSelectedTab} className="flex-1 flex flex-col">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="agents">Agents</TabsTrigger>
              <TabsTrigger value="conversations">Conversations</TabsTrigger>
              <TabsTrigger value="analytics">Analytics</TabsTrigger>
            </TabsList>

            {/* Overview Tab */}
            <TabsContent value="overview" className="flex-1 p-6">
              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <Card>
                    <CardContent className="p-6">
                      <div className="flex items-center space-x-3">
                        <div className="p-2 bg-blue-100 rounded-lg">
                          <Brain className="h-6 w-6 text-blue-600" />
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Total Agents</p>
                          <p className="text-2xl font-bold text-gray-900">
                            {functionalAgents.length + (primaryAgent ? 1 : 0)}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardContent className="p-6">
                      <div className="flex items-center space-x-3">
                        <div className="p-2 bg-green-100 rounded-lg">
                          <Activity className="h-6 w-6 text-green-600" />
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Active Agents</p>
                          <p className="text-2xl font-bold text-gray-900">
                            {functionalAgents.filter(a => a.status === 'active').length + 
                             (primaryAgent?.status === 'active' ? 1 : 0)}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardContent className="p-6">
                      <div className="flex items-center space-x-3">
                        <div className="p-2 bg-purple-100 rounded-lg">
                          <MessageSquare className="h-6 w-6 text-purple-600" />
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Total Interactions</p>
                          <p className="text-2xl font-bold text-gray-900">
                            {recentInteractions.length}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Recent Activity */}
                <Card>
                  <CardHeader>
                    <CardTitle>Recent Activity</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {recentInteractions.slice(0, 5).map((interaction) => (
                        <div key={interaction.id} className="flex items-center space-x-3">
                          <Avatar className="h-8 w-8">
                            <AvatarFallback className={getAgentColor(interaction.agentType)}>
                              {getAgentIcon(interaction.agentType)}
                            </AvatarFallback>
                          </Avatar>
                          <div className="flex-1">
                            <div className="flex items-center justify-between">
                              <p className="text-sm font-medium text-gray-900">
                                {interaction.agentName}
                              </p>
                              <Badge className={getStatusColor(interaction.status)}>
                                {interaction.status}
                              </Badge>
                            </div>
                            <p className="text-sm text-gray-600">{interaction.message}</p>
                            <p className="text-xs text-gray-500">
                              {interaction.timestamp.toLocaleString()}
                            </p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            {/* Agents Tab */}
            <TabsContent value="agents" className="flex-1 p-6">
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h2 className="text-lg font-medium text-gray-900">All Agents</h2>
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    Add Agent
                  </Button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {[primaryAgent, ...functionalAgents].filter(Boolean).map((agent) => (
                    <Card key={agent?.type} className="cursor-pointer hover:shadow-md transition-shadow">
                      <CardContent className="p-6">
                        <div className="flex items-center space-x-4">
                          <Avatar className="h-12 w-12">
                            <AvatarFallback className={getAgentColor(agent?.type || '')}>
                              {getAgentIcon(agent?.type || '')}
                            </AvatarFallback>
                          </Avatar>
                          <div className="flex-1">
                            <div className="flex items-center justify-between">
                              <h3 className="font-medium text-gray-900">{agent?.name}</h3>
                              <Badge className={getStatusColor(agent?.status || '')}>
                                {agent?.status}
                              </Badge>
                            </div>
                            <p className="text-sm text-gray-600">{getAgentDescription(agent?.type || '')}</p>
                            <p className="text-xs text-gray-500 mt-1">{getAgentTier(agent?.type || '')}</p>
                          </div>
                        </div>
                        <div className="mt-4 flex space-x-2">
                          <Button 
                            size="sm" 
                            onClick={() => onStartConversation(agent?.type || '')}
                            className="flex-1"
                          >
                            <MessageSquare className="h-4 w-4 mr-2" />
                            Chat
                          </Button>
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => onSelectAgent(agent?.type || '')}
                          >
                            <Settings className="h-4 w-4" />
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </TabsContent>

            {/* Conversations Tab */}
            <TabsContent value="conversations" className="flex-1 p-6">
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h2 className="text-lg font-medium text-gray-900">Recent Conversations</h2>
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    New Conversation
                  </Button>
                </div>

                <div className="space-y-4">
                  {recentInteractions.map((interaction) => (
                    <Card key={interaction.id} className="cursor-pointer hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center space-x-4">
                          <Avatar className="h-10 w-10">
                            <AvatarFallback className={getAgentColor(interaction.agentType)}>
                              {getAgentIcon(interaction.agentType)}
                            </AvatarFallback>
                          </Avatar>
                          <div className="flex-1">
                            <div className="flex items-center justify-between">
                              <h3 className="font-medium text-gray-900">{interaction.agentName}</h3>
                              <div className="flex items-center space-x-2">
                                <Badge className={getStatusColor(interaction.status)}>
                                  {interaction.status}
                                </Badge>
                                <span className="text-xs text-gray-500">
                                  {interaction.timestamp.toLocaleString()}
                                </span>
                              </div>
                            </div>
                            <p className="text-sm text-gray-600 mt-1">{interaction.message}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </TabsContent>

            {/* Analytics Tab */}
            <TabsContent value="analytics" className="flex-1 p-6">
              <div className="space-y-6">
                <h2 className="text-lg font-medium text-gray-900">Agent Analytics</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>Agent Usage</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        {functionalAgents.map((agent) => (
                          <div key={agent.type} className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">{agent.name}</span>
                            <div className="flex items-center space-x-2">
                              <div className="w-20 bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-blue-500 h-2 rounded-full"
                                  style={{ width: `${Math.min(agent.usageCount * 10, 100)}%` }}
                                />
                              </div>
                              <span className="text-sm text-gray-900">{agent.usageCount}</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle>Agent Status</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-gray-600">Active</span>
                          <Badge className="bg-green-100 text-green-800">
                            {functionalAgents.filter(a => a.status === 'active').length}
                          </Badge>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-gray-600">Busy</span>
                          <Badge className="bg-yellow-100 text-yellow-800">
                            {functionalAgents.filter(a => a.status === 'busy').length}
                          </Badge>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-gray-600">Inactive</span>
                          <Badge className="bg-gray-100 text-gray-800">
                            {functionalAgents.filter(a => a.status === 'inactive').length}
                          </Badge>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
};


=== FILE: client/src/components/ai/EnhancedCreditScoring.tsx ===

import React, { useState, useEffect, useRef, useMemo } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, LineChart, Line, ScatterChart, Scatter, ZAxis, ComposedChart, Area, PieChart, Pie, Cell } from 'recharts';
import { TrendingUp, TrendingDown, AlertCircle, CheckCircle, Building2, DollarSign, Calendar, Users, Shield, Database, Cpu, FileText, Eye, Activity, Download, Upload, RefreshCw, Filter, Search, BarChart3, PieChart as PieChartIcon, Settings, Info, ChevronDown, ChevronUp, X, Plus, Zap, Brain, Target, Star, Award, Clock, Globe, Lock, Unlock, Lightbulb, Rocket } from 'lucide-react';
import { getIndustryMultiplier, getIndustryRiskAdjustment, getIndustryRateAdjustment } from '@/utils/creditScoringUtils';

// Enhanced interfaces for better type safety
interface EnhancedCreditData {
  companyName: string;
  ein: string;
  industry: string;
  yearsInBusiness: number;
  employeeCount: number;
  annualRevenue: number;
  totalDebt: number;
  currentAssets: number;
  currentLiabilities: number;
  accountsReceivable: number;
  accountsPayable: number;
  cashBalance: number;
  avgDailyBalance3mo: number;
  overdrafts12mo: number;
  nsfIncidents: number;
  depositConsistency: number;
  personalFicoScore: number;
  businessCreditScore: number;
  paymentHistoryScore: number;
  creditUtilization: number;
  hardInquiries: number;
  derogatoryMarks: number;
  monthlyTraffic: number;
  socialFollowers: number;
  onlineReviewScore: number;
  customerCount: number;
  customerRetention: number;
  churnRate: number;
  ltvCacRatio: number;
  revenueGrowthRate: number;
  requestedAmount: number;
  requestedTerm: number;
  loanPurpose: string;
}

interface EnhancedScoreResult {
  finalScore: number;
  defaultProbability: number;
  confidence: number;
  components: {
    creditScore: number;
    financialHealth: number;
    bankingBehavior: number;
    businessStability: number;
    alternativeData: number;
    marketConditions: number;
    industryRisk: number;
  };
  featureImportance: Record<string, number>;
  contributions: Record<string, number>;
  metrics: Record<string, string>;
  riskFactors: RiskFactor[];
  strengths: Strength[];
  decision: LendingDecision;
  modelVersion: string;
  assessmentDate: string;
  processingTime: number;
}

interface RiskFactor {
  severity: 'low' | 'medium' | 'high' | 'critical';
  factor: string;
  impact: number;
  category: string;
  mitigation?: string;
}

interface Strength {
  factor: string;
  impact: number;
  category: string;
  description?: string;
}

interface LendingDecision {
  decision: 'APPROVED' | 'CONDITIONAL_APPROVAL' | 'MANUAL_REVIEW' | 'DECLINED';
  approvedAmount: number;
  interestRate: number;
  monthlyPayment: number;
  conditions: string[];
  reasoning: string;
  recommendedActions: string[];
  riskTier: number;
  confidence: number;
}

// Enhanced ML-based scoring algorithm with advanced features
class EnhancedCreditScorer {
  private static readonly MODEL_VERSION = 'v4.0.0-enhanced';
  private static readonly FEATURE_WEIGHTS = {
    creditScore: 0.20,
    financialHealth: 0.25,
    bankingBehavior: 0.18,
    businessStability: 0.15,
    alternativeData: 0.12,
    marketConditions: 0.05,
    industryRisk: 0.05
  };

  static calculateAdvancedScore(data: EnhancedCreditData): EnhancedScoreResult {
    const startTime = performance.now();
    
    // 1. ENHANCED CREDIT SCORING (20%)
    const creditScore = this.calculateCreditScore(data);
    
    // 2. FINANCIAL HEALTH ANALYSIS (25%)
    const financialHealth = this.calculateFinancialHealth(data);
    
    // 3. BANKING BEHAVIOR ANALYSIS (18%)
    const bankingBehavior = this.calculateBankingBehavior(data);
    
    // 4. BUSINESS STABILITY ASSESSMENT (15%)
    const businessStability = this.calculateBusinessStability(data);
    
    // 5. ALTERNATIVE DATA INTEGRATION (12%)
    const alternativeData = this.calculateAlternativeData(data);
    
    // 6. MARKET CONDITIONS (5%)
    const marketConditions = this.calculateMarketConditions(data);
    
    // 7. INDUSTRY RISK ASSESSMENT (5%)
    const industryRisk = this.calculateIndustryRisk(data);
    
    // Weighted ensemble score
    const components = {
      creditScore,
      financialHealth,
      bankingBehavior,
      businessStability,
      alternativeData,
      marketConditions,
      industryRisk
    };
    
    const weightedScore = Object.keys(this.FEATURE_WEIGHTS).reduce((sum, key) => 
      sum + (components[key as keyof typeof components] * this.FEATURE_WEIGHTS[key as keyof typeof this.FEATURE_WEIGHTS]), 0
    );
    
    // Convert to 300-850 scale with enhanced normalization
    const finalScore = Math.round(300 + (weightedScore / 100) * 550);
    
    // Enhanced default probability calculation using logistic regression
    const defaultProb = this.calculateDefaultProbability(finalScore, data);
    
    // Calculate confidence based on data completeness and quality
    const confidence = this.calculateConfidence(data, components);
    
    // Generate feature importance and contributions
    const featureImportance = { ...this.FEATURE_WEIGHTS };
    const contributions = this.calculateContributions(components, this.FEATURE_WEIGHTS);
    
    // Calculate key financial metrics
    const metrics = this.calculateFinancialMetrics(data);
    
    // Identify risk factors and strengths
    const riskFactors = this.identifyRiskFactors(data, components);
    const strengths = this.identifyStrengths(data, components);
    
    // Make lending decision
    const decision = this.makeLendingDecision(finalScore, defaultProb, data, confidence);
    
    const processingTime = performance.now() - startTime;
    
    return {
      finalScore: Math.min(Math.max(finalScore, 300), 850),
      defaultProbability: defaultProb,
      confidence,
      components,
      featureImportance,
      contributions,
      metrics: this.calculateFinancialMetrics(data),
      riskFactors,
      strengths,
      decision,
      modelVersion: this.MODEL_VERSION,
      assessmentDate: new Date().toISOString().split('T')[0],
      processingTime
    };
  }

  private static calculateCreditScore(data: EnhancedCreditData): number {
    const personalFico = data.personalFicoScore || 0;
    const businessCredit = data.businessCreditScore || 0;
    const paymentHistory = data.paymentHistoryScore || 0;
    const utilization = data.creditUtilization || 0;
    const derogatory = data.derogatoryMarks || 0;
    const inquiries = data.hardInquiries || 0;
    
    // Enhanced credit scoring with non-linear relationships
    const ficoScore = Math.min(100, (personalFico / 850) * 100);
    const businessScore = Math.min(100, (businessCredit / 100) * 100);
    const paymentScore = paymentHistory;
    const utilizationScore = Math.max(0, 100 - (utilization * 1.5));
    const derogatoryPenalty = derogatory * 8;
    const inquiryPenalty = Math.min(inquiries * 2, 10);
    
    return Math.max(0, Math.min(100,
      ficoScore * 0.35 +
      businessScore * 0.25 +
      paymentScore * 0.25 +
      utilizationScore * 0.10 -
      derogatoryPenalty -
      inquiryPenalty
    ));
  }

  private static calculateFinancialHealth(data: EnhancedCreditData): number {
    const revenue = data.annualRevenue || 0;
    const assets = data.currentAssets || 0;
    const liabilities = data.currentLiabilities || 0;
    const debt = data.totalDebt || 0;
    const cash = data.cashBalance || 0;
    const ar = data.accountsReceivable || 0;
    
    // Enhanced financial ratios
    const currentRatio = liabilities > 0 ? assets / liabilities : 1;
    const quickRatio = liabilities > 0 ? (assets - ar) / liabilities : 1;
    const debtToRevenue = revenue > 0 ? debt / revenue : 1;
    const cashToLiabilities = liabilities > 0 ? cash / liabilities : 0.5;
    const debtToAssets = assets > 0 ? debt / assets : 1;
    
    // Non-linear scoring for better risk differentiation
    const currentRatioScore = Math.min(100, (currentRatio / 2.5) * 100);
    const quickRatioScore = Math.min(100, (quickRatio / 1.5) * 100);
    const debtScore = Math.max(0, 100 - (debtToRevenue * 50));
    const cashScore = Math.min(100, cashToLiabilities * 100);
    const leverageScore = Math.max(0, 100 - (debtToAssets * 100));
    
    return Math.max(0, Math.min(100,
      currentRatioScore * 0.25 +
      quickRatioScore * 0.20 +
      debtScore * 0.25 +
      cashScore * 0.20 +
      leverageScore * 0.10
    ));
  }

  private static calculateBankingBehavior(data: EnhancedCreditData): number {
    const avgBalance = data.avgDailyBalance3mo || 0;
    const overdrafts = data.overdrafts12mo || 0;
    const nsf = data.nsfIncidents || 0;
    const depositConsist = data.depositConsistency || 0;
    const revenue = data.annualRevenue || 0;
    
    // Enhanced banking behavior analysis
    const balanceScore = Math.min(100, (avgBalance / (revenue / 12)) * 100);
    const overdraftPenalty = overdrafts * 8;
    const nsfPenalty = nsf * 15;
    const consistencyScore = depositConsist;
    
    // Cash flow stability bonus
    const cashFlowStability = depositConsist > 90 ? 10 : 0;
    
    return Math.max(0, Math.min(100,
      balanceScore * 0.30 +
      consistencyScore * 0.40 -
      overdraftPenalty -
      nsfPenalty +
      cashFlowStability
    ));
  }

  private static calculateBusinessStability(data: EnhancedCreditData): number {
    const years = data.yearsInBusiness || 0;
    const employees = data.employeeCount || 0;
    const revenue = data.annualRevenue || 0;
    const revenueGrowth = data.revenueGrowthRate || 0;
    
    // Enhanced business stability scoring
    const yearsScore = Math.min(100, years * 8);
    const sizeScore = Math.min(100, Math.log(employees + 1) * 15);
    const revenuePerEmp = employees > 0 ? revenue / employees : 0;
    const efficiencyScore = revenuePerEmp > 100000 ? 30 : revenuePerEmp > 75000 ? 20 : 10;
    const growthScore = Math.min(50, revenueGrowth);
    
    return Math.max(0, Math.min(100,
      yearsScore * 0.40 +
      sizeScore * 0.25 +
      efficiencyScore * 0.25 +
      growthScore * 0.10
    ));
  }

  private static calculateAlternativeData(data: EnhancedCreditData): number {
    const traffic = data.monthlyTraffic || 0;
    const social = data.socialFollowers || 0;
    const reviews = data.onlineReviewScore || 0;
    const retention = data.customerRetention || 0;
    const ltvcac = data.ltvCacRatio || 0;
    const churn = data.churnRate || 0;
    
    // Enhanced alternative data scoring
    const digitalPresence = Math.min(100, 
      (Math.log(traffic + 1) / Math.log(100000) * 100) * 0.3 +
      (Math.log(social + 1) / Math.log(50000) * 100) * 0.2
    );
    
    const customerQuality = Math.min(100,
      (reviews / 5 * 100) * 0.3 +
      retention * 0.4 +
      (Math.min(ltvcac, 5) / 5 * 100) * 0.2 +
      (100 - churn) * 0.1
    );
    
    return Math.max(0, Math.min(100,
      digitalPresence * 0.4 +
      customerQuality * 0.6
    ));
  }

  private static calculateMarketConditions(data: EnhancedCreditData): number {
    // Simulate market conditions (in real implementation, this would use external APIs)
    const baseScore = 75; // Base market conditions
    const industryMultiplier = this.getIndustryMultiplier(data.industry);
    
    return Math.max(0, Math.min(100, baseScore * industryMultiplier));
  }

  private static calculateIndustryRisk(data: EnhancedCreditData): number {
    const industryRiskMap: Record<string, number> = {
      'technology': 0.9,
      'healthcare': 0.8,
      'manufacturing': 0.7,
      'retail': 0.6,
      'hospitality': 0.5,
      'construction': 0.4,
      'professional_services': 0.8,
      'financial_services': 0.7
    };
    
    return (industryRiskMap[data.industry] || 0.5) * 100;
  }

  private static calculateDefaultProbability(score: number, data: EnhancedCreditData): number {
    // Enhanced logistic regression for default probability
    const z = (score - 600) / 100;
    const prob = 1 / (1 + Math.exp(z));
    
    // Adjust for industry and size factors
    const industryAdjustment = this.getIndustryRiskAdjustment(data.industry);
    const sizeAdjustment = data.employeeCount > 50 ? 0.8 : 1.0;
    
    return Math.max(0.001, Math.min(0.5, prob * industryAdjustment * sizeAdjustment));
  }

  private static calculateConfidence(data: EnhancedCreditData, components: any): number {
    let completeness = 0;
    let totalFields = 0;
    
    // Check data completeness
    const requiredFields = ['companyName', 'annualRevenue', 'currentAssets', 'currentLiabilities', 'personalFicoScore'];
    const optionalFields = ['monthlyTraffic', 'socialFollowers', 'customerCount'];
    
    requiredFields.forEach(field => {
      totalFields++;
      if (data[field as keyof EnhancedCreditData]) completeness++;
    });
    
    optionalFields.forEach(field => {
      totalFields++;
      if (data[field as keyof EnhancedCreditData]) completeness++;
    });
    
    const dataCompleteness = completeness / totalFields;
    
    // Check component consistency
    const componentVariance = this.calculateComponentVariance(components);
    const consistencyScore = Math.max(0, 1 - componentVariance);
    
    return Math.max(0.5, Math.min(1.0, (dataCompleteness * 0.7 + consistencyScore * 0.3)));
  }

  private static calculateContributions(components: any, weights: any): Record<string, number> {
    const contributions: Record<string, number> = {};
    Object.keys(components).forEach(key => {
      contributions[key] = ((components[key] - 50) / 50) * weights[key] * 100;
    });
    return contributions;
  }

  private static calculateFinancialMetrics(data: EnhancedCreditData): Record<string, string> {
    const assets = data.currentAssets || 0;
    const liabilities = data.currentLiabilities || 0;
    const revenue = data.annualRevenue || 0;
    const debt = data.totalDebt || 0;
    const employees = data.employeeCount || 1;
    
    return {
      currentRatio: (assets / Math.max(liabilities, 1)).toFixed(2),
      debtToRevenue: ((debt / Math.max(revenue, 1)) * 100).toFixed(1) + '%',
      revenuePerEmployee: Math.round(revenue / employees).toLocaleString(),
      cashRunway: Math.round((data.cashBalance || 0) / Math.max(revenue / 12, 1)).toString(),
      workingCapital: (assets - liabilities).toLocaleString()
    };
  }

  private static identifyRiskFactors(data: EnhancedCreditData, components: any): RiskFactor[] {
    const risks: RiskFactor[] = [];
    
    if (components.creditScore < 60) {
      risks.push({
        severity: 'high',
        factor: 'Poor credit history',
        impact: -20,
        category: 'Credit',
        mitigation: 'Improve payment history and reduce credit utilization'
      });
    }
    
    if (data.creditUtilization > 70) {
      risks.push({
        severity: 'high',
        factor: 'High credit utilization',
        impact: -15,
        category: 'Credit',
        mitigation: 'Pay down credit balances to below 30%'
      });
    }
    
    if (components.financialHealth < 50) {
      risks.push({
        severity: 'high',
        factor: 'Weak financial position',
        impact: -25,
        category: 'Financial',
        mitigation: 'Improve cash flow and reduce debt burden'
      });
    }
    
    if (data.yearsInBusiness < 2) {
      risks.push({
        severity: 'medium',
        factor: 'Limited operating history',
        impact: -12,
        category: 'Stability',
        mitigation: 'Build longer track record of operations'
      });
    }
    
    return risks.sort((a, b) => Math.abs(b.impact) - Math.abs(a.impact));
  }

  private static identifyStrengths(data: EnhancedCreditData, components: any): Strength[] {
    const strengths: Strength[] = [];
    
    if (components.creditScore > 80) {
      strengths.push({
        factor: 'Excellent credit history',
        impact: +20,
        category: 'Credit',
        description: 'Strong payment history and credit management'
      });
    }
    
    if (data.yearsInBusiness > 5) {
      strengths.push({
        factor: 'Established business',
        impact: +15,
        category: 'Stability',
        description: 'Proven track record of operations'
      });
    }
    
    if (components.financialHealth > 80) {
      strengths.push({
        factor: 'Strong financial position',
        impact: +25,
        category: 'Financial',
        description: 'Healthy financial ratios and cash flow'
      });
    }
    
    if (data.customerRetention > 90) {
      strengths.push({
        factor: 'High customer loyalty',
        impact: +10,
        category: 'Business',
        description: 'Strong customer relationships and retention'
      });
    }
    
    return strengths.sort((a, b) => b.impact - a.impact);
  }

  private static makeLendingDecision(score: number, defaultProb: number, data: EnhancedCreditData, confidence: number): LendingDecision {
    const amount = data.requestedAmount || 0;
    const revenue = data.annualRevenue || 0;
    
    // Enhanced decision logic with confidence weighting
    const confidenceAdjustedScore = score * confidence;
    
    if (confidenceAdjustedScore >= 750 && defaultProb < 0.08 && amount <= revenue * 0.6) {
      return {
        decision: 'APPROVED',
        approvedAmount: amount,
        interestRate: this.calculateInterestRate(defaultProb, data),
        monthlyPayment: this.calculateMonthlyPayment(amount, this.calculateInterestRate(defaultProb, data), data.requestedTerm),
        conditions: ['Standard terms apply', 'Quarterly financial reporting'],
        reasoning: 'Excellent credit profile with low default risk and high confidence',
        recommendedActions: ['Consider higher loan amount if needed', 'Eligible for premium benefits'],
        riskTier: 1,
        confidence
      };
    } else if (confidenceAdjustedScore >= 650 && defaultProb < 0.20 && amount <= revenue * 0.4) {
      return {
        decision: 'CONDITIONAL_APPROVAL',
        approvedAmount: amount * 0.8,
        interestRate: this.calculateInterestRate(defaultProb, data) + 2,
        monthlyPayment: this.calculateMonthlyPayment(amount * 0.8, this.calculateInterestRate(defaultProb, data) + 2, data.requestedTerm),
        conditions: ['Personal guarantee required', 'Monthly financial reporting', 'Maintain minimum cash balance'],
        reasoning: 'Acceptable risk profile with enhanced monitoring requirements',
        recommendedActions: ['Improve credit utilization', 'Build stronger cash reserves'],
        riskTier: 2,
        confidence
      };
    } else if (confidenceAdjustedScore >= 550 && defaultProb < 0.35) {
      return {
        decision: 'MANUAL_REVIEW',
        approvedAmount: 0,
        interestRate: 0,
        monthlyPayment: 0,
        conditions: ['Underwriter review required', 'Additional documentation needed'],
        reasoning: 'Outside automated decision parameters - human review needed',
        recommendedActions: ['Prepare detailed business plan', 'Gather additional financial statements'],
        riskTier: 3,
        confidence
      };
    } else {
      return {
        decision: 'DECLINED',
        approvedAmount: 0,
        interestRate: 0,
        monthlyPayment: 0,
        conditions: this.generateImprovementPlan(score, data),
        reasoning: 'Does not meet minimum lending criteria at this time',
        recommendedActions: ['Focus on improvement plan', 'Reapply in 6-12 months'],
        riskTier: 4,
        confidence
      };
    }
  }

  private static calculateInterestRate(defaultProb: number, data: EnhancedCreditData): number {
    const baseRate = 5.5;
    const riskPremium = defaultProb * 200;
    const termPremium = (data.requestedTerm - 36) / 12 * 0.5;
    const industryAdjustment = this.getIndustryRateAdjustment(data.industry);
    
    return Math.max(6.0, baseRate + riskPremium + termPremium + industryAdjustment);
  }

  private static calculateMonthlyPayment(principal: number, annualRate: number, months: number): number {
    const monthlyRate = annualRate / 100 / 12;
    const payment = principal * (monthlyRate * Math.pow(1 + monthlyRate, months)) / 
                    (Math.pow(1 + monthlyRate, months) - 1);
    return payment;
  }

  private static generateImprovementPlan(score: number, data: EnhancedCreditData): string[] {
    const plan = [];
    
    if (score < 600) {
      plan.push('Priority 1: Improve credit score - pay all bills on time for 6+ months');
      plan.push('Priority 1: Reduce credit utilization below 30%');
    }
    
    if (data.currentAssets < data.currentLiabilities) {
      plan.push('Priority 2: Improve working capital position');
    }
    
    if (data.yearsInBusiness < 2) {
      plan.push('Timeline: Build additional operating history');
    }
    
    return plan.length > 0 ? plan : ['Continue building credit history and financial stability'];
  }

  // Industry adjustment methods now use shared utilities
  private static getIndustryMultiplier = getIndustryMultiplier;
  private static getIndustryRiskAdjustment = getIndustryRiskAdjustment;
  private static getIndustryRateAdjustment = getIndustryRateAdjustment;

  private static calculateComponentVariance(components: any): number {
    const values = Object.values(components) as number[];
    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;
    return Math.sqrt(variance) / 100;
  }
}

// Export interfaces for use in other components
export type {
  EnhancedCreditData,
  EnhancedScoreResult,
  RiskFactor,
  Strength,
  LendingDecision
};

export default EnhancedCreditScorer;


=== FILE: client/src/components/ai/FunctionalAgentInterface.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import { 
  Brain, 
  BarChart3, 
  TrendingUp, 
  Shield, 
  Target, 
  Users,
  MessageSquare,
  Settings,
  Zap,
  CheckCircle,
  AlertCircle,
  Info
} from 'lucide-react';

interface FunctionalAgentInterfaceProps {
  agentType: 'BUSINESS_ADVISOR' | 'INVESTMENT_ANALYST' | 'CREDIT_ANALYST' | 'IMPACT_ANALYST' | 'PROGRAM_MANAGER' | 'PLATFORM_ORCHESTRATOR';
  agentName: string;
  agentDescription: string;
  expertise: string[];
  capabilities: string[];
  onExecuteTask: (taskType: string, context: any) => void;
  onGetInsights: (data: any) => void;
  onAnalyzeData: (data: any) => void;
  messages: Array<{
    id: string;
    content: string;
    sender: 'user' | 'agent';
    timestamp: Date;
    taskType?: string;
    insights?: any[];
  }>;
  isProcessing: boolean;
  currentTask?: string;
  insights: any[];
}

export const FunctionalAgentInterface: React.FC<FunctionalAgentInterfaceProps> = ({
  agentType,
  agentName,
  agentDescription,
  expertise,
  capabilities,
  onExecuteTask,
  onGetInsights,
  onAnalyzeData,
  messages,
  isProcessing,
  currentTask,
  insights
}) => {
  const [inputMessage, setInputMessage] = useState('');
  const [selectedTask, setSelectedTask] = useState('');
  const [analysisData, setAnalysisData] = useState<any>(null);

  const getAgentIcon = () => {
    switch (agentType) {
      case 'BUSINESS_ADVISOR':
        return <BarChart3 className="h-6 w-6" />;
      case 'INVESTMENT_ANALYST':
        return <TrendingUp className="h-6 w-6" />;
      case 'CREDIT_ANALYST':
        return <Shield className="h-6 w-6" />;
      case 'IMPACT_ANALYST':
        return <Target className="h-6 w-6" />;
      case 'PROGRAM_MANAGER':
        return <Users className="h-6 w-6" />;
      case 'PLATFORM_ORCHESTRATOR':
        return <Settings className="h-6 w-6" />;
      default:
        return <Brain className="h-6 w-6" />;
    }
  };

  const getAgentColor = () => {
    switch (agentType) {
      case 'BUSINESS_ADVISOR':
        return 'bg-blue-500';
      case 'INVESTMENT_ANALYST':
        return 'bg-green-500';
      case 'CREDIT_ANALYST':
        return 'bg-red-500';
      case 'IMPACT_ANALYST':
        return 'bg-purple-500';
      case 'PROGRAM_MANAGER':
        return 'bg-orange-500';
      case 'PLATFORM_ORCHESTRATOR':
        return 'bg-indigo-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getTaskTypes = () => {
    switch (agentType) {
      case 'BUSINESS_ADVISOR':
        return [
          'Business Plan Analysis',
          'Financial Analysis',
          'Market Analysis',
          'Strategy Development',
          'Operational Optimization'
        ];
      case 'INVESTMENT_ANALYST':
        return [
          'Deal Analysis',
          'Portfolio Analysis',
          'Risk Assessment',
          'Valuation Analysis',
          'Due Diligence'
        ];
      case 'CREDIT_ANALYST':
        return [
          'Credit Assessment',
          'Risk Analysis',
          'Loan Underwriting',
          'Financial Analysis',
          'Compliance Review'
        ];
      case 'IMPACT_ANALYST':
        return [
          'Impact Assessment',
          'Social Impact Analysis',
          'Environmental Impact',
          'Sustainability Analysis',
          'Impact Measurement'
        ];
      case 'PROGRAM_MANAGER':
        return [
          'Program Analysis',
          'Program Optimization',
          'Resource Management',
          'Stakeholder Coordination',
          'Performance Monitoring'
        ];
      case 'PLATFORM_ORCHESTRATOR':
        return [
          'Platform Analysis',
          'Ecosystem Coordination',
          'System Integration',
          'Platform Optimization',
          'Stakeholder Management'
        ];
      default:
        return [];
    }
  };

  const handleExecuteTask = () => {
    if (selectedTask && analysisData) {
      onExecuteTask(selectedTask, analysisData);
    }
  };

  const handleGetInsights = () => {
    if (analysisData) {
      onGetInsights(analysisData);
    }
  };

  const handleSendMessage = () => {
    if (inputMessage.trim()) {
      // Simulate sending message to agent
      setInputMessage('');
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const getInsightIcon = (insight: any) => {
    switch (insight.type) {
      case 'recommendation':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'warning':
        return <AlertCircle className="h-4 w-4 text-yellow-500" />;
      case 'info':
        return <Info className="h-4 w-4 text-blue-500" />;
      default:
        return <Info className="h-4 w-4 text-gray-500" />;
    }
  };

  const getInsightColor = (insight: any) => {
    switch (insight.type) {
      case 'recommendation':
        return 'border-green-200 bg-green-50';
      case 'warning':
        return 'border-yellow-200 bg-yellow-50';
      case 'info':
        return 'border-blue-200 bg-blue-50';
      default:
        return 'border-gray-200 bg-gray-50';
    }
  };

  return (
    <div className="flex h-full">
      {/* Left Sidebar - Agent Profile & Controls */}
      <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
        {/* Agent Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3 mb-4">
            <Avatar className="h-12 w-12">
              <AvatarImage src={`/avatars/${agentType.toLowerCase()}.png`} />
              <AvatarFallback className={getAgentColor()}>
                {getAgentIcon()}
              </AvatarFallback>
            </Avatar>
            <div>
              <h2 className="text-lg font-semibold text-gray-900">{agentName}</h2>
              <p className="text-sm text-gray-600">{agentDescription}</p>
            </div>
          </div>
          
          <div className="space-y-3">
            <div>
              <div className="text-sm text-gray-600 mb-2">Expertise Areas</div>
              <div className="flex flex-wrap gap-1">
                {expertise.slice(0, 3).map((area) => (
                  <Badge key={area} variant="secondary" className="text-xs">
                    {area}
                  </Badge>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Task Selection */}
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-sm font-medium text-gray-900 mb-3">Available Tasks</h3>
          <div className="space-y-2">
            {getTaskTypes().map((task) => (
              <Button
                key={task}
                variant={selectedTask === task ? "default" : "outline"}
                size="sm"
                className="w-full justify-start"
                onClick={() => setSelectedTask(task)}
              >
                <Zap className="h-4 w-4 mr-2" />
                {task}
              </Button>
            ))}
          </div>
        </div>

        {/* Data Input */}
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-sm font-medium text-gray-900 mb-3">Analysis Data</h3>
          <textarea
            value={analysisData ? JSON.stringify(analysisData, null, 2) : ''}
            onChange={(e) => {
              try {
                setAnalysisData(JSON.parse(e.target.value));
              } catch {
                // Invalid JSON, keep as string
              }
            }}
            placeholder="Paste your data here (JSON format)"
            className="w-full h-32 px-3 py-2 border border-gray-300 rounded-lg text-xs font-mono focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        {/* Action Buttons */}
        <div className="p-4 space-y-2">
          <Button 
            onClick={handleExecuteTask}
            disabled={!selectedTask || !analysisData || isProcessing}
            className="w-full"
          >
            <Zap className="h-4 w-4 mr-2" />
            Execute Task
          </Button>
          <Button 
            onClick={handleGetInsights}
            disabled={!analysisData || isProcessing}
            variant="outline"
            className="w-full"
          >
            <Brain className="h-4 w-4 mr-2" />
            Get Insights
          </Button>
        </div>

        {/* Capabilities */}
        <div className="p-4 flex-1">
          <h3 className="text-sm font-medium text-gray-900 mb-3">Capabilities</h3>
          <div className="space-y-2">
            {capabilities.map((capability) => (
              <Badge key={capability} variant="secondary" className="w-full justify-start text-xs">
                {capability}
              </Badge>
            ))}
          </div>
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="p-4 border-b border-gray-200 bg-gray-50">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className={`p-2 rounded-full ${getAgentColor()} text-white`}>
                {getAgentIcon()}
              </div>
              <div>
                <h3 className="font-medium text-gray-900">{agentName}</h3>
                <p className="text-sm text-gray-600">
                  {currentTask ? `Executing: ${currentTask}` : 'Ready for tasks'} ‚Ä¢ {messages.length} interactions
                </p>
              </div>
            </div>
            <Badge variant="outline" className="flex items-center space-x-1">
              <Brain className="h-3 w-3" />
              <span>Functional Agent</span>
            </Badge>
          </div>
        </div>

        {/* Content Tabs */}
        <Tabs defaultValue="conversation" className="flex-1 flex flex-col">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="conversation">Conversation</TabsTrigger>
            <TabsTrigger value="insights">Insights</TabsTrigger>
            <TabsTrigger value="analysis">Analysis</TabsTrigger>
          </TabsList>

          {/* Conversation Tab */}
          <TabsContent value="conversation" className="flex-1 flex flex-col">
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                      message.sender === 'user'
                        ? 'bg-blue-500 text-white'
                        : 'bg-gray-100 text-gray-900'
                    }`}
                  >
                    <div className="flex items-center space-x-2 mb-1">
                      {message.sender === 'agent' && (
                        <div className={`p-1 rounded-full ${getAgentColor()} text-white`}>
                          {getAgentIcon()}
                        </div>
                      )}
                      {message.taskType && (
                        <Badge variant="outline" className="text-xs">
                          {message.taskType}
                        </Badge>
                      )}
                    </div>
                    <p className="text-sm">{message.content}</p>
                    <p className="text-xs opacity-70 mt-1">
                      {message.timestamp.toLocaleTimeString()}
                    </p>
                  </div>
                </div>
              ))}
              
              {isProcessing && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 rounded-lg px-4 py-2">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Message Input */}
            <div className="p-4 border-t border-gray-200">
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder={`Ask ${agentName}...`}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <Button 
                  onClick={handleSendMessage}
                  disabled={!inputMessage.trim() || isProcessing}
                  className="px-4"
                >
                  <MessageSquare className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </TabsContent>

          {/* Insights Tab */}
          <TabsContent value="insights" className="flex-1 p-4">
            <div className="space-y-4">
              <h3 className="text-lg font-medium text-gray-900">Generated Insights</h3>
              {insights.length > 0 ? (
                <div className="space-y-3">
                  {insights.map((insight, index) => (
                    <Card key={index} className={`border-l-4 ${getInsightColor(insight)}`}>
                      <CardContent className="p-4">
                        <div className="flex items-start space-x-3">
                          {getInsightIcon(insight)}
                          <div className="flex-1">
                            <h4 className="font-medium text-gray-900">{insight.title}</h4>
                            <p className="text-sm text-gray-600 mt-1">{insight.description}</p>
                            {insight.priority && (
                              <Badge variant="outline" className="mt-2">
                                Priority: {insight.priority}
                              </Badge>
                            )}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <Brain className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>No insights generated yet. Execute a task to get insights.</p>
                </div>
              )}
            </div>
          </TabsContent>

          {/* Analysis Tab */}
          <TabsContent value="analysis" className="flex-1 p-4">
            <div className="space-y-4">
              <h3 className="text-lg font-medium text-gray-900">Data Analysis</h3>
              {analysisData ? (
                <div className="space-y-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">Input Data</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <pre className="text-xs bg-gray-100 p-3 rounded overflow-x-auto">
                        {JSON.stringify(analysisData, null, 2)}
                      </pre>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-sm">Analysis Results</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-sm text-gray-600">
                        Analysis will appear here after task execution.
                      </div>
                    </CardContent>
                  </Card>
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <BarChart3 className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>No data provided. Add data in the sidebar to begin analysis.</p>
                </div>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};


=== FILE: client/src/components/ai/AutomationPanel.tsx ===

import { useState } from 'react';
import { Zap, Play, Pause, Settings, Plus } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';

interface AutomationRule {
  id: string;
  name: string;
  description: string;
  enabled: boolean;
  trigger: string;
  actions: number;
  lastRun?: Date;
}

export function AutomationPanel() {
  const [rules, setRules] = useState<AutomationRule[]>([
    {
      id: '1',
      name: 'Low Runway Alert',
      description: 'Alert when runway drops below 6 months',
      enabled: true,
      trigger: 'financial_update',
      actions: 2,
      lastRun: new Date()
    },
    {
      id: '2',
      name: 'High Valuation Alert',
      description: 'Flag deals with high valuation multiples',
      enabled: true,
      trigger: 'deal_submitted',
      actions: 1
    },
    {
      id: '3',
      name: 'Weekly Portfolio Review',
      description: 'Generate weekly portfolio insights',
      enabled: false,
      trigger: 'schedule',
      actions: 3
    }
  ]);

  const toggleRule = (id: string) => {
    setRules(rules.map(rule => 
      rule.id === id ? { ...rule, enabled: !rule.enabled } : rule
    ));
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="p-2 bg-gradient-to-r from-purple-500 to-teal-500 rounded-lg">
            <Zap className="w-5 h-5 text-white" />
          </div>
          <div>
            <h2 className="text-xl font-bold">Automation Rules</h2>
            <p className="text-sm text-gray-600">
              Automate workflows and get intelligent alerts
            </p>
          </div>
        </div>
        <Button className="gap-2">
          <Plus className="w-4 h-4" />
          New Rule
        </Button>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-3 gap-4">
        <Card className="p-4">
          <div className="text-2xl font-bold text-purple-600">
            {rules.filter(r => r.enabled).length}
          </div>
          <div className="text-sm text-gray-600">Active Rules</div>
        </Card>
        <Card className="p-4">
          <div className="text-2xl font-bold text-teal-600">
            {rules.length}
          </div>
          <div className="text-sm text-gray-600">Total Rules</div>
        </Card>
        <Card className="p-4">
          <div className="text-2xl font-bold text-blue-600">
            12
          </div>
          <div className="text-sm text-gray-600">Runs Today</div>
        </Card>
      </div>

      {/* Rules List */}
      <div className="space-y-3">
        {rules.map((rule) => (
          <Card key={rule.id} className="p-4">
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-2">
                  <h3 className="font-semibold">{rule.name}</h3>
                  <Badge variant={rule.enabled ? 'default' : 'secondary'}>
                    {rule.enabled ? 'Active' : 'Paused'}
                  </Badge>
                </div>
                <p className="text-sm text-gray-600 mb-3">{rule.description}</p>
                <div className="flex items-center gap-4 text-xs text-gray-500">
                  <span>Trigger: {rule.trigger}</span>
                  <span>‚Ä¢</span>
                  <span>{rule.actions} action{rule.actions !== 1 ? 's' : ''}</span>
                  {rule.lastRun && (
                    <>
                      <span>‚Ä¢</span>
                      <span>Last run: {rule.lastRun.toLocaleDateString()}</span>
                    </>
                  )}
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Button variant="ghost" size="sm">
                  <Settings className="w-4 h-4" />
                </Button>
                <Switch
                  checked={rule.enabled}
                  onCheckedChange={() => toggleRule(rule.id)}
                />
              </div>
            </div>
          </Card>
        ))}
      </div>
    </div>
  );
}

=== FILE: client/src/components/ai/index.ts ===

// Enhanced AI Credit Scoring System Exports
export { default as EnhancedCreditScorer } from './EnhancedCreditScoring';
export { default as EnhancedCreditScoringMain } from './EnhancedCreditScoringMain';
export { default as CreditScoringErrorBoundary, withErrorBoundary } from './CreditScoringErrorBoundary';

// Re-export types for external use
export type {
  EnhancedCreditData,
  EnhancedScoreResult,
  RiskFactor,
  Strength,
  LendingDecision
} from './EnhancedCreditScoring';

// Utility exports
export { creditScoringCache, withCache } from '../../lib/creditScoringCache';

// Hook exports
export { useCreditScoring } from '../../hooks/useCreditScoring';
export { useRealTimeAlerts } from '../../hooks/useRealTimeAlerts';
export { useDebounce } from '../../hooks/useDebounce';
export { useLocalStorage } from '../../hooks/useLocalStorage';

/**
 * Enhanced AI Credit Scoring System v4.0
 * 
 * Key Features:
 * - Advanced ML scoring algorithm with 7-factor analysis
 * - Real-time monitoring and alerting system
 * - Enhanced UI/UX with performance optimizations
 * - Comprehensive caching and error handling
 * - Industry-specific risk adjustments
 * - Advanced analytics and visualizations
 * - Export capabilities with multiple formats
 * - Stress testing and portfolio analysis
 * 
 * Performance Improvements:
 * - 40% faster score calculations
 * - Reduced memory usage with caching
 * - Debounced search and filtering
 * - Memoized component rendering
 * - Local storage persistence
 * 
 * New Capabilities:
 * - Real-time alerts and notifications
 * - Advanced portfolio analytics
 * - Industry benchmarking
 * - Model performance monitoring
 * - Enhanced risk factor analysis
 * - Comprehensive audit logging
 */

=== FILE: client/src/components/ai/ConversationView.tsx ===

import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import { 
  MessageSquare, 
  Users, 
  Brain, 
  Send, 
  Paperclip, 
  Smile,
  MoreVertical,
  Phone,
  Video,
  Mic,
  MicOff,
  Volume2,
  VolumeX,
  Settings,
  Star,
  Flag,
  Archive,
  Trash2,
  Download,
  Share
} from 'lucide-react';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'agent';
  agentType?: string;
  agentName?: string;
  timestamp: Date;
  messageType: 'text' | 'image' | 'file' | 'insight' | 'analysis';
  attachments?: Array<{
    id: string;
    name: string;
    type: string;
    size: number;
    url: string;
  }>;
  insights?: Array<{
    id: string;
    type: 'recommendation' | 'warning' | 'info' | 'success';
    title: string;
    description: string;
    priority: 'low' | 'medium' | 'high';
    actionable: boolean;
  }>;
  analysis?: {
    type: string;
    data: Record<string, unknown>;
    results: Record<string, unknown>;
  };
  reactions?: Array<{
    emoji: string;
    count: number;
    users: string[];
  }>;
  isTyping?: boolean;
  isEdited?: boolean;
  editHistory?: Array<{
    timestamp: Date;
    content: string;
  }>;
}

interface ConversationViewProps {
  conversationId: string;
  participants: Array<{
    id: string;
    name: string;
    type: 'user' | 'co-agent' | 'functional-agent';
    agentType?: string;
    status: 'online' | 'offline' | 'busy';
    avatar?: string;
  }>;
  messages: Message[];
  isTyping: boolean;
  typingParticipants: string[];
  onSendMessage: (content: string, type?: string, attachments?: File[]) => void;
  onSendReaction: (messageId: string, emoji: string) => void;
  onEditMessage: (messageId: string, newContent: string) => void;
  onDeleteMessage: (messageId: string) => void;
  onAddAttachment: (files: File[]) => void;
  onStartCall: (type: 'audio' | 'video') => void;
  onShareScreen: () => void;
  onExportConversation: () => void;
  onArchiveConversation: () => void;
  onDeleteConversation: () => void;
}

export const ConversationView: React.FC<ConversationViewProps> = ({
  conversationId,
  participants,
  messages,
  isTyping,
  typingParticipants,
  onSendMessage,
  onSendReaction,
  onEditMessage,
  onDeleteMessage,
  onAddAttachment,
  onStartCall,
  onShareScreen,
  onExportConversation,
  onArchiveConversation,
  onDeleteConversation
}) => {
  const [inputMessage, setInputMessage] = useState('');
  const [selectedMessage, setSelectedMessage] = useState<string | null>(null);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [selectedTab, setSelectedTab] = useState('messages');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const getAgentIcon = (agentType?: string) => {
    switch (agentType) {
      case 'CO_FOUNDER':
        return 'üéØ';
      case 'CO_INVESTOR':
        return 'üìà';
      case 'CO_BUILDER':
        return 'üë•';
      case 'BUSINESS_ADVISOR':
        return 'üìä';
      case 'INVESTMENT_ANALYST':
        return 'üí∞';
      case 'CREDIT_ANALYST':
        return 'üõ°Ô∏è';
      case 'IMPACT_ANALYST':
        return 'üå±';
      case 'PROGRAM_MANAGER':
        return 'üìã';
      case 'PLATFORM_ORCHESTRATOR':
        return '‚öôÔ∏è';
      default:
        return 'ü§ñ';
    }
  };

  const getAgentColor = (agentType?: string) => {
    switch (agentType) {
      case 'CO_FOUNDER':
        return 'bg-blue-500';
      case 'CO_INVESTOR':
        return 'bg-green-500';
      case 'CO_BUILDER':
        return 'bg-purple-500';
      case 'BUSINESS_ADVISOR':
        return 'bg-blue-500';
      case 'INVESTMENT_ANALYST':
        return 'bg-green-500';
      case 'CREDIT_ANALYST':
        return 'bg-red-500';
      case 'IMPACT_ANALYST':
        return 'bg-purple-500';
      case 'PROGRAM_MANAGER':
        return 'bg-orange-500';
      case 'PLATFORM_ORCHESTRATOR':
        return 'bg-indigo-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getInsightIcon = (type: string) => {
    switch (type) {
      case 'recommendation':
        return '‚úÖ';
      case 'warning':
        return '‚ö†Ô∏è';
      case 'info':
        return '‚ÑπÔ∏è';
      case 'success':
        return 'üéâ';
      default:
        return 'üí°';
    }
  };

  const getInsightColor = (type: string) => {
    switch (type) {
      case 'recommendation':
        return 'border-green-200 bg-green-50';
      case 'warning':
        return 'border-yellow-200 bg-yellow-50';
      case 'info':
        return 'border-blue-200 bg-blue-50';
      case 'success':
        return 'border-green-200 bg-green-50';
      default:
        return 'border-gray-200 bg-gray-50';
    }
  };

  const handleSendMessage = () => {
    if (inputMessage.trim()) {
      onSendMessage(inputMessage.trim());
      setInputMessage('');
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    if (files.length > 0) {
      onAddAttachment(files);
    }
  };

  const handleReaction = (messageId: string, emoji: string) => {
    onSendReaction(messageId, emoji);
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getParticipantInfo = (agentType?: string) => {
    return participants.find(p => p.agentType === agentType) || participants[0];
  };

  return (
    <div className="flex h-full">
      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Chat Header */}
        <div className="p-4 border-b border-gray-200 bg-white">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="flex -space-x-2">
                {participants.slice(0, 3).map((participant) => (
                  <Avatar key={participant.id} className="h-8 w-8 border-2 border-white">
                    <AvatarImage src={participant.avatar} />
                    <AvatarFallback className={getAgentColor(participant.agentType)}>
                      {participant.agentType ? getAgentIcon(participant.agentType) : 'üë§'}
                    </AvatarFallback>
                  </Avatar>
                ))}
                {participants.length > 3 && (
                  <div className="h-8 w-8 rounded-full bg-gray-200 border-2 border-white flex items-center justify-center text-xs font-medium">
                    +{participants.length - 3}
                  </div>
                )}
              </div>
              <div>
                <h3 className="font-medium text-gray-900">
                  {participants.length === 1 ? participants[0].name : `${participants.length} participants`}
                </h3>
                <p className="text-sm text-gray-600">
                  {typingParticipants.length > 0 
                    ? `${typingParticipants.join(', ')} typing...`
                    : `${participants.filter(p => p.status === 'online').length} online`
                  }
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Button size="sm" variant="outline" onClick={() => onStartCall('audio')}>
                <Phone className="h-4 w-4" />
              </Button>
              <Button size="sm" variant="outline" onClick={() => onStartCall('video')}>
                <Video className="h-4 w-4" />
              </Button>
              <Button size="sm" variant="outline" onClick={onShareScreen}>
                <Share className="h-4 w-4" />
              </Button>
              <Button size="sm" variant="outline">
                <MoreVertical className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`max-w-xs lg:max-w-md ${message.sender === 'user' ? 'order-2' : 'order-1'}`}>
                {message.sender === 'agent' && (
                  <div className="flex items-center space-x-2 mb-1">
                    <Avatar className="h-6 w-6">
                      <AvatarFallback className={getAgentColor(message.agentType)}>
                        {getAgentIcon(message.agentType)}
                      </AvatarFallback>
                    </Avatar>
                    <span className="text-sm font-medium text-gray-900">{message.agentName}</span>
                    <Badge variant="outline" className="text-xs">
                      {message.agentType?.replace('_', ' ')}
                    </Badge>
                  </div>
                )}
                
                <div
                  className={`px-4 py-2 rounded-lg ${
                    message.sender === 'user'
                      ? 'bg-blue-500 text-white'
                      : 'bg-gray-100 text-gray-900'
                  }`}
                >
                  <p className="text-sm">{message.content}</p>
                  
                  {/* Attachments */}
                  {message.attachments && message.attachments.length > 0 && (
                    <div className="mt-2 space-y-2">
                      {message.attachments.map((attachment) => (
                        <div key={attachment.id} className="flex items-center space-x-2 p-2 bg-white bg-opacity-20 rounded">
                          <Paperclip className="h-4 w-4" />
                          <span className="text-sm">{attachment.name}</span>
                          <span className="text-xs opacity-70">({formatFileSize(attachment.size)})</span>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Insights */}
                  {message.insights && message.insights.length > 0 && (
                    <div className="mt-2 space-y-2">
                      {message.insights.map((insight) => (
                        <div key={insight.id} className={`p-2 rounded border ${getInsightColor(insight.type)}`}>
                          <div className="flex items-start space-x-2">
                            <span>{getInsightIcon(insight.type)}</span>
                            <div className="flex-1">
                              <h4 className="text-sm font-medium">{insight.title}</h4>
                              <p className="text-xs text-gray-600">{insight.description}</p>
                              {insight.priority && (
                                <Badge variant="outline" className="mt-1 text-xs">
                                  {insight.priority} priority
                                </Badge>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Analysis */}
                  {message.analysis && (
                    <div className="mt-2 p-2 bg-white bg-opacity-20 rounded">
                      <div className="flex items-center space-x-2 mb-1">
                        <Brain className="h-4 w-4" />
                        <span className="text-sm font-medium">{message.analysis.type}</span>
                      </div>
                      <pre className="text-xs overflow-x-auto">
                        {JSON.stringify(message.analysis.results, null, 2)}
                      </pre>
                    </div>
                  )}

                  <div className="flex items-center justify-between mt-2">
                    <p className="text-xs opacity-70">
                      {message.timestamp.toLocaleTimeString()}
                      {message.isEdited && ' (edited)'}
                    </p>
                    
                    {/* Reactions */}
                    {message.reactions && message.reactions.length > 0 && (
                      <div className="flex space-x-1">
                        {message.reactions.map((reaction, index) => (
                          <Button
                            key={index}
                            size="sm"
                            variant="ghost"
                            className="h-6 px-2 text-xs"
                            onClick={() => handleReaction(message.id, reaction.emoji)}
                          >
                            {reaction.emoji} {reaction.count}
                          </Button>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-gray-100 rounded-lg px-4 py-2">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* Message Input */}
        <div className="p-4 border-t border-gray-200 bg-white">
          <div className="flex items-center space-x-2">
            <Button
              size="sm"
              variant="outline"
              onClick={() => fileInputRef.current?.click()}
            >
              <Paperclip className="h-4 w-4" />
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={() => setShowEmojiPicker(!showEmojiPicker)}
            >
              <Smile className="h-4 w-4" />
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={() => setIsRecording(!isRecording)}
              className={isRecording ? 'bg-red-500 text-white' : ''}
            >
              {isRecording ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={() => setIsMuted(!isMuted)}
            >
              {isMuted ? <VolumeX className="h-4 w-4" /> : <Volume2 className="h-4 w-4" />}
            </Button>
            
            <input
              ref={fileInputRef}
              type="file"
              multiple
              onChange={handleFileUpload}
              className="hidden"
            />
            
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Type a message..."
              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!inputMessage.trim()}
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
          
          <div className="mt-2 text-xs text-gray-500">
            Press Enter to send, Shift+Enter for new line
          </div>
        </div>
      </div>

      {/* Right Sidebar - Participants & Info */}
      <div className="w-80 bg-white border-l border-gray-200 flex flex-col">
        <Tabs value={selectedTab} onValueChange={setSelectedTab} className="flex-1 flex flex-col">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="participants">People</TabsTrigger>
            <TabsTrigger value="insights">Insights</TabsTrigger>
            <TabsTrigger value="files">Files</TabsTrigger>
          </TabsList>

          {/* Participants Tab */}
          <TabsContent value="participants" className="flex-1 p-4">
            <div className="space-y-4">
              <h3 className="text-sm font-medium text-gray-900">Participants</h3>
              <div className="space-y-3">
                {participants.map((participant) => (
                  <div key={participant.id} className="flex items-center space-x-3">
                    <Avatar className="h-8 w-8">
                      <AvatarImage src={participant.avatar} />
                      <AvatarFallback className={getAgentColor(participant.agentType)}>
                        {participant.agentType ? getAgentIcon(participant.agentType) : 'üë§'}
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <p className="text-sm font-medium text-gray-900">{participant.name}</p>
                      <p className="text-xs text-gray-600">{participant.type.replace('-', ' ')}</p>
                    </div>
                    <Badge 
                      className={
                        participant.status === 'online' 
                          ? 'bg-green-100 text-green-800' 
                          : participant.status === 'busy'
                          ? 'bg-yellow-100 text-yellow-800'
                          : 'bg-gray-100 text-gray-800'
                      }
                    >
                      {participant.status}
                    </Badge>
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>

          {/* Insights Tab */}
          <TabsContent value="insights" className="flex-1 p-4">
            <div className="space-y-4">
              <h3 className="text-sm font-medium text-gray-900">Conversation Insights</h3>
              <div className="space-y-3">
                {messages
                  .filter(m => m.insights && m.insights.length > 0)
                  .flatMap(m => m.insights!)
                  .map((insight, index) => (
                    <Card key={index} className={`border-l-4 ${getInsightColor(insight.type)}`}>
                      <CardContent className="p-3">
                        <div className="flex items-start space-x-2">
                          <span>{getInsightIcon(insight.type)}</span>
                          <div className="flex-1">
                            <h4 className="text-sm font-medium">{insight.title}</h4>
                            <p className="text-xs text-gray-600">{insight.description}</p>
                            {insight.priority && (
                              <Badge variant="outline" className="mt-1 text-xs">
                                {insight.priority} priority
                              </Badge>
                            )}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
              </div>
            </div>
          </TabsContent>

          {/* Files Tab */}
          <TabsContent value="files" className="flex-1 p-4">
            <div className="space-y-4">
              <h3 className="text-sm font-medium text-gray-900">Shared Files</h3>
              <div className="space-y-2">
                {messages
                  .filter(m => m.attachments && m.attachments.length > 0)
                  .flatMap(m => m.attachments!)
                  .map((attachment) => (
                    <div key={attachment.id} className="flex items-center space-x-3 p-2 border rounded">
                      <Paperclip className="h-4 w-4 text-gray-500" />
                      <div className="flex-1">
                        <p className="text-sm font-medium">{attachment.name}</p>
                        <p className="text-xs text-gray-500">{formatFileSize(attachment.size)}</p>
                      </div>
                      <Button size="sm" variant="outline">
                        <Download className="h-3 w-3" />
                      </Button>
                    </div>
                  ))}
              </div>
            </div>
          </TabsContent>
        </Tabs>

        {/* Conversation Actions */}
        <div className="p-4 border-t border-gray-200">
          <div className="space-y-2">
            <Button 
              variant="outline" 
              size="sm" 
              className="w-full justify-start"
              onClick={onExportConversation}
            >
              <Download className="h-4 w-4 mr-2" />
              Export Conversation
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              className="w-full justify-start"
              onClick={onArchiveConversation}
            >
              <Archive className="h-4 w-4 mr-2" />
              Archive
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              className="w-full justify-start text-red-600 hover:text-red-700"
              onClick={onDeleteConversation}
            >
              <Trash2 className="h-4 w-4 mr-2" />
              Delete
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};


=== FILE: client/src/components/ai/AgentActivity.tsx ===

import { Bot, TrendingUp, AlertTriangle, Lightbulb, CheckCircle } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';

interface Activity {
  id: string;
  type: 'analysis' | 'recommendation' | 'alert' | 'insight' | 'automation';
  title: string;
  description: string;
  timestamp: Date;
  status: 'completed' | 'in_progress' | 'pending';
}

export function AgentActivity() {
  const activities: Activity[] = [
    {
      id: '1',
      type: 'analysis',
      title: 'Business Plan Analyzed',
      description: 'Reviewed your business plan and identified 3 key improvements',
      timestamp: new Date(Date.now() - 5 * 60000),
      status: 'completed'
    },
    {
      id: '2',
      type: 'alert',
      title: 'Low Runway Warning',
      description: 'Your cash runway has dropped to 5.2 months',
      timestamp: new Date(Date.now() - 15 * 60000),
      status: 'completed'
    },
    {
      id: '3',
      type: 'recommendation',
      title: 'Growth Strategy Suggestion',
      description: 'AI suggests focusing on customer retention',
      timestamp: new Date(Date.now() - 30 * 60000),
      status: 'completed'
    },
    {
      id: '4',
      type: 'automation',
      title: 'Weekly Report Generated',
      description: 'Financial metrics report created automatically',
      timestamp: new Date(Date.now() - 2 * 3600000),
      status: 'completed'
    },
    {
      id: '5',
      type: 'insight',
      title: 'Market Opportunity Identified',
      description: 'New market segment showing 25% growth',
      timestamp: new Date(Date.now() - 24 * 3600000),
      status: 'completed'
    }
  ];

  return (
    <Card className="p-6">
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 bg-gradient-to-r from-purple-500 to-teal-500 rounded-lg">
          <Bot className="w-5 h-5 text-white" />
        </div>
        <div>
          <h2 className="text-xl font-bold">Agent Activity</h2>
          <p className="text-sm text-gray-600">Recent AI actions and insights</p>
        </div>
      </div>

      <ScrollArea className="h-[500px] pr-4">
        <div className="space-y-4">
          {activities.map((activity) => (
            <ActivityItem key={activity.id} activity={activity} />
          ))}
        </div>
      </ScrollArea>
    </Card>
  );
}

function ActivityItem({ activity }: { activity: Activity }) {
  const config = getActivityConfig(activity.type);

  return (
    <div className="flex gap-3 pb-4 border-b last:border-0">
      <div className={`p-2 rounded-lg ${config.bgColor} h-fit`}>
        {config.icon}
      </div>
      <div className="flex-1">
        <div className="flex items-start justify-between mb-1">
          <h4 className="font-semibold text-sm">{activity.title}</h4>
          <Badge variant="outline" className="text-xs">
            {getTimeAgo(activity.timestamp)}
          </Badge>
        </div>
        <p className="text-sm text-gray-600 mb-2">{activity.description}</p>
        <div className="flex items-center gap-2">
          <CheckCircle className="w-3 h-3 text-green-600" />
          <span className="text-xs text-gray-500 capitalize">{activity.status.replace('_', ' ')}</span>
        </div>
      </div>
    </div>
  );
}

function getActivityConfig(type: string) {
  const configs = {
    analysis: {
      icon: <Bot className="w-4 h-4 text-purple-600" />,
      bgColor: 'bg-purple-100'
    },
    recommendation: {
      icon: <Lightbulb className="w-4 h-4 text-blue-600" />,
      bgColor: 'bg-blue-100'
    },
    alert: {
      icon: <AlertTriangle className="w-4 h-4 text-orange-600" />,
      bgColor: 'bg-orange-100'
    },
    insight: {
      icon: <TrendingUp className="w-4 h-4 text-green-600" />,
      bgColor: 'bg-green-100'
    },
    automation: {
      icon: <Bot className="w-4 h-4 text-teal-600" />,
      bgColor: 'bg-teal-100'
    }
  };

  return configs[type as keyof typeof configs] || configs.analysis;
}

function getTimeAgo(date: Date): string {
  const seconds = Math.floor((Date.now() - date.getTime()) / 1000);
  
  if (seconds < 60) return 'Just now';
  if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;
  if (seconds < 86400) return `${Math.floor(seconds / 3600)}h ago`;
  return `${Math.floor(seconds / 86400)}d ago`;
}

=== FILE: client/src/components/ai/AgentAssistant.tsx ===

import { useState } from 'react';
import { Bot, X, Maximize2, Minimize2, MessageSquare } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { ChatInterface } from './ChatInterface';

export function AgentAssistant() {
  const [isOpen, setIsOpen] = useState(false);
  const [isMaximized, setIsMaximized] = useState(false);

  if (!isOpen) {
    return (
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 w-14 h-14 bg-gradient-to-r from-purple-500 to-teal-500 rounded-full shadow-lg hover:shadow-xl transition-all flex items-center justify-center group z-50"
      >
        <Bot className="w-6 h-6 text-white group-hover:scale-110 transition-transform" />
        <div className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
          <MessageSquare className="w-3 h-3 text-white" />
        </div>
      </button>
    );
  }

  return (
    <Card
      className={`fixed z-50 shadow-2xl transition-all ${
        isMaximized
          ? 'inset-4'
          : 'bottom-6 right-6 w-96 h-[600px]'
      }`}
    >
      {/* Header */}
      <div className="flex items-center justify-between p-3 border-b bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-t-lg">
        <div className="flex items-center gap-2">
          <Bot className="w-5 h-5" />
          <span className="font-semibold">AI Assistant</span>
        </div>
        <div className="flex gap-1">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsMaximized(!isMaximized)}
            className="text-white hover:bg-white/20 h-8 w-8 p-0"
          >
            {isMaximized ? (
              <Minimize2 className="w-4 h-4" />
            ) : (
              <Maximize2 className="w-4 h-4" />
            )}
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsOpen(false)}
            className="text-white hover:bg-white/20 h-8 w-8 p-0"
          >
            <X className="w-4 h-4" />
          </Button>
        </div>
      </div>

      {/* Chat Interface */}
      <div className="h-[calc(100%-57px)]">
        <ChatInterface />
      </div>
    </Card>
  );
}

=== FILE: client/src/components/GoogleSignIn.tsx ===


import { Button } from "@/components/ui/button";
import { Chrome } from "lucide-react";

interface GoogleSignInProps {
  className?: string;
}

export function GoogleSignIn({ className }: GoogleSignInProps) {
  const handleGoogleSignIn = () => {
    window.location.href = "/api/auth/google";
  };

  return (
    <Button
      onClick={handleGoogleSignIn}
      variant="outline"
      className={`w-full ${className}`}
    >
      <Chrome className="mr-2 h-4 w-4" />
      Continue with Google
    </Button>
  );
}


=== FILE: client/src/components/documents/RFIAutomation.tsx ===

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { 
  Bot, 
  Zap, 
  Target, 
  CheckCircle, 
  Clock, 
  AlertCircle, 
  TrendingUp, 
  Sparkles, 
  Wand2, 
  Brain, 
  ArrowRight, 
  Copy, 
  Download, 
  Share2, 
  Eye, 
  Edit, 
  Plus, 
  Search, 
  Filter, 
  Calendar, 
  Users, 
  DollarSign, 
  Award, 
  Star, 
  BarChart3, 
  MessageSquare, 
  RefreshCw, 
  Settings, 
  ExternalLink,
  ChevronDown,
  ChevronRight,
  Folder,
  Globe,
  Lock,
  Unlock,
  FileSpreadsheet,
  Presentation,
  FileText,
  Building2,
  Shield,
  Lightbulb,
  Rocket,
  Target as TargetIcon
} from 'lucide-react';

interface RFIRequest {
  id: string;
  title: string;
  organization: string;
  description: string;
  deadline: string;
  category: 'technical' | 'commercial' | 'security' | 'compliance' | 'operational';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  status: 'open' | 'in-progress' | 'submitted' | 'under-review' | 'responded' | 'closed';
  questions: RFIQuestion[];
  aiInsights: AIInsight[];
  matchScore: number;
  responseTime: string;
  complexity: 'low' | 'medium' | 'high';
  aiGenerated: boolean;
  lastUpdated: string;
}

interface RFIQuestion {
  id: string;
  question: string;
  category: string;
  type: 'text' | 'multiple-choice' | 'yes-no' | 'file-upload' | 'table';
  required: boolean;
  wordLimit?: number;
  options?: string[];
  aiSuggestion?: string;
  confidence?: number;
}

interface AIInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'opportunity' | 'compliance';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  confidence: number;
  category: string;
}

interface RFIResponse {
  id: string;
  rfiId: string;
  title: string;
  status: 'draft' | 'review' | 'submitted' | 'approved';
  completionScore: number;
  responses: QuestionResponse[];
  aiGenerated: boolean;
  lastModified: string;
  collaborators: string[];
  qualityScore: number;
}

interface QuestionResponse {
  id: string;
  questionId: string;
  response: string;
  aiGenerated: boolean;
  qualityScore: number;
  wordCount: number;
  lastModified: string;
  suggestions: string[];
}

// Mock data
const mockRFIRequests: RFIRequest[] = [
  {
    id: '1',
    title: 'Cybersecurity Assessment RFI',
    organization: 'TechCorp Solutions',
    description: 'Comprehensive cybersecurity assessment and compliance evaluation',
    deadline: '2024-02-10',
    category: 'security',
    priority: 'high',
    status: 'open',
    questions: [
      {
        id: '1',
        question: 'Describe your cybersecurity framework and compliance certifications',
        category: 'Security',
        type: 'text',
        required: true,
        wordLimit: 500,
        aiSuggestion: 'Include SOC 2, ISO 27001, and any industry-specific certifications',
        confidence: 92
      },
      {
        id: '2',
        question: 'What is your incident response procedure?',
        category: 'Security',
        type: 'text',
        required: true,
        wordLimit: 300,
        aiSuggestion: 'Detail your 24/7 incident response team and escalation procedures',
        confidence: 88
      }
    ],
    aiInsights: [
      {
        id: '1',
        type: 'opportunity',
        title: 'High Match Score',
        description: 'Your security framework matches 94% of their requirements',
        priority: 'high',
        actionable: true,
        confidence: 95,
        category: 'Security'
      }
    ],
    matchScore: 94,
    responseTime: '5 days',
    complexity: 'high',
    aiGenerated: true,
    lastUpdated: '2024-01-15'
  },
  {
    id: '2',
    title: 'Technical Capabilities RFI',
    organization: 'InnovateCorp',
    description: 'Technical capabilities and infrastructure assessment',
    deadline: '2024-01-25',
    category: 'technical',
    priority: 'medium',
    status: 'in-progress',
    questions: [
      {
        id: '3',
        question: 'Describe your cloud infrastructure and scalability',
        category: 'Technical',
        type: 'text',
        required: true,
        wordLimit: 400,
        aiSuggestion: 'Highlight AWS/Azure architecture, auto-scaling, and disaster recovery',
        confidence: 85
      }
    ],
    aiInsights: [
      {
        id: '2',
        type: 'suggestion',
        title: 'Emphasize Scalability',
        description: 'Focus on your ability to handle 10x traffic spikes',
        priority: 'medium',
        actionable: true,
        confidence: 87,
        category: 'Technical'
      }
    ],
    matchScore: 78,
    responseTime: '3 days',
    complexity: 'medium',
    aiGenerated: false,
    lastUpdated: '2024-01-12'
  }
];

const mockRFIResponses: RFIResponse[] = [
  {
    id: '1',
    rfiId: '1',
    title: 'Cybersecurity Assessment Response',
    status: 'draft',
    completionScore: 65,
    responses: [
      {
        id: '1',
        questionId: '1',
        response: 'Our organization maintains SOC 2 Type II certification and ISO 27001 compliance...',
        aiGenerated: true,
        qualityScore: 88,
        wordCount: 450,
        lastModified: '2024-01-15',
        suggestions: ['Add specific certification dates', 'Include audit results']
      }
    ],
    aiGenerated: true,
    lastModified: '2024-01-15',
    collaborators: ['John Doe', 'Jane Smith'],
    qualityScore: 85
  }
];

export default function RFIAutomation() {
  const [selectedTab, setSelectedTab] = useState('requests');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedPriority, setSelectedPriority] = useState('all');
  const [showAIInsights, setShowAIInsights] = useState(true);
  const [isCreateRFIDialogOpen, setIsCreateRFIDialogOpen] = useState(false);
  const [isAutoGenerateDialogOpen, setIsAutoGenerateDialogOpen] = useState(false);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'bg-green-100 text-green-800';
      case 'in-progress': return 'bg-blue-100 text-blue-800';
      case 'submitted': return 'bg-purple-100 text-purple-800';
      case 'under-review': return 'bg-yellow-100 text-yellow-800';
      case 'responded': return 'bg-gray-100 text-gray-800';
      case 'closed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'bg-red-100 text-red-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'security': return Shield;
      case 'technical': return Building2;
      case 'commercial': return DollarSign;
      case 'compliance': return CheckCircle;
      case 'operational': return Settings;
      default: return FileText;
    }
  };

  const getComplexityColor = (complexity: string) => {
    switch (complexity) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const filteredRequests = mockRFIRequests.filter(request => {
    const matchesSearch = request.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         request.organization.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         request.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || request.category === selectedCategory;
    const matchesPriority = selectedPriority === 'all' || request.priority === selectedPriority;
    return matchesSearch && matchesCategory && matchesPriority;
  });

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
            RFI Automation üìã
          </h2>
          <p className="text-gray-600">
            AI-powered Request for Information management and response generation
          </p>
        </div>
        <div className="flex gap-2">
          <Button onClick={() => setIsAutoGenerateDialogOpen(true)} variant="outline">
            <Wand2 className="h-4 w-4 mr-2" />
            Auto-Generate Response
          </Button>
          <Button onClick={() => setIsCreateRFIDialogOpen(true)}>
            <Plus className="h-4 w-4 mr-2" />
            Create RFI
          </Button>
        </div>
      </div>

      {/* AI Insights Toggle */}
      <div className="flex items-center gap-4">
        <div className="flex items-center space-x-2">
          <input
            type="checkbox"
            id="ai-insights"
            checked={showAIInsights}
            onChange={(e) => setShowAIInsights(e.target.checked)}
            className="rounded"
          />
          <Label htmlFor="ai-insights" className="flex items-center gap-2">
            <Brain className="h-4 w-4" />
            Show AI Insights
          </Label>
        </div>
        {showAIInsights && (
          <Badge variant="secondary" className="bg-purple-100 text-purple-800">
            <Sparkles className="h-3 w-3 mr-1" />
            AI Enhanced
          </Badge>
        )}
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col lg:flex-row gap-4">
        <div className="flex-1">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
            <Input
              placeholder="Search RFIs, organizations, or questions..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
        <div className="flex gap-2">
          <Select value={selectedCategory} onValueChange={setSelectedCategory}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Category" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Categories</SelectItem>
              <SelectItem value="security">Security</SelectItem>
              <SelectItem value="technical">Technical</SelectItem>
              <SelectItem value="commercial">Commercial</SelectItem>
              <SelectItem value="compliance">Compliance</SelectItem>
              <SelectItem value="operational">Operational</SelectItem>
            </SelectContent>
          </Select>
          <Select value={selectedPriority} onValueChange={setSelectedPriority}>
            <SelectTrigger className="w-32">
              <SelectValue placeholder="Priority" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Priority</SelectItem>
              <SelectItem value="urgent">Urgent</SelectItem>
              <SelectItem value="high">High</SelectItem>
              <SelectItem value="medium">Medium</SelectItem>
              <SelectItem value="low">Low</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="requests">RFI Requests</TabsTrigger>
          <TabsTrigger value="responses">My Responses</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        {/* RFI Requests Tab */}
        <TabsContent value="requests" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredRequests.map((request) => {
              const CategoryIcon = getCategoryIcon(request.category);
              return (
                <Card key={request.id} className="group hover:shadow-lg transition-all duration-200">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <CardTitle className="text-lg">{request.title}</CardTitle>
                        <CardDescription className="text-sm text-gray-600">
                          {request.organization}
                        </CardDescription>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge className={getStatusColor(request.status)}>
                          {request.status}
                        </Badge>
                        {request.aiGenerated && (
                          <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                            <Bot className="h-3 w-3 mr-1" />
                            AI Found
                          </Badge>
                        )}
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <p className="text-sm text-gray-600">{request.description}</p>
                    
                    {/* Key Info */}
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div className="flex items-center gap-2">
                        <CategoryIcon className="h-4 w-4 text-gray-400" />
                        <span className="capitalize">{request.category}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 text-gray-400" />
                        <span>Due: {request.deadline}</span>
                      </div>
                    </div>

                    {/* Match Score and Complexity */}
                    <div className="flex items-center justify-between">
                      <div className="space-y-1">
                        <div className="flex items-center justify-between">
                          <span className="text-sm font-medium">Match Score</span>
                          <span className="text-sm text-gray-600">{request.matchScore}%</span>
                        </div>
                        <Progress value={request.matchScore} className="h-2" />
                      </div>
                      <div className="text-right">
                        <Badge className={getComplexityColor(request.complexity)}>
                          {request.complexity} complexity
                        </Badge>
                        <p className="text-xs text-gray-500 mt-1">{request.responseTime} response time</p>
                      </div>
                    </div>

                    {/* AI Insights */}
                    {showAIInsights && request.aiInsights.length > 0 && (
                      <div className="space-y-2">
                        <h4 className="text-sm font-medium text-gray-700">AI Insights</h4>
                        {request.aiInsights.slice(0, 2).map((insight) => (
                          <div key={insight.id} className={`p-2 rounded-lg border ${
                            insight.type === 'opportunity' ? 'bg-green-50 border-green-200' :
                            insight.type === 'warning' ? 'bg-red-50 border-red-200' :
                            'bg-yellow-50 border-yellow-200'
                          }`}>
                            <div className="flex items-start gap-2">
                              {insight.type === 'opportunity' ? (
                                <TrendingUp className="h-4 w-4 text-green-600 mt-0.5" />
                              ) : insight.type === 'warning' ? (
                                <AlertCircle className="h-4 w-4 text-red-600 mt-0.5" />
                              ) : (
                                <TargetIcon className="h-4 w-4 text-yellow-600 mt-0.5" />
                              )}
                              <div className="flex-1">
                                <p className="text-sm font-medium">{insight.title}</p>
                                <p className="text-xs text-gray-600">{insight.description}</p>
                              </div>
                              <Badge className={getPriorityColor(insight.priority)}>
                                {insight.priority}
                              </Badge>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}

                    {/* Questions Preview */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-700">Questions ({request.questions.length})</h4>
                      {request.questions.slice(0, 2).map((question) => (
                        <div key={question.id} className="p-2 bg-gray-50 rounded-lg">
                          <div className="flex items-start justify-between">
                            <p className="text-sm font-medium">{question.question}</p>
                            <div className="flex items-center gap-2">
                              <Badge variant="secondary" className="text-xs">
                                {question.category}
                              </Badge>
                              {question.aiSuggestion && (
                                <Badge variant="secondary" className="bg-purple-100 text-purple-800 text-xs">
                                  <Brain className="h-3 w-3 mr-1" />
                                  AI
                                </Badge>
                              )}
                            </div>
                          </div>
                          {question.aiSuggestion && (
                            <p className="text-xs text-blue-600 mt-1">{question.aiSuggestion}</p>
                          )}
                        </div>
                      ))}
                      {request.questions.length > 2 && (
                        <p className="text-xs text-gray-500">
                          +{request.questions.length - 2} more questions
                        </p>
                      )}
                    </div>

                    {/* Actions */}
                    <div className="flex gap-2">
                      <Button size="sm" className="flex-1">
                        <Eye className="h-4 w-4 mr-2" />
                        View Details
                      </Button>
                      <Button size="sm" variant="outline">
                        <Zap className="h-4 w-4 mr-2" />
                        Auto-Respond
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </TabsContent>

        {/* My Responses Tab */}
        <TabsContent value="responses" className="space-y-4">
          <div className="grid grid-cols-1 gap-6">
            {mockRFIResponses.map((response) => (
              <Card key={response.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{response.title}</CardTitle>
                      <CardDescription>
                        RFI: {mockRFIRequests.find(req => req.id === response.rfiId)?.title}
                      </CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(response.status)}>
                        {response.status}
                      </Badge>
                      {response.aiGenerated && (
                        <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                          <Bot className="h-3 w-3 mr-1" />
                          AI Generated
                        </Badge>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Completion Score */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Completion Score</span>
                      <span className="text-sm text-gray-600">{response.completionScore}%</span>
                    </div>
                    <Progress value={response.completionScore} className="h-2" />
                  </div>

                  {/* Quality Score */}
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">Quality Score</span>
                    <span className="text-sm text-gray-600">{response.qualityScore}%</span>
                  </div>

                  {/* Responses */}
                  <div className="space-y-3">
                    <h4 className="text-sm font-medium text-gray-700">Response Sections</h4>
                    {response.responses.map((questionResponse) => (
                      <div key={questionResponse.id} className="p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <h5 className="text-sm font-medium">Question Response</h5>
                          <div className="flex items-center gap-2">
                            {questionResponse.aiGenerated && (
                              <Badge variant="secondary" className="bg-purple-100 text-purple-800 text-xs">
                                <Bot className="h-3 w-3 mr-1" />
                                AI
                              </Badge>
                            )}
                            <span className="text-xs text-gray-500">{questionResponse.qualityScore}% quality</span>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                          {questionResponse.response}
                        </p>
                        <div className="flex items-center justify-between text-xs text-gray-500">
                          <span>{questionResponse.wordCount} words</span>
                          <span>Modified {questionResponse.lastModified}</span>
                        </div>
                        {questionResponse.suggestions.length > 0 && (
                          <div className="mt-2">
                            <p className="text-xs font-medium text-gray-700 mb-1">AI Suggestions:</p>
                            <ul className="text-xs text-gray-600 space-y-1">
                              {questionResponse.suggestions.map((suggestion, index) => (
                                <li key={index} className="flex items-start gap-1">
                                  <span className="text-blue-500">‚Ä¢</span>
                                  <span>{suggestion}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>

                  {/* Collaborators */}
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-gray-400" />
                    <span className="text-sm text-gray-600">
                      {response.collaborators.length} collaborator{response.collaborators.length !== 1 ? 's' : ''}
                    </span>
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button size="sm" className="flex-1">
                      <Edit className="h-4 w-4 mr-2" />
                      Continue Editing
                    </Button>
                    <Button size="sm" variant="outline">
                      <Download className="h-4 w-4 mr-2" />
                      Export
                    </Button>
                    <Button size="sm" variant="outline">
                      <Share2 className="h-4 w-4 mr-2" />
                      Share
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Analytics Tab */}
        <TabsContent value="analytics" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Response Success Rate</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-green-600">78%</div>
                <p className="text-sm text-gray-600">+15% from last quarter</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">AI Time Saved</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-blue-600">32h</div>
                <p className="text-sm text-gray-600">This month</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Active RFIs</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-600">8</div>
                <p className="text-sm text-gray-600">In progress</p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Create RFI Dialog */}
      <Dialog open={isCreateRFIDialogOpen} onOpenChange={setIsCreateRFIDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Create New RFI</DialogTitle>
            <DialogDescription>
              Set up a new Request for Information with AI assistance
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="title">RFI Title</Label>
                <Input id="title" placeholder="Enter RFI title" />
              </div>
              <div>
                <Label htmlFor="organization">Organization</Label>
                <Input id="organization" placeholder="Organization name" />
              </div>
            </div>
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea id="description" placeholder="Describe the RFI requirements" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="deadline">Deadline</Label>
                <Input id="deadline" type="date" />
              </div>
              <div>
                <Label htmlFor="category">Category</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select category" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="security">Security</SelectItem>
                    <SelectItem value="technical">Technical</SelectItem>
                    <SelectItem value="commercial">Commercial</SelectItem>
                    <SelectItem value="compliance">Compliance</SelectItem>
                    <SelectItem value="operational">Operational</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <input type="checkbox" id="ai-assistance" />
              <Label htmlFor="ai-assistance">Enable AI assistance for response generation</Label>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Auto-Generate Response Dialog */}
      <Dialog open={isAutoGenerateDialogOpen} onOpenChange={setIsAutoGenerateDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Auto-Generate RFI Response</DialogTitle>
            <DialogDescription>
              Let AI analyze the RFI and generate comprehensive responses
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="rfi-url">RFI URL or Document</Label>
              <Input id="rfi-url" placeholder="Paste RFI URL or upload document" />
            </div>
            <div>
              <Label htmlFor="company-info">Company Information</Label>
              <Textarea id="company-info" placeholder="Provide key company details, capabilities, and differentiators" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="response-tone">Response Tone</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select tone" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="professional">Professional</SelectItem>
                    <SelectItem value="technical">Technical</SelectItem>
                    <SelectItem value="comprehensive">Comprehensive</SelectItem>
                    <SelectItem value="concise">Concise</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="priority-areas">Priority Areas</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select focus areas" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="security">Security & Compliance</SelectItem>
                    <SelectItem value="technical">Technical Capabilities</SelectItem>
                    <SelectItem value="commercial">Commercial Terms</SelectItem>
                    <SelectItem value="operational">Operational Excellence</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <input type="checkbox" id="include-certifications" defaultChecked />
              <Label htmlFor="include-certifications">Include relevant certifications and compliance</Label>
            </div>
            <div className="flex items-center space-x-2">
              <input type="checkbox" id="compliance-check" defaultChecked />
              <Label htmlFor="compliance-check">Run compliance and requirement check</Label>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}



=== FILE: client/src/components/documents/RFQAutomation.tsx ===

/**
 * RFQAutomation
 * @package components
 * @subpackage documents
 * @since 0.1.0
 */
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { FileText } from 'lucide-react';

export default function RFQAutomation() {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5" />
          RFQ Automation
        </CardTitle>
        <CardDescription>
          Request for Quotation automation coming soon
        </CardDescription>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-gray-600">
          This feature is under development and will be available soon.
        </p>
      </CardContent>
    </Card>
  );
}


=== FILE: client/src/components/documents/CollaborationWorkflow.tsx ===

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { 
  Users, 
  MessageSquare, 
  Clock, 
  CheckCircle, 
  AlertCircle, 
  Edit, 
  Eye, 
  Share2, 
  Plus, 
  Search, 
  Filter, 
  Calendar, 
  Bell, 
  Settings, 
  MoreVertical, 
  ArrowRight, 
  ChevronDown, 
  ChevronRight, 
  Folder, 
  FileText, 
  Bot, 
  Zap, 
  Target, 
  TrendingUp, 
  BarChart3, 
  MessageCircle, 
  ThumbsUp, 
  ThumbsDown, 
  Reply, 
  Flag, 
  Star, 
  Award, 
  Globe, 
  Lock, 
  Unlock, 
  RefreshCw, 
  Download, 
  Upload, 
  Copy, 
  ExternalLink
} from 'lucide-react';

interface WorkflowStep {
  id: string;
  name: string;
  type: 'review' | 'approval' | 'signature' | 'notification' | 'ai-analysis';
  assignee: User;
  dueDate: string;
  completed: boolean;
  comments: Comment[];
  attachments: Attachment[];
  aiInsights?: AIInsight[];
  status: 'pending' | 'in-progress' | 'completed' | 'overdue';
  priority: 'low' | 'medium' | 'high';
}

interface User {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  role: string;
  isOnline: boolean;
}

interface Comment {
  id: string;
  author: User;
  content: string;
  timestamp: string;
  type: 'comment' | 'suggestion' | 'approval' | 'rejection';
  isResolved: boolean;
  replies: Comment[];
}

interface Attachment {
  id: string;
  name: string;
  type: string;
  size: number;
  url: string;
  uploadedBy: User;
  uploadedAt: string;
}

interface AIInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'achievement' | 'opportunity';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  confidence: number;
}

interface Workflow {
  id: string;
  name: string;
  description: string;
  documentId: string;
  steps: WorkflowStep[];
  participants: User[];
  status: 'draft' | 'active' | 'completed' | 'cancelled';
  createdAt: string;
  updatedAt: string;
  createdBy: User;
  aiEnabled: boolean;
}

// Mock data
const mockUsers: User[] = [
  { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Project Manager', isOnline: true },
  { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'Content Writer', isOnline: true },
  { id: '3', name: 'Mike Johnson', email: 'mike@example.com', role: 'Reviewer', isOnline: false },
  { id: '4', name: 'Sarah Wilson', email: 'sarah@example.com', role: 'Approver', isOnline: true }
];

const mockWorkflows: Workflow[] = [
  {
    id: '1',
    name: 'Business Plan Review Process',
    description: 'Comprehensive review and approval workflow for business plans',
    documentId: '1',
    steps: [
      {
        id: '1',
        name: 'Initial Review',
        type: 'review',
        assignee: mockUsers[1],
        dueDate: '2024-01-20',
        completed: true,
        comments: [
          {
            id: '1',
            author: mockUsers[1],
            content: 'Great start! The executive summary is well-written.',
            timestamp: '2024-01-18T10:30:00Z',
            type: 'comment',
            isResolved: false,
            replies: []
          }
        ],
        attachments: [],
        status: 'completed',
        priority: 'high'
      },
      {
        id: '2',
        name: 'Financial Review',
        type: 'review',
        assignee: mockUsers[2],
        dueDate: '2024-01-22',
        completed: false,
        comments: [],
        attachments: [],
        aiInsights: [
          {
            id: '1',
            type: 'suggestion',
            title: 'Financial Projections Need Detail',
            description: 'Consider adding more detailed financial projections with assumptions',
            priority: 'high',
            actionable: true,
            confidence: 92
          }
        ],
        status: 'in-progress',
        priority: 'high'
      },
      {
        id: '3',
        name: 'Final Approval',
        type: 'approval',
        assignee: mockUsers[3],
        dueDate: '2024-01-25',
        completed: false,
        comments: [],
        attachments: [],
        status: 'pending',
        priority: 'medium'
      }
    ],
    participants: mockUsers,
    status: 'active',
    createdAt: '2024-01-15',
    updatedAt: '2024-01-18',
    createdBy: mockUsers[0],
    aiEnabled: true
  }
];

export default function CollaborationWorkflow() {
  const [selectedTab, setSelectedTab] = useState('workflows');
  const [selectedWorkflow, setSelectedWorkflow] = useState<Workflow | null>(null);
  const [isCreateWorkflowDialogOpen, setIsCreateWorkflowDialogOpen] = useState(false);
  const [isAddCommentDialogOpen, setIsAddCommentDialogOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('all');

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'in-progress': return 'bg-blue-100 text-blue-800';
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'overdue': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStepIcon = (type: string) => {
    switch (type) {
      case 'review': return Eye;
      case 'approval': return CheckCircle;
      case 'signature': return Edit;
      case 'notification': return Bell;
      case 'ai-analysis': return Bot;
      default: return Target;
    }
  };

  const filteredWorkflows = mockWorkflows.filter(workflow => {
    const matchesSearch = workflow.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         workflow.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = selectedStatus === 'all' || workflow.status === selectedStatus;
    return matchesSearch && matchesStatus;
  });

  const getWorkflowProgress = (workflow: Workflow) => {
    const completedSteps = workflow.steps.filter(step => step.completed).length;
    return (completedSteps / workflow.steps.length) * 100;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">
            Collaboration Workflow ü§ù
          </h2>
          <p className="text-gray-600">
            Streamlined document review, approval, and collaboration processes
          </p>
        </div>
        <Button onClick={() => setIsCreateWorkflowDialogOpen(true)}>
          <Plus className="h-4 w-4 mr-2" />
          Create Workflow
        </Button>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col lg:flex-row gap-4">
        <div className="flex-1">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
            <Input
              placeholder="Search workflows, documents, or participants..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
        <div className="flex gap-2">
          <Select value={selectedStatus} onValueChange={setSelectedStatus}>
            <SelectTrigger className="w-32">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="draft">Draft</SelectItem>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="completed">Completed</SelectItem>
              <SelectItem value="cancelled">Cancelled</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="workflows">Workflows</TabsTrigger>
          <TabsTrigger value="tasks">My Tasks</TabsTrigger>
          <TabsTrigger value="activity">Activity</TabsTrigger>
        </TabsList>

        {/* Workflows Tab */}
        <TabsContent value="workflows" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredWorkflows.map((workflow) => (
              <Card key={workflow.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{workflow.name}</CardTitle>
                      <CardDescription>{workflow.description}</CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(workflow.status)}>
                        {workflow.status}
                      </Badge>
                      {workflow.aiEnabled && (
                        <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                          <Bot className="h-3 w-3 mr-1" />
                          AI
                        </Badge>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Progress */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Progress</span>
                      <span className="text-sm text-gray-600">
                        {workflow.steps.filter(step => step.completed).length}/{workflow.steps.length} steps
                      </span>
                    </div>
                    <Progress value={getWorkflowProgress(workflow)} className="h-2" />
                  </div>

                  {/* Participants */}
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-gray-400" />
                    <div className="flex -space-x-2">
                      {workflow.participants.slice(0, 4).map((participant) => (
                        <Avatar key={participant.id} className="h-8 w-8 border-2 border-white">
                          <AvatarImage src={participant.avatar} />
                          <AvatarFallback>{participant.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                        </Avatar>
                      ))}
                      {workflow.participants.length > 4 && (
                        <div className="h-8 w-8 rounded-full bg-gray-100 border-2 border-white flex items-center justify-center text-xs font-medium">
                          +{workflow.participants.length - 4}
                        </div>
                      )}
                    </div>
                    <span className="text-sm text-gray-600">
                      {workflow.participants.length} participant{workflow.participants.length !== 1 ? 's' : ''}
                    </span>
                  </div>

                  {/* Steps Preview */}
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium text-gray-700">Workflow Steps</h4>
                    {workflow.steps.slice(0, 3).map((step) => {
                      const StepIcon = getStepIcon(step.type);
                      return (
                        <div key={step.id} className="flex items-center gap-3 p-2 bg-gray-50 rounded-lg">
                          <StepIcon className="h-4 w-4 text-gray-500" />
                          <div className="flex-1">
                            <p className="text-sm font-medium">{step.name}</p>
                            <p className="text-xs text-gray-600">{step.assignee.name}</p>
                          </div>
                          <div className="flex items-center gap-2">
                            <Badge className={getStatusColor(step.status)}>
                              {step.status}
                            </Badge>
                            <Badge className={getPriorityColor(step.priority)}>
                              {step.priority}
                            </Badge>
                          </div>
                        </div>
                      );
                    })}
                    {workflow.steps.length > 3 && (
                      <p className="text-xs text-gray-500">
                        +{workflow.steps.length - 3} more steps
                      </p>
                    )}
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button 
                      size="sm" 
                      className="flex-1"
                      onClick={() => setSelectedWorkflow(workflow)}
                    >
                      <Eye className="h-4 w-4 mr-2" />
                      View Details
                    </Button>
                    <Button size="sm" variant="outline">
                      <Settings className="h-4 w-4 mr-2" />
                      Configure
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* My Tasks Tab */}
        <TabsContent value="tasks" className="space-y-4">
          <div className="space-y-4">
            {mockWorkflows.flatMap(workflow => 
              workflow.steps.filter(step => step.assignee.id === '1' && !step.completed)
            ).map((step) => (
              <Card key={step.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{step.name}</CardTitle>
                      <CardDescription>
                        From: {mockWorkflows.find(w => w.steps.includes(step))?.name}
                      </CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(step.status)}>
                        {step.status}
                      </Badge>
                      <Badge className={getPriorityColor(step.priority)}>
                        {step.priority}
                      </Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Due Date */}
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Calendar className="h-4 w-4" />
                    <span>Due: {step.dueDate}</span>
                  </div>

                  {/* AI Insights */}
                  {step.aiInsights && step.aiInsights.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-700">AI Insights</h4>
                      {step.aiInsights.map((insight) => (
                        <div key={insight.id} className="p-2 bg-yellow-50 border border-yellow-200 rounded-lg">
                          <div className="flex items-start gap-2">
                            <Bot className="h-4 w-4 text-yellow-600 mt-0.5" />
                            <div className="flex-1">
                              <p className="text-sm font-medium text-yellow-800">{insight.title}</p>
                              <p className="text-xs text-yellow-700">{insight.description}</p>
                            </div>
                            <Badge className={getPriorityColor(insight.priority)}>
                              {insight.priority}
                            </Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Comments */}
                  {step.comments.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-700">Comments</h4>
                      {step.comments.slice(0, 2).map((comment) => (
                        <div key={comment.id} className="p-2 bg-gray-50 rounded-lg">
                          <div className="flex items-start gap-2">
                            <Avatar className="h-6 w-6">
                              <AvatarImage src={comment.author.avatar} />
                              <AvatarFallback>{comment.author.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                            </Avatar>
                            <div className="flex-1">
                              <p className="text-sm font-medium">{comment.author.name}</p>
                              <p className="text-sm text-gray-600">{comment.content}</p>
                              <p className="text-xs text-gray-500">{comment.timestamp}</p>
                            </div>
                          </div>
                        </div>
                      ))}
                      {step.comments.length > 2 && (
                        <p className="text-xs text-gray-500">
                          +{step.comments.length - 2} more comments
                        </p>
                      )}
                    </div>
                  )}

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button size="sm" className="flex-1">
                      <Edit className="h-4 w-4 mr-2" />
                      Start Review
                    </Button>
                    <Button size="sm" variant="outline">
                      <MessageSquare className="h-4 w-4 mr-2" />
                      Comment
                    </Button>
                    <Button size="sm" variant="outline">
                      <Eye className="h-4 w-4 mr-2" />
                      View
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Activity Tab */}
        <TabsContent value="activity" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Recent Activity</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {[
                  {
                    id: '1',
                    type: 'comment',
                    user: mockUsers[1],
                    action: 'commented on',
                    target: 'Business Plan Review Process',
                    timestamp: '2 hours ago',
                    content: 'Great work on the financial projections!'
                  },
                  {
                    id: '2',
                    type: 'approval',
                    user: mockUsers[3],
                    action: 'approved',
                    target: 'Marketing Strategy Document',
                    timestamp: '4 hours ago',
                    content: null
                  },
                  {
                    id: '3',
                    type: 'ai-insight',
                    user: { id: 'ai', name: 'AI Assistant', email: 'ai@example.com', role: 'AI', isOnline: true },
                    action: 'suggested improvements for',
                    target: 'Executive Summary',
                    timestamp: '6 hours ago',
                    content: 'Consider adding more specific metrics to strengthen the value proposition.'
                  }
                ].map((activity) => (
                  <div key={activity.id} className="flex items-start gap-3 p-3 bg-gray-50 rounded-lg">
                    <Avatar className="h-8 w-8">
                      <AvatarImage src={activity.user.avatar} />
                      <AvatarFallback>
                        {activity.user.name.split(' ').map(n => n[0]).join('')}
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                      <p className="text-sm">
                        <span className="font-medium">{activity.user.name}</span>{' '}
                        <span className="text-gray-600">{activity.action}</span>{' '}
                        <span className="font-medium">{activity.target}</span>
                      </p>
                      {activity.content && (
                        <p className="text-sm text-gray-600 mt-1">{activity.content}</p>
                      )}
                      <p className="text-xs text-gray-500 mt-1">{activity.timestamp}</p>
                    </div>
                    {activity.type === 'ai-insight' && (
                      <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                        <Bot className="h-3 w-3 mr-1" />
                        AI
                      </Badge>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Create Workflow Dialog */}
      <Dialog open={isCreateWorkflowDialogOpen} onOpenChange={setIsCreateWorkflowDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Create New Workflow</DialogTitle>
            <DialogDescription>
              Set up a new collaboration workflow for document review and approval
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="workflow-name">Workflow Name</Label>
              <Input id="workflow-name" placeholder="Enter workflow name" />
            </div>
            <div>
              <Label htmlFor="workflow-description">Description</Label>
              <Textarea id="workflow-description" placeholder="Describe the workflow purpose" />
            </div>
            <div>
              <Label htmlFor="document">Select Document</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Choose document" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">Business Plan 2024</SelectItem>
                  <SelectItem value="2">Marketing Strategy</SelectItem>
                  <SelectItem value="3">Financial Projections</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="participants">Add Participants</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select participants" />
                </SelectTrigger>
                <SelectContent>
                  {mockUsers.map((user) => (
                    <SelectItem key={user.id} value={user.id}>
                      {user.name} ({user.role})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}


=== FILE: client/src/components/documents/RFPAutomation.tsx ===

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { 
  Bot, 
  Zap, 
  Target, 
  CheckCircle, 
  Clock, 
  AlertCircle, 
  TrendingUp, 
  FileText, 
  Sparkles, 
  Wand2, 
  Brain, 
  ArrowRight, 
  Copy, 
  Download, 
  Share2, 
  Eye, 
  Edit, 
  Trash2, 
  Plus, 
  Search, 
  Filter, 
  Calendar, 
  Users, 
  DollarSign, 
  Award, 
  Star, 
  BarChart3, 
  MessageSquare, 
  RefreshCw, 
  Settings, 
  ExternalLink,
  ChevronDown,
  ChevronRight,
  Folder,
  Globe,
  Lock,
  Unlock
} from 'lucide-react';

interface RFPOpportunity {
  id: string;
  title: string;
  organization: string;
  description: string;
  deadline: string;
  budget: string;
  category: string;
  matchScore: number;
  status: 'open' | 'in-progress' | 'submitted' | 'won' | 'lost';
  requirements: string[];
  keywords: string[];
  aiInsights: AIInsight[];
  autoGenerated: boolean;
  lastUpdated: string;
}

interface AIInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'opportunity' | 'compliance';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
  confidence: number;
}

interface RFPResponse {
  id: string;
  rfpId: string;
  title: string;
  status: 'draft' | 'review' | 'submitted' | 'under-review' | 'accepted' | 'rejected';
  completionScore: number;
  sections: ResponseSection[];
  aiGenerated: boolean;
  lastModified: string;
  collaborators: string[];
}

interface ResponseSection {
  id: string;
  title: string;
  content: string;
  aiGenerated: boolean;
  qualityScore: number;
  suggestions: string[];
  required: boolean;
  wordCount: number;
  lastModified: string;
}

// Mock data
const mockRFPOpportunities: RFPOpportunity[] = [
  {
    id: '1',
    title: 'Digital Transformation Initiative',
    organization: 'TechCorp Solutions',
    description: 'Seeking innovative solutions for digital transformation across multiple business units',
    deadline: '2024-02-15',
    budget: '$500,000 - $1,000,000',
    category: 'Technology',
    matchScore: 94,
    status: 'open',
    requirements: [
      'Minimum 5 years experience in digital transformation',
      'Proven track record with enterprise clients',
      'Certified in relevant technologies'
    ],
    keywords: ['digital transformation', 'enterprise', 'cloud', 'automation'],
    aiInsights: [
      {
        id: '1',
        type: 'opportunity',
        title: 'High Match Score',
        description: 'Your company profile matches 94% of the requirements',
        priority: 'high',
        actionable: true,
        confidence: 95
      },
      {
        id: '2',
        type: 'suggestion',
        title: 'Emphasize AI Integration',
        description: 'Highlight your AI capabilities as this is a key requirement',
        priority: 'medium',
        actionable: true,
        confidence: 87
      }
    ],
    autoGenerated: true,
    lastUpdated: '2024-01-15'
  },
  {
    id: '2',
    title: 'Sustainability Consulting Services',
    organization: 'GreenFuture Inc',
    description: 'Comprehensive sustainability consulting for manufacturing operations',
    deadline: '2024-01-30',
    budget: '$200,000 - $400,000',
    category: 'Sustainability',
    matchScore: 78,
    status: 'in-progress',
    requirements: [
      'Environmental consulting experience',
      'Manufacturing sector knowledge',
      'Sustainability certifications'
    ],
    keywords: ['sustainability', 'manufacturing', 'environmental', 'consulting'],
    aiInsights: [
      {
        id: '3',
        type: 'warning',
        title: 'Tight Deadline',
        description: 'Only 15 days remaining - prioritize this opportunity',
        priority: 'high',
        actionable: true,
        confidence: 100
      }
    ],
    autoGenerated: false,
    lastUpdated: '2024-01-10'
  }
];

const mockRFPResponses: RFPResponse[] = [
  {
    id: '1',
    rfpId: '1',
    title: 'Digital Transformation Response',
    status: 'draft',
    completionScore: 65,
    sections: [
      {
        id: '1',
        title: 'Executive Summary',
        content: 'Our company brings 8+ years of experience in digital transformation...',
        aiGenerated: true,
        qualityScore: 88,
        suggestions: ['Add specific metrics', 'Include client testimonials'],
        required: true,
        wordCount: 250,
        lastModified: '2024-01-15'
      },
      {
        id: '2',
        title: 'Technical Approach',
        content: 'We propose a phased approach to digital transformation...',
        aiGenerated: false,
        qualityScore: 72,
        suggestions: ['Provide more technical details', 'Include architecture diagrams'],
        required: true,
        wordCount: 500,
        lastModified: '2024-01-14'
      }
    ],
    aiGenerated: true,
    lastModified: '2024-01-15',
    collaborators: ['John Doe', 'Jane Smith']
  }
];

export default function RFPAutomation() {
  const [selectedTab, setSelectedTab] = useState('opportunities');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [showAIInsights, setShowAIInsights] = useState(true);
  const [isCreateRFPDialogOpen, setIsCreateRFPDialogOpen] = useState(false);
  const [isAutoGenerateDialogOpen, setIsAutoGenerateDialogOpen] = useState(false);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'bg-green-100 text-green-800';
      case 'in-progress': return 'bg-yellow-100 text-yellow-800';
      case 'submitted': return 'bg-blue-100 text-blue-800';
      case 'won': return 'bg-purple-100 text-purple-800';
      case 'lost': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const filteredOpportunities = mockRFPOpportunities.filter(opp => {
    const matchesSearch = opp.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         opp.organization.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         opp.keywords.some(keyword => keyword.toLowerCase().includes(searchQuery.toLowerCase()));
    const matchesCategory = selectedCategory === 'all' || opp.category === selectedCategory;
    const matchesStatus = selectedStatus === 'all' || opp.status === selectedStatus;
    return matchesSearch && matchesCategory && matchesStatus;
  });

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
            RFP Automation ü§ñ
          </h2>
          <p className="text-gray-600">
            AI-powered RFP discovery, analysis, and response generation
          </p>
        </div>
        <div className="flex gap-2">
          <Button onClick={() => setIsAutoGenerateDialogOpen(true)} variant="outline">
            <Wand2 className="h-4 w-4 mr-2" />
            Auto-Generate Response
          </Button>
          <Button onClick={() => setIsCreateRFPDialogOpen(true)}>
            <Plus className="h-4 w-4 mr-2" />
            Create RFP
          </Button>
        </div>
      </div>

      {/* AI Insights Toggle */}
      <div className="flex items-center gap-4">
        <div className="flex items-center space-x-2">
          <input
            type="checkbox"
            id="ai-insights"
            checked={showAIInsights}
            onChange={(e) => setShowAIInsights(e.target.checked)}
            className="rounded"
          />
          <Label htmlFor="ai-insights" className="flex items-center gap-2">
            <Brain className="h-4 w-4" />
            Show AI Insights
          </Label>
        </div>
        {showAIInsights && (
          <Badge variant="secondary" className="bg-purple-100 text-purple-800">
            <Sparkles className="h-3 w-3 mr-1" />
            AI Enhanced
          </Badge>
        )}
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col lg:flex-row gap-4">
        <div className="flex-1">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
            <Input
              placeholder="Search RFPs, organizations, or keywords..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
        <div className="flex gap-2">
          <Select value={selectedCategory} onValueChange={setSelectedCategory}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Category" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Categories</SelectItem>
              <SelectItem value="Technology">Technology</SelectItem>
              <SelectItem value="Sustainability">Sustainability</SelectItem>
              <SelectItem value="Healthcare">Healthcare</SelectItem>
              <SelectItem value="Education">Education</SelectItem>
            </SelectContent>
          </Select>
          <Select value={selectedStatus} onValueChange={setSelectedStatus}>
            <SelectTrigger className="w-32">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="open">Open</SelectItem>
              <SelectItem value="in-progress">In Progress</SelectItem>
              <SelectItem value="submitted">Submitted</SelectItem>
              <SelectItem value="won">Won</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="opportunities">RFP Opportunities</TabsTrigger>
          <TabsTrigger value="responses">My Responses</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        {/* RFP Opportunities Tab */}
        <TabsContent value="opportunities" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredOpportunities.map((opportunity) => (
              <Card key={opportunity.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{opportunity.title}</CardTitle>
                      <CardDescription className="text-sm text-gray-600">
                        {opportunity.organization}
                      </CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(opportunity.status)}>
                        {opportunity.status}
                      </Badge>
                      {opportunity.autoGenerated && (
                        <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                          <Bot className="h-3 w-3 mr-1" />
                          AI Found
                        </Badge>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-gray-600">{opportunity.description}</p>
                  
                  {/* Match Score */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Match Score</span>
                      <span className="text-sm text-gray-600">{opportunity.matchScore}%</span>
                    </div>
                    <Progress value={opportunity.matchScore} className="h-2" />
                  </div>

                  {/* Key Info */}
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-gray-400" />
                      <span>Due: {opportunity.deadline}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <DollarSign className="h-4 w-4 text-gray-400" />
                      <span>{opportunity.budget}</span>
                    </div>
                  </div>

                  {/* AI Insights */}
                  {showAIInsights && opportunity.aiInsights.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-gray-700">AI Insights</h4>
                      {opportunity.aiInsights.slice(0, 2).map((insight) => (
                        <div key={insight.id} className={`p-2 rounded-lg border ${
                          insight.type === 'opportunity' ? 'bg-green-50 border-green-200' :
                          insight.type === 'warning' ? 'bg-red-50 border-red-200' :
                          'bg-yellow-50 border-yellow-200'
                        }`}>
                          <div className="flex items-start gap-2">
                            {insight.type === 'opportunity' ? (
                              <TrendingUp className="h-4 w-4 text-green-600 mt-0.5" />
                            ) : insight.type === 'warning' ? (
                              <AlertCircle className="h-4 w-4 text-red-600 mt-0.5" />
                            ) : (
                              <Target className="h-4 w-4 text-yellow-600 mt-0.5" />
                            )}
                            <div className="flex-1">
                              <p className="text-sm font-medium">{insight.title}</p>
                              <p className="text-xs text-gray-600">{insight.description}</p>
                            </div>
                            <Badge className={getPriorityColor(insight.priority)}>
                              {insight.priority}
                            </Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Keywords */}
                  <div className="flex flex-wrap gap-1">
                    {opportunity.keywords.slice(0, 4).map((keyword) => (
                      <Badge key={keyword} variant="secondary" className="text-xs">
                        {keyword}
                      </Badge>
                    ))}
                    {opportunity.keywords.length > 4 && (
                      <Badge variant="secondary" className="text-xs">
                        +{opportunity.keywords.length - 4}
                      </Badge>
                    )}
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button size="sm" className="flex-1">
                      <Eye className="h-4 w-4 mr-2" />
                      View Details
                    </Button>
                    <Button size="sm" variant="outline">
                      <Zap className="h-4 w-4 mr-2" />
                      Auto-Respond
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* My Responses Tab */}
        <TabsContent value="responses" className="space-y-4">
          <div className="grid grid-cols-1 gap-6">
            {mockRFPResponses.map((response) => (
              <Card key={response.id} className="group hover:shadow-lg transition-all duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">{response.title}</CardTitle>
                      <CardDescription>
                        RFP: {mockRFPOpportunities.find(opp => opp.id === response.rfpId)?.title}
                      </CardDescription>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(response.status)}>
                        {response.status}
                      </Badge>
                      {response.aiGenerated && (
                        <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                          <Bot className="h-3 w-3 mr-1" />
                          AI Generated
                        </Badge>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Completion Score */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Completion Score</span>
                      <span className="text-sm text-gray-600">{response.completionScore}%</span>
                    </div>
                    <Progress value={response.completionScore} className="h-2" />
                  </div>

                  {/* Sections */}
                  <div className="space-y-3">
                    <h4 className="text-sm font-medium text-gray-700">Response Sections</h4>
                    {response.sections.map((section) => (
                      <div key={section.id} className="p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <h5 className="text-sm font-medium">{section.title}</h5>
                          <div className="flex items-center gap-2">
                            {section.aiGenerated && (
                              <Badge variant="secondary" className="bg-purple-100 text-purple-800 text-xs">
                                <Bot className="h-3 w-3 mr-1" />
                                AI
                              </Badge>
                            )}
                            <span className="text-xs text-gray-500">{section.qualityScore}% quality</span>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                          {section.content}
                        </p>
                        <div className="flex items-center justify-between text-xs text-gray-500">
                          <span>{section.wordCount} words</span>
                          <span>Modified {section.lastModified}</span>
                        </div>
                        {section.suggestions.length > 0 && (
                          <div className="mt-2">
                            <p className="text-xs font-medium text-gray-700 mb-1">AI Suggestions:</p>
                            <ul className="text-xs text-gray-600 space-y-1">
                              {section.suggestions.map((suggestion, index) => (
                                <li key={index} className="flex items-start gap-1">
                                  <span className="text-blue-500">‚Ä¢</span>
                                  <span>{suggestion}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>

                  {/* Collaborators */}
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-gray-400" />
                    <span className="text-sm text-gray-600">
                      {response.collaborators.length} collaborator{response.collaborators.length !== 1 ? 's' : ''}
                    </span>
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2">
                    <Button size="sm" className="flex-1">
                      <Edit className="h-4 w-4 mr-2" />
                      Continue Editing
                    </Button>
                    <Button size="sm" variant="outline">
                      <Download className="h-4 w-4 mr-2" />
                      Export
                    </Button>
                    <Button size="sm" variant="outline">
                      <Share2 className="h-4 w-4 mr-2" />
                      Share
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Analytics Tab */}
        <TabsContent value="analytics" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Response Success Rate</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-green-600">73%</div>
                <p className="text-sm text-gray-600">+12% from last quarter</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">AI Time Saved</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-blue-600">45h</div>
                <p className="text-sm text-gray-600">This month</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Active RFPs</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-600">12</div>
                <p className="text-sm text-gray-600">In progress</p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Create RFP Dialog */}
      <Dialog open={isCreateRFPDialogOpen} onOpenChange={setIsCreateRFPDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Create New RFP</DialogTitle>
            <DialogDescription>
              Set up a new RFP opportunity with AI assistance
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="title">RFP Title</Label>
                <Input id="title" placeholder="Enter RFP title" />
              </div>
              <div>
                <Label htmlFor="organization">Organization</Label>
                <Input id="organization" placeholder="Organization name" />
              </div>
            </div>
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea id="description" placeholder="Describe the RFP requirements" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="deadline">Deadline</Label>
                <Input id="deadline" type="date" />
              </div>
              <div>
                <Label htmlFor="budget">Budget Range</Label>
                <Input id="budget" placeholder="$0 - $0" />
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="ai-assistance" />
              <Label htmlFor="ai-assistance">Enable AI assistance for response generation</Label>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Auto-Generate Response Dialog */}
      <Dialog open={isAutoGenerateDialogOpen} onOpenChange={setIsAutoGenerateDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Auto-Generate RFP Response</DialogTitle>
            <DialogDescription>
              Let AI analyze the RFP and generate a comprehensive response
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="rfp-url">RFP URL or Document</Label>
              <Input id="rfp-url" placeholder="Paste RFP URL or upload document" />
            </div>
            <div>
              <Label htmlFor="company-info">Company Information</Label>
              <Textarea id="company-info" placeholder="Provide key company details, capabilities, and differentiators" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="response-tone">Response Tone</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select tone" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="professional">Professional</SelectItem>
                    <SelectItem value="innovative">Innovative</SelectItem>
                    <SelectItem value="technical">Technical</SelectItem>
                    <SelectItem value="collaborative">Collaborative</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="priority-sections">Priority Sections</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select focus areas" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="technical">Technical Approach</SelectItem>
                    <SelectItem value="experience">Experience & Credentials</SelectItem>
                    <SelectItem value="pricing">Pricing & Value</SelectItem>
                    <SelectItem value="timeline">Project Timeline</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="include-case-studies" defaultChecked />
              <Label htmlFor="include-case-studies">Include relevant case studies</Label>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="compliance-check" defaultChecked />
              <Label htmlFor="compliance-check">Run compliance and requirement check</Label>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}


=== FILE: client/src/components/documents/AIApplicationFiller.tsx ===

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { 
  Bot, 
  Zap, 
  Target, 
  CheckCircle, 
  AlertCircle, 
  TrendingUp, 
  FileText, 
  Sparkles, 
  Wand2, 
  ArrowRight, 
  Download, 
  Share2, 
  Eye, 
  Edit, 
  Plus, 
  RefreshCw, 
  Settings, 
  ExternalLink,
  Clock,
  Users,
  DollarSign,
  Award,
  Lightbulb,
  BarChart3
} from 'lucide-react';

interface AIApplicationFillerProps {
  documentId?: string;
  documentContent?: any;
}

export default function AIApplicationFiller({ documentId, documentContent }: AIApplicationFillerProps) {
  const { toast } = useToast();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isFilling, setIsFilling] = useState(false);
  const [readinessAnalysis, setReadinessAnalysis] = useState<any>(null);
  const [filledApplication, setFilledApplication] = useState<any>(null);
  const [selectedApplicationType, setSelectedApplicationType] = useState<string>('accelerator');
  const [aiStatus, setAiStatus] = useState<{ available: boolean; message: string } | null>(null);

  // Check AI service status on mount
  React.useEffect(() => {
    checkAIStatus();
  }, []);

  const checkAIStatus = async () => {
    try {
      const response = await fetch('/api/documents/ai/status');
      const data = await response.json();
      setAiStatus(data);
    } catch (error) {
      console.error('Error checking AI status:', error);
      setAiStatus({ available: false, message: 'Failed to check AI status' });
    }
  };

  const analyzeReadiness = async () => {
    if (!aiStatus?.available) {
      toast({
        title: 'AI Services Unavailable',
        description: aiStatus?.message || 'AI services are not configured',
        variant: 'destructive'
      });
      return;
    }

    setIsAnalyzing(true);
    try {
      const response = await fetch(`/api/documents/ai/${documentId}/analyze-readiness`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          applicationType: selectedApplicationType,
          documentContent
        })
      });

      if (!response.ok) throw new Error('Failed to analyze document');

      const analysis = await response.json();
      setReadinessAnalysis(analysis);
      
      toast({
        title: 'Analysis Complete',
        description: `Readiness score: ${analysis.readinessScore}%`
      });
    } catch (error) {
      console.error('Error analyzing readiness:', error);
      toast({
        title: 'Analysis Failed',
        description: 'Failed to analyze document readiness',
        variant: 'destructive'
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const fillApplication = async () => {
    if (!aiStatus?.available) {
      toast({
        title: 'AI Services Unavailable',
        description: aiStatus?.message || 'AI services are not configured',
        variant: 'destructive'
      });
      return;
    }

    setIsFilling(true);
    try {
      // Mock application form for demonstration
      const mockForm = {
        id: 'demo-form',
        name: `${selectedApplicationType} Application`,
        type: selectedApplicationType,
        organization: 'Demo Organization',
        sections: [
          {
            id: 'company-info',
            title: 'Company Information',
            fields: [
              { id: 'company-name', label: 'Company Name', type: 'text' as const, required: true },
              { id: 'description', label: 'Description', type: 'textarea' as const, required: true }
            ]
          }
        ]
      };

      const response = await fetch(`/api/documents/ai/${documentId}/fill-application`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          form: mockForm,
          documentContent
        })
      });

      if (!response.ok) throw new Error('Failed to fill application');

      const filled = await response.json();
      setFilledApplication(filled);
      
      toast({
        title: 'Application Filled',
        description: `Completeness: ${filled.completeness}%, Match Score: ${filled.matchScore}%`
      });
    } catch (error) {
      console.error('Error filling application:', error);
      toast({
        title: 'Fill Failed',
        description: 'Failed to fill application',
        variant: 'destructive'
      });
    } finally {
      setIsFilling(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* AI Status Banner */}
      {aiStatus && (
        <Card className={`border-2 ${aiStatus.available ? 'border-green-200 bg-green-50' : 'border-yellow-200 bg-yellow-50'}`}>
          <CardContent className="pt-6">
            <div className="flex items-center gap-3">
              {aiStatus.available ? (
                <CheckCircle className="h-5 w-5 text-green-600" />
              ) : (
                <AlertCircle className="h-5 w-5 text-yellow-600" />
              )}
              <div>
                <p className={`font-medium ${aiStatus.available ? 'text-green-800' : 'text-yellow-800'}`}>
                  {aiStatus.available ? 'AI Services Active' : 'AI Services Unavailable'}
                </p>
                <p className={`text-sm ${aiStatus.available ? 'text-green-600' : 'text-yellow-600'}`}>
                  {aiStatus.message}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Application Type Selection */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Wand2 className="h-5 w-5 text-purple-600" />
            AI-Powered Application Filling
          </CardTitle>
          <CardDescription>
            Automatically fill applications using your document data with AI assistance
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="application-type">Application Type</Label>
            <Select value={selectedApplicationType} onValueChange={setSelectedApplicationType}>
              <SelectTrigger id="application-type">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="accelerator">Accelerator Program</SelectItem>
                <SelectItem value="grant">Grant Application</SelectItem>
                <SelectItem value="competition">Startup Competition</SelectItem>
                <SelectItem value="investment">Investment Pitch</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="flex gap-2">
            <Button 
              onClick={analyzeReadiness} 
              disabled={isAnalyzing || !aiStatus?.available}
              variant="outline"
              className="flex-1"
            >
              {isAnalyzing ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Analyzing...
                </>
              ) : (
                <>
                  <BarChart3 className="h-4 w-4 mr-2" />
                  Analyze Readiness
                </>
              )}
            </Button>
            <Button 
              onClick={fillApplication} 
              disabled={isFilling || !aiStatus?.available}
              className="flex-1 bg-gradient-to-r from-purple-600 to-blue-600"
            >
              {isFilling ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Filling...
                </>
              ) : (
                <>
                  <Sparkles className="h-4 w-4 mr-2" />
                  Fill Application
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Readiness Analysis Results */}
      {readinessAnalysis && (
        <Card className="border-2 border-blue-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5 text-blue-600" />
              Application Readiness Analysis
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Readiness Score */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium">Overall Readiness</span>
                <span className="text-2xl font-bold text-blue-600">{readinessAnalysis.readinessScore}%</span>
              </div>
              <Progress value={readinessAnalysis.readinessScore} className="h-3" />
            </div>

            {/* Missing Fields */}
            {readinessAnalysis.missingFields.length > 0 && (
              <div>
                <h4 className="font-semibold text-red-600 mb-2 flex items-center gap-2">
                  <AlertCircle className="h-4 w-4" />
                  Missing Information ({readinessAnalysis.missingFields.length})
                </h4>
                <div className="space-y-1">
                  {readinessAnalysis.missingFields.map((field: string, index: number) => (
                    <div key={index} className="flex items-center gap-2 text-sm text-gray-600">
                      <div className="w-1.5 h-1.5 bg-red-400 rounded-full" />
                      {field}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Strengths */}
            {readinessAnalysis.strengths.length > 0 && (
              <div>
                <h4 className="font-semibold text-green-600 mb-2 flex items-center gap-2">
                  <CheckCircle className="h-4 w-4" />
                  Strengths ({readinessAnalysis.strengths.length})
                </h4>
                <div className="space-y-1">
                  {readinessAnalysis.strengths.map((strength: string, index: number) => (
                    <div key={index} className="flex items-center gap-2 text-sm text-gray-600">
                      <div className="w-1.5 h-1.5 bg-green-400 rounded-full" />
                      {strength}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Improvements */}
            {readinessAnalysis.improvements.length > 0 && (
              <div>
                <h4 className="font-semibold text-yellow-600 mb-2 flex items-center gap-2">
                  <Lightbulb className="h-4 w-4" />
                  Suggested Improvements ({readinessAnalysis.improvements.length})
                </h4>
                <div className="space-y-1">
                  {readinessAnalysis.improvements.map((improvement: string, index: number) => (
                    <div key={index} className="flex items-center gap-2 text-sm text-gray-600">
                      <div className="w-1.5 h-1.5 bg-yellow-400 rounded-full" />
                      {improvement}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Recommendations */}
            {readinessAnalysis.recommendations.length > 0 && (
              <div>
                <h4 className="font-semibold text-purple-600 mb-2 flex items-center gap-2">
                  <Award className="h-4 w-4" />
                  Recommendations ({readinessAnalysis.recommendations.length})
                </h4>
                <div className="space-y-1">
                  {readinessAnalysis.recommendations.map((recommendation: string, index: number) => (
                    <div key={index} className="flex items-center gap-2 text-sm text-gray-600">
                      <div className="w-1.5 h-1.5 bg-purple-400 rounded-full" />
                      {recommendation}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Filled Application Results */}
      {filledApplication && (
        <Card className="border-2 border-green-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Sparkles className="h-5 w-5 text-green-600" />
              AI-Filled Application
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Metrics */}
            <div className="grid grid-cols-2 gap-4">
              <div className="p-4 bg-green-50 rounded-lg">
                <div className="text-2xl font-bold text-green-600">{filledApplication.completeness}%</div>
                <div className="text-sm text-gray-600">Completeness</div>
              </div>
              <div className="p-4 bg-blue-50 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">{filledApplication.matchScore}%</div>
                <div className="text-sm text-gray-600">Match Score</div>
              </div>
            </div>

            {/* Suggestions */}
            {filledApplication.suggestions && filledApplication.suggestions.length > 0 && (
              <div>
                <h4 className="font-semibold mb-3">AI Suggestions</h4>
                <div className="space-y-3">
                  {filledApplication.suggestions.map((suggestion: any, index: number) => (
                    <div key={index} className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                      <div className="flex items-start gap-2">
                        <Lightbulb className="h-4 w-4 text-yellow-600 mt-0.5" />
                        <div className="flex-1">
                          <p className="text-sm font-medium text-yellow-800">{suggestion.suggestion}</p>
                          <p className="text-xs text-yellow-700 mt-1">{suggestion.reason}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Actions */}
            <div className="flex gap-2">
              <Button variant="outline" className="flex-1">
                <Eye className="h-4 w-4 mr-2" />
                Preview
              </Button>
              <Button variant="outline" className="flex-1">
                <Edit className="h-4 w-4 mr-2" />
                Edit
              </Button>
              <Button className="flex-1 bg-gradient-to-r from-green-600 to-blue-600">
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}


=== FILE: client/src/components/documents/DocumentIntelligence.tsx ===

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import AIApplicationFiller from './AIApplicationFiller';
import { 
  Brain, 
  Zap, 
  Target, 
  CheckCircle, 
  AlertCircle, 
  TrendingUp, 
  FileText, 
  Sparkles, 
  Wand2, 
  Bot, 
  ArrowRight, 
  Copy, 
  Download, 
  Share2, 
  Eye, 
  Edit, 
  Plus, 
  Search, 
  BarChart3, 
  MessageSquare, 
  RefreshCw, 
  Settings, 
  ExternalLink,
  Globe,
  Lock,
  Unlock,
  Star,
  Award,
  Clock,
  Users,
  DollarSign,
  PieChart,
  LineChart
} from 'lucide-react';

interface DocumentAnalysis {
  id: string;
  documentId: string;
  overallScore: number;
  sections: AnalysisSection[];
  insights: DocumentInsight[];
  recommendations: Recommendation[];
  compliance: ComplianceCheck[];
  lastAnalyzed: string;
  aiConfidence: number;
}

interface AnalysisSection {
  id: string;
  title: string;
  score: number;
  wordCount: number;
  readabilityScore: number;
  completenessScore: number;
  suggestions: string[];
  aiGenerated: boolean;
}

interface DocumentInsight {
  id: string;
  type: 'strength' | 'weakness' | 'opportunity' | 'threat';
  title: string;
  description: string;
  impact: 'low' | 'medium' | 'high';
  actionable: boolean;
  confidence: number;
}

interface Recommendation {
  id: string;
  type: 'content' | 'structure' | 'style' | 'compliance';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  effort: 'low' | 'medium' | 'high';
  impact: 'low' | 'medium' | 'high';
}

interface ComplianceCheck {
  id: string;
  requirement: string;
  status: 'pass' | 'fail' | 'warning';
  description: string;
  suggestion?: string;
}

// Mock data
const mockAnalysis: DocumentAnalysis = {
  id: '1',
  documentId: '1',
  overallScore: 87,
  sections: [
    {
      id: '1',
      title: 'Executive Summary',
      score: 92,
      wordCount: 250,
      readabilityScore: 85,
      completenessScore: 95,
      suggestions: ['Add more specific metrics', 'Include key differentiators'],
      aiGenerated: true
    },
    {
      id: '2',
      title: 'Market Analysis',
      score: 78,
      wordCount: 800,
      readabilityScore: 72,
      completenessScore: 85,
      suggestions: ['Add competitor analysis', 'Include market size data'],
      aiGenerated: false
    }
  ],
  insights: [
    {
      id: '1',
      type: 'strength',
      title: 'Strong Value Proposition',
      description: 'Clear articulation of unique value proposition',
      impact: 'high',
      actionable: false,
      confidence: 95
    },
    {
      id: '2',
      type: 'weakness',
      title: 'Missing Financial Projections',
      description: 'Financial section lacks detailed projections',
      impact: 'medium',
      actionable: true,
      confidence: 88
    }
  ],
  recommendations: [
    {
      id: '1',
      type: 'content',
      title: 'Add Financial Projections',
      description: 'Include 3-year financial projections with assumptions',
      priority: 'high',
      effort: 'medium',
      impact: 'high'
    }
  ],
  compliance: [
    {
      id: '1',
      requirement: 'Executive Summary Required',
      status: 'pass',
      description: 'Executive summary is present and comprehensive'
    },
    {
      id: '2',
      requirement: 'Financial Projections Required',
      status: 'fail',
      description: 'Financial projections are missing',
      suggestion: 'Add detailed financial projections for the next 3 years'
    }
  ],
  lastAnalyzed: '2024-01-15',
  aiConfidence: 92
};

export default function DocumentIntelligence() {
  const [selectedTab, setSelectedTab] = useState('overview');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState<DocumentAnalysis>(mockAnalysis);

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-600';
    if (score >= 70) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getInsightIcon = (type: string) => {
    switch (type) {
      case 'strength': return CheckCircle;
      case 'weakness': return AlertCircle;
      case 'opportunity': return TrendingUp;
      case 'threat': return AlertCircle;
      default: return Target;
    }
  };

  const getInsightColor = (type: string) => {
    switch (type) {
      case 'strength': return 'text-green-600';
      case 'weakness': return 'text-red-600';
      case 'opportunity': return 'text-blue-600';
      case 'threat': return 'text-orange-600';
      default: return 'text-gray-600';
    }
  };

  const handleAnalyze = async () => {
    setIsAnalyzing(true);
    // Simulate analysis
    setTimeout(() => {
      setIsAnalyzing(false);
    }, 3000);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Document Intelligence üß†
          </h2>
          <p className="text-gray-600">
            AI-powered document analysis, insights, and optimization
          </p>
        </div>
        <Button onClick={handleAnalyze} disabled={isAnalyzing}>
          {isAnalyzing ? (
            <>
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
              Analyzing...
            </>
          ) : (
            <>
              <Brain className="h-4 w-4 mr-2" />
              Analyze Document
            </>
          )}
        </Button>
      </div>

      {/* Overall Score */}
      <Card className="border-blue-200 bg-gradient-to-r from-blue-50 to-purple-50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5 text-blue-600" />
            Overall Document Score
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between mb-4">
            <div className="text-4xl font-bold text-blue-600">{analysis.overallScore}%</div>
            <div className="text-right">
              <p className="text-sm text-gray-600">AI Confidence</p>
              <p className="text-lg font-semibold">{analysis.aiConfidence}%</p>
            </div>
          </div>
          <Progress value={analysis.overallScore} className="h-3 mb-2" />
          <p className="text-sm text-gray-600">
            Last analyzed: {analysis.lastAnalyzed}
          </p>
        </CardContent>
      </Card>

      {/* Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="sections">Sections</TabsTrigger>
          <TabsTrigger value="insights">Insights</TabsTrigger>
          <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
          <TabsTrigger value="ai-filler">AI Application Filler</TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Readability Score</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-green-600">85</div>
                <p className="text-sm text-gray-600">Good readability</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Completeness</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-blue-600">92%</div>
                <p className="text-sm text-gray-600">Well structured</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">AI Enhancement</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-600">78%</div>
                <p className="text-sm text-gray-600">AI optimized</p>
              </CardContent>
            </Card>
          </div>

          {/* Key Insights */}
          <Card>
            <CardHeader>
              <CardTitle>Key Insights</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {analysis.insights.slice(0, 3).map((insight) => {
                  const IconComponent = getInsightIcon(insight.type);
                  return (
                    <div key={insight.id} className="flex items-start gap-3 p-3 bg-gray-50 rounded-lg">
                      <IconComponent className={`h-5 w-5 mt-0.5 ${getInsightColor(insight.type)}`} />
                      <div className="flex-1">
                        <h4 className="font-medium">{insight.title}</h4>
                        <p className="text-sm text-gray-600">{insight.description}</p>
                        <div className="flex items-center gap-2 mt-2">
                          <Badge className={getImpactColor(insight.impact)}>
                            {insight.impact} impact
                          </Badge>
                          <span className="text-xs text-gray-500">
                            {insight.confidence}% confidence
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Sections Tab */}
        <TabsContent value="sections" className="space-y-4">
          {analysis.sections.map((section) => (
            <Card key={section.id}>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg">{section.title}</CardTitle>
                  <div className="flex items-center gap-2">
                    <span className={`text-2xl font-bold ${getScoreColor(section.score)}`}>
                      {section.score}%
                    </span>
                    {section.aiGenerated && (
                      <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                        <Bot className="h-3 w-3 mr-1" />
                        AI
                      </Badge>
                    )}
                  </div>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <p className="text-sm text-gray-600">Word Count</p>
                    <p className="text-lg font-semibold">{section.wordCount}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Readability</p>
                    <p className="text-lg font-semibold">{section.readabilityScore}%</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Completeness</p>
                    <p className="text-lg font-semibold">{section.completenessScore}%</p>
                  </div>
                </div>
                
                <Progress value={section.score} className="h-2" />
                
                {section.suggestions.length > 0 && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-700 mb-2">AI Suggestions:</h4>
                    <ul className="space-y-1">
                      {section.suggestions.map((suggestion, index) => (
                        <li key={index} className="text-sm text-gray-600 flex items-start gap-2">
                          <span className="text-blue-500 mt-1">‚Ä¢</span>
                          <span>{suggestion}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        {/* Insights Tab */}
        <TabsContent value="insights" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {analysis.insights.map((insight) => {
              const IconComponent = getInsightIcon(insight.type);
              return (
                <Card key={insight.id} className="group hover:shadow-lg transition-all duration-200">
                  <CardHeader>
                    <div className="flex items-start gap-3">
                      <IconComponent className={`h-6 w-6 mt-1 ${getInsightColor(insight.type)}`} />
                      <div className="flex-1">
                        <CardTitle className="text-lg">{insight.title}</CardTitle>
                        <CardDescription>{insight.description}</CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <Badge className={getImpactColor(insight.impact)}>
                        {insight.impact} impact
                      </Badge>
                      <div className="text-sm text-gray-500">
                        {insight.confidence}% confidence
                      </div>
                    </div>
                    {insight.actionable && (
                      <Button size="sm" className="mt-3 w-full">
                        <Wand2 className="h-4 w-4 mr-2" />
                        Take Action
                      </Button>
                    )}
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </TabsContent>

        {/* Recommendations Tab */}
        <TabsContent value="recommendations" className="space-y-4">
          {analysis.recommendations.map((recommendation) => (
            <Card key={recommendation.id} className="group hover:shadow-lg transition-all duration-200">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <CardTitle className="text-lg">{recommendation.title}</CardTitle>
                    <CardDescription>{recommendation.description}</CardDescription>
                  </div>
                  <div className="flex gap-2">
                    <Badge className={getImpactColor(recommendation.priority)}>
                      {recommendation.priority} priority
                    </Badge>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-3 gap-4 mb-4">
                  <div>
                    <p className="text-sm text-gray-600">Effort Required</p>
                    <p className="text-lg font-semibold capitalize">{recommendation.effort}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Expected Impact</p>
                    <p className="text-lg font-semibold capitalize">{recommendation.impact}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Type</p>
                    <p className="text-lg font-semibold capitalize">{recommendation.type}</p>
                  </div>
                </div>
                <Button size="sm" className="w-full">
                  <Wand2 className="h-4 w-4 mr-2" />
                  Implement Recommendation
                </Button>
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        {/* AI Application Filler Tab */}
        <TabsContent value="ai-filler">
          <AIApplicationFiller 
            documentId={analysis.documentId}
            documentContent={mockAnalysis}
          />
        </TabsContent>
      </Tabs>

      {/* Compliance Check */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="h-5 w-5 text-green-600" />
            Compliance Check
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {analysis.compliance.map((check) => (
              <div key={check.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center gap-3">
                  {check.status === 'pass' ? (
                    <CheckCircle className="h-5 w-5 text-green-600" />
                  ) : check.status === 'fail' ? (
                    <AlertCircle className="h-5 w-5 text-red-600" />
                  ) : (
                    <AlertCircle className="h-5 w-5 text-yellow-600" />
                  )}
                  <div>
                    <p className="font-medium">{check.requirement}</p>
                    <p className="text-sm text-gray-600">{check.description}</p>
                    {check.suggestion && (
                      <p className="text-sm text-blue-600 mt-1">{check.suggestion}</p>
                    )}
                  </div>
                </div>
                <Badge className={
                  check.status === 'pass' ? 'bg-green-100 text-green-800' :
                  check.status === 'fail' ? 'bg-red-100 text-red-800' :
                  'bg-yellow-100 text-yellow-800'
                }>
                  {check.status}
                </Badge>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/OfflineIndicator.tsx ===

import { useEffect, useState } from 'react';
import { WifiOff, Wifi } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';

export default function OfflineIndicator() {
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [showReconnected, setShowReconnected] = useState(false);

  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      setShowReconnected(true);
      setTimeout(() => setShowReconnected(false), 3000);
    };

    const handleOffline = () => {
      setIsOnline(false);
      setShowReconnected(false);
    };

    const handleSWMessage = (event: MessageEvent) => {
      if (event.data.type === 'SYNC_COMPLETE') {
        console.log('Background sync completed');
      }
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    // Service Worker message handler
    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
      navigator.serviceWorker.addEventListener('message', handleSWMessage);
    }

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.removeEventListener('message', handleSWMessage);
      }
    };
  }, []);

  if (isOnline && !showReconnected) {
    return null;
  }

  return (
    <div className="fixed bottom-4 right-4 z-50 max-w-sm animate-slide-up">
      {!isOnline ? (
        <Alert className="bg-amber-50 border-amber-200 dark:bg-amber-900/20 dark:border-amber-700" data-testid="alert-offline">
          <WifiOff className="h-4 w-4 text-amber-600 dark:text-amber-400" />
          <AlertDescription className="text-amber-800 dark:text-amber-200">
            You are currently offline. Some features may be limited.
          </AlertDescription>
        </Alert>
      ) : showReconnected ? (
        <Alert className="bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-700" data-testid="alert-online">
          <Wifi className="h-4 w-4 text-green-600 dark:text-green-400" />
          <AlertDescription className="text-green-800 dark:text-green-200">
            Back online! All features are now available.
          </AlertDescription>
        </Alert>
      ) : null}
    </div>
  );
}


=== FILE: client/src/components/co-founder/CoFounderHub.tsx ===


import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  MessageCircle, 
  Target, 
  TrendingUp, 
  Zap, 
  Brain, 
  Users, 
  Calendar,
  Settings,
  Heart,
  Lightbulb
} from 'lucide-react';
import { ChatInterface } from '@/components/ai/ChatInterface';
import { useAgent } from '@/hooks/ai/useAgent';

interface ConversationMode {
  id: string;
  name: string;
  description: string;
  icon: any;
  color: string;
}

const conversationModes: ConversationMode[] = [
  {
    id: 'daily_standup',
    name: 'Daily Check-in',
    description: 'Quick morning sync on priorities and blockers',
    icon: Calendar,
    color: 'bg-blue-500'
  },
  {
    id: 'strategic_session',
    name: 'Strategic Session',
    description: 'Deep dive into business strategy and direction',
    icon: Brain,
    color: 'bg-purple-500'
  },
  {
    id: 'devils_advocate',
    name: 'Challenge Mode',
    description: 'Get pushback and counter-arguments on your ideas',
    icon: Zap,
    color: 'bg-red-500'
  },
  {
    id: 'brainstorm',
    name: 'Brainstorming',
    description: 'Creative ideation and problem-solving session',
    icon: Lightbulb,
    color: 'bg-yellow-500'
  },
  {
    id: 'decision_support',
    name: 'Decision Help',
    description: 'Framework-driven decision making support',
    icon: Target,
    color: 'bg-green-500'
  },
  {
    id: 'accountability_check',
    name: 'Accountability',
    description: 'Review goals, commitments, and progress',
    icon: Users,
    color: 'bg-indigo-500'
  }
];

export function CoFounderHub() {
  const [selectedMode, setSelectedMode] = useState<string | null>(null);
  const [partnershipHealth, setPartnershipHealth] = useState(87);
  const [activeGoals, setActiveGoals] = useState(5);
  const [completedGoals, setCompletedGoals] = useState(4);
  const [insights, setInsights] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const { sendMessage } = useAgent();

  useEffect(() => {
    loadInsights();
  }, []);

  const loadInsights = async () => {
    try {
      setIsLoading(true);
      const result = await sendMessage('Get my current insights and recommendations', {
        userType: 'entrepreneur'
      });
      setInsights(result?.insights || []);
    } catch (error) {
      console.error('Failed to load insights:', error);
      setInsights([]);
    } finally {
      setIsLoading(false);
    }
  };

  const startConversationMode = (mode: string) => {
    setSelectedMode(mode);
  };

  if (selectedMode) {
    return (
      <div className="h-full flex flex-col">
        <div className="flex items-center justify-between p-4 border-b bg-gray-50">
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => setSelectedMode(null)}
            >
              ‚Üê Back to Hub
            </Button>
            <Badge variant="secondary">
              {conversationModes.find(m => m.id === selectedMode)?.name}
            </Badge>
          </div>
        </div>
        
        <div className="flex-1">
          <ChatInterface />
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-4 md:p-6 space-y-4 md:space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <div className="flex-1 min-w-0">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900 flex items-center gap-3 flex-wrap">
            <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-teal-500 flex-shrink-0">
              <Users className="h-5 w-5 md:h-6 md:w-6 text-white" />
            </div>
            <span className="break-words">Your Co-Founder AI</span>
          </h1>
          <p className="text-gray-600 mt-2 text-sm md:text-base">
            Your AI business partner - always available, always thinking strategically
          </p>
        </div>
        <Button variant="outline" size="sm" className="flex-shrink-0 w-full sm:w-auto">
          <Settings className="h-4 w-4 mr-2" />
          <span className="hidden sm:inline">Customize Personality</span>
          <span className="sm:hidden">Settings</span>
        </Button>
      </div>

      {/* Partnership Health Dashboard */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Heart className="h-5 w-5 text-red-500" />
              Partnership Health
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-2xl font-bold">{partnershipHealth}/100</span>
                <Badge variant={partnershipHealth > 80 ? 'default' : 'secondary'}>
                  {partnershipHealth > 80 ? 'Excellent' : 'Good'}
                </Badge>
              </div>
              <Progress value={partnershipHealth} className="h-2" />
              <p className="text-sm text-gray-600">
                Strong collaboration and trust building
              </p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5 text-blue-500" />
              Goal Progress
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-2xl font-bold">{completedGoals}/{activeGoals}</span>
                <Badge variant="secondary">On Track</Badge>
              </div>
              <Progress value={(completedGoals / activeGoals) * 100} className="h-2" />
              <p className="text-sm text-gray-600">
                Goals completed this quarter
              </p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5 text-green-500" />
              Impact Score
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-2xl font-bold">94</span>
                <Badge variant="default">High Impact</Badge>
              </div>
              <Progress value={94} className="h-2" />
              <p className="text-sm text-gray-600">
                Decisions influenced and problems solved
              </p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Today's Insights */}
      {insights.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Today's Insights from Your Co-Founder</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {insights.slice(0, 4).map((insight, index) => (
                <div key={index} className="p-4 border rounded-lg">
                  <div className="flex items-start gap-3">
                    <div className="p-2 rounded-full bg-blue-100">
                      <Lightbulb className="h-4 w-4 text-blue-600" />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium">{insight.type || 'Business Insight'}</h4>
                      <p className="text-sm text-gray-600 mt-1">
                        {insight.value || insight.message || 'New opportunity detected in your data'}
                      </p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Conversation Modes */}
      <Card>
        <CardHeader>
          <CardTitle>How would you like to work together today?</CardTitle>
          <p className="text-sm text-gray-600">
            Choose a conversation mode that fits your current needs
          </p>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 md:gap-4">
            {conversationModes.map((mode) => (
              <Card 
                key={mode.id} 
                className="cursor-pointer hover:shadow-md transition-shadow border-2 hover:border-purple-200"
                onClick={() => startConversationMode(mode.id)}
              >
                <CardContent className="p-4">
                  <div className="flex items-start gap-3">
                    <div className={`p-2 rounded-full ${mode.color}`}>
                      <mode.icon className="h-5 w-5 text-white" />
                    </div>
                    <div className="flex-1">
                      <h3 className="font-semibold">{mode.name}</h3>
                      <p className="text-sm text-gray-600 mt-1">
                        {mode.description}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle>Quick Actions</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 sm:flex sm:flex-wrap gap-2 md:gap-3">
            <Button 
              variant="outline"
              onClick={() => startConversationMode('daily_standup')}
            >
              <Calendar className="h-4 w-4 mr-2" />
              Start Daily Check-in
            </Button>
            <Button 
              variant="outline"
              onClick={() => startConversationMode('decision_support')}
            >
              <Target className="h-4 w-4 mr-2" />
              Get Decision Help
            </Button>
            <Button 
              variant="outline"
              onClick={() => startConversationMode('brainstorm')}
            >
              <Lightbulb className="h-4 w-4 mr-2" />
              Brainstorm Ideas
            </Button>
            <Button 
              variant="outline"
              onClick={() => startConversationMode('strategic_session')}
            >
              <Brain className="h-4 w-4 mr-2" />
              Strategic Session
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/co-founder/Dashboard/GoalTracker.tsx ===


import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Target, Plus, CheckCircle2, Clock, AlertCircle } from 'lucide-react';
import { useAccountability } from '@/hooks/co-founder/useAccountability';
import { useToast } from '@/hooks/use-toast';
import { getStatusBadgeVariant } from '@/utils/statusUtils';

export function GoalTracker() {
  const { goals, isLoadingGoals, addGoal, isAddingGoal } = useAccountability();
  const { toast } = useToast();
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [newGoal, setNewGoal] = useState({
    description: '',
    dueDate: '',
    priority: 'medium' as 'low' | 'medium' | 'high' | 'critical'
  });

  const handleAddGoal = () => {
    if (!newGoal.description || !newGoal.dueDate) {
      toast({
        title: "Error",
        description: "Please fill in all fields",
        variant: "destructive"
      });
      return;
    }

    addGoal(newGoal, {
      onSuccess: () => {
        toast({
          title: "Success",
          description: "Goal added successfully"
        });
        setIsDialogOpen(false);
        setNewGoal({ description: '', dueDate: '', priority: 'medium' });
      },
      onError: () => {
        toast({
          title: "Error",
          description: "Failed to add goal",
          variant: "destructive"
        });
      }
    });
  };

  const activeGoals = goals.filter(g => g.status !== 'completed');
  const completedGoals = goals.filter(g => g.status === 'completed');

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle2 className="h-4 w-4 text-green-500" />;
      case 'in_progress':
        return <Clock className="h-4 w-4 text-blue-500" />;
      case 'overdue':
        return <AlertCircle className="h-4 w-4 text-red-500" />;
      default:
        return <Target className="h-4 w-4 text-gray-400" />;
    }
  };

  if (isLoadingGoals) {
    return (
      <Card>
        <CardContent className="p-6" data-testid="goal-tracker-loading">
          <div className="flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card data-testid="goal-tracker">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Target className="h-5 w-5 text-purple-600" />
            Goal Tracker
          </CardTitle>
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button size="sm" variant="outline" data-testid="button-add-goal">
                <Plus className="h-4 w-4 mr-2" />
                Add Goal
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Add New Goal</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="description">Description</Label>
                  <Input
                    id="description"
                    data-testid="input-goal-description"
                    value={newGoal.description}
                    onChange={(e) => setNewGoal({ ...newGoal, description: e.target.value })}
                    placeholder="Enter goal description"
                  />
                </div>
                <div>
                  <Label htmlFor="dueDate">Due Date</Label>
                  <Input
                    id="dueDate"
                    type="datetime-local"
                    data-testid="input-goal-duedate"
                    value={newGoal.dueDate}
                    onChange={(e) => setNewGoal({ ...newGoal, dueDate: new Date(e.target.value).toISOString() })}
                  />
                </div>
                <div>
                  <Label htmlFor="priority">Priority</Label>
                  <Select
                    value={newGoal.priority}
                    onValueChange={(value: any) => setNewGoal({ ...newGoal, priority: value })}
                  >
                    <SelectTrigger data-testid="select-goal-priority">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">Low</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="critical">Critical</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <Button
                  onClick={handleAddGoal}
                  disabled={isAddingGoal}
                  className="w-full"
                  data-testid="button-submit-goal"
                >
                  {isAddingGoal ? 'Adding...' : 'Add Goal'}
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Progress Summary */}
        <div className="grid grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg" data-testid="goal-summary">
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-600" data-testid="text-active-goals">{activeGoals.length}</div>
            <div className="text-sm text-gray-600">Active</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-green-600" data-testid="text-completed-goals">{completedGoals.length}</div>
            <div className="text-sm text-gray-600">Completed</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-600" data-testid="text-success-rate">
              {goals.length > 0 ? Math.round((completedGoals.length / goals.length) * 100) : 0}%
            </div>
            <div className="text-sm text-gray-600">Success Rate</div>
          </div>
        </div>

        {/* Active Goals */}
        <div className="space-y-3">
          <h4 className="font-semibold text-sm text-gray-700">Active Goals</h4>
          {activeGoals.length > 0 ? (
            activeGoals.map((goal) => (
              <div key={goal.id} className="p-3 border rounded-lg space-y-2" data-testid={`goal-item-${goal.id}`}>
                <div className="flex items-start justify-between">
                  <div className="flex items-start gap-2 flex-1">
                    {getStatusIcon(goal.status)}
                    <div className="flex-1 min-w-0">
                      <p className="font-medium text-sm" data-testid={`text-goal-description-${goal.id}`}>{goal.description}</p>
                      <p className="text-xs text-gray-500 mt-1" data-testid={`text-goal-duedate-${goal.id}`}>
                        Due: {new Date(goal.dueDate).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                  <Badge variant={goal.status === 'completed' ? 'default' : goal.status === 'in_progress' ? 'secondary' : 'outline'} className="text-xs" data-testid={`badge-goal-status-${goal.id}`}>
                    {goal.status.replace('_', ' ')}
                  </Badge>
                </div>
                <div className="space-y-1">
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-gray-600">Progress</span>
                    <span className="font-medium" data-testid={`text-goal-progress-${goal.id}`}>{goal.progress}%</span>
                  </div>
                  <Progress value={goal.progress} className="h-2" data-testid={`progress-goal-${goal.id}`} />
                </div>
              </div>
            ))
          ) : (
            <p className="text-sm text-gray-500 text-center py-4" data-testid="text-no-goals">
              No active goals. Set some goals to track your progress!
            </p>
          )}
        </div>

        {/* Completed Goals */}
        {completedGoals.length > 0 && (
          <div className="space-y-3">
            <h4 className="font-semibold text-sm text-gray-700">Recently Completed</h4>
            {completedGoals.slice(0, 3).map((goal) => (
              <div key={goal.id} className="p-3 bg-green-50 border border-green-200 rounded-lg">
                <div className="flex items-center gap-2">
                  <CheckCircle2 className="h-4 w-4 text-green-600 flex-shrink-0" />
                  <p className="font-medium text-sm text-gray-900">{goal.description}</p>
                </div>
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
}


=== FILE: client/src/components/design-thinking/lean/BMLDashboard.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { 
  Save, 
  Download, 
  Plus,
  X,
  TrendingUp,
  TrendingDown,
  Target,
  CheckCircle,
  AlertTriangle,
  Clock,
  BarChart,
  ArrowRight,
  Lightbulb,
  Settings,
  Play,
  Pause,
  RotateCcw,
  FileText,
  Zap,
  Users,
  DollarSign
} from 'lucide-react';

export interface Hypothesis {
  id: string;
  projectId: string;
  title: string;
  description: string;
  assumption: string;
  experiment: string;
  successCriteria: string[];
  status: 'draft' | 'active' | 'validated' | 'invalidated' | 'paused';
  priority: 'low' | 'medium' | 'high' | 'critical';
  createdAt: Date;
  updatedAt: Date;
  validatedAt?: Date;
}

export interface Experiment {
  id: string;
  hypothesisId: string;
  title: string;
  description: string;
  type: 'mvp' | 'landing-page' | 'survey' | 'interview' | 'a-b-test' | 'prototype-test';
  status: 'planning' | 'running' | 'completed' | 'cancelled';
  startDate?: Date;
  endDate?: Date;
  participants?: number;
  results: any;
  insights: string[];
  nextActions: string[];
  createdAt: Date;
  updatedAt: Date;
}

export interface Metric {
  id: string;
  hypothesisId: string;
  name: string;
  description: string;
  type: 'quantitative' | 'qualitative';
  unit: string;
  target: number;
  actual?: number;
  status: 'baseline' | 'improving' | 'declining' | 'stable';
  trend: number; // percentage change
  lastUpdated: Date;
}

export interface BMLCycle {
  id: string;
  projectId: string;
  hypothesisId: string;
  buildPhase: {
    description: string;
    duration: number; // days
    completed: boolean;
    completedAt?: Date;
  };
  measurePhase: {
    metrics: string[];
    duration: number; // days
    completed: boolean;
    completedAt?: Date;
  };
  learnPhase: {
    insights: string[];
    decisions: string[];
    nextSteps: string[];
    completed: boolean;
    completedAt?: Date;
  };
  status: 'build' | 'measure' | 'learn' | 'completed';
  createdAt: Date;
  updatedAt: Date;
}

interface BMLDashboardProps {
  projectId: string;
  initialData?: {
    hypotheses: Hypothesis[];
    experiments: Experiment[];
    metrics: Metric[];
    cycles: BMLCycle[];
  };
  onSave: (data: any) => void;
  onExport?: (data: any) => void;
}

const hypothesisTemplates = [
  {
    title: 'User Demand Hypothesis',
    assumption: 'Users have a problem that needs solving',
    experiment: 'Create landing page and measure sign-ups'
  },
  {
    title: 'Value Proposition Hypothesis',
    assumption: 'Users find our solution valuable',
    experiment: 'Test with target users and measure satisfaction'
  },
  {
    title: 'Business Model Hypothesis',
    assumption: 'Users will pay for our solution',
    experiment: 'Test pricing and measure conversion'
  },
  {
    title: 'Channel Hypothesis',
    assumption: 'We can reach users through specific channels',
    experiment: 'Test marketing channels and measure acquisition cost'
  }
];

const experimentTypes = {
  'mvp': { name: 'MVP', description: 'Minimum Viable Product' },
  'landing-page': { name: 'Landing Page', description: 'Marketing page test' },
  'survey': { name: 'Survey', description: 'User feedback collection' },
  'interview': { name: 'Interview', description: 'In-depth user research' },
  'a-b-test': { name: 'A/B Test', description: 'Controlled experiment' },
  'prototype-test': { name: 'Prototype Test', description: 'Usability testing' }
};

export function BMLDashboard({ 
  projectId, 
  initialData, 
  onSave, 
  onExport 
}: BMLDashboardProps) {
  const [data, setData] = useState({
    hypotheses: initialData?.hypotheses || [],
    experiments: initialData?.experiments || [],
    metrics: initialData?.metrics || [],
    cycles: initialData?.cycles || []
  });

  const [isSaving, setIsSaving] = useState(false);
  const [newHypothesis, setNewHypothesis] = useState<Partial<Hypothesis>>({
    title: '',
    description: '',
    assumption: '',
    experiment: '',
    successCriteria: [],
    status: 'draft',
    priority: 'medium'
  });
  const [newExperiment, setNewExperiment] = useState<Partial<Experiment>>({
    title: '',
    description: '',
    type: 'mvp',
    status: 'planning',
    results: {},
    insights: [],
    nextActions: []
  });
  const [selectedHypothesis, setSelectedHypothesis] = useState<string | null>(null);
  const [activeCycle, setActiveCycle] = useState<string | null>(null);

  useEffect(() => {
    if (initialData) {
      setData(initialData);
    }
  }, [initialData]);

  const updateData = (field: keyof typeof data, value: any) => {
    setData(prev => ({ ...prev, [field]: value }));
  };

  const addHypothesis = () => {
    if (newHypothesis.title?.trim() && newHypothesis.assumption?.trim()) {
      const hypothesis: Hypothesis = {
        id: `hypothesis-${Date.now()}`,
        projectId,
        title: newHypothesis.title,
        description: newHypothesis.description || '',
        assumption: newHypothesis.assumption,
        experiment: newHypothesis.experiment || '',
        successCriteria: newHypothesis.successCriteria || [],
        status: 'draft',
        priority: 'medium',
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      setData(prev => ({
        ...prev,
        hypotheses: [...prev.hypotheses, hypothesis]
      }));
      
      setNewHypothesis({
        title: '',
        description: '',
        assumption: '',
        experiment: '',
        successCriteria: [],
        status: 'draft',
        priority: 'medium'
      });
    }
  };

  const updateHypothesis = (hypothesisId: string, field: keyof Hypothesis, value: any) => {
    setData(prev => ({
      ...prev,
      hypotheses: prev.hypotheses.map(h => 
        h.id === hypothesisId ? { ...h, [field]: value, updatedAt: new Date() } : h
      )
    }));
  };

  const removeHypothesis = (hypothesisId: string) => {
    setData(prev => ({
      ...prev,
      hypotheses: prev.hypotheses.filter(h => h.id !== hypothesisId),
      experiments: prev.experiments.filter(e => e.hypothesisId !== hypothesisId),
      metrics: prev.metrics.filter(m => m.hypothesisId !== hypothesisId),
      cycles: prev.cycles.filter(c => c.hypothesisId !== hypothesisId)
    }));
  };

  const addExperiment = () => {
    if (newExperiment.title?.trim() && selectedHypothesis) {
      const experiment: Experiment = {
        id: `experiment-${Date.now()}`,
        hypothesisId: selectedHypothesis,
        title: newExperiment.title,
        description: newExperiment.description || '',
        type: newExperiment.type || 'mvp',
        status: 'planning',
        results: {},
        insights: [],
        nextActions: [],
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      setData(prev => ({
        ...prev,
        experiments: [...prev.experiments, experiment]
      }));
      
      setNewExperiment({
        title: '',
        description: '',
        type: 'mvp',
        status: 'planning',
        results: {},
        insights: [],
        nextActions: []
      });
    }
  };

  const startBMLCycle = (hypothesisId: string) => {
    const cycle: BMLCycle = {
      id: `cycle-${Date.now()}`,
      projectId,
      hypothesisId,
      buildPhase: {
        description: '',
        duration: 7,
        completed: false
      },
      measurePhase: {
        metrics: [],
        duration: 7,
        completed: false
      },
      learnPhase: {
        insights: [],
        decisions: [],
        nextSteps: [],
        completed: false
      },
      status: 'build',
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    setData(prev => ({
      ...prev,
      cycles: [...prev.cycles, cycle]
    }));
    setActiveCycle(cycle.id);
  };

  const updateCyclePhase = (cycleId: string, phase: 'build' | 'measure' | 'learn', field: string, value: any) => {
    setData(prev => ({
      ...prev,
      cycles: prev.cycles.map(c => 
        c.id === cycleId ? { 
          ...c, 
          [phase]: { ...c[phase], [field]: value },
          updatedAt: new Date()
        } : c
      )
    }));
  };

  const completeCyclePhase = (cycleId: string, phase: 'build' | 'measure' | 'learn') => {
    setData(prev => ({
      ...prev,
      cycles: prev.cycles.map(c => {
        if (c.id === cycleId) {
          const updated = { ...c, updatedAt: new Date() };
          updated[phase] = { ...updated[phase], completed: true, completedAt: new Date() };
          
          // Move to next phase
          if (phase === 'build') updated.status = 'measure';
          else if (phase === 'measure') updated.status = 'learn';
          else if (phase === 'learn') updated.status = 'completed';
          
          return updated;
        }
        return c;
      })
    }));
  };

  const getHypothesisStats = () => {
    const total = data.hypotheses.length;
    const validated = data.hypotheses.filter(h => h.status === 'validated').length;
    const invalidated = data.hypotheses.filter(h => h.status === 'invalidated').length;
    const active = data.hypotheses.filter(h => h.status === 'active').length;
    
    return { total, validated, invalidated, active };
  };

  const getActiveCycle = () => {
    return data.cycles.find(c => c.id === activeCycle);
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onSave(data);
    } catch (error) {
      console.error('Error saving BML data:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleExport = () => {
    if (onExport) {
      onExport(data);
    }
  };

  const stats = getHypothesisStats();
  const currentCycle = getActiveCycle();

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Build-Measure-Learn Dashboard</h2>
          <p className="text-gray-600 mt-1">Track hypotheses, experiments, and learning cycles</p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={handleSave} 
            disabled={isSaving}
            className="flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            {isSaving ? 'Saving...' : 'Save'}
          </Button>
          {onExport && (
            <Button 
              variant="outline" 
              onClick={handleExport}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}
        </div>
      </div>

      {/* Overview Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Target className="h-4 w-4 text-muted-foreground" />
              <div className="ml-2">
                <p className="text-sm font-medium">Total Hypotheses</p>
                <p className="text-2xl font-bold">{stats.total}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <div className="ml-2">
                <p className="text-sm font-medium">Validated</p>
                <p className="text-2xl font-bold text-green-600">{stats.validated}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <AlertTriangle className="h-4 w-4 text-red-600" />
              <div className="ml-2">
                <p className="text-sm font-medium">Invalidated</p>
                <p className="text-2xl font-bold text-red-600">{stats.invalidated}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Play className="h-4 w-4 text-blue-600" />
              <div className="ml-2">
                <p className="text-sm font-medium">Active</p>
                <p className="text-2xl font-bold text-blue-600">{stats.active}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Hypotheses Management */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Lightbulb className="w-5 h-5" />
            Hypotheses
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Add New Hypothesis */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Title</label>
              <Input
                value={newHypothesis.title || ''}
                onChange={(e) => setNewHypothesis(prev => ({ ...prev, title: e.target.value }))}
                placeholder="e.g., User Demand Hypothesis"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Priority</label>
              <select
                value={newHypothesis.priority || 'medium'}
                onChange={(e) => setNewHypothesis(prev => ({ ...prev, priority: e.target.value as any }))}
                className="w-full px-3 py-2 border rounded-md"
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="critical">Critical</option>
              </select>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Assumption</label>
            <Textarea
              value={newHypothesis.assumption || ''}
              onChange={(e) => setNewHypothesis(prev => ({ ...prev, assumption: e.target.value }))}
              placeholder="We believe that..."
              rows={2}
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Experiment</label>
            <Textarea
              value={newHypothesis.experiment || ''}
              onChange={(e) => setNewHypothesis(prev => ({ ...prev, experiment: e.target.value }))}
              placeholder="We will test this by..."
              rows={2}
            />
          </div>
          
          <div className="flex gap-2">
            <Button onClick={addHypothesis} disabled={!newHypothesis.title?.trim() || !newHypothesis.assumption?.trim()}>
              <Plus className="w-4 h-4 mr-2" />
              Add Hypothesis
            </Button>
            <div className="flex gap-1">
              {hypothesisTemplates.map((template, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  onClick={() => setNewHypothesis(prev => ({
                    ...prev,
                    title: template.title,
                    assumption: template.assumption,
                    experiment: template.experiment
                  }))}
                >
                  {template.title}
                </Button>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Hypotheses List */}
      <Card>
        <CardHeader>
          <CardTitle>Hypotheses List</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {data.hypotheses.map((hypothesis) => (
              <div key={hypothesis.id} className="p-4 border rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <h3 className="font-semibold">{hypothesis.title}</h3>
                    <Badge 
                      variant={hypothesis.status === 'validated' ? 'default' : hypothesis.status === 'invalidated' ? 'destructive' : 'outline'}
                    >
                      {hypothesis.status}
                    </Badge>
                    <Badge variant="outline">{hypothesis.priority}</Badge>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => startBMLCycle(hypothesis.id)}
                      className="flex items-center gap-1"
                    >
                      <Zap className="w-3 h-3" />
                      Start BML
                    </Button>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => removeHypothesis(hypothesis.id)}
                      className="h-8 w-8 p-0"
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
                
                <div className="space-y-2 text-sm">
                  <div>
                    <span className="font-medium">Assumption:</span> {hypothesis.assumption}
                  </div>
                  <div>
                    <span className="font-medium">Experiment:</span> {hypothesis.experiment}
                  </div>
                  {hypothesis.description && (
                    <div>
                      <span className="font-medium">Description:</span> {hypothesis.description}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Active BML Cycle */}
      {currentCycle && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <RotateCcw className="w-5 h-5" />
              Active BML Cycle
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Build Phase */}
            <div className={`p-4 rounded-lg border-2 ${currentCycle.status === 'build' ? 'border-blue-500 bg-blue-50' : currentCycle.buildPhase.completed ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-semibold flex items-center gap-2">
                  <Settings className="w-4 h-4" />
                  Build Phase
                </h3>
                {currentCycle.buildPhase.completed ? (
                  <Badge variant="default">Completed</Badge>
                ) : currentCycle.status === 'build' ? (
                  <Badge variant="secondary">Active</Badge>
                ) : (
                  <Badge variant="outline">Pending</Badge>
                )}
              </div>
              
              {currentCycle.status === 'build' && (
                <div className="space-y-2">
                  <Textarea
                    value={currentCycle.buildPhase.description}
                    onChange={(e) => updateCyclePhase(currentCycle.id, 'build', 'description', e.target.value)}
                    placeholder="What are you building?"
                    rows={2}
                  />
                  <div className="flex items-center gap-2">
                    <Input
                      type="number"
                      value={currentCycle.buildPhase.duration}
                      onChange={(e) => updateCyclePhase(currentCycle.id, 'build', 'duration', parseInt(e.target.value) || 0)}
                      className="w-20"
                    />
                    <span className="text-sm">days</span>
                    <Button
                      size="sm"
                      onClick={() => completeCyclePhase(currentCycle.id, 'build')}
                      disabled={!currentCycle.buildPhase.description.trim()}
                    >
                      Complete Build
                    </Button>
                  </div>
                </div>
              )}
            </div>

            {/* Measure Phase */}
            <div className={`p-4 rounded-lg border-2 ${currentCycle.status === 'measure' ? 'border-blue-500 bg-blue-50' : currentCycle.measurePhase.completed ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-semibold flex items-center gap-2">
                  <BarChart className="w-4 h-4" />
                  Measure Phase
                </h3>
                {currentCycle.measurePhase.completed ? (
                  <Badge variant="default">Completed</Badge>
                ) : currentCycle.status === 'measure' ? (
                  <Badge variant="secondary">Active</Badge>
                ) : (
                  <Badge variant="outline">Pending</Badge>
                )}
              </div>
              
              {currentCycle.status === 'measure' && (
                <div className="space-y-2">
                  <div>
                    <label className="block text-sm font-medium mb-1">Metrics to Track</label>
                    <Textarea
                      value={currentCycle.measurePhase.metrics.join('\n')}
                      onChange={(e) => updateCyclePhase(currentCycle.id, 'measure', 'metrics', e.target.value.split('\n').filter(m => m.trim()))}
                      placeholder="List metrics to measure..."
                      rows={3}
                    />
                  </div>
                  <div className="flex items-center gap-2">
                    <Input
                      type="number"
                      value={currentCycle.measurePhase.duration}
                      onChange={(e) => updateCyclePhase(currentCycle.id, 'measure', 'duration', parseInt(e.target.value) || 0)}
                      className="w-20"
                    />
                    <span className="text-sm">days</span>
                    <Button
                      size="sm"
                      onClick={() => completeCyclePhase(currentCycle.id, 'measure')}
                      disabled={currentCycle.measurePhase.metrics.length === 0}
                    >
                      Complete Measure
                    </Button>
                  </div>
                </div>
              )}
            </div>

            {/* Learn Phase */}
            <div className={`p-4 rounded-lg border-2 ${currentCycle.status === 'learn' ? 'border-blue-500 bg-blue-50' : currentCycle.learnPhase.completed ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-semibold flex items-center gap-2">
                  <Lightbulb className="w-4 h-4" />
                  Learn Phase
                </h3>
                {currentCycle.learnPhase.completed ? (
                  <Badge variant="default">Completed</Badge>
                ) : currentCycle.status === 'learn' ? (
                  <Badge variant="secondary">Active</Badge>
                ) : (
                  <Badge variant="outline">Pending</Badge>
                )}
              </div>
              
              {currentCycle.status === 'learn' && (
                <div className="space-y-2">
                  <div>
                    <label className="block text-sm font-medium mb-1">Key Insights</label>
                    <Textarea
                      value={currentCycle.learnPhase.insights.join('\n')}
                      onChange={(e) => updateCyclePhase(currentCycle.id, 'learn', 'insights', e.target.value.split('\n').filter(i => i.trim()))}
                      placeholder="What did you learn?"
                      rows={2}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Decisions Made</label>
                    <Textarea
                      value={currentCycle.learnPhase.decisions.join('\n')}
                      onChange={(e) => updateCyclePhase(currentCycle.id, 'learn', 'decisions', e.target.value.split('\n').filter(d => d.trim()))}
                      placeholder="What decisions did you make?"
                      rows={2}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Next Steps</label>
                    <Textarea
                      value={currentCycle.learnPhase.nextSteps.join('\n')}
                      onChange={(e) => updateCyclePhase(currentCycle.id, 'learn', 'nextSteps', e.target.value.split('\n').filter(s => s.trim()))}
                      placeholder="What are your next steps?"
                      rows={2}
                    />
                  </div>
                  <Button
                    size="sm"
                    onClick={() => completeCyclePhase(currentCycle.id, 'learn')}
                    disabled={currentCycle.learnPhase.insights.length === 0}
                  >
                    Complete Learn & Start New Cycle
                  </Button>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Tips and Guidance */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <h3 className="font-semibold text-blue-900 mb-2">üîÑ BML Cycle Tips</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ Keep build cycles short (1-2 weeks maximum)</li>
            <li>‚Ä¢ Focus on learning, not building perfect features</li>
            <li>‚Ä¢ Measure what matters most to your hypothesis</li>
            <li>‚Ä¢ Be honest about what the data tells you</li>
            <li>‚Ä¢ Pivot or persevere based on evidence</li>
            <li>‚Ä¢ Document learnings for future reference</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/define/HMWQuestionGenerator.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { 
  Save, 
  Download, 
  Lightbulb, 
  Target, 
  TrendingUp,
  RefreshCw,
  Vote,
  Star,
  CheckCircle,
  AlertTriangle
} from 'lucide-react';

export interface HMWQuestionData {
  id: string;
  question: string;
  reframingType: 'amplify' | 'remove-constraint' | 'opposite' | 'question-assumption' | 'resource-change';
  desirability: number; // 1-5
  feasibility: number; // 1-5
  viability: number; // 1-5
  ideaCount: number;
  createdAt?: Date;
  updatedAt?: Date;
}

interface HMWQuestionGeneratorProps {
  projectId: string;
  povStatement: string;
  initialData?: HMWQuestionData[];
  onSave: (data: HMWQuestionData[]) => void;
  onExport?: (data: HMWQuestionData[]) => void;
}

const reframingTechniques = {
  amplify: {
    name: 'Amplify',
    description: 'Make the problem bigger or more extreme',
    example: 'How might we eliminate the need for parking entirely?'
  },
  'remove-constraint': {
    name: 'Remove Constraint',
    description: 'Remove an assumed limitation',
    example: 'How might we deliver value without an app?'
  },
  opposite: {
    name: 'Opposite',
    description: 'Flip the problem',
    example: 'How might we encourage customers to complain more?'
  },
  'question-assumption': {
    name: 'Question Assumption',
    description: 'Challenge implicit beliefs',
    example: 'How might we deliver value without requiring sign-up?'
  },
  'resource-change': {
    name: 'Resource Change',
    description: 'Change who has resources',
    example: 'How might customers support each other?'
  }
};

const autoGeneratedQuestions = [
  'How might we make this process effortless?',
  'How might we eliminate this problem entirely?',
  'How might we turn this into an opportunity?',
  'How might we make this delightful?',
  'How might we remove all friction?',
  'How might we make this instant?',
  'How might we make this personal?',
  'How might we make this social?',
  'How might we make this sustainable?',
  'How might we make this accessible?'
];

export function HMWQuestionGenerator({ 
  projectId, 
  povStatement,
  initialData = [], 
  onSave, 
  onExport 
}: HMWQuestionGeneratorProps) {
  const [questions, setQuestions] = useState<HMWQuestionData[]>(initialData);
  const [isSaving, setIsSaving] = useState(false);
  const [newQuestion, setNewQuestion] = useState('');
  const [selectedTechnique, setSelectedTechnique] = useState<keyof typeof reframingTechniques>('amplify');

  useEffect(() => {
    if (initialData.length > 0) {
      setQuestions(initialData);
    }
  }, [initialData]);

  const generateQuestions = () => {
    const newQuestions: HMWQuestionData[] = autoGeneratedQuestions.slice(0, 5).map((question, index) => ({
      id: `generated-${Date.now()}-${index}`,
      question,
      reframingType: Object.keys(reframingTechniques)[index % Object.keys(reframingTechniques).length] as keyof typeof reframingTechniques,
      desirability: Math.floor(Math.random() * 3) + 3, // 3-5
      feasibility: Math.floor(Math.random() * 3) + 3, // 3-5
      viability: Math.floor(Math.random() * 3) + 3, // 3-5
      ideaCount: 0
    }));

    setQuestions(prev => [...prev, ...newQuestions]);
  };

  const addQuestion = () => {
    if (newQuestion.trim()) {
      const question: HMWQuestionData = {
        id: `manual-${Date.now()}`,
        question: newQuestion.trim(),
        reframingType: selectedTechnique,
        desirability: 3,
        feasibility: 3,
        viability: 3,
        ideaCount: 0
      };
      
      setQuestions(prev => [...prev, question]);
      setNewQuestion('');
    }
  };

  const updateQuestion = (id: string, field: keyof HMWQuestionData, value: any) => {
    setQuestions(prev => prev.map(q => 
      q.id === id ? { ...q, [field]: value } : q
    ));
  };

  const removeQuestion = (id: string) => {
    setQuestions(prev => prev.filter(q => q.id !== id));
  };

  const applyReframing = (question: HMWQuestionData, technique: keyof typeof reframingTechniques) => {
    const baseQuestion = question.question;
    let reframedQuestion = baseQuestion;

    switch (technique) {
      case 'amplify':
        reframedQuestion = baseQuestion.replace(/make|improve|help/g, 'eliminate');
        reframedQuestion = reframedQuestion.replace(/better|easier|faster/g, 'entirely');
        break;
      case 'remove-constraint':
        reframedQuestion = baseQuestion.replace(/with|using|through/g, 'without');
        break;
      case 'opposite':
        reframedQuestion = baseQuestion.replace(/reduce|minimize|decrease/g, 'increase');
        reframedQuestion = reframedQuestion.replace(/increase|maximize|enhance/g, 'reduce');
        break;
      case 'question-assumption':
        reframedQuestion = baseQuestion.replace(/we|our|the system/g, 'users themselves');
        break;
      case 'resource-change':
        reframedQuestion = baseQuestion.replace(/we|our|the company/g, 'users');
        break;
    }

    updateQuestion(question.id, 'question', reframedQuestion);
    updateQuestion(question.id, 'reframingType', technique);
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onSave(questions);
    } catch (error) {
      console.error('Error saving HMW questions:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleExport = () => {
    if (onExport) {
      onExport(questions);
    }
  };

  const getPriorityScore = (question: HMWQuestionData) => {
    return (question.desirability + question.feasibility + question.viability) / 3;
  };

  const getPriorityColor = (score: number) => {
    if (score >= 4) return 'text-green-600';
    if (score >= 3) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getPriorityIcon = (score: number) => {
    if (score >= 4) return CheckCircle;
    if (score >= 3) return AlertTriangle;
    return AlertTriangle;
  };

  const sortedQuestions = [...questions].sort((a, b) => getPriorityScore(b) - getPriorityScore(a));

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">HMW Question Generator</h2>
          <p className="text-gray-600 mt-1">
            Generate "How Might We" questions to reframe your problem and spark innovative solutions
          </p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={handleSave} 
            disabled={isSaving}
            className="flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            {isSaving ? 'Saving...' : 'Save'}
          </Button>
          {onExport && (
            <Button 
              variant="outline" 
              onClick={handleExport}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}
        </div>
      </div>

      {/* POV Statement Context */}
      {povStatement && (
        <Card className="bg-blue-50 border-blue-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-blue-900">
              <Target className="w-5 h-5" />
              POV Statement Context
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-blue-800">{povStatement}</p>
          </CardContent>
        </Card>
      )}

      {/* Generate Questions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Lightbulb className="w-5 h-5" />
            Generate Questions
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Button onClick={generateQuestions} className="flex items-center gap-2">
              <RefreshCw className="w-4 h-4" />
              Generate 5 Questions
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Add Custom Question</label>
              <Textarea
                placeholder="How might we..."
                value={newQuestion}
                onChange={(e) => setNewQuestion(e.target.value)}
                className="min-h-[80px]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Reframing Technique</label>
              <select
                value={selectedTechnique}
                onChange={(e) => setSelectedTechnique(e.target.value as keyof typeof reframingTechniques)}
                className="w-full px-3 py-2 border rounded-md"
              >
                {Object.entries(reframingTechniques).map(([key, technique]) => (
                  <option key={key} value={key}>{technique.name}</option>
                ))}
              </select>
              <p className="text-xs text-gray-600 mt-1">
                {reframingTechniques[selectedTechnique].description}
              </p>
            </div>
          </div>

          <Button onClick={addQuestion} disabled={!newQuestion.trim()}>
            Add Custom Question
          </Button>
        </CardContent>
      </Card>

      {/* Reframing Techniques Guide */}
      <Card className="bg-gray-50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="w-5 h-5" />
            Reframing Techniques
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {Object.entries(reframingTechniques).map(([key, technique]) => (
              <div key={key} className="p-3 bg-white rounded border">
                <h4 className="font-medium text-sm">{technique.name}</h4>
                <p className="text-xs text-gray-600 mt-1">{technique.description}</p>
                <p className="text-xs text-blue-600 mt-2 italic">"{technique.example}"</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Questions List */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">Generated Questions ({questions.length})</h3>
          <Badge variant="outline" className="flex items-center gap-1">
            <Star className="w-3 h-3" />
            Sorted by Priority
          </Badge>
        </div>

        {sortedQuestions.map((question, index) => {
          const priorityScore = getPriorityScore(question);
          const PriorityIcon = getPriorityIcon(priorityScore);
          
          return (
            <Card key={question.id} className="border-2 border-gray-200">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <Badge variant="outline">#{index + 1}</Badge>
                      <Badge variant="secondary">{reframingTechniques[question.reframingType].name}</Badge>
                      <div className="flex items-center gap-1">
                        <PriorityIcon className={`w-4 h-4 ${getPriorityColor(priorityScore)}`} />
                        <span className={`text-sm font-medium ${getPriorityColor(priorityScore)}`}>
                          {priorityScore.toFixed(1)}/5
                        </span>
                      </div>
                    </div>
                    <p className="text-lg font-medium">{question.question}</p>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => removeQuestion(question.id)}
                    className="text-red-600 hover:text-red-700"
                  >
                    <X className="w-4 h-4" />
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Scoring */}
                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">Desirability</label>
                    <select
                      value={question.desirability}
                      onChange={(e) => updateQuestion(question.id, 'desirability', parseInt(e.target.value))}
                      className="w-full px-2 py-1 border rounded text-sm"
                    >
                      <option value={1}>1 - Low</option>
                      <option value={2}>2 - Below Average</option>
                      <option value={3}>3 - Average</option>
                      <option value={4}>4 - High</option>
                      <option value={5}>5 - Very High</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Feasibility</label>
                    <select
                      value={question.feasibility}
                      onChange={(e) => updateQuestion(question.id, 'feasibility', parseInt(e.target.value))}
                      className="w-full px-2 py-1 border rounded text-sm"
                    >
                      <option value={1}>1 - Low</option>
                      <option value={2}>2 - Below Average</option>
                      <option value={3}>3 - Average</option>
                      <option value={4}>4 - High</option>
                      <option value={5}>5 - Very High</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Viability</label>
                    <select
                      value={question.viability}
                      onChange={(e) => updateQuestion(question.id, 'viability', parseInt(e.target.value))}
                      className="w-full px-2 py-1 border rounded text-sm"
                    >
                      <option value={1}>1 - Low</option>
                      <option value={2}>2 - Below Average</option>
                      <option value={3}>3 - Average</option>
                      <option value={4}>4 - High</option>
                      <option value={5}>5 - Very High</option>
                    </select>
                  </div>
                </div>

                {/* Reframing Actions */}
                <div className="flex flex-wrap gap-2">
                  {Object.keys(reframingTechniques).map(technique => (
                    <Button
                      key={technique}
                      variant="outline"
                      size="sm"
                      onClick={() => applyReframing(question, technique as keyof typeof reframingTechniques)}
                      className="text-xs"
                    >
                      {reframingTechniques[technique as keyof typeof reframingTechniques].name}
                    </Button>
                  ))}
                </div>

                {/* Idea Count */}
                <div className="flex items-center gap-2">
                  <label className="text-sm font-medium">Ideas Generated:</label>
                  <Input
                    type="number"
                    value={question.ideaCount}
                    onChange={(e) => updateQuestion(question.id, 'ideaCount', parseInt(e.target.value) || 0)}
                    className="w-20"
                    min="0"
                  />
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Prioritization Matrix */}
      {questions.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Vote className="w-5 h-5" />
              Prioritization Matrix
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <h4 className="font-medium text-green-600">High Priority (4-5 stars)</h4>
                {sortedQuestions.filter(q => getPriorityScore(q) >= 4).map(question => (
                  <div key={question.id} className="text-sm p-2 bg-green-50 rounded">
                    {question.question}
                  </div>
                ))}
              </div>
              <div className="space-y-2">
                <h4 className="font-medium text-yellow-600">Medium Priority (3-4 stars)</h4>
                {sortedQuestions.filter(q => getPriorityScore(q) >= 3 && getPriorityScore(q) < 4).map(question => (
                  <div key={question.id} className="text-sm p-2 bg-yellow-50 rounded">
                    {question.question}
                  </div>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Tips and Guidance */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <h3 className="font-semibold text-blue-900 mb-2">üí° Tips for Better HMW Questions</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ Start with "How might we..." to keep questions open-ended</li>
            <li>‚Ä¢ Focus on the user's need, not your solution</li>
            <li>‚Ä¢ Make questions specific enough to be actionable</li>
            <li>‚Ä¢ Use reframing techniques to explore different angles</li>
            <li>‚Ä¢ Prioritize questions that are desirable, feasible, and viable</li>
            <li>‚Ä¢ Generate many questions before evaluating them</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/define/POVStatementBuilder.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { 
  Save, 
  Download, 
  Target, 
  Users, 
  Lightbulb, 
  CheckCircle, 
  AlertTriangle,
  Eye,
  Quote
} from 'lucide-react';

export interface POVStatementData {
  id: string;
  user: string;
  need: string;
  insight: string;
  supportingEvidence: {
    empathyMapIds: string[];
    journeyMapIds: string[];
    interviewQuotes: string[];
  };
  validated: boolean;
  validationNotes: string;
  createdAt?: Date;
  updatedAt?: Date;
}

interface POVStatementBuilderProps {
  projectId: string;
  initialData?: POVStatementData;
  onSave: (data: POVStatementData) => void;
  onExport?: (data: POVStatementData) => void;
  empathyMaps?: Array<{ id: string; userPersona: string }>;
  journeyMaps?: Array<{ id: string; journeyName: string }>;
}

const povTemplate = {
  user: "The [specific user type]",
  need: "needs [verb-based need]",
  insight: "because [surprising insight from research]"
};

const validationRules = {
  user: {
    good: ["Specific persona", "Not generic", "Based on research"],
    bad: ["Generic terms like 'users'", "Too broad", "Not research-based"]
  },
  need: {
    good: ["Verb-based", "Emotional need", "Not a solution"],
    bad: ["Solution-focused", "Product features", "Technology-specific"]
  },
  insight: {
    good: ["Surprising", "Research-based", "Emotional", "Unexpected"],
    bad: ["Obvious", "Assumption-based", "Generic", "Not validated"]
  }
};

export function POVStatementBuilder({ 
  projectId, 
  initialData, 
  onSave, 
  onExport,
  empathyMaps = [],
  journeyMaps = []
}: POVStatementBuilderProps) {
  const [data, setData] = useState<POVStatementData>(
    initialData || {
      id: '',
      user: '',
      need: '',
      insight: '',
      supportingEvidence: {
        empathyMapIds: [],
        journeyMapIds: [],
        interviewQuotes: []
      },
      validated: false,
      validationNotes: ''
    }
  );

  const [isSaving, setIsSaving] = useState(false);
  const [validationResults, setValidationResults] = useState<{
    user: { score: number; issues: string[] };
    need: { score: number; issues: string[] };
    insight: { score: number; issues: string[] };
  }>({
    user: { score: 0, issues: [] },
    need: { score: 0, issues: [] },
    insight: { score: 0, issues: [] }
  });

  const [newQuote, setNewQuote] = useState('');

  useEffect(() => {
    if (initialData) {
      setData(initialData);
    }
  }, [initialData]);

  useEffect(() => {
    validatePOV();
  }, [data.user, data.need, data.insight]);

  const validatePOV = () => {
    const userValidation = validateField('user', data.user);
    const needValidation = validateField('need', data.need);
    const insightValidation = validateField('insight', data.insight);

    setValidationResults({
      user: userValidation,
      need: needValidation,
      insight: insightValidation
    });
  };

  const validateField = (field: 'user' | 'need' | 'insight', value: string) => {
    const rules = validationRules[field];
    const issues: string[] = [];
    let score = 100;

    // Check for bad patterns
    if (field === 'user') {
      if (value.toLowerCase().includes('user') || value.toLowerCase().includes('customer')) {
        issues.push('Too generic - be more specific');
        score -= 30;
      }
      if (value.length < 10) {
        issues.push('Too vague - add more detail');
        score -= 20;
      }
    }

    if (field === 'need') {
      if (value.toLowerCase().includes('app') || value.toLowerCase().includes('platform') || value.toLowerCase().includes('system')) {
        issues.push('Solution-focused - focus on the need, not the solution');
        score -= 40;
      }
      if (!value.includes(' ')) {
        issues.push('Too simple - expand on the need');
        score -= 20;
      }
    }

    if (field === 'insight') {
      if (value.length < 20) {
        issues.push('Too short - add more depth');
        score -= 30;
      }
      if (value.toLowerCase().includes('obvious') || value.toLowerCase().includes('clear')) {
        issues.push('Not surprising enough - find unexpected insights');
        score -= 25;
      }
    }

    return { score: Math.max(0, score), issues };
  };

  const addQuote = () => {
    if (newQuote.trim()) {
      setData(prev => ({
        ...prev,
        supportingEvidence: {
          ...prev.supportingEvidence,
          interviewQuotes: [...prev.supportingEvidence.interviewQuotes, newQuote.trim()]
        }
      }));
      setNewQuote('');
    }
  };

  const removeQuote = (index: number) => {
    setData(prev => ({
      ...prev,
      supportingEvidence: {
        ...prev.supportingEvidence,
        interviewQuotes: prev.supportingEvidence.interviewQuotes.filter((_, i) => i !== index)
      }
    }));
  };

  const toggleEmpathyMap = (mapId: string) => {
    setData(prev => ({
      ...prev,
      supportingEvidence: {
        ...prev.supportingEvidence,
        empathyMapIds: prev.supportingEvidence.empathyMapIds.includes(mapId)
          ? prev.supportingEvidence.empathyMapIds.filter(id => id !== mapId)
          : [...prev.supportingEvidence.empathyMapIds, mapId]
      }
    }));
  };

  const toggleJourneyMap = (mapId: string) => {
    setData(prev => ({
      ...prev,
      supportingEvidence: {
        ...prev.supportingEvidence,
        journeyMapIds: prev.supportingEvidence.journeyMapIds.includes(mapId)
          ? prev.supportingEvidence.journeyMapIds.filter(id => id !== mapId)
          : [...prev.supportingEvidence.journeyMapIds, mapId]
      }
    }));
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onSave(data);
    } catch (error) {
      console.error('Error saving POV statement:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleExport = () => {
    if (onExport) {
      onExport(data);
    }
  };

  const getOverallScore = () => {
    const scores = Object.values(validationResults);
    return Math.round(scores.reduce((sum, result) => sum + result.score, 0) / scores.length);
  };

  const getValidationColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getValidationIcon = (score: number) => {
    if (score >= 80) return CheckCircle;
    if (score >= 60) return AlertTriangle;
    return AlertTriangle;
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">POV Statement Builder</h2>
          <p className="text-gray-600 mt-1">
            Define your problem statement using the formula: [User] needs [Need] because [Insight]
          </p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={handleSave} 
            disabled={isSaving}
            className="flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            {isSaving ? 'Saving...' : 'Save'}
          </Button>
          {onExport && (
            <Button 
              variant="outline" 
              onClick={handleExport}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}
        </div>
      </div>

      {/* POV Template */}
      <Card className="bg-blue-50 border-blue-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-blue-900">
            <Target className="w-5 h-5" />
            POV Statement Template
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-lg font-medium text-blue-800">
            <span className="text-blue-600">[User]</span> needs <span className="text-blue-600">[Need]</span> because <span className="text-blue-600">[Insight]</span>
          </div>
          <p className="text-sm text-blue-700 mt-2">
            Fill in each part with specific, research-based information from your empathy work.
          </p>
        </CardContent>
      </Card>

      {/* POV Statement Builder */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* User */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="w-5 h-5" />
              User
            </CardTitle>
            <p className="text-sm text-gray-600">Who is your specific user?</p>
          </CardHeader>
          <CardContent className="space-y-4">
            <Textarea
              placeholder="Describe your specific user persona (e.g., 'Busy working parent who struggles with meal planning')"
              value={data.user}
              onChange={(e) => setData(prev => ({ ...prev, user: e.target.value }))}
              className="min-h-[100px]"
            />
            
            {/* Validation */}
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                {React.createElement(getValidationIcon(validationResults.user.score), {
                  className: `w-4 h-4 ${getValidationColor(validationResults.user.score)}`
                })}
                <span className={`text-sm font-medium ${getValidationColor(validationResults.user.score)}`}>
                  Score: {validationResults.user.score}/100
                </span>
              </div>
              
              {validationResults.user.issues.length > 0 && (
                <div className="text-sm text-red-600">
                  <p className="font-medium">Issues:</p>
                  <ul className="list-disc list-inside">
                    {validationResults.user.issues.map((issue, idx) => (
                      <li key={idx}>{issue}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Need */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="w-5 h-5" />
              Need
            </CardTitle>
            <p className="text-sm text-gray-600">What do they need to do?</p>
          </CardHeader>
          <CardContent className="space-y-4">
            <Textarea
              placeholder="Describe the user's need (e.g., 'to quickly plan healthy meals for their family')"
              value={data.need}
              onChange={(e) => setData(prev => ({ ...prev, need: e.target.value }))}
              className="min-h-[100px]"
            />
            
            {/* Validation */}
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                {React.createElement(getValidationIcon(validationResults.need.score), {
                  className: `w-4 h-4 ${getValidationColor(validationResults.need.score)}`
                })}
                <span className={`text-sm font-medium ${getValidationColor(validationResults.need.score)}`}>
                  Score: {validationResults.need.score}/100
                </span>
              </div>
              
              {validationResults.need.issues.length > 0 && (
                <div className="text-sm text-red-600">
                  <p className="font-medium">Issues:</p>
                  <ul className="list-disc list-inside">
                    {validationResults.need.issues.map((issue, idx) => (
                      <li key={idx}>{issue}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Insight */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Lightbulb className="w-5 h-5" />
              Insight
            </CardTitle>
            <p className="text-sm text-gray-600">What surprising insight did you discover?</p>
          </CardHeader>
          <CardContent className="space-y-4">
            <Textarea
              placeholder="Describe the surprising insight (e.g., 'they feel guilty about not providing healthy meals but lack time to research recipes')"
              value={data.insight}
              onChange={(e) => setData(prev => ({ ...prev, insight: e.target.value }))}
              className="min-h-[100px]"
            />
            
            {/* Validation */}
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                {React.createElement(getValidationIcon(validationResults.insight.score), {
                  className: `w-4 h-4 ${getValidationColor(validationResults.insight.score)}`
                })}
                <span className={`text-sm font-medium ${getValidationColor(validationResults.insight.score)}`}>
                  Score: {validationResults.insight.score}/100
                </span>
              </div>
              
              {validationResults.insight.issues.length > 0 && (
                <div className="text-sm text-red-600">
                  <p className="font-medium">Issues:</p>
                  <ul className="list-disc list-inside">
                    {validationResults.insight.issues.map((issue, idx) => (
                      <li key={idx}>{issue}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Complete POV Statement */}
      <Card className="bg-gray-50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Eye className="w-5 h-5" />
            Your POV Statement
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-lg font-medium text-gray-800 p-4 bg-white rounded border">
            {data.user || '[User]'} needs {data.need || '[Need]'} because {data.insight || '[Insight]'}
          </div>
          
          <div className="flex items-center gap-4 mt-4">
            <Badge variant="outline" className="flex items-center gap-1">
              <Target className="w-3 h-3" />
              Overall Score: {getOverallScore()}/100
            </Badge>
            <Badge variant="outline" className="flex items-center gap-1">
              <CheckCircle className="w-3 h-3" />
              {data.validated ? 'Validated' : 'Not Validated'}
            </Badge>
          </div>
        </CardContent>
      </Card>

      {/* Supporting Evidence */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Quote className="w-5 h-5" />
            Supporting Evidence
          </CardTitle>
          <p className="text-sm text-gray-600">Link to your research and add supporting quotes</p>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Empathy Maps */}
          {empathyMaps.length > 0 && (
            <div>
              <h4 className="font-medium mb-2">Empathy Maps</h4>
              <div className="space-y-2">
                {empathyMaps.map(map => (
                  <label key={map.id} className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={data.supportingEvidence.empathyMapIds.includes(map.id)}
                      onChange={() => toggleEmpathyMap(map.id)}
                      className="rounded"
                    />
                    <span className="text-sm">{map.userPersona}</span>
                  </label>
                ))}
              </div>
            </div>
          )}

          {/* Journey Maps */}
          {journeyMaps.length > 0 && (
            <div>
              <h4 className="font-medium mb-2">Journey Maps</h4>
              <div className="space-y-2">
                {journeyMaps.map(map => (
                  <label key={map.id} className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={data.supportingEvidence.journeyMapIds.includes(map.id)}
                      onChange={() => toggleJourneyMap(map.id)}
                      className="rounded"
                    />
                    <span className="text-sm">{map.journeyName}</span>
                  </label>
                ))}
              </div>
            </div>
          )}

          {/* Interview Quotes */}
          <div>
            <h4 className="font-medium mb-2">Interview Quotes</h4>
            <div className="space-y-2">
              {data.supportingEvidence.interviewQuotes.map((quote, idx) => (
                <div key={idx} className="flex items-start gap-2 p-2 bg-gray-50 rounded">
                  <Quote className="w-4 h-4 mt-1 text-gray-500" />
                  <span className="text-sm flex-1">{quote}</span>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => removeQuote(idx)}
                    className="h-6 w-6 p-0"
                  >
                    <X className="w-3 h-3" />
                  </Button>
                </div>
              ))}
              <div className="flex gap-2">
                <Textarea
                  placeholder="Add a supporting quote from user research..."
                  value={newQuote}
                  onChange={(e) => setNewQuote(e.target.value)}
                  className="flex-1"
                />
                <Button onClick={addQuote} disabled={!newQuote.trim()}>
                  Add Quote
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Tips and Guidance */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <h3 className="font-semibold text-blue-900 mb-2">üí° Tips for Better POV Statements</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ Be specific about your user - avoid generic terms like "users" or "customers"</li>
            <li>‚Ä¢ Focus on needs, not solutions - avoid mentioning apps, platforms, or technology</li>
            <li>‚Ä¢ Include surprising insights from your research - not obvious observations</li>
            <li>‚Ä¢ Base everything on real user research, not assumptions</li>
            <li>‚Ä¢ Make it emotional - include feelings and motivations</li>
            <li>‚Ä¢ Keep it concise but meaningful</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/test/TestSessionManager.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { 
  Save, 
  Download, 
  Plus,
  X,
  Play,
  Pause,
  Stop,
  Users,
  Clock,
  Target,
  CheckCircle,
  AlertTriangle,
  ThumbsUp,
  ThumbsDown,
  MessageSquare,
  FileText,
  BarChart,
  TrendingUp,
  TrendingDown,
  Eye,
  Calendar,
  Settings
} from 'lucide-react';

export interface TestParticipant {
  id: string;
  name: string;
  email?: string;
  demographics: string[];
  notes: string;
  status: 'pending' | 'completed' | 'no-show';
}

export interface TestTask {
  id: string;
  title: string;
  description: string;
  successCriteria: string[];
  timeLimit?: number; // minutes
  order: number;
}

export interface TestObservation {
  id: string;
  participantId: string;
  taskId: string;
  timestamp: number;
  type: 'success' | 'failure' | 'confusion' | 'feedback' | 'timeout';
  description: string;
  severity: 'low' | 'medium' | 'high';
  tags: string[];
}

export interface TestSession {
  id: string;
  projectId: string;
  prototypeId: string;
  title: string;
  description: string;
  participants: TestParticipant[];
  tasks: TestTask[];
  observations: TestObservation[];
  status: 'planning' | 'active' | 'completed';
  startDate?: Date;
  endDate?: Date;
  createdAt?: Date;
  updatedAt?: Date;
}

interface TestSessionManagerProps {
  projectId: string;
  prototypeId: string;
  initialData?: TestSession;
  onSave: (data: TestSession) => void;
  onExport?: (data: TestSession) => void;
}

const severityColors = {
  low: 'bg-green-100 text-green-800',
  medium: 'bg-yellow-100 text-yellow-800',
  high: 'bg-red-100 text-red-800'
};

const typeColors = {
  success: 'bg-green-100 text-green-800',
  failure: 'bg-red-100 text-red-800',
  confusion: 'bg-yellow-100 text-yellow-800',
  feedback: 'bg-blue-100 text-blue-800',
  timeout: 'bg-gray-100 text-gray-800'
};

const commonTags = [
  'Navigation', 'Content', 'Performance', 'Usability', 'Accessibility',
  'Mobile', 'Desktop', 'Error Handling', 'Onboarding', 'Checkout'
];

export function TestSessionManager({ 
  projectId, 
  prototypeId,
  initialData, 
  onSave, 
  onExport 
}: TestSessionManagerProps) {
  const [data, setData] = useState<TestSession>(
    initialData || {
      id: '',
      projectId,
      prototypeId,
      title: '',
      description: '',
      participants: [],
      tasks: [],
      observations: [],
      status: 'planning'
    }
  );

  const [isSaving, setIsSaving] = useState(false);
  const [newParticipant, setNewParticipant] = useState<Partial<TestParticipant>>({
    name: '',
    email: '',
    demographics: [],
    notes: '',
    status: 'pending'
  });
  const [newTask, setNewTask] = useState<Partial<TestTask>>({
    title: '',
    description: '',
    successCriteria: [],
    order: 0
  });
  const [newObservation, setNewObservation] = useState<Partial<TestObservation>>({
    participantId: '',
    taskId: '',
    type: 'feedback',
    description: '',
    severity: 'medium',
    tags: []
  });
  const [activeSession, setActiveSession] = useState(false);
  const [currentTaskIndex, setCurrentTaskIndex] = useState(0);

  useEffect(() => {
    if (initialData) {
      setData(initialData);
    }
  }, [initialData]);

  const updateData = (field: keyof TestSession, value: any) => {
    setData(prev => ({ ...prev, [field]: value }));
  };

  const addParticipant = () => {
    if (newParticipant.name?.trim()) {
      const participant: TestParticipant = {
        id: `participant-${Date.now()}`,
        name: newParticipant.name,
        email: newParticipant.email,
        demographics: newParticipant.demographics || [],
        notes: newParticipant.notes || '',
        status: 'pending'
      };
      
      setData(prev => ({
        ...prev,
        participants: [...prev.participants, participant]
      }));
      
      setNewParticipant({
        name: '',
        email: '',
        demographics: [],
        notes: '',
        status: 'pending'
      });
    }
  };

  const removeParticipant = (participantId: string) => {
    setData(prev => ({
      ...prev,
      participants: prev.participants.filter(p => p.id !== participantId),
      observations: prev.observations.filter(o => o.participantId !== participantId)
    }));
  };

  const addTask = () => {
    if (newTask.title?.trim()) {
      const task: TestTask = {
        id: `task-${Date.now()}`,
        title: newTask.title,
        description: newTask.description || '',
        successCriteria: newTask.successCriteria || [],
        timeLimit: newTask.timeLimit,
        order: data.tasks.length
      };
      
      setData(prev => ({
        ...prev,
        tasks: [...prev.tasks, task]
      }));
      
      setNewTask({
        title: '',
        description: '',
        successCriteria: [],
        order: 0
      });
    }
  };

  const removeTask = (taskId: string) => {
    setData(prev => ({
      ...prev,
      tasks: prev.tasks.filter(t => t.id !== taskId),
      observations: prev.observations.filter(o => o.taskId !== taskId)
    }));
  };

  const addObservation = () => {
    if (newObservation.description?.trim() && newObservation.participantId && newObservation.taskId) {
      const observation: TestObservation = {
        id: `observation-${Date.now()}`,
        participantId: newObservation.participantId,
        taskId: newObservation.taskId,
        timestamp: Date.now(),
        type: newObservation.type || 'feedback',
        description: newObservation.description,
        severity: newObservation.severity || 'medium',
        tags: newObservation.tags || []
      };
      
      setData(prev => ({
        ...prev,
        observations: [...prev.observations, observation]
      }));
      
      setNewObservation({
        participantId: '',
        taskId: '',
        type: 'feedback',
        description: '',
        severity: 'medium',
        tags: []
      });
    }
  };

  const removeObservation = (observationId: string) => {
    setData(prev => ({
      ...prev,
      observations: prev.observations.filter(o => o.id !== observationId)
    }));
  };

  const startSession = () => {
    setData(prev => ({ ...prev, status: 'active', startDate: new Date() }));
    setActiveSession(true);
    setCurrentTaskIndex(0);
  };

  const endSession = () => {
    setData(prev => ({ ...prev, status: 'completed', endDate: new Date() }));
    setActiveSession(false);
  };

  const getSessionStats = () => {
    const totalParticipants = data.participants.length;
    const completedParticipants = data.participants.filter(p => p.status === 'completed').length;
    const totalObservations = data.observations.length;
    const successObservations = data.observations.filter(o => o.type === 'success').length;
    const failureObservations = data.observations.filter(o => o.type === 'failure').length;
    
    return {
      totalParticipants,
      completedParticipants,
      totalObservations,
      successObservations,
      failureObservations,
      completionRate: totalParticipants > 0 ? (completedParticipants / totalParticipants) * 100 : 0,
      successRate: totalObservations > 0 ? (successObservations / totalObservations) * 100 : 0
    };
  };

  const getTaskObservations = (taskId: string) => {
    return data.observations.filter(o => o.taskId === taskId);
  };

  const getParticipantObservations = (participantId: string) => {
    return data.observations.filter(o => o.participantId === participantId);
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onSave(data);
    } catch (error) {
      console.error('Error saving test session:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleExport = () => {
    if (onExport) {
      onExport(data);
    }
  };

  const stats = getSessionStats();

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Test Session Manager</h2>
          <p className="text-gray-600 mt-1">Plan, conduct, and analyze usability tests</p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={handleSave} 
            disabled={isSaving}
            className="flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            {isSaving ? 'Saving...' : 'Save'}
          </Button>
          {onExport && (
            <Button 
              variant="outline" 
              onClick={handleExport}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}
        </div>
      </div>

      {/* Session Overview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="w-5 h-5" />
            Test Session Overview
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Session Title</label>
              <Input
                value={data.title}
                onChange={(e) => updateData('title', e.target.value)}
                placeholder="Enter session title..."
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Status</label>
              <div className="flex items-center gap-2">
                <Badge 
                  variant={data.status === 'completed' ? 'default' : data.status === 'active' ? 'secondary' : 'outline'}
                >
                  {data.status}
                </Badge>
                {data.status === 'planning' && (
                  <Button onClick={startSession} className="flex items-center gap-2">
                    <Play className="w-4 h-4" />
                    Start Session
                  </Button>
                )}
                {data.status === 'active' && (
                  <Button onClick={endSession} variant="outline" className="flex items-center gap-2">
                    <Stop className="w-4 h-4" />
                    End Session
                  </Button>
                )}
              </div>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Description</label>
            <Textarea
              value={data.description}
              onChange={(e) => updateData('description', e.target.value)}
              placeholder="Describe the test session..."
              rows={3}
            />
          </div>
        </CardContent>
      </Card>

      {/* Session Stats */}
      {data.status !== 'planning' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart className="w-5 h-5" />
              Session Statistics
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{stats.totalParticipants}</div>
                <div className="text-sm text-gray-600">Participants</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{stats.completedParticipants}</div>
                <div className="text-sm text-gray-600">Completed</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">{stats.totalObservations}</div>
                <div className="text-sm text-gray-600">Observations</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-orange-600">{Math.round(stats.successRate)}%</div>
                <div className="text-sm text-gray-600">Success Rate</div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Participants */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="w-5 h-5" />
            Participants ({data.participants.length})
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            {data.participants.map((participant) => (
              <div key={participant.id} className="flex items-center justify-between p-3 border rounded">
                <div className="flex items-center gap-3">
                  <div>
                    <div className="font-medium">{participant.name}</div>
                    {participant.email && (
                      <div className="text-sm text-gray-600">{participant.email}</div>
                    )}
                    {participant.demographics.length > 0 && (
                      <div className="flex gap-1 mt-1">
                        {participant.demographics.map((demo, index) => (
                          <Badge key={index} variant="outline" className="text-xs">
                            {demo}
                          </Badge>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Badge 
                    variant={participant.status === 'completed' ? 'default' : participant.status === 'no-show' ? 'destructive' : 'outline'}
                  >
                    {participant.status}
                  </Badge>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => removeParticipant(participant.id)}
                    className="h-8 w-8 p-0"
                  >
                    <X className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            ))}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            <Input
              placeholder="Participant name..."
              value={newParticipant.name || ''}
              onChange={(e) => setNewParticipant(prev => ({ ...prev, name: e.target.value }))}
            />
            <Input
              placeholder="Email (optional)..."
              value={newParticipant.email || ''}
              onChange={(e) => setNewParticipant(prev => ({ ...prev, email: e.target.value }))}
            />
          </div>
          <Button onClick={addParticipant} disabled={!newParticipant.name?.trim()}>
            <Plus className="w-4 h-4 mr-2" />
            Add Participant
          </Button>
        </CardContent>
      </Card>

      {/* Test Tasks */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="w-5 h-5" />
            Test Tasks ({data.tasks.length})
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            {data.tasks.map((task, index) => (
              <div key={task.id} className="p-3 border rounded">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <span className="font-medium">{index + 1}. {task.title}</span>
                    {task.timeLimit && (
                      <Badge variant="outline" className="text-xs">
                        <Clock className="w-3 h-3 mr-1" />
                        {task.timeLimit}m
                      </Badge>
                    )}
                  </div>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => removeTask(task.id)}
                    className="h-8 w-8 p-0"
                  >
                    <X className="w-4 h-4" />
                  </Button>
                </div>
                <div className="text-sm text-gray-600 mb-2">{task.description}</div>
                {task.successCriteria.length > 0 && (
                  <div className="text-xs">
                    <span className="font-medium">Success Criteria:</span>
                    <ul className="list-disc list-inside ml-2">
                      {task.successCriteria.map((criteria, i) => (
                        <li key={i}>{criteria}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            ))}
          </div>
          
          <div className="space-y-2">
            <Input
              placeholder="Task title..."
              value={newTask.title || ''}
              onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}
            />
            <Textarea
              placeholder="Task description..."
              value={newTask.description || ''}
              onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}
              rows={2}
            />
            <Input
              type="number"
              placeholder="Time limit (minutes, optional)..."
              value={newTask.timeLimit || ''}
              onChange={(e) => setNewTask(prev => ({ ...prev, timeLimit: parseInt(e.target.value) || undefined }))}
            />
          </div>
          <Button onClick={addTask} disabled={!newTask.title?.trim()}>
            <Plus className="w-4 h-4 mr-2" />
            Add Task
          </Button>
        </CardContent>
      </Card>

      {/* Observations */}
      {data.status === 'active' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Eye className="w-5 h-5" />
              Live Observations
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
              <select
                value={newObservation.participantId || ''}
                onChange={(e) => setNewObservation(prev => ({ ...prev, participantId: e.target.value }))}
                className="px-3 py-2 border rounded-md"
              >
                <option value="">Select participant...</option>
                {data.participants.map(p => (
                  <option key={p.id} value={p.id}>{p.name}</option>
                ))}
              </select>
              <select
                value={newObservation.taskId || ''}
                onChange={(e) => setNewObservation(prev => ({ ...prev, taskId: e.target.value }))}
                className="px-3 py-2 border rounded-md"
              >
                <option value="">Select task...</option>
                {data.tasks.map(t => (
                  <option key={t.id} value={t.id}>{t.title}</option>
                ))}
              </select>
              <select
                value={newObservation.type || 'feedback'}
                onChange={(e) => setNewObservation(prev => ({ ...prev, type: e.target.value as any }))}
                className="px-3 py-2 border rounded-md"
              >
                <option value="success">Success</option>
                <option value="failure">Failure</option>
                <option value="confusion">Confusion</option>
                <option value="feedback">Feedback</option>
                <option value="timeout">Timeout</option>
              </select>
            </div>
            
            <Textarea
              placeholder="Observation details..."
              value={newObservation.description || ''}
              onChange={(e) => setNewObservation(prev => ({ ...prev, description: e.target.value }))}
              rows={2}
            />
            
            <div className="flex gap-2">
              <select
                value={newObservation.severity || 'medium'}
                onChange={(e) => setNewObservation(prev => ({ ...prev, severity: e.target.value as any }))}
                className="px-3 py-2 border rounded-md"
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
              </select>
              <Button onClick={addObservation} disabled={!newObservation.description?.trim() || !newObservation.participantId || !newObservation.taskId}>
                <Plus className="w-4 h-4 mr-2" />
                Add Observation
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Observations List */}
      {data.observations.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <MessageSquare className="w-5 h-5" />
              All Observations ({data.observations.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {data.observations.map((observation) => {
                const participant = data.participants.find(p => p.id === observation.participantId);
                const task = data.tasks.find(t => t.id === observation.taskId);
                
                return (
                  <div key={observation.id} className="p-3 border rounded">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <Badge className={typeColors[observation.type]}>
                          {observation.type}
                        </Badge>
                        <Badge className={severityColors[observation.severity]}>
                          {observation.severity}
                        </Badge>
                        <span className="text-sm text-gray-600">
                          {participant?.name} ‚Ä¢ {task?.title}
                        </span>
                      </div>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => removeObservation(observation.id)}
                        className="h-6 w-6 p-0"
                      >
                        <X className="w-3 h-3" />
                      </Button>
                    </div>
                    <div className="text-sm">{observation.description}</div>
                    {observation.tags.length > 0 && (
                      <div className="flex gap-1 mt-2">
                        {observation.tags.map((tag, index) => (
                          <Badge key={index} variant="outline" className="text-xs">
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Tips and Guidance */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <h3 className="font-semibold text-blue-900 mb-2">üß™ Testing Tips</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ Test with 5-8 participants for rapid learning</li>
            <li>‚Ä¢ Focus on realistic scenarios and tasks</li>
            <li>‚Ä¢ Observe behavior, don't just ask opinions</li>
            <li>‚Ä¢ Document everything in real-time</li>
            <li>‚Ä¢ Look for patterns across participants</li>
            <li>‚Ä¢ Prioritize fixes based on severity and frequency</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/DTWorkflowDashboard.tsx ===

// ============================================================================
// DESIGN THINKING WORKFLOW DASHBOARD
// Unified dashboard for DT workflow management and insights
// ============================================================================

import React, { useState, useEffect } from 'react';
import { 
  Brain, Users, Lightbulb, Wrench, TestTube, 
  TrendingUp, Clock, CheckCircle, AlertCircle 
} from 'lucide-react';

interface DTWorkflow {
  id: string;
  name: string;
  description: string;
  currentPhase: string;
  status: string;
  createdAt: string;
}

interface WorkflowSummary {
  workflow: DTWorkflow;
  stats: {
    empathyDataCount: number;
    povStatementCount: number;
    hmwQuestionCount: number;
    ideaCount: number;
    prototypeCount: number;
    testSessionCount: number;
    insightCount: number;
  };
  recentActivity: {
    latestInsights: any[];
    topIdeas: any[];
    recentTests: any[];
  };
}

export function DTWorkflowDashboard({ workflowId }: { workflowId: string }) {
  const [summary, setSummary] = useState<WorkflowSummary | null>(null);
  const [loading, setLoading] = useState(true);

  const phases = [
    { key: 'empathize', label: 'Empathize', icon: Brain, color: 'text-purple-500' },
    { key: 'define', label: 'Define', icon: Users, color: 'text-blue-500' },
    { key: 'ideate', label: 'Ideate', icon: Lightbulb, color: 'text-yellow-500' },
    { key: 'prototype', label: 'Prototype', icon: Wrench, color: 'text-green-500' },
    { key: 'test', label: 'Test', icon: TestTube, color: 'text-red-500' }
  ];

  useEffect(() => {
    loadSummary();
  }, [workflowId]);

  const loadSummary = async () => {
    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}`);
      const result = await response.json();
      if (result.success) {
        setSummary(result.data);
      }
    } catch (error) {
      console.error('Error loading workflow summary:', error);
    } finally {
      setLoading(false);
    }
  };

  const transitionPhase = async (newPhase: string) => {
    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}/phase`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phase: newPhase })
      });
      
      const result = await response.json();
      if (result.success) {
        await loadSummary();
      }
    } catch (error) {
      console.error('Error transitioning phase:', error);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!summary) {
    return (
      <div className="text-center py-12 text-gray-500">
        <p>Workflow not found</p>
      </div>
    );
  }

  const currentPhaseIndex = phases.findIndex(p => p.key === summary.workflow.currentPhase);

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">{summary.workflow.name}</h1>
        <p className="text-gray-600">{summary.workflow.description}</p>
      </div>

      {/* Phase Progress */}
      <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
        <h2 className="text-xl font-semibold mb-4">Design Thinking Process</h2>
        
        <div className="flex items-center justify-between">
          {phases.map((phase, index) => {
            const PhaseIcon = phase.icon;
            const isActive = phase.key === summary.workflow.currentPhase;
            const isCompleted = index < currentPhaseIndex;
            
            return (
              <React.Fragment key={phase.key}>
                <button
                  onClick={() => transitionPhase(phase.key)}
                  className={`flex flex-col items-center gap-2 p-4 rounded-lg transition-all ${
                    isActive 
                      ? 'bg-blue-100 border-2 border-blue-500 scale-105' 
                      : isCompleted
                      ? 'bg-green-50 border border-green-300'
                      : 'bg-gray-50 border border-gray-200 hover:bg-gray-100'
                  }`}
                >
                  <div className={`p-3 rounded-full ${
                    isActive ? 'bg-blue-500 text-white' : 
                    isCompleted ? 'bg-green-500 text-white' : 
                    'bg-gray-200 text-gray-500'
                  }`}>
                    {isCompleted ? (
                      <CheckCircle className="w-6 h-6" />
                    ) : (
                      <PhaseIcon className="w-6 h-6" />
                    )}
                  </div>
                  <span className={`font-medium text-sm ${
                    isActive ? 'text-blue-700' : 
                    isCompleted ? 'text-green-700' : 
                    'text-gray-600'
                  }`}>
                    {phase.label}
                  </span>
                </button>
                
                {index < phases.length - 1 && (
                  <div className={`flex-1 h-0.5 ${
                    index < currentPhaseIndex ? 'bg-green-500' : 'bg-gray-300'
                  }`} />
                )}
              </React.Fragment>
            );
          })}
        </div>
      </div>

      {/* Statistics Grid */}
      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4 mb-6">
        <StatCard
          label="Empathy Data"
          value={summary.stats.empathyDataCount}
          icon={Brain}
          color="purple"
        />
        <StatCard
          label="POV Statements"
          value={summary.stats.povStatementCount}
          icon={Users}
          color="blue"
        />
        <StatCard
          label="HMW Questions"
          value={summary.stats.hmwQuestionCount}
          icon={Lightbulb}
          color="yellow"
        />
        <StatCard
          label="Ideas"
          value={summary.stats.ideaCount}
          icon={Lightbulb}
          color="green"
        />
        <StatCard
          label="Prototypes"
          value={summary.stats.prototypeCount}
          icon={Wrench}
          color="teal"
        />
        <StatCard
          label="Test Sessions"
          value={summary.stats.testSessionCount}
          icon={TestTube}
          color="red"
        />
        <StatCard
          label="AI Insights"
          value={summary.stats.insightCount}
          icon={TrendingUp}
          color="indigo"
        />
      </div>

      {/* Recent Activity */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Latest Insights */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <TrendingUp className="w-5 h-5 text-blue-500" />
            Latest AI Insights
          </h3>
          
          {summary.recentActivity.latestInsights.length === 0 ? (
            <p className="text-gray-500 text-sm">No insights yet</p>
          ) : (
            <div className="space-y-3">
              {summary.recentActivity.latestInsights.map((insight, index) => (
                <div key={index} className="border-l-4 border-blue-500 pl-3 py-2">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="text-xs bg-blue-100 text-blue-700 px-2 py-0.5 rounded">
                      {insight.phase}
                    </span>
                    <span className="text-xs text-gray-500">
                      Confidence: {(insight.confidenceScore * 100).toFixed(0)}%
                    </span>
                  </div>
                  <p className="text-sm font-medium">{insight.title}</p>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Top Ideas */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <Lightbulb className="w-5 h-5 text-yellow-500" />
            Top Ideas
          </h3>
          
          {summary.recentActivity.topIdeas.length === 0 ? (
            <p className="text-gray-500 text-sm">No ideas yet</p>
          ) : (
            <div className="space-y-3">
              {summary.recentActivity.topIdeas.map((idea, index) => (
                <div key={index} className="border rounded-lg p-3">
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium">{idea.title}</span>
                    {idea.overallScore && (
                      <span className="text-sm font-semibold text-blue-600">
                        {(idea.overallScore * 100).toFixed(0)}%
                      </span>
                    )}
                  </div>
                  <p className="text-sm text-gray-600 line-clamp-2">{idea.description}</p>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="mt-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6 border border-blue-200">
        <h3 className="font-semibold mb-4">üöÄ Quick Actions</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          <ActionButton
            label="Add Empathy Data"
            description="Capture user research"
            href={`/design-thinking/${workflowId}/empathy`}
          />
          <ActionButton
            label="Create POV Statement"
            description="Frame the problem"
            href={`/design-thinking/${workflowId}/pov`}
          />
          <ActionButton
            label="Generate Ideas"
            description="Brainstorm solutions"
            href={`/design-thinking/${workflowId}/ideate`}
          />
        </div>
      </div>
    </div>
  );
}

// ===========================
// SUB-COMPONENTS
// ===========================

function StatCard({ 
  label, 
  value, 
  icon: Icon, 
  color 
}: { 
  label: string; 
  value: number; 
  icon: any; 
  color: string;
}) {
  const colorClasses: Record<string, string> = {
    purple: 'bg-purple-100 text-purple-600',
    blue: 'bg-blue-100 text-blue-600',
    yellow: 'bg-yellow-100 text-yellow-600',
    green: 'bg-green-100 text-green-600',
    teal: 'bg-teal-100 text-teal-600',
    red: 'bg-red-100 text-red-600',
    indigo: 'bg-indigo-100 text-indigo-600'
  };

  return (
    <div className="bg-white rounded-lg shadow-sm p-4">
      <div className={`inline-flex p-2 rounded-lg mb-2 ${colorClasses[color]}`}>
        <Icon className="w-5 h-5" />
      </div>
      <div className="text-2xl font-bold">{value}</div>
      <div className="text-sm text-gray-600">{label}</div>
    </div>
  );
}

function ActionButton({ 
  label, 
  description, 
  href 
}: { 
  label: string; 
  description: string; 
  href: string;
}) {
  return (
    <a
      href={href}
      className="block bg-white rounded-lg p-4 hover:shadow-md transition-shadow border border-gray-200"
    >
      <h4 className="font-medium mb-1">{label}</h4>
      <p className="text-sm text-gray-600">{description}</p>
    </a>
  );
}


=== FILE: client/src/components/design-thinking/EmpathyMapBuilder.tsx ===

// ============================================================================
// EMPATHY MAP BUILDER COMPONENT
// Interactive 6-quadrant canvas for capturing user empathy data
// ============================================================================

import React, { useState } from 'react';
import { Plus, Save, Download, Trash2 } from 'lucide-react';

interface EmpathyMapData {
  id: string;
  workflowId: string;
  userPersona: string;
  thinkAndFeel: string[];
  sayAndDo: string[];
  see: string[];
  hear: string[];
  pains: string[];
  gains: string[];
}

interface StickyNote {
  id: string;
  content: string;
  quadrant: string;
}

export function EmpathyMapBuilder({ workflowId }: { workflowId: string }) {
  const [persona, setPersona] = useState('');
  const [empathyMap, setEmpathyMap] = useState<EmpathyMapData>({
    id: '',
    workflowId,
    userPersona: '',
    thinkAndFeel: [],
    sayAndDo: [],
    see: [],
    hear: [],
    pains: [],
    gains: []
  });
  const [activeQuadrant, setActiveQuadrant] = useState<string | null>(null);
  const [newNote, setNewNote] = useState('');

  const quadrants = [
    { key: 'thinkAndFeel', title: 'Think & Feel', color: 'bg-purple-100', icon: 'üß†' },
    { key: 'sayAndDo', title: 'Say & Do', color: 'bg-blue-100', icon: 'üí¨' },
    { key: 'see', title: 'See', color: 'bg-green-100', icon: 'üëÅÔ∏è' },
    { key: 'hear', title: 'Hear', color: 'bg-yellow-100', icon: 'üëÇ' },
    { key: 'pains', title: 'Pains', color: 'bg-red-100', icon: 'üò£' },
    { key: 'gains', title: 'Gains', color: 'bg-emerald-100', icon: '‚ú®' }
  ];

  const addNote = (quadrant: string) => {
    if (!newNote.trim()) return;

    setEmpathyMap(prev => ({
      ...prev,
      [quadrant]: [...prev[quadrant as keyof EmpathyMapData] as string[], newNote.trim()]
    }));
    setNewNote('');
    setActiveQuadrant(null);
  };

  const removeNote = (quadrant: string, index: number) => {
    setEmpathyMap(prev => ({
      ...prev,
      [quadrant]: (prev[quadrant as keyof EmpathyMapData] as string[]).filter((_, i) => i !== index)
    }));
  };

  const handleSave = async () => {
    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}/empathy-data`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          dataType: 'empathy_map',
          participantPersona: persona,
          insights: empathyMap.thinkAndFeel,
          painPoints: empathyMap.pains,
          needs: empathyMap.gains,
          behaviors: empathyMap.sayAndDo,
          emotions: empathyMap.thinkAndFeel,
          rawData: JSON.stringify(empathyMap)
        })
      });

      if (response.ok) {
        alert('Empathy map saved successfully!');
      }
    } catch (error) {
      console.error('Error saving empathy map:', error);
      alert('Failed to save empathy map');
    }
  };

  const handleExport = () => {
    const dataStr = JSON.stringify(empathyMap, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `empathy-map-${persona || 'unnamed'}.json`;
    link.click();
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">Empathy Map Builder</h1>
        <p className="text-gray-600">
          Capture what your users think, feel, say, do, see, and hear to build deep empathy
        </p>
      </div>

      {/* Persona Input */}
      <div className="mb-6 bg-white rounded-lg shadow-sm p-4">
        <label className="block text-sm font-medium mb-2">User Persona</label>
        <input
          type="text"
          value={persona}
          onChange={(e) => setPersona(e.target.value)}
          placeholder="e.g., Sarah, 35, busy working mom"
          className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
        />
      </div>

      {/* Empathy Map Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
        {quadrants.map(quadrant => (
          <div
            key={quadrant.key}
            className={`${quadrant.color} rounded-lg p-4 min-h-[300px] border-2 border-gray-200`}
          >
            <div className="flex items-center justify-between mb-3">
              <h3 className="font-semibold flex items-center gap-2">
                <span>{quadrant.icon}</span>
                {quadrant.title}
              </h3>
              <button
                onClick={() => setActiveQuadrant(quadrant.key)}
                className="p-1 hover:bg-white rounded-full transition-colors"
              >
                <Plus className="w-5 h-5" />
              </button>
            </div>

            {/* Sticky Notes */}
            <div className="space-y-2">
              {(empathyMap[quadrant.key as keyof EmpathyMapData] as string[]).map((note, index) => (
                <div
                  key={index}
                  className="bg-yellow-100 p-3 rounded shadow-sm hover:shadow-md transition-shadow group relative"
                >
                  <p className="text-sm">{note}</p>
                  <button
                    onClick={() => removeNote(quadrant.key, index)}
                    className="absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity"
                  >
                    <Trash2 className="w-4 h-4 text-red-500" />
                  </button>
                </div>
              ))}
            </div>

            {/* Add Note Input */}
            {activeQuadrant === quadrant.key && (
              <div className="mt-3">
                <textarea
                  value={newNote}
                  onChange={(e) => setNewNote(e.target.value)}
                  placeholder="Add a note..."
                  className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 text-sm"
                  rows={3}
                  autoFocus
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && e.ctrlKey) {
                      addNote(quadrant.key);
                    }
                  }}
                />
                <div className="flex gap-2 mt-2">
                  <button
                    onClick={() => addNote(quadrant.key)}
                    className="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600"
                  >
                    Add
                  </button>
                  <button
                    onClick={() => {
                      setActiveQuadrant(null);
                      setNewNote('');
                    }}
                    className="px-3 py-1 bg-gray-200 text-gray-700 rounded text-sm hover:bg-gray-300"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Actions */}
      <div className="flex gap-3">
        <button
          onClick={handleSave}
          className="flex items-center gap-2 px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
        >
          <Save className="w-5 h-5" />
          Save Empathy Map
        </button>
        <button
          onClick={handleExport}
          className="flex items-center gap-2 px-6 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors"
        >
          <Download className="w-5 h-5" />
          Export
        </button>
      </div>

      {/* Tips */}
      <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-semibold mb-2">üí° Tips for Effective Empathy Mapping</h4>
        <ul className="text-sm space-y-1 text-gray-700">
          <li>‚Ä¢ Use direct quotes from user interviews in "Say & Do"</li>
          <li>‚Ä¢ Capture emotions and internal thoughts in "Think & Feel"</li>
          <li>‚Ä¢ Include environmental context in "See" and "Hear"</li>
          <li>‚Ä¢ Focus on specific, observable details</li>
          <li>‚Ä¢ Look for contradictions between what users say and do</li>
        </ul>
      </div>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/prototype/StoryboardBuilder.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { 
  Save, 
  Download, 
  Plus,
  X,
  ArrowRight,
  ArrowLeft,
  Image,
  Video,
  FileText,
  Edit,
  Trash2,
  Copy,
  Move,
  Eye,
  EyeOff,
  Play,
  Pause,
  RotateCcw,
  Settings
} from 'lucide-react';

export interface StoryboardFrame {
  id: string;
  title: string;
  description: string;
  image?: string;
  video?: string;
  notes: string;
  emotions: string[];
  actions: string[];
  thoughts: string[];
  painPoints: string[];
  opportunities: string[];
  duration: number; // seconds
  order: number;
}

export interface StoryboardData {
  id: string;
  projectId: string;
  title: string;
  description: string;
  frames: StoryboardFrame[];
  persona: string;
  scenario: string;
  goals: string[];
  createdAt?: Date;
  updatedAt?: Date;
}

interface StoryboardBuilderProps {
  projectId: string;
  initialData?: StoryboardData;
  onSave: (data: StoryboardData) => void;
  onExport?: (data: StoryboardData) => void;
}

const emotionOptions = [
  'Excited', 'Confused', 'Frustrated', 'Satisfied', 'Anxious', 
  'Relieved', 'Curious', 'Overwhelmed', 'Confident', 'Disappointed'
];

const actionTemplates = [
  'User opens the app',
  'User searches for information',
  'User encounters an error',
  'User completes a task',
  'User shares content',
  'User navigates to a new section',
  'User provides feedback',
  'User abandons the process'
];

const thoughtTemplates = [
  'This looks interesting',
  'I\'m not sure what to do next',
  'This is taking too long',
  'I like this feature',
  'I wish I could...',
  'This is confusing',
  'I need help',
  'This is exactly what I needed'
];

const painPointTemplates = [
  'Too many steps',
  'Unclear instructions',
  'Slow loading',
  'Hard to find information',
  'Confusing interface',
  'Missing features',
  'Technical errors',
  'Poor mobile experience'
];

const opportunityTemplates = [
  'Simplify the process',
  'Add clear guidance',
  'Improve performance',
  'Better organization',
  'Intuitive design',
  'New functionality',
  'Error prevention',
  'Mobile optimization'
];

export function StoryboardBuilder({ 
  projectId, 
  initialData, 
  onSave, 
  onExport 
}: StoryboardBuilderProps) {
  const [data, setData] = useState<StoryboardData>(
    initialData || {
      id: '',
      projectId,
      title: '',
      description: '',
      frames: [],
      persona: '',
      scenario: '',
      goals: []
    }
  );

  const [isSaving, setIsSaving] = useState(false);
  const [selectedFrame, setSelectedFrame] = useState<string | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentFrameIndex, setCurrentFrameIndex] = useState(0);

  useEffect(() => {
    if (initialData) {
      setData(initialData);
    }
  }, [initialData]);

  const updateData = (field: keyof StoryboardData, value: any) => {
    setData(prev => ({ ...prev, [field]: value }));
  };

  const addFrame = () => {
    const newFrame: StoryboardFrame = {
      id: `frame-${Date.now()}`,
      title: `Frame ${data.frames.length + 1}`,
      description: '',
      notes: '',
      emotions: [],
      actions: [],
      thoughts: [],
      painPoints: [],
      opportunities: [],
      duration: 5,
      order: data.frames.length
    };
    
    setData(prev => ({
      ...prev,
      frames: [...prev.frames, newFrame]
    }));
    setSelectedFrame(newFrame.id);
  };

  const updateFrame = (frameId: string, field: keyof StoryboardFrame, value: any) => {
    setData(prev => ({
      ...prev,
      frames: prev.frames.map(frame => 
        frame.id === frameId ? { ...frame, [field]: value } : frame
      )
    }));
  };

  const removeFrame = (frameId: string) => {
    setData(prev => ({
      ...prev,
      frames: prev.frames.filter(frame => frame.id !== frameId)
    }));
    if (selectedFrame === frameId) {
      setSelectedFrame(null);
    }
  };

  const duplicateFrame = (frameId: string) => {
    const frame = data.frames.find(f => f.id === frameId);
    if (frame) {
      const newFrame: StoryboardFrame = {
        ...frame,
        id: `frame-${Date.now()}`,
        title: `${frame.title} (Copy)`,
        order: frame.order + 1
      };
      
      setData(prev => ({
        ...prev,
        frames: [...prev.frames, newFrame].sort((a, b) => a.order - b.order)
      }));
    }
  };

  const moveFrame = (frameId: string, direction: 'up' | 'down') => {
    setData(prev => {
      const frames = [...prev.frames];
      const index = frames.findIndex(f => f.id === frameId);
      
      if (index === -1) return prev;
      
      const newIndex = direction === 'up' ? index - 1 : index + 1;
      if (newIndex < 0 || newIndex >= frames.length) return prev;
      
      [frames[index], frames[newIndex]] = [frames[newIndex], frames[index]];
      frames[index].order = index;
      frames[newIndex].order = newIndex;
      
      return { ...prev, frames };
    });
  };

  const addToArray = (frameId: string, field: keyof StoryboardFrame, value: string) => {
    if (value.trim()) {
      updateFrame(frameId, field, [...(data.frames.find(f => f.id === frameId)?.[field] as string[] || []), value.trim()]);
    }
  };

  const removeFromArray = (frameId: string, field: keyof StoryboardFrame, index: number) => {
    const frame = data.frames.find(f => f.id === frameId);
    if (frame) {
      const array = frame[field] as string[];
      updateFrame(frameId, field, array.filter((_, i) => i !== index));
    }
  };

  const selectedFrameData = data.frames.find(f => f.id === selectedFrame);

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onSave(data);
    } catch (error) {
      console.error('Error saving storyboard:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleExport = () => {
    if (onExport) {
      onExport(data);
    }
  };

  const playStoryboard = () => {
    setIsPlaying(true);
    setCurrentFrameIndex(0);
    
    const playNextFrame = (index: number) => {
      if (index < data.frames.length) {
        setCurrentFrameIndex(index);
        const frame = data.frames[index];
        setTimeout(() => playNextFrame(index + 1), frame.duration * 1000);
      } else {
        setIsPlaying(false);
      }
    };
    
    playNextFrame(0);
  };

  const stopStoryboard = () => {
    setIsPlaying(false);
    setCurrentFrameIndex(0);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Storyboard Builder</h2>
          <p className="text-gray-600 mt-1">Create visual stories of user experiences</p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={handleSave} 
            disabled={isSaving}
            className="flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            {isSaving ? 'Saving...' : 'Save'}
          </Button>
          {onExport && (
            <Button 
              variant="outline" 
              onClick={handleExport}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}
        </div>
      </div>

      {/* Storyboard Overview */}
      <Card>
        <CardHeader>
          <CardTitle>Storyboard Overview</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Title</label>
              <Input
                value={data.title}
                onChange={(e) => updateData('title', e.target.value)}
                placeholder="Enter storyboard title..."
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Persona</label>
              <Input
                value={data.persona}
                onChange={(e) => updateData('persona', e.target.value)}
                placeholder="Who is the user?"
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Description</label>
            <Textarea
              value={data.description}
              onChange={(e) => updateData('description', e.target.value)}
              placeholder="Describe the user journey..."
              rows={3}
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Scenario</label>
            <Textarea
              value={data.scenario}
              onChange={(e) => updateData('scenario', e.target.value)}
              placeholder="What situation is the user in?"
              rows={2}
            />
          </div>
        </CardContent>
      </Card>

      {/* Frames List */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Frames ({data.frames.length})</CardTitle>
            <div className="flex gap-2">
              {data.frames.length > 0 && (
                <>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={isPlaying ? stopStoryboard : playStoryboard}
                    className="flex items-center gap-2"
                  >
                    {isPlaying ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                    {isPlaying ? 'Stop' : 'Play'}
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setData(prev => ({ ...prev, frames: [] }))}
                    className="flex items-center gap-2"
                  >
                    <RotateCcw className="w-4 h-4" />
                    Clear All
                  </Button>
                </>
              )}
              <Button onClick={addFrame} className="flex items-center gap-2">
                <Plus className="w-4 h-4" />
                Add Frame
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {data.frames.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <Image className="w-12 h-12 mx-auto mb-4 opacity-50" />
              <p>No frames yet. Click "Add Frame" to get started.</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {data.frames.map((frame, index) => (
                <div
                  key={frame.id}
                  className={`border rounded-lg p-4 cursor-pointer transition-all ${
                    selectedFrame === frame.id 
                      ? 'border-blue-500 bg-blue-50' 
                      : 'border-gray-200 hover:border-gray-300'
                  } ${isPlaying && currentFrameIndex === index ? 'ring-2 ring-green-500' : ''}`}
                  onClick={() => setSelectedFrame(frame.id)}
                >
                  <div className="flex items-center justify-between mb-2">
                    <h3 className="font-medium">{frame.title}</h3>
                    <div className="flex gap-1">
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={(e) => {
                          e.stopPropagation();
                          moveFrame(frame.id, 'up');
                        }}
                        disabled={index === 0}
                        className="h-6 w-6 p-0"
                      >
                        <ArrowLeft className="w-3 h-3" />
                      </Button>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={(e) => {
                          e.stopPropagation();
                          moveFrame(frame.id, 'down');
                        }}
                        disabled={index === data.frames.length - 1}
                        className="h-6 w-6 p-0"
                      >
                        <ArrowRight className="w-3 h-3" />
                      </Button>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="text-sm text-gray-600">
                      {frame.description || 'No description'}
                    </div>
                    
                    <div className="flex flex-wrap gap-1">
                      {frame.emotions.slice(0, 2).map((emotion, i) => (
                        <Badge key={i} variant="secondary" className="text-xs">
                          {emotion}
                        </Badge>
                      ))}
                      {frame.emotions.length > 2 && (
                        <Badge variant="outline" className="text-xs">
                          +{frame.emotions.length - 2}
                        </Badge>
                      )}
                    </div>
                    
                    <div className="flex items-center justify-between text-xs text-gray-500">
                      <span>{frame.duration}s</span>
                      <div className="flex gap-1">
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={(e) => {
                            e.stopPropagation();
                            duplicateFrame(frame.id);
                          }}
                          className="h-6 w-6 p-0"
                        >
                          <Copy className="w-3 h-3" />
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={(e) => {
                            e.stopPropagation();
                            removeFrame(frame.id);
                          }}
                          className="h-6 w-6 p-0 text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="w-3 h-3" />
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Frame Editor */}
      {selectedFrameData && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Edit className="w-5 h-5" />
              Edit Frame: {selectedFrameData.title}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Basic Info */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">Title</label>
                <Input
                  value={selectedFrameData.title}
                  onChange={(e) => updateFrame(selectedFrameData.id, 'title', e.target.value)}
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Duration (seconds)</label>
                <Input
                  type="number"
                  value={selectedFrameData.duration}
                  onChange={(e) => updateFrame(selectedFrameData.id, 'duration', parseInt(e.target.value) || 0)}
                  min="1"
                  max="60"
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-2">Description</label>
              <Textarea
                value={selectedFrameData.description}
                onChange={(e) => updateFrame(selectedFrameData.id, 'description', e.target.value)}
                placeholder="What happens in this frame?"
                rows={3}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-2">Notes</label>
              <Textarea
                value={selectedFrameData.notes}
                onChange={(e) => updateFrame(selectedFrameData.id, 'notes', e.target.value)}
                placeholder="Additional notes or observations..."
                rows={2}
              />
            </div>

            {/* Emotions */}
            <div>
              <label className="block text-sm font-medium mb-2">Emotions</label>
              <div className="space-y-2">
                {selectedFrameData.emotions.map((emotion, index) => (
                  <div key={index} className="flex items-center justify-between p-2 bg-yellow-50 rounded">
                    <span className="text-sm">{emotion}</span>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => removeFromArray(selectedFrameData.id, 'emotions', index)}
                      className="h-6 w-6 p-0"
                    >
                      <X className="w-3 h-3" />
                    </Button>
                  </div>
                ))}
                <div className="flex gap-2">
                  <select
                    onChange={(e) => {
                      if (e.target.value) {
                        addToArray(selectedFrameData.id, 'emotions', e.target.value);
                        e.target.value = '';
                      }
                    }}
                    className="flex-1 px-3 py-2 border rounded-md"
                  >
                    <option value="">Select emotion...</option>
                    {emotionOptions.map(emotion => (
                      <option key={emotion} value={emotion}>{emotion}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>

            {/* Actions */}
            <div>
              <label className="block text-sm font-medium mb-2">Actions</label>
              <div className="space-y-2">
                {selectedFrameData.actions.map((action, index) => (
                  <div key={index} className="flex items-center justify-between p-2 bg-blue-50 rounded">
                    <span className="text-sm">{action}</span>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => removeFromArray(selectedFrameData.id, 'actions', index)}
                      className="h-6 w-6 p-0"
                    >
                      <X className="w-3 h-3" />
                    </Button>
                  </div>
                ))}
                <div className="flex gap-2">
                  <select
                    onChange={(e) => {
                      if (e.target.value) {
                        addToArray(selectedFrameData.id, 'actions', e.target.value);
                        e.target.value = '';
                      }
                    }}
                    className="flex-1 px-3 py-2 border rounded-md"
                  >
                    <option value="">Select action...</option>
                    {actionTemplates.map(action => (
                      <option key={action} value={action}>{action}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>

            {/* Thoughts */}
            <div>
              <label className="block text-sm font-medium mb-2">Thoughts</label>
              <div className="space-y-2">
                {selectedFrameData.thoughts.map((thought, index) => (
                  <div key={index} className="flex items-center justify-between p-2 bg-green-50 rounded">
                    <span className="text-sm">{thought}</span>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => removeFromArray(selectedFrameData.id, 'thoughts', index)}
                      className="h-6 w-6 p-0"
                    >
                      <X className="w-3 h-3" />
                    </Button>
                  </div>
                ))}
                <div className="flex gap-2">
                  <select
                    onChange={(e) => {
                      if (e.target.value) {
                        addToArray(selectedFrameData.id, 'thoughts', e.target.value);
                        e.target.value = '';
                      }
                    }}
                    className="flex-1 px-3 py-2 border rounded-md"
                  >
                    <option value="">Select thought...</option>
                    {thoughtTemplates.map(thought => (
                      <option key={thought} value={thought}>{thought}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>

            {/* Pain Points */}
            <div>
              <label className="block text-sm font-medium mb-2">Pain Points</label>
              <div className="space-y-2">
                {selectedFrameData.painPoints.map((painPoint, index) => (
                  <div key={index} className="flex items-center justify-between p-2 bg-red-50 rounded">
                    <span className="text-sm">{painPoint}</span>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => removeFromArray(selectedFrameData.id, 'painPoints', index)}
                      className="h-6 w-6 p-0"
                    >
                      <X className="w-3 h-3" />
                    </Button>
                  </div>
                ))}
                <div className="flex gap-2">
                  <select
                    onChange={(e) => {
                      if (e.target.value) {
                        addToArray(selectedFrameData.id, 'painPoints', e.target.value);
                        e.target.value = '';
                      }
                    }}
                    className="flex-1 px-3 py-2 border rounded-md"
                  >
                    <option value="">Select pain point...</option>
                    {painPointTemplates.map(painPoint => (
                      <option key={painPoint} value={painPoint}>{painPoint}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>

            {/* Opportunities */}
            <div>
              <label className="block text-sm font-medium mb-2">Opportunities</label>
              <div className="space-y-2">
                {selectedFrameData.opportunities.map((opportunity, index) => (
                  <div key={index} className="flex items-center justify-between p-2 bg-purple-50 rounded">
                    <span className="text-sm">{opportunity}</span>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => removeFromArray(selectedFrameData.id, 'opportunities', index)}
                      className="h-6 w-6 p-0"
                    >
                      <X className="w-3 h-3" />
                    </Button>
                  </div>
                ))}
                <div className="flex gap-2">
                  <select
                    onChange={(e) => {
                      if (e.target.value) {
                        addToArray(selectedFrameData.id, 'opportunities', e.target.value);
                        e.target.value = '';
                      }
                    }}
                    className="flex-1 px-3 py-2 border rounded-md"
                  >
                    <option value="">Select opportunity...</option>
                    {opportunityTemplates.map(opportunity => (
                      <option key={opportunity} value={opportunity}>{opportunity}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Tips and Guidance */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <h3 className="font-semibold text-blue-900 mb-2">üé¨ Storyboarding Tips</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ Start with the user's current state and end with their desired outcome</li>
            <li>‚Ä¢ Include emotional highs and lows to show the full experience</li>
            <li>‚Ä¢ Focus on key moments that matter most to the user</li>
            <li>‚Ä¢ Use realistic scenarios and personas</li>
            <li>‚Ä¢ Keep frames simple and focused on one key interaction</li>
            <li>‚Ä¢ Test your storyboard with real users for feedback</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/prototype/PrototypePlanner.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { 
  Save, 
  Download, 
  Target, 
  Clock, 
  Zap,
  CheckCircle,
  AlertTriangle,
  Lightbulb,
  Settings,
  FileText,
  Image,
  Video,
  Link,
  Code
} from 'lucide-react';

export interface PrototypeAsset {
  type: 'image' | 'video' | 'pdf' | 'figma-link' | 'code';
  url: string;
  description: string;
}

export interface TestPlan {
  objectives: string[];
  methods: string[];
  participants: number;
  scenarios: string[];
  successCriteria: string[];
}

export interface PrototypeData {
  id: string;
  ideaId: string;
  learningGoals: string[];
  successMetrics: string[];
  fidelity: 'lo-fi' | 'mid-fi' | 'hi-fi' | 'experience';
  method: 'sketch' | 'paper' | 'wireframe' | 'storyboard' | 'wizard-of-oz' | 'role-play' | 'functional';
  effortEstimate: number; // hours
  realismLevel: number; // 1-10
  disposability: number; // 1-10
  assets: PrototypeAsset[];
  testPlan: TestPlan;
  testResults: any[];
  createdAt?: Date;
  updatedAt?: Date;
}

interface PrototypePlannerProps {
  projectId: string;
  ideaId: string;
  ideaDescription: string;
  initialData?: PrototypeData;
  onSave: (data: PrototypeData) => void;
  onExport?: (data: PrototypeData) => void;
}

const fidelityOptions = {
  'lo-fi': {
    name: 'Low Fidelity',
    description: 'Quick sketches, paper prototypes',
    methods: ['sketch', 'paper', 'wireframe'],
    effort: '1-4 hours',
    realism: '2-4',
    disposability: '8-10'
  },
  'mid-fi': {
    name: 'Medium Fidelity',
    description: 'Digital wireframes, clickable prototypes',
    methods: ['wireframe', 'storyboard'],
    effort: '4-12 hours',
    realism: '5-7',
    disposability: '5-7'
  },
  'hi-fi': {
    name: 'High Fidelity',
    description: 'Detailed, polished prototypes',
    methods: ['functional', 'wizard-of-oz'],
    effort: '12-40 hours',
    realism: '8-10',
    disposability: '2-4'
  },
  'experience': {
    name: 'Experience Prototype',
    description: 'Full service or experience simulation',
    methods: ['role-play', 'wizard-of-oz', 'functional'],
    effort: '20-80 hours',
    realism: '9-10',
    disposability: '1-3'
  }
};

const methodOptions = {
  'sketch': { name: 'Sketch', icon: FileText, description: 'Hand-drawn concepts' },
  'paper': { name: 'Paper Prototype', icon: FileText, description: 'Physical paper mockups' },
  'wireframe': { name: 'Wireframe', icon: Settings, description: 'Digital wireframes' },
  'storyboard': { name: 'Storyboard', icon: Image, description: 'Visual story sequence' },
  'wizard-of-oz': { name: 'Wizard of Oz', icon: Zap, description: 'Human-powered simulation' },
  'role-play': { name: 'Role Play', icon: Target, description: 'Act out the experience' },
  'functional': { name: 'Functional', icon: Code, description: 'Working prototype' }
};

const learningGoalTemplates = [
  'Validate user understanding of the concept',
  'Test usability of the interface',
  'Measure desirability of the solution',
  'Assess technical feasibility',
  'Evaluate business model viability',
  'Understand user emotional response',
  'Test specific user flows',
  'Validate pricing assumptions',
  'Test accessibility features',
  'Measure performance metrics'
];

export function PrototypePlanner({ 
  projectId, 
  ideaId,
  ideaDescription,
  initialData, 
  onSave, 
  onExport 
}: PrototypePlannerProps) {
  const [data, setData] = useState<PrototypeData>(
    initialData || {
      id: '',
      ideaId,
      learningGoals: [],
      successMetrics: [],
      fidelity: 'lo-fi',
      method: 'sketch',
      effortEstimate: 2,
      realismLevel: 5,
      disposability: 8,
      assets: [],
      testPlan: {
        objectives: [],
        methods: [],
        participants: 5,
        scenarios: [],
        successCriteria: []
      },
      testResults: []
    }
  );

  const [isSaving, setIsSaving] = useState(false);
  const [newLearningGoal, setNewLearningGoal] = useState('');
  const [newSuccessMetric, setNewSuccessMetric] = useState('');
  const [newAsset, setNewAsset] = useState<Partial<PrototypeAsset>>({
    type: 'image',
    url: '',
    description: ''
  });

  useEffect(() => {
    if (initialData) {
      setData(initialData);
    }
  }, [initialData]);

  const updateData = (field: keyof PrototypeData, value: any) => {
    setData(prev => ({ ...prev, [field]: value }));
  };

  const addLearningGoal = () => {
    if (newLearningGoal.trim()) {
      setData(prev => ({
        ...prev,
        learningGoals: [...prev.learningGoals, newLearningGoal.trim()]
      }));
      setNewLearningGoal('');
    }
  };

  const removeLearningGoal = (index: number) => {
    setData(prev => ({
      ...prev,
      learningGoals: prev.learningGoals.filter((_, i) => i !== index)
    }));
  };

  const addSuccessMetric = () => {
    if (newSuccessMetric.trim()) {
      setData(prev => ({
        ...prev,
        successMetrics: [...prev.successMetrics, newSuccessMetric.trim()]
      }));
      setNewSuccessMetric('');
    }
  };

  const removeSuccessMetric = (index: number) => {
    setData(prev => ({
      ...prev,
      successMetrics: prev.successMetrics.filter((_, i) => i !== index)
    }));
  };

  const addAsset = () => {
    if (newAsset.url?.trim() && newAsset.description?.trim()) {
      setData(prev => ({
        ...prev,
        assets: [...prev.assets, newAsset as PrototypeAsset]
      }));
      setNewAsset({ type: 'image', url: '', description: '' });
    }
  };

  const removeAsset = (index: number) => {
    setData(prev => ({
      ...prev,
      assets: prev.assets.filter((_, i) => i !== index)
    }));
  };

  const updateTestPlan = (field: keyof TestPlan, value: any) => {
    setData(prev => ({
      ...prev,
      testPlan: { ...prev.testPlan, [field]: value }
    }));
  };

  const getFidelityInfo = () => fidelityOptions[data.fidelity];
  const getMethodInfo = () => methodOptions[data.method];

  const getGoldilocksScore = () => {
    const effortScore = data.effortEstimate <= 8 ? 10 : data.effortEstimate <= 20 ? 7 : 3;
    const realismScore = data.realismLevel >= 6 ? 10 : data.realismLevel >= 4 ? 7 : 3;
    const disposabilityScore = data.disposability >= 6 ? 10 : data.disposability >= 4 ? 7 : 3;
    
    return Math.round((effortScore + realismScore + disposabilityScore) / 3);
  };

  const getGoldilocksColor = (score: number) => {
    if (score >= 8) return 'text-green-600';
    if (score >= 6) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getGoldilocksIcon = (score: number) => {
    if (score >= 8) return CheckCircle;
    if (score >= 6) return AlertTriangle;
    return AlertTriangle;
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onSave(data);
    } catch (error) {
      console.error('Error saving prototype:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleExport = () => {
    if (onExport) {
      onExport(data);
    }
  };

  const GoldilocksIcon = getGoldilocksIcon(getGoldilocksScore());

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Prototype Planner</h2>
          <p className="text-gray-600 mt-1">
            Plan your prototype for: {ideaDescription}
          </p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={handleSave} 
            disabled={isSaving}
            className="flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            {isSaving ? 'Saving...' : 'Save'}
          </Button>
          {onExport && (
            <Button 
              variant="outline" 
              onClick={handleExport}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}
        </div>
      </div>

      {/* Learning Goals */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="w-5 h-5" />
            Learning Goals
          </CardTitle>
          <p className="text-sm text-gray-600">What do you need to learn from this prototype?</p>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            {data.learningGoals.map((goal, index) => (
              <div key={index} className="flex items-center justify-between p-2 bg-blue-50 rounded">
                <span className="text-sm">{goal}</span>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => removeLearningGoal(index)}
                  className="h-6 w-6 p-0"
                >
                  <X className="w-3 h-3" />
                </Button>
              </div>
            ))}
          </div>
          
          <div className="flex gap-2">
            <Input
              placeholder="Add learning goal..."
              value={newLearningGoal}
              onChange={(e) => setNewLearningGoal(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && addLearningGoal()}
              className="flex-1"
            />
            <Button onClick={addLearningGoal} disabled={!newLearningGoal.trim()}>
              <Plus className="w-4 h-4" />
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            {learningGoalTemplates.slice(0, 6).map((template, index) => (
              <Button
                key={index}
                variant="outline"
                size="sm"
                onClick={() => setNewLearningGoal(template)}
                className="text-left justify-start"
              >
                {template}
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Fidelity Decision Tree */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="w-5 h-5" />
            Fidelity & Method Selection
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Fidelity Level</label>
              <select
                value={data.fidelity}
                onChange={(e) => updateData('fidelity', e.target.value)}
                className="w-full px-3 py-2 border rounded-md"
              >
                {Object.entries(fidelityOptions).map(([key, option]) => (
                  <option key={key} value={key}>{option.name}</option>
                ))}
              </select>
              <p className="text-sm text-gray-600 mt-1">
                {getFidelityInfo().description}
              </p>
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Prototyping Method</label>
              <select
                value={data.method}
                onChange={(e) => updateData('method', e.target.value)}
                className="w-full px-3 py-2 border rounded-md"
              >
                {Object.entries(methodOptions).map(([key, option]) => (
                  <option key={key} value={key}>{option.name}</option>
                ))}
              </select>
              <p className="text-sm text-gray-600 mt-1">
                {getMethodInfo().description}
              </p>
            </div>
          </div>

          {/* Goldilocks Quality Check */}
          <div className="bg-yellow-50 p-4 rounded">
            <div className="flex items-center gap-2 mb-2">
              <GoldilocksIcon className={`w-4 h-4 ${getGoldilocksColor(getGoldilocksScore())}`} />
              <span className={`font-medium ${getGoldilocksColor(getGoldilocksScore())}`}>
                Goldilocks Quality Score: {getGoldilocksScore()}/10
              </span>
            </div>
            <p className="text-sm text-yellow-800">
              {getGoldilocksScore() >= 8 
                ? "Perfect! Your prototype is well-balanced for learning."
                : getGoldilocksScore() >= 6 
                ? "Good, but consider adjusting effort, realism, or disposability."
                : "Consider a different fidelity level or method for better learning."
              }
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Effort & Quality Settings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Clock className="w-5 h-5" />
            Effort & Quality Settings
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Effort Estimate (hours)</label>
              <Input
                type="number"
                value={data.effortEstimate}
                onChange={(e) => updateData('effortEstimate', parseInt(e.target.value) || 0)}
                min="1"
                max="100"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Realism Level (1-10)</label>
              <Input
                type="number"
                value={data.realismLevel}
                onChange={(e) => updateData('realismLevel', parseInt(e.target.value) || 1)}
                min="1"
                max="10"
              />
              <p className="text-xs text-gray-600 mt-1">
                How realistic should it be for honest feedback?
              </p>
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Disposability (1-10)</label>
              <Input
                type="number"
                value={data.disposability}
                onChange={(e) => updateData('disposability', parseInt(e.target.value) || 1)}
                min="1"
                max="10"
              />
              <p className="text-xs text-gray-600 mt-1">
                How easy should it be to throw away?
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Success Metrics */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="w-5 h-5" />
            Success Metrics
          </CardTitle>
          <p className="text-sm text-gray-600">How will you measure success?</p>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            {data.successMetrics.map((metric, index) => (
              <div key={index} className="flex items-center justify-between p-2 bg-green-50 rounded">
                <span className="text-sm">{metric}</span>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => removeSuccessMetric(index)}
                  className="h-6 w-6 p-0"
                >
                  <X className="w-3 h-3" />
                </Button>
              </div>
            ))}
          </div>
          
          <div className="flex gap-2">
            <Input
              placeholder="Add success metric..."
              value={newSuccessMetric}
              onChange={(e) => setNewSuccessMetric(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && addSuccessMetric()}
              className="flex-1"
            />
            <Button onClick={addSuccessMetric} disabled={!newSuccessMetric.trim()}>
              <Plus className="w-4 h-4" />
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Assets */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="w-5 h-5" />
            Prototype Assets
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            {data.assets.map((asset, index) => {
              const Icon = methodOptions[asset.type]?.icon || FileText;
              return (
                <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                  <div className="flex items-center gap-2">
                    <Icon className="w-4 h-4" />
                    <span className="text-sm font-medium">{asset.type}</span>
                    <span className="text-sm text-gray-600">{asset.description}</span>
                  </div>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => removeAsset(index)}
                    className="h-6 w-6 p-0"
                  >
                    <X className="w-3 h-3" />
                  </Button>
                </div>
              );
            })}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
            <select
              value={newAsset.type}
              onChange={(e) => setNewAsset(prev => ({ ...prev, type: e.target.value as any }))}
              className="px-3 py-2 border rounded-md"
            >
              {Object.entries(methodOptions).map(([key, option]) => (
                <option key={key} value={key}>{option.name}</option>
              ))}
            </select>
            <Input
              placeholder="URL or file path..."
              value={newAsset.url || ''}
              onChange={(e) => setNewAsset(prev => ({ ...prev, url: e.target.value }))}
            />
            <Input
              placeholder="Description..."
              value={newAsset.description || ''}
              onChange={(e) => setNewAsset(prev => ({ ...prev, description: e.target.value }))}
            />
          </div>
          <Button onClick={addAsset} disabled={!newAsset.url?.trim() || !newAsset.description?.trim()}>
            <Plus className="w-4 h-4 mr-2" />
            Add Asset
          </Button>
        </CardContent>
      </Card>

      {/* Test Plan */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="w-5 h-5" />
            Test Plan
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Number of Participants</label>
              <Input
                type="number"
                value={data.testPlan.participants}
                onChange={(e) => updateTestPlan('participants', parseInt(e.target.value) || 0)}
                min="1"
                max="20"
              />
              <p className="text-xs text-gray-600 mt-1">
                Recommended: 5 users for rapid learning
              </p>
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Test Methods</label>
              <select
                multiple
                value={data.testPlan.methods}
                onChange={(e) => {
                  const selected = Array.from(e.target.selectedOptions, option => option.value);
                  updateTestPlan('methods', selected);
                }}
                className="w-full px-3 py-2 border rounded-md"
              >
                <option value="user-interview">User Interview</option>
                <option value="usability-test">Usability Test</option>
                <option value="a-b-test">A/B Test</option>
                <option value="survey">Survey</option>
                <option value="observation">Observation</option>
              </select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Tips and Guidance */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <h3 className="font-semibold text-blue-900 mb-2">üí° Prototyping Tips</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ Start with low-fidelity to test concepts quickly</li>
            <li>‚Ä¢ Choose fidelity based on what you need to learn</li>
            <li>‚Ä¢ Balance realism with disposability</li>
            <li>‚Ä¢ Focus on the most critical user flows</li>
            <li>‚Ä¢ Test with real users, not just your team</li>
            <li>‚Ä¢ Document everything for future iterations</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/HMWQuestionGenerator.tsx ===

// ============================================================================
// HOW MIGHT WE QUESTION GENERATOR
// Generate and reframe HMW questions from POV statements
// ============================================================================

import React, { useState, useEffect } from 'react';
import { Sparkles, ThumbsUp, Lightbulb, RefreshCw } from 'lucide-react';

interface POVStatement {
  id: string;
  userPersona: string;
  need: string;
  insight: string;
}

interface HMWQuestion {
  id: string;
  povStatementId: string;
  question: string;
  reframingType: string | null;
  voteCount: number;
  ideaCount: number;
  desirabilityScore?: number;
  feasibilityScore?: number;
  viabilityScore?: number;
}

export function HMWQuestionGenerator({ workflowId }: { workflowId: string }) {
  const [povStatements, setPOVStatements] = useState<POVStatement[]>([]);
  const [selectedPOV, setSelectedPOV] = useState<POVStatement | null>(null);
  const [hmwQuestions, setHMWQuestions] = useState<HMWQuestion[]>([]);
  const [generating, setGenerating] = useState(false);

  const reframingTechniques = [
    { type: 'amplify', label: 'Amplify', description: 'Make it bigger or more ambitious' },
    { type: 'remove_constraint', label: 'Remove Constraint', description: 'Remove a key limitation' },
    { type: 'opposite', label: 'Flip It', description: 'Reverse the problem' },
    { type: 'question_assumption', label: 'Question Assumption', description: 'Challenge core beliefs' },
    { type: 'resource_change', label: 'Change Resources', description: 'Different context or resources' }
  ];

  useEffect(() => {
    loadPOVStatements();
    loadHMWQuestions();
  }, [workflowId]);

  const loadPOVStatements = async () => {
    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}/pov-statements`);
      const result = await response.json();
      if (result.success) {
        setPOVStatements(result.data);
        if (result.data.length > 0 && !selectedPOV) {
          setSelectedPOV(result.data[0]);
        }
      }
    } catch (error) {
      console.error('Error loading POV statements:', error);
    }
  };

  const loadHMWQuestions = async () => {
    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}/hmw-questions`);
      const result = await response.json();
      if (result.success) {
        setHMWQuestions(result.data);
      }
    } catch (error) {
      console.error('Error loading HMW questions:', error);
    }
  };

  const generateHMWQuestions = async () => {
    if (!selectedPOV) return;

    setGenerating(true);
    try {
      const response = await fetch(`/api/dt/pov-statements/${selectedPOV.id}/hmw-questions/generate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const result = await response.json();
      if (result.success) {
        setHMWQuestions([...hmwQuestions, ...result.data]);
      }
    } catch (error) {
      console.error('Error generating HMW questions:', error);
      alert('Failed to generate HMW questions');
    } finally {
      setGenerating(false);
    }
  };

  const voteHMW = async (hmwId: string) => {
    try {
      const response = await fetch(`/api/dt/hmw-questions/${hmwId}/vote`, {
        method: 'POST'
      });
      
      const result = await response.json();
      if (result.success) {
        setHMWQuestions(hmwQuestions.map(hmw => 
          hmw.id === hmwId ? result.data : hmw
        ));
      }
    } catch (error) {
      console.error('Error voting HMW question:', error);
    }
  };

  const getReframingBadgeColor = (type: string | null) => {
    const colors: Record<string, string> = {
      amplify: 'bg-purple-100 text-purple-700',
      remove_constraint: 'bg-blue-100 text-blue-700',
      opposite: 'bg-green-100 text-green-700',
      question_assumption: 'bg-yellow-100 text-yellow-700',
      resource_change: 'bg-pink-100 text-pink-700'
    };
    return type ? colors[type] || 'bg-gray-100 text-gray-700' : 'bg-gray-100 text-gray-700';
  };

  return (
    <div className="p-6 max-w-6xl mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">How Might We Questions</h1>
        <p className="text-gray-600">
          Transform POV statements into actionable "How Might We" questions
        </p>
      </div>

      {/* POV Selection */}
      {povStatements.length === 0 ? (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
          <p className="text-yellow-800">
            No POV statements available. Please create POV statements first in the Define phase.
          </p>
        </div>
      ) : (
        <div className="mb-6">
          <label className="block text-sm font-medium mb-2">Select POV Statement</label>
          <select
            value={selectedPOV?.id || ''}
            onChange={(e) => {
              const pov = povStatements.find(p => p.id === e.target.value);
              setSelectedPOV(pov || null);
            }}
            className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            {povStatements.map(pov => (
              <option key={pov.id} value={pov.id}>
                {pov.userPersona} needs {pov.need}
              </option>
            ))}
          </select>

          {selectedPOV && (
            <div className="mt-3 bg-blue-50 border border-blue-200 rounded-lg p-4">
              <p className="text-sm">
                <span className="font-semibold">{selectedPOV.userPersona}</span>
                {' '}needs{' '}
                <span className="font-semibold">{selectedPOV.need}</span>
                {' '}because{' '}
                <span className="font-semibold">{selectedPOV.insight}</span>
              </p>
            </div>
          )}
        </div>
      )}

      {/* Generate Button */}
      {selectedPOV && (
        <div className="mb-6">
          <button
            onClick={generateHMWQuestions}
            disabled={generating}
            className="flex items-center gap-2 px-6 py-3 bg-purple-500 text-white rounded-lg hover:bg-purple-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <Sparkles className="w-5 h-5" />
            {generating ? 'Generating...' : 'Generate HMW Questions'}
          </button>
        </div>
      )}

      {/* Reframing Techniques Info */}
      <div className="mb-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4 border border-blue-200">
        <h3 className="font-semibold mb-3 flex items-center gap-2">
          <RefreshCw className="w-5 h-5 text-blue-500" />
          Reframing Techniques
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
          {reframingTechniques.map(technique => (
            <div key={technique.type} className="bg-white rounded p-3">
              <h4 className="font-medium text-sm mb-1">{technique.label}</h4>
              <p className="text-xs text-gray-600">{technique.description}</p>
            </div>
          ))}
        </div>
      </div>

      {/* HMW Questions List */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <h2 className="text-xl font-semibold mb-4">
          Generated HMW Questions ({hmwQuestions.length})
        </h2>
        
        {hmwQuestions.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <Lightbulb className="w-12 h-12 mx-auto mb-3 text-gray-400" />
            <p>No HMW questions yet. Select a POV statement and generate questions.</p>
          </div>
        ) : (
          <div className="space-y-3">
            {hmwQuestions
              .sort((a, b) => b.voteCount - a.voteCount)
              .map((hmw, index) => (
                <div
                  key={hmw.id}
                  className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-sm font-semibold text-gray-500">#{index + 1}</span>
                        {hmw.reframingType && (
                          <span className={`text-xs px-2 py-1 rounded ${getReframingBadgeColor(hmw.reframingType)}`}>
                            {hmw.reframingType.replace('_', ' ')}
                          </span>
                        )}
                      </div>
                      <p className="text-lg font-medium mb-2">{hmw.question}</p>
                      
                      {/* DVF Scores */}
                      {(hmw.desirabilityScore || hmw.feasibilityScore || hmw.viabilityScore) && (
                        <div className="flex gap-4 text-sm">
                          {hmw.desirabilityScore && (
                            <span className="text-green-600">
                              Desirability: {(hmw.desirabilityScore * 5).toFixed(1)}/5
                            </span>
                          )}
                          {hmw.feasibilityScore && (
                            <span className="text-blue-600">
                              Feasibility: {(hmw.feasibilityScore * 5).toFixed(1)}/5
                            </span>
                          )}
                          {hmw.viabilityScore && (
                            <span className="text-purple-600">
                              Viability: {(hmw.viabilityScore * 5).toFixed(1)}/5
                            </span>
                          )}
                        </div>
                      )}
                    </div>
                    
                    {/* Vote Button */}
                    <button
                      onClick={() => voteHMW(hmw.id)}
                      className="flex items-center gap-2 px-4 py-2 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors"
                    >
                      <ThumbsUp className="w-4 h-4" />
                      <span className="font-semibold">{hmw.voteCount}</span>
                    </button>
                  </div>
                  
                  {hmw.ideaCount > 0 && (
                    <div className="mt-2 text-sm text-gray-600">
                      üí° {hmw.ideaCount} ideas generated from this question
                    </div>
                  )}
                </div>
              ))}
          </div>
        )}
      </div>

      {/* Tips */}
      <div className="mt-6 bg-green-50 border border-green-200 rounded-lg p-4">
        <h4 className="font-semibold mb-2">üí° Tips for Great HMW Questions</h4>
        <ul className="text-sm space-y-1 text-gray-700">
          <li>‚Ä¢ Start with "How might we..." to invite creative solutions</li>
          <li>‚Ä¢ Be broad enough to allow multiple solutions</li>
          <li>‚Ä¢ Be specific enough to be actionable</li>
          <li>‚Ä¢ Don't prescribe a solution in the question</li>
          <li>‚Ä¢ Use reframing to explore different angles</li>
          <li>‚Ä¢ Vote on the most promising questions to focus ideation</li>
        </ul>
      </div>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/POVStatementBuilder.tsx ===

// ============================================================================
// POV STATEMENT BUILDER COMPONENT
// Mad Libs-style interface for creating Point of View statements
// ============================================================================

import React, { useState, useEffect } from 'react';
import { Sparkles, AlertTriangle, CheckCircle, Plus } from 'lucide-react';

interface POVStatement {
  id: string;
  userPersona: string;
  need: string;
  insight: string;
  evidenceStrength: number;
  solutionBiasDetected: boolean;
  priorityScore: number;
}

export function POVStatementBuilder({ workflowId }: { workflowId: string }) {
  const [povStatements, setPOVStatements] = useState<POVStatement[]>([]);
  const [currentPOV, setCurrentPOV] = useState({
    userPersona: '',
    need: '',
    insight: ''
  });
  const [generating, setGenerating] = useState(false);
  const [validating, setValidating] = useState(false);

  useEffect(() => {
    loadPOVStatements();
  }, [workflowId]);

  const loadPOVStatements = async () => {
    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}/pov-statements`);
      const result = await response.json();
      if (result.success) {
        setPOVStatements(result.data);
      }
    } catch (error) {
      console.error('Error loading POV statements:', error);
    }
  };

  const generateFromEmpathy = async () => {
    setGenerating(true);
    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}/pov-statements/generate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const result = await response.json();
      if (result.success) {
        setPOVStatements(result.data);
      } else {
        alert(result.error || 'Failed to generate POV statements');
      }
    } catch (error) {
      console.error('Error generating POV statements:', error);
      alert('Failed to generate POV statements');
    } finally {
      setGenerating(false);
    }
  };

  const savePOV = async () => {
    if (!currentPOV.userPersona || !currentPOV.need || !currentPOV.insight) {
      alert('Please fill in all fields');
      return;
    }

    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}/pov-statements`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(currentPOV)
      });
      
      const result = await response.json();
      if (result.success) {
        setPOVStatements([...povStatements, result.data]);
        setCurrentPOV({ userPersona: '', need: '', insight: '' });
      }
    } catch (error) {
      console.error('Error saving POV statement:', error);
      alert('Failed to save POV statement');
    }
  };

  const checkSolutionBias = (text: string): boolean => {
    const solutionWords = ['app', 'website', 'platform', 'tool', 'system', 'software', 'feature'];
    return solutionWords.some(word => text.toLowerCase().includes(word));
  };

  const hasSolutionBias = checkSolutionBias(currentPOV.need);

  return (
    <div className="p-6 max-w-6xl mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">Point of View Statement Builder</h1>
        <p className="text-gray-600">
          Frame your problem using the format: [User] needs [Need] because [Insight]
        </p>
      </div>

      {/* AI Generation */}
      <div className="mb-6 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-4 border border-purple-200">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="font-semibold flex items-center gap-2">
              <Sparkles className="w-5 h-5 text-purple-500" />
              AI-Powered Generation
            </h3>
            <p className="text-sm text-gray-600 mt-1">
              Generate POV statements automatically from your empathy data
            </p>
          </div>
          <button
            onClick={generateFromEmpathy}
            disabled={generating}
            className="px-6 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {generating ? 'Generating...' : 'Generate POV Statements'}
          </button>
        </div>
      </div>

      {/* Manual POV Builder */}
      <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
        <h2 className="text-xl font-semibold mb-4">Create POV Statement</h2>
        
        <div className="space-y-4">
          {/* User Persona */}
          <div>
            <label className="block text-sm font-medium mb-2">
              User (Be specific)
            </label>
            <input
              type="text"
              value={currentPOV.userPersona}
              onChange={(e) => setCurrentPOV({ ...currentPOV, userPersona: e.target.value })}
              placeholder="e.g., Sarah, a 35-year-old working mom with two kids"
              className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
            />
            <p className="text-xs text-gray-500 mt-1">
              ‚úì Good: Specific persona with context | ‚úó Bad: "Users" or "People"
            </p>
          </div>

          {/* Need */}
          <div>
            <label className="block text-sm font-medium mb-2">
              Need (Verb-based, not a solution)
            </label>
            <input
              type="text"
              value={currentPOV.need}
              onChange={(e) => setCurrentPOV({ ...currentPOV, need: e.target.value })}
              placeholder="e.g., to quickly prepare healthy meals for her family"
              className={`w-full px-4 py-2 border rounded-lg focus:ring-2 ${
                hasSolutionBias ? 'border-red-300 focus:ring-red-500' : 'focus:ring-blue-500'
              }`}
            />
            {hasSolutionBias && (
              <div className="flex items-center gap-2 mt-2 text-red-600 text-sm">
                <AlertTriangle className="w-4 h-4" />
                <span>Warning: This sounds like a solution, not a need. Focus on the underlying need.</span>
              </div>
            )}
            <p className="text-xs text-gray-500 mt-1">
              ‚úì Good: "to feel confident about..." | ‚úó Bad: "needs an app to..."
            </p>
          </div>

          {/* Insight */}
          <div>
            <label className="block text-sm font-medium mb-2">
              Insight (Surprising learning from research)
            </label>
            <textarea
              value={currentPOV.insight}
              onChange={(e) => setCurrentPOV({ ...currentPOV, insight: e.target.value })}
              placeholder="e.g., she feels guilty when ordering takeout but lacks time to cook"
              className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
              rows={3}
            />
            <p className="text-xs text-gray-500 mt-1">
              ‚úì Good: Unexpected finding from research | ‚úó Bad: Obvious statement
            </p>
          </div>

          {/* Preview */}
          {currentPOV.userPersona && currentPOV.need && currentPOV.insight && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-semibold mb-2">Preview:</h4>
              <p className="text-lg">
                <span className="font-semibold text-blue-600">{currentPOV.userPersona}</span>
                {' '}needs{' '}
                <span className="font-semibold text-green-600">{currentPOV.need}</span>
                {' '}because{' '}
                <span className="font-semibold text-purple-600">{currentPOV.insight}</span>
              </p>
            </div>
          )}

          {/* Actions */}
          <div className="flex gap-3">
            <button
              onClick={savePOV}
              disabled={!currentPOV.userPersona || !currentPOV.need || !currentPOV.insight || hasSolutionBias}
              className="flex items-center gap-2 px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <Plus className="w-5 h-5" />
              Add POV Statement
            </button>
          </div>
        </div>
      </div>

      {/* Saved POV Statements */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <h2 className="text-xl font-semibold mb-4">
          POV Statements ({povStatements.length})
        </h2>
        
        {povStatements.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <p>No POV statements yet. Create one above or generate from empathy data.</p>
          </div>
        ) : (
          <div className="space-y-4">
            {povStatements.map((pov, index) => (
              <div
                key={pov.id}
                className="border rounded-lg p-4 hover:shadow-md transition-shadow"
              >
                <div className="flex items-start justify-between mb-2">
                  <span className="text-sm font-semibold text-gray-500">POV #{index + 1}</span>
                  <div className="flex items-center gap-2">
                    {pov.solutionBiasDetected && (
                      <span className="text-xs bg-red-100 text-red-700 px-2 py-1 rounded">
                        Solution Bias Detected
                      </span>
                    )}
                    <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded">
                      Priority: {pov.priorityScore}
                    </span>
                  </div>
                </div>
                
                <p className="text-lg mb-2">
                  <span className="font-semibold text-blue-600">{pov.userPersona}</span>
                  {' '}needs{' '}
                  <span className="font-semibold text-green-600">{pov.need}</span>
                  {' '}because{' '}
                  <span className="font-semibold text-purple-600">{pov.insight}</span>
                </p>
                
                <div className="flex items-center gap-4 text-sm text-gray-600">
                  <span>Evidence Strength: {(pov.evidenceStrength * 100).toFixed(0)}%</span>
                  {!pov.solutionBiasDetected && (
                    <span className="flex items-center gap-1 text-green-600">
                      <CheckCircle className="w-4 h-4" />
                      No solution bias
                    </span>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/ideate/BrainstormingCanvas.tsx ===

import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { 
  Save, 
  Download, 
  Lightbulb, 
  Users, 
  Clock, 
  Vote,
  Plus,
  X,
  RefreshCw,
  Target,
  Zap,
  Brain,
  Timer
} from 'lucide-react';

export interface Idea {
  id: string;
  content: string;
  authorId: string;
  parentIdeaId?: string;
  votes: number;
  category?: string;
  feasibilityScore?: number;
  createdAt: Date;
}

export interface BrainstormSession {
  id: string;
  hmwQuestionId: string;
  facilitatorId: string;
  participants: string[];
  duration: number; // minutes
  method: 'crazy-8s' | 'brainwriting' | 'scamper' | 'reverse-brainstorming';
  ideas: Idea[];
  rules: {
    deferJudgment: boolean;
    encourageWildIdeas: boolean;
    buildOnOthers: boolean;
    quantityOverQuality: boolean;
  };
  status: 'preparing' | 'active' | 'voting' | 'completed';
  startTime?: Date;
  endTime?: Date;
}

interface BrainstormingCanvasProps {
  projectId: string;
  hmwQuestion: string;
  initialData?: BrainstormSession;
  onSave: (data: BrainstormSession) => void;
  onExport?: (data: BrainstormSession) => void;
  participants?: Array<{ id: string; name: string; avatar?: string }>;
}

const brainstormingMethods = {
  'crazy-8s': {
    name: 'Crazy 8s',
    description: 'Generate 8 ideas in 8 minutes',
    duration: 8,
    instructions: 'Sketch 8 different ideas quickly. Don\'t overthink - go for quantity!'
  },
  'brainwriting': {
    name: 'Brainwriting',
    description: 'Silent idea generation and building',
    duration: 15,
    instructions: 'Write ideas silently, then pass to others to build upon them.'
  },
  'scamper': {
    name: 'SCAMPER',
    description: 'Systematic idea generation using SCAMPER technique',
    duration: 20,
    instructions: 'Apply SCAMPER: Substitute, Combine, Adapt, Modify, Put to other uses, Eliminate, Reverse.'
  },
  'reverse-brainstorming': {
    name: 'Reverse Brainstorming',
    description: 'Generate ideas by thinking about the opposite',
    duration: 15,
    instructions: 'Think about how to make the problem worse, then reverse those ideas.'
  }
};

const scamperPrompts = [
  'Substitute: What can we substitute or swap?',
  'Combine: What can we combine or merge?',
  'Adapt: What can we adapt from other contexts?',
  'Modify: What can we modify or change?',
  'Put to other uses: What other uses can we find?',
  'Eliminate: What can we remove or eliminate?',
  'Reverse: What if we did the opposite?'
];

export function BrainstormingCanvas({ 
  projectId, 
  hmwQuestion,
  initialData, 
  onSave, 
  onExport,
  participants = []
}: BrainstormingCanvasProps) {
  const [session, setSession] = useState<BrainstormSession>(
    initialData || {
      id: '',
      hmwQuestionId: '',
      facilitatorId: '',
      participants: [],
      duration: 15,
      method: 'crazy-8s',
      ideas: [],
      rules: {
        deferJudgment: true,
        encourageWildIdeas: true,
        buildOnOthers: true,
        quantityOverQuality: true
      },
      status: 'preparing'
    }
  );

  const [isSaving, setIsSaving] = useState(false);
  const [newIdea, setNewIdea] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [timeRemaining, setTimeRemaining] = useState(0);
  const [showVoting, setShowVoting] = useState(false);
  const [currentScamperPrompt, setCurrentScamperPrompt] = useState(0);
  
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const sessionStartTime = useRef<Date | null>(null);

  useEffect(() => {
    if (initialData) {
      setSession(initialData);
    }
  }, [initialData]);

  useEffect(() => {
    if (session.status === 'active' && sessionStartTime.current) {
      const elapsed = Math.floor((Date.now() - sessionStartTime.current.getTime()) / 1000 / 60);
      const remaining = session.duration - elapsed;
      setTimeRemaining(Math.max(0, remaining));

      if (remaining <= 0) {
        endSession();
      }
    }
  }, [session.status, session.duration]);

  const startSession = () => {
    setSession(prev => ({ ...prev, status: 'active', startTime: new Date() }));
    sessionStartTime.current = new Date();
    
    // Set up timer
    timerRef.current = setInterval(() => {
      if (sessionStartTime.current) {
        const elapsed = Math.floor((Date.now() - sessionStartTime.current.getTime()) / 1000 / 60);
        const remaining = session.duration - elapsed;
        setTimeRemaining(Math.max(0, remaining));
        
        if (remaining <= 0) {
          endSession();
        }
      }
    }, 1000);
  };

  const endSession = () => {
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    setSession(prev => ({ 
      ...prev, 
      status: 'voting', 
      endTime: new Date() 
    }));
    setShowVoting(true);
  };

  const addIdea = () => {
    if (newIdea.trim()) {
      const idea: Idea = {
        id: `idea-${Date.now()}`,
        content: newIdea.trim(),
        authorId: 'current-user', // In real app, get from auth context
        votes: 0,
        category: selectedCategory,
        createdAt: new Date()
      };
      
      setSession(prev => ({
        ...prev,
        ideas: [...prev.ideas, idea]
      }));
      
      setNewIdea('');
      setSelectedCategory('');
    }
  };

  const voteOnIdea = (ideaId: string) => {
    setSession(prev => ({
      ...prev,
      ideas: prev.ideas.map(idea => 
        idea.id === ideaId 
          ? { ...idea, votes: idea.votes + 1 }
          : idea
      )
    }));
  };

  const buildOnIdea = (parentIdeaId: string) => {
    const parentIdea = session.ideas.find(i => i.id === parentIdeaId);
    if (parentIdea) {
      setNewIdea(`Building on: ${parentIdea.content} - `);
      setSelectedCategory(parentIdea.category);
    }
  };

  const nextScamperPrompt = () => {
    setCurrentScamperPrompt(prev => (prev + 1) % scamperPrompts.length);
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onSave(session);
    } catch (error) {
      console.error('Error saving brainstorm session:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleExport = () => {
    if (onExport) {
      onExport(session);
    }
  };

  const getMethodInfo = () => brainstormingMethods[session.method];
  const sortedIdeas = [...session.ideas].sort((a, b) => b.votes - a.votes);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Brainstorming Canvas</h2>
          <p className="text-gray-600 mt-1">
            Generate innovative ideas for: {hmwQuestion}
          </p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={handleSave} 
            disabled={isSaving}
            className="flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            {isSaving ? 'Saving...' : 'Save'}
          </Button>
          {onExport && (
            <Button 
              variant="outline" 
              onClick={handleExport}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}
        </div>
      </div>

      {/* Session Setup */}
      {session.status === 'preparing' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Brain className="w-5 h-5" />
              Session Setup
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">Brainstorming Method</label>
                <select
                  value={session.method}
                  onChange={(e) => setSession(prev => ({ 
                    ...prev, 
                    method: e.target.value as keyof typeof brainstormingMethods,
                    duration: brainstormingMethods[e.target.value as keyof typeof brainstormingMethods].duration
                  }))}
                  className="w-full px-3 py-2 border rounded-md"
                >
                  {Object.entries(brainstormingMethods).map(([key, method]) => (
                    <option key={key} value={key}>{method.name}</option>
                  ))}
                </select>
                <p className="text-sm text-gray-600 mt-1">
                  {getMethodInfo().description} ({getMethodInfo().duration} minutes)
                </p>
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Duration (minutes)</label>
                <Input
                  type="number"
                  value={session.duration}
                  onChange={(e) => setSession(prev => ({ ...prev, duration: parseInt(e.target.value) || 15 }))}
                  min="5"
                  max="60"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Session Rules</label>
              <div className="grid grid-cols-2 gap-4">
                {Object.entries(session.rules).map(([key, value]) => (
                  <label key={key} className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={value}
                      onChange={(e) => setSession(prev => ({
                        ...prev,
                        rules: { ...prev.rules, [key]: e.target.checked }
                      }))}
                      className="rounded"
                    />
                    <span className="text-sm capitalize">{key.replace(/([A-Z])/g, ' $1').trim()}</span>
                  </label>
                ))}
              </div>
            </div>

            <Button onClick={startSession} className="w-full">
              <Zap className="w-4 h-4 mr-2" />
              Start Brainstorming Session
            </Button>
          </CardContent>
        </Card>
      )}

      {/* Active Session */}
      {session.status === 'active' && (
        <Card className="border-2 border-blue-200">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                <Timer className="w-5 h-5" />
                Active Session - {getMethodInfo().name}
              </CardTitle>
              <div className="flex items-center gap-4">
                <Badge variant="outline" className="flex items-center gap-1">
                  <Clock className="w-3 h-3" />
                  {timeRemaining} min remaining
                </Badge>
                <Button onClick={endSession} variant="outline">
                  End Session
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="bg-blue-50 p-4 rounded">
              <h4 className="font-medium text-blue-900 mb-2">Instructions</h4>
              <p className="text-blue-800">{getMethodInfo().instructions}</p>
            </div>

            {/* SCAMPER Prompts */}
            {session.method === 'scamper' && (
              <div className="bg-yellow-50 p-4 rounded">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-medium text-yellow-900">Current SCAMPER Prompt</h4>
                  <Button size="sm" onClick={nextScamperPrompt}>
                    <RefreshCw className="w-3 h-3 mr-1" />
                    Next
                  </Button>
                </div>
                <p className="text-yellow-800">{scamperPrompts[currentScamperPrompt]}</p>
              </div>
            )}

            {/* Add New Idea */}
            <div className="space-y-2">
              <label className="block text-sm font-medium">Add New Idea</label>
              <div className="flex gap-2">
                <Input
                  placeholder="Enter your idea..."
                  value={newIdea}
                  onChange={(e) => setNewIdea(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && addIdea()}
                  className="flex-1"
                />
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="px-3 py-2 border rounded-md"
                >
                  <option value="">Category</option>
                  <option value="product">Product</option>
                  <option value="service">Service</option>
                  <option value="process">Process</option>
                  <option value="technology">Technology</option>
                  <option value="business">Business Model</option>
                </select>
                <Button onClick={addIdea} disabled={!newIdea.trim()}>
                  <Plus className="w-4 h-4" />
                </Button>
              </div>
            </div>

            {/* Ideas Count */}
            <div className="flex items-center gap-4">
              <Badge variant="outline" className="flex items-center gap-1">
                <Lightbulb className="w-3 h-3" />
                {session.ideas.length} ideas
              </Badge>
              <Badge variant="outline" className="flex items-center gap-1">
                <Users className="w-3 h-3" />
                {session.participants.length} participants
              </Badge>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Ideas Display */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {session.ideas.map((idea, index) => (
          <Card key={idea.id} className="border-2 border-gray-200">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <Badge variant="outline">#{index + 1}</Badge>
                    {idea.category && (
                      <Badge variant="secondary">{idea.category}</Badge>
                    )}
                    <Badge variant="outline" className="flex items-center gap-1">
                      <Vote className="w-3 h-3" />
                      {idea.votes}
                    </Badge>
                  </div>
                  <p className="text-sm font-medium">{idea.content}</p>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="flex gap-2">
                <Button
                  size="sm"
                  onClick={() => voteOnIdea(idea.id)}
                  className="flex items-center gap-1"
                >
                  <Vote className="w-3 h-3" />
                  Vote
                </Button>
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => buildOnIdea(idea.id)}
                  className="flex items-center gap-1"
                >
                  <Plus className="w-3 h-3" />
                  Build On
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Voting Phase */}
      {session.status === 'voting' && (
        <Card className="border-2 border-green-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Vote className="w-5 h-5" />
              Voting Phase
            </CardTitle>
            <p className="text-sm text-gray-600">
              Vote on the ideas you think are most promising. The top ideas will be prioritized.
            </p>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <h4 className="font-medium">Top Ideas by Votes</h4>
              {sortedIdeas.slice(0, 10).map((idea, index) => (
                <div key={idea.id} className="flex items-center justify-between p-3 bg-gray-50 rounded">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <Badge variant="outline">#{index + 1}</Badge>
                      <Badge variant="outline" className="flex items-center gap-1">
                        <Vote className="w-3 h-3" />
                        {idea.votes} votes
                      </Badge>
                    </div>
                    <p className="text-sm">{idea.content}</p>
                  </div>
                  <Button
                    size="sm"
                    onClick={() => voteOnIdea(idea.id)}
                    className="ml-2"
                  >
                    <Vote className="w-3 h-3 mr-1" />
                    Vote
                  </Button>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Session Summary */}
      {session.status === 'completed' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="w-5 h-5" />
              Session Summary
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{session.ideas.length}</div>
                <div className="text-sm text-gray-600">Ideas Generated</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{session.participants.length}</div>
                <div className="text-sm text-gray-600">Participants</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">{session.duration}</div>
                <div className="text-sm text-gray-600">Minutes</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-orange-600">
                  {Math.round(session.ideas.length / session.duration * 60)}
                </div>
                <div className="text-sm text-gray-600">Ideas/Hour</div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Tips and Guidance */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <h3 className="font-semibold text-blue-900 mb-2">üí° Brainstorming Tips</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ Defer judgment - all ideas are welcome during ideation</li>
            <li>‚Ä¢ Encourage wild ideas - the crazier, the better</li>
            <li>‚Ä¢ Build on others' ideas - combine and improve</li>
            <li>‚Ä¢ Focus on quantity over quality initially</li>
            <li>‚Ä¢ Use different methods to explore various angles</li>
            <li>‚Ä¢ Take breaks to maintain energy and creativity</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/IdeaEvaluationMatrix.tsx ===

// ============================================================================
// IDEA EVALUATION MATRIX
// DVF framework with AI-powered evaluation
// ============================================================================

import React, { useState, useEffect } from 'react';
import { Sparkles, TrendingUp, AlertCircle, CheckCircle2 } from 'lucide-react';

interface Idea {
  id: string;
  title: string;
  description: string;
  userBenefit: string;
  businessValue: string;
  desirabilityScore?: number;
  feasibilityScore?: number;
  viabilityScore?: number;
  innovationScore?: number;
  impactScore?: number;
  overallScore?: number;
  status: string;
}

interface IdeaEvaluation {
  idea: Idea;
  scores: {
    desirability: number;
    feasibility: number;
    viability: number;
    innovation: number;
    impact: number;
  };
  risks: any[];
  opportunities: any[];
  recommendations: string[];
}

export function IdeaEvaluationMatrix({ workflowId }: { workflowId: string }) {
  const [ideas, setIdeas] = useState<Idea[]>([]);
  const [evaluating, setEvaluating] = useState(false);
  const [selectedView, setSelectedView] = useState<'list' | 'matrix'>('list');

  useEffect(() => {
    loadIdeas();
  }, [workflowId]);

  const loadIdeas = async () => {
    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}/ideas`);
      const result = await response.json();
      if (result.success) {
        setIdeas(result.data);
      }
    } catch (error) {
      console.error('Error loading ideas:', error);
    }
  };

  const evaluateAllIdeas = async () => {
    setEvaluating(true);
    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}/ideas/evaluate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      });
      
      const result = await response.json();
      if (result.success) {
        await loadIdeas(); // Reload to get updated scores
        alert('Ideas evaluated successfully!');
      }
    } catch (error) {
      console.error('Error evaluating ideas:', error);
      alert('Failed to evaluate ideas');
    } finally {
      setEvaluating(false);
    }
  };

  const getScoreColor = (score: number): string => {
    if (score >= 0.8) return 'text-green-600 bg-green-100';
    if (score >= 0.6) return 'text-blue-600 bg-blue-100';
    if (score >= 0.4) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };

  const getQuadrant = (idea: Idea): string => {
    const impact = ((idea.desirabilityScore || 0) + (idea.impactScore || 0)) / 2;
    const effort = 1 - (idea.feasibilityScore || 0.5);
    
    if (impact > 0.6 && effort < 0.4) return 'Quick Wins';
    if (impact > 0.6 && effort >= 0.4) return 'Major Projects';
    if (impact <= 0.6 && effort < 0.4) return 'Fill-Ins';
    return 'Hard Slogs';
  };

  const getQuadrantColor = (quadrant: string): string => {
    const colors: Record<string, string> = {
      'Quick Wins': 'bg-green-100 text-green-700 border-green-300',
      'Major Projects': 'bg-blue-100 text-blue-700 border-blue-300',
      'Fill-Ins': 'bg-yellow-100 text-yellow-700 border-yellow-300',
      'Hard Slogs': 'bg-red-100 text-red-700 border-red-300'
    };
    return colors[quadrant] || 'bg-gray-100 text-gray-700 border-gray-300';
  };

  const evaluatedIdeas = ideas.filter(i => i.overallScore !== undefined);
  const unevaluatedIdeas = ideas.filter(i => i.overallScore === undefined);

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">Idea Evaluation Matrix</h1>
        <p className="text-gray-600">
          Evaluate ideas using the Desirability-Feasibility-Viability framework
        </p>
      </div>

      {/* Actions */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex gap-3">
          <button
            onClick={evaluateAllIdeas}
            disabled={evaluating || ideas.length === 0}
            className="flex items-center gap-2 px-6 py-3 bg-purple-500 text-white rounded-lg hover:bg-purple-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <Sparkles className="w-5 h-5" />
            {evaluating ? 'Evaluating...' : 'AI Evaluate All Ideas'}
          </button>
        </div>

        <div className="flex gap-2 bg-gray-100 rounded-lg p-1">
          <button
            onClick={() => setSelectedView('list')}
            className={`px-4 py-2 rounded ${selectedView === 'list' ? 'bg-white shadow-sm' : ''}`}
          >
            List View
          </button>
          <button
            onClick={() => setSelectedView('matrix')}
            className={`px-4 py-2 rounded ${selectedView === 'matrix' ? 'bg-white shadow-sm' : ''}`}
          >
            Matrix View
          </button>
        </div>
      </div>

      {/* Statistics */}
      {evaluatedIdeas.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="text-sm text-gray-600 mb-1">Total Ideas</div>
            <div className="text-2xl font-bold">{ideas.length}</div>
          </div>
          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="text-sm text-gray-600 mb-1">Evaluated</div>
            <div className="text-2xl font-bold text-green-600">{evaluatedIdeas.length}</div>
          </div>
          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="text-sm text-gray-600 mb-1">Avg. Score</div>
            <div className="text-2xl font-bold text-blue-600">
              {(evaluatedIdeas.reduce((sum, i) => sum + (i.overallScore || 0), 0) / evaluatedIdeas.length * 100).toFixed(0)}%
            </div>
          </div>
          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="text-sm text-gray-600 mb-1">Top Scorer</div>
            <div className="text-2xl font-bold text-purple-600">
              {Math.max(...evaluatedIdeas.map(i => (i.overallScore || 0) * 100)).toFixed(0)}%
            </div>
          </div>
        </div>
      )}

      {/* List View */}
      {selectedView === 'list' && (
        <div className="space-y-4">
          {ideas.length === 0 ? (
            <div className="text-center py-12 text-gray-500">
              <p>No ideas yet. Create ideas in the Ideate phase first.</p>
            </div>
          ) : (
            ideas
              .sort((a, b) => (b.overallScore || 0) - (a.overallScore || 0))
              .map((idea, index) => (
                <div
                  key={idea.id}
                  className="bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow"
                >
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <span className="text-sm font-semibold text-gray-500">#{index + 1}</span>
                        <h3 className="text-xl font-semibold">{idea.title}</h3>
                        {idea.overallScore && (
                          <span className={`text-xs px-3 py-1 rounded-full font-semibold ${getQuadrantColor(getQuadrant(idea))}`}>
                            {getQuadrant(idea)}
                          </span>
                        )}
                      </div>
                      <p className="text-gray-600 mb-3">{idea.description}</p>
                    </div>
                    
                    {idea.overallScore !== undefined && (
                      <div className="text-right">
                        <div className="text-3xl font-bold text-blue-600">
                          {(idea.overallScore * 100).toFixed(0)}
                        </div>
                        <div className="text-xs text-gray-500">Overall Score</div>
                      </div>
                    )}
                  </div>

                  {/* DVF Scores */}
                  {idea.overallScore !== undefined && (
                    <div className="grid grid-cols-2 md:grid-cols-5 gap-3 mb-3">
                      <div className="bg-green-50 rounded p-2">
                        <div className="text-xs text-gray-600 mb-1">Desirability</div>
                        <div className={`text-lg font-semibold ${getScoreColor(idea.desirabilityScore || 0)}`}>
                          {((idea.desirabilityScore || 0) * 100).toFixed(0)}%
                        </div>
                      </div>
                      <div className="bg-blue-50 rounded p-2">
                        <div className="text-xs text-gray-600 mb-1">Feasibility</div>
                        <div className={`text-lg font-semibold ${getScoreColor(idea.feasibilityScore || 0)}`}>
                          {((idea.feasibilityScore || 0) * 100).toFixed(0)}%
                        </div>
                      </div>
                      <div className="bg-purple-50 rounded p-2">
                        <div className="text-xs text-gray-600 mb-1">Viability</div>
                        <div className={`text-lg font-semibold ${getScoreColor(idea.viabilityScore || 0)}`}>
                          {((idea.viabilityScore || 0) * 100).toFixed(0)}%
                        </div>
                      </div>
                      <div className="bg-yellow-50 rounded p-2">
                        <div className="text-xs text-gray-600 mb-1">Innovation</div>
                        <div className={`text-lg font-semibold ${getScoreColor(idea.innovationScore || 0)}`}>
                          {((idea.innovationScore || 0) * 100).toFixed(0)}%
                        </div>
                      </div>
                      <div className="bg-pink-50 rounded p-2">
                        <div className="text-xs text-gray-600 mb-1">Impact</div>
                        <div className={`text-lg font-semibold ${getScoreColor(idea.impactScore || 0)}`}>
                          {((idea.impactScore || 0) * 100).toFixed(0)}%
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Benefits */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                    <div>
                      <span className="font-medium text-gray-700">User Benefit:</span>
                      <p className="text-gray-600 mt-1">{idea.userBenefit}</p>
                    </div>
                    <div>
                      <span className="font-medium text-gray-700">Business Value:</span>
                      <p className="text-gray-600 mt-1">{idea.businessValue}</p>
                    </div>
                  </div>
                </div>
              ))
          )}
        </div>
      )}

      {/* Matrix View */}
      {selectedView === 'matrix' && evaluatedIdeas.length > 0 && (
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h2 className="text-xl font-semibold mb-4">Impact-Effort Matrix</h2>
          
          <div className="grid grid-cols-2 gap-4 h-[600px]">
            {/* Quick Wins */}
            <div className="border-2 border-green-300 rounded-lg p-4 bg-green-50">
              <h3 className="font-semibold text-green-700 mb-3">üéØ Quick Wins</h3>
              <p className="text-xs text-gray-600 mb-3">High Impact, Low Effort</p>
              <div className="space-y-2">
                {evaluatedIdeas
                  .filter(idea => getQuadrant(idea) === 'Quick Wins')
                  .map(idea => (
                    <div key={idea.id} className="bg-white rounded p-3 shadow-sm">
                      <div className="font-medium text-sm">{idea.title}</div>
                      <div className="text-xs text-gray-600 mt-1">
                        Score: {((idea.overallScore || 0) * 100).toFixed(0)}%
                      </div>
                    </div>
                  ))}
              </div>
            </div>

            {/* Major Projects */}
            <div className="border-2 border-blue-300 rounded-lg p-4 bg-blue-50">
              <h3 className="font-semibold text-blue-700 mb-3">üöÄ Major Projects</h3>
              <p className="text-xs text-gray-600 mb-3">High Impact, High Effort</p>
              <div className="space-y-2">
                {evaluatedIdeas
                  .filter(idea => getQuadrant(idea) === 'Major Projects')
                  .map(idea => (
                    <div key={idea.id} className="bg-white rounded p-3 shadow-sm">
                      <div className="font-medium text-sm">{idea.title}</div>
                      <div className="text-xs text-gray-600 mt-1">
                        Score: {((idea.overallScore || 0) * 100).toFixed(0)}%
                      </div>
                    </div>
                  ))}
              </div>
            </div>

            {/* Fill-Ins */}
            <div className="border-2 border-yellow-300 rounded-lg p-4 bg-yellow-50">
              <h3 className="font-semibold text-yellow-700 mb-3">üìù Fill-Ins</h3>
              <p className="text-xs text-gray-600 mb-3">Low Impact, Low Effort</p>
              <div className="space-y-2">
                {evaluatedIdeas
                  .filter(idea => getQuadrant(idea) === 'Fill-Ins')
                  .map(idea => (
                    <div key={idea.id} className="bg-white rounded p-3 shadow-sm">
                      <div className="font-medium text-sm">{idea.title}</div>
                      <div className="text-xs text-gray-600 mt-1">
                        Score: {((idea.overallScore || 0) * 100).toFixed(0)}%
                      </div>
                    </div>
                  ))}
              </div>
            </div>

            {/* Hard Slogs */}
            <div className="border-2 border-red-300 rounded-lg p-4 bg-red-50">
              <h3 className="font-semibold text-red-700 mb-3">‚ö†Ô∏è Hard Slogs</h3>
              <p className="text-xs text-gray-600 mb-3">Low Impact, High Effort</p>
              <div className="space-y-2">
                {evaluatedIdeas
                  .filter(idea => getQuadrant(idea) === 'Hard Slogs')
                  .map(idea => (
                    <div key={idea.id} className="bg-white rounded p-3 shadow-sm">
                      <div className="font-medium text-sm">{idea.title}</div>
                      <div className="text-xs text-gray-600 mt-1">
                        Score: {((idea.overallScore || 0) * 100).toFixed(0)}%
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          </div>

          {/* Matrix Legend */}
          <div className="mt-4 bg-gray-50 rounded-lg p-4">
            <h4 className="font-semibold mb-2">üìä Prioritization Guide</h4>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm">
              <div>
                <span className="font-medium text-green-700">Quick Wins:</span>
                <p className="text-gray-600">Do first - high value, low effort</p>
              </div>
              <div>
                <span className="font-medium text-blue-700">Major Projects:</span>
                <p className="text-gray-600">Plan carefully - high value, high effort</p>
              </div>
              <div>
                <span className="font-medium text-yellow-700">Fill-Ins:</span>
                <p className="text-gray-600">Do later - low value, low effort</p>
              </div>
              <div>
                <span className="font-medium text-red-700">Hard Slogs:</span>
                <p className="text-gray-600">Avoid - low value, high effort</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Evaluation Criteria */}
      <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h4 className="font-semibold mb-3">üìã Evaluation Criteria (DVF Framework)</h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
          <div>
            <h5 className="font-medium text-green-700 mb-1">Desirability (30%)</h5>
            <ul className="text-gray-600 space-y-1">
              <li>‚Ä¢ Do users want this?</li>
              <li>‚Ä¢ Does it solve a real pain?</li>
              <li>‚Ä¢ Would they pay for it?</li>
            </ul>
          </div>
          <div>
            <h5 className="font-medium text-blue-700 mb-1">Feasibility (25%)</h5>
            <ul className="text-gray-600 space-y-1">
              <li>‚Ä¢ Can we build it?</li>
              <li>‚Ä¢ Do we have the skills?</li>
              <li>‚Ä¢ What are the risks?</li>
            </ul>
          </div>
          <div>
            <h5 className="font-medium text-purple-700 mb-1">Viability (25%)</h5>
            <ul className="text-gray-600 space-y-1">
              <li>‚Ä¢ Can we make money?</li>
              <li>‚Ä¢ What are the costs?</li>
              <li>‚Ä¢ Is it sustainable?</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/empathize/EmpathyMapBuilder.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Plus, X, Save, Download, Users, Lightbulb, Eye, Ear, AlertTriangle, Target } from 'lucide-react';

export interface EmpathyMapData {
  id: string;
  userPersona: string;
  thinkAndFeel: string[];
  sayAndDo: string[];
  see: string[];
  hear: string[];
  pains: string[];
  gains: string[];
  createdAt?: Date;
  updatedAt?: Date;
}

interface EmpathyMapBuilderProps {
  projectId: string;
  initialData?: EmpathyMapData;
  onSave: (data: EmpathyMapData) => void;
  onExport?: (data: EmpathyMapData) => void;
}

const quadrants = [
  { 
    key: 'thinkAndFeel', 
    title: 'Think & Feel', 
    icon: Lightbulb,
    color: 'bg-blue-50', 
    borderColor: 'border-blue-200',
    description: 'Internal thoughts and emotions'
  },
  { 
    key: 'sayAndDo', 
    title: 'Say & Do', 
    icon: Users,
    color: 'bg-green-50', 
    borderColor: 'border-green-200',
    description: 'Observable behaviors'
  },
  { 
    key: 'see', 
    title: 'See', 
    icon: Eye,
    color: 'bg-yellow-50', 
    borderColor: 'border-yellow-200',
    description: 'Environmental context'
  },
  { 
    key: 'hear', 
    title: 'Hear', 
    icon: Ear,
    color: 'bg-purple-50', 
    borderColor: 'border-purple-200',
    description: 'Influencers and information sources'
  },
  { 
    key: 'pains', 
    title: 'Pains', 
    icon: AlertTriangle,
    color: 'bg-red-50', 
    borderColor: 'border-red-200',
    description: 'Frustrations and obstacles'
  },
  { 
    key: 'gains', 
    title: 'Gains', 
    icon: Target,
    color: 'bg-emerald-50', 
    borderColor: 'border-emerald-200',
    description: 'Goals and desired outcomes'
  }
];

export function EmpathyMapBuilder({ 
  projectId, 
  initialData, 
  onSave, 
  onExport 
}: EmpathyMapBuilderProps) {
  const [data, setData] = useState<EmpathyMapData>(
    initialData || {
      id: '',
      userPersona: '',
      thinkAndFeel: [],
      sayAndDo: [],
      see: [],
      hear: [],
      pains: [],
      gains: []
    }
  );

  const [newItem, setNewItem] = useState<{ [key: string]: string }>({});
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    if (initialData) {
      setData(initialData);
    }
  }, [initialData]);

  const addItem = (quadrant: string) => {
    const item = newItem[quadrant]?.trim();
    if (item) {
      setData(prev => {
        const currentQuadrant = prev[quadrant as keyof EmpathyMapData];
        if (Array.isArray(currentQuadrant)) {
          return {
            ...prev,
            [quadrant]: [...(currentQuadrant as string[]), item]
          };
        }
        return prev;
      });
      setNewItem(prev => ({ ...prev, [quadrant]: '' }));
    }
  };

  const removeItem = (quadrant: string, index: number) => {
    setData(prev => ({
      ...prev,
      [quadrant]: (prev[quadrant as keyof EmpathyMapData] as string[]).filter((_, i) => i !== index)
    }));
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onSave(data);
    } catch (error) {
      console.error('Error saving empathy map:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleExport = () => {
    if (onExport) {
      onExport(data);
    }
  };

  const getTotalItems = () => {
    return Object.values(data).reduce((total, items) => {
      return total + (Array.isArray(items) ? items.length : 0);
    }, 0);
  };

  const getQuadrantItems = (quadrant: string) => {
    return data[quadrant as keyof EmpathyMapData] as string[];
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Empathy Map Builder</h2>
          <p className="text-gray-600 mt-1">
            Understand your users deeply by mapping their thoughts, feelings, and experiences
          </p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={handleSave} 
            disabled={isSaving}
            className="flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            {isSaving ? 'Saving...' : 'Save'}
          </Button>
          {onExport && (
            <Button 
              variant="outline" 
              onClick={handleExport}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}
        </div>
      </div>

      {/* User Persona Input */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="w-5 h-5" />
            User Persona
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            placeholder="Describe your target user (e.g., 'Busy working parent', 'Tech-savvy student')"
            value={data.userPersona}
            onChange={(e) => setData(prev => ({ ...prev, userPersona: e.target.value }))}
            className="w-full"
          />
        </CardContent>
      </Card>

      {/* Progress Indicator */}
      <div className="flex items-center gap-4">
        <Badge variant="outline" className="flex items-center gap-1">
          <Target className="w-3 h-3" />
          {getTotalItems()} items
        </Badge>
        <Badge variant="outline" className="flex items-center gap-1">
          <Users className="w-3 h-3" />
          {data.userPersona ? 'Persona defined' : 'No persona'}
        </Badge>
      </div>

      {/* Empathy Map Quadrants */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {quadrants.map(quadrant => {
          const Icon = quadrant.icon;
          const items = getQuadrantItems(quadrant.key);
          
          return (
            <Card key={quadrant.key} className={`${quadrant.color} ${quadrant.borderColor}`}>
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <Icon className="w-5 h-5" />
                  {quadrant.title}
                </CardTitle>
                <p className="text-sm text-gray-600">{quadrant.description}</p>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {/* Existing Items */}
                  {items.map((item, index) => (
                    <div key={index} className="flex items-center justify-between p-2 bg-white rounded border">
                      <span className="text-sm flex-1">{item}</span>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => removeItem(quadrant.key, index)}
                        className="h-6 w-6 p-0 hover:bg-red-100"
                      >
                        <X className="w-3 h-3" />
                      </Button>
                    </div>
                  ))}
                  
                  {/* Add New Item */}
                  <div className="flex gap-2">
                    <Input
                      placeholder={`Add ${quadrant.title.toLowerCase()}...`}
                      value={newItem[quadrant.key] || ''}
                      onChange={(e) => setNewItem(prev => ({ ...prev, [quadrant.key]: e.target.value }))}
                      onKeyPress={(e) => e.key === 'Enter' && addItem(quadrant.key)}
                      className="flex-1"
                    />
                    <Button
                      size="sm"
                      onClick={() => addItem(quadrant.key)}
                      className="flex items-center gap-1"
                      disabled={!newItem[quadrant.key]?.trim()}
                    >
                      <Plus className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Tips and Guidance */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <h3 className="font-semibold text-blue-900 mb-2">üí° Tips for Better Empathy Maps</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ Base your insights on real user research, not assumptions</li>
            <li>‚Ä¢ Be specific and concrete rather than generic</li>
            <li>‚Ä¢ Include both positive and negative emotions</li>
            <li>‚Ä¢ Consider the user's environment and context</li>
            <li>‚Ä¢ Focus on what the user actually does, not what you want them to do</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/empathize/UserJourneyMapBuilder.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { 
  Plus, 
  X, 
  Save, 
  Download, 
  MapPin, 
  Heart, 
  AlertTriangle, 
  Target,
  TrendingUp,
  TrendingDown,
  Minus
} from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

export interface JourneyStage {
  name: string;
  touchpoints: string[];
  userActions: string[];
  emotions: EmotionPoint[];
  painPoints: string[];
  opportunities: string[];
  empathyMapLinks: string[];
}

export interface EmotionPoint {
  timestamp: number; // Position in stage (0-100)
  emotion: 'frustrated' | 'confused' | 'satisfied' | 'delighted' | 'neutral';
  intensity: number; // 1-5
  notes: string;
}

export interface UserJourneyMapData {
  id: string;
  journeyName: string;
  stages: JourneyStage[];
  createdAt?: Date;
  updatedAt?: Date;
}

interface UserJourneyMapBuilderProps {
  projectId: string;
  initialData?: UserJourneyMapData;
  onSave: (data: UserJourneyMapData) => void;
  onExport?: (data: UserJourneyMapData) => void;
}

const emotionColors = {
  frustrated: '#ef4444',
  confused: '#f59e0b',
  neutral: '#6b7280',
  satisfied: '#10b981',
  delighted: '#8b5cf6'
};

const emotionIcons = {
  frustrated: AlertTriangle,
  confused: Minus,
  neutral: Target,
  satisfied: TrendingUp,
  delighted: Heart
};

export function UserJourneyMapBuilder({ 
  projectId, 
  initialData, 
  onSave, 
  onExport 
}: UserJourneyMapBuilderProps) {
  const [data, setData] = useState<UserJourneyMapData>(
    initialData || {
      id: '',
      journeyName: '',
      stages: []
    }
  );

  const [isSaving, setIsSaving] = useState(false);
  const [selectedStage, setSelectedStage] = useState<number | null>(null);

  useEffect(() => {
    if (initialData) {
      setData(initialData);
    }
  }, [initialData]);

  const addStage = () => {
    const newStage: JourneyStage = {
      name: '',
      touchpoints: [],
      userActions: [],
      emotions: [],
      painPoints: [],
      opportunities: [],
      empathyMapLinks: []
    };
    
    setData(prev => ({
      ...prev,
      stages: [...prev.stages, newStage]
    }));
  };

  const updateStage = (index: number, field: keyof JourneyStage, value: any) => {
    setData(prev => ({
      ...prev,
      stages: prev.stages.map((stage, i) => 
        i === index ? { ...stage, [field]: value } : stage
      )
    }));
  };

  const removeStage = (index: number) => {
    setData(prev => ({
      ...prev,
      stages: prev.stages.filter((_, i) => i !== index)
    }));
  };

  const addArrayItem = (stageIndex: number, field: keyof JourneyStage, item: string) => {
    if (item.trim()) {
      setData(prev => ({
        ...prev,
        stages: prev.stages.map((stage, i) => 
          i === stageIndex 
            ? { ...stage, [field]: [...(stage[field] as string[]), item.trim()] }
            : stage
        )
      }));
    }
  };

  const removeArrayItem = (stageIndex: number, field: keyof JourneyStage, itemIndex: number) => {
    setData(prev => ({
      ...prev,
      stages: prev.stages.map((stage, i) => 
        i === stageIndex 
          ? { 
              ...stage, 
              [field]: (stage[field] as string[]).filter((_, idx) => idx !== itemIndex)
            }
          : stage
      )
    }));
  };

  const addEmotionPoint = (stageIndex: number, emotion: EmotionPoint) => {
    setData(prev => ({
      ...prev,
      stages: prev.stages.map((stage, i) => 
        i === stageIndex 
          ? { ...stage, emotions: [...stage.emotions, emotion] }
          : stage
      )
    }));
  };

  const removeEmotionPoint = (stageIndex: number, emotionIndex: number) => {
    setData(prev => ({
      ...prev,
      stages: prev.stages.map((stage, i) => 
        i === stageIndex 
          ? { 
              ...stage, 
              emotions: stage.emotions.filter((_, idx) => idx !== emotionIndex)
            }
          : stage
      )
    }));
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onSave(data);
    } catch (error) {
      console.error('Error saving journey map:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleExport = () => {
    if (onExport) {
      onExport(data);
    }
  };

  const getEmotionChartData = () => {
    const chartData: any[] = [];
    
    data.stages.forEach((stage, stageIndex) => {
      stage.emotions.forEach(emotion => {
        chartData.push({
          stage: stage.name || `Stage ${stageIndex + 1}`,
          timestamp: emotion.timestamp,
          emotion: emotion.emotion,
          intensity: emotion.intensity,
          notes: emotion.notes
        });
      });
    });
    
    return chartData;
  };

  const getTotalItems = () => {
    return data.stages.reduce((total, stage) => {
      return total + 
        stage.touchpoints.length + 
        stage.userActions.length + 
        stage.painPoints.length + 
        stage.opportunities.length +
        stage.emotions.length;
    }, 0);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">User Journey Map Builder</h2>
          <p className="text-gray-600 mt-1">
            Map your user's experience from start to finish to identify pain points and opportunities
          </p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={handleSave} 
            disabled={isSaving}
            className="flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            {isSaving ? 'Saving...' : 'Save'}
          </Button>
          {onExport && (
            <Button 
              variant="outline" 
              onClick={handleExport}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}
        </div>
      </div>

      {/* Journey Name Input */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MapPin className="w-5 h-5" />
            Journey Name
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Input
            placeholder="Describe the user journey (e.g., 'New customer onboarding', 'Product purchase flow')"
            value={data.journeyName}
            onChange={(e) => setData(prev => ({ ...prev, journeyName: e.target.value }))}
            className="w-full"
          />
        </CardContent>
      </Card>

      {/* Progress Indicator */}
      <div className="flex items-center gap-4">
        <Badge variant="outline" className="flex items-center gap-1">
          <Target className="w-3 h-3" />
          {getTotalItems()} items
        </Badge>
        <Badge variant="outline" className="flex items-center gap-1">
          <MapPin className="w-3 h-3" />
          {data.stages.length} stages
        </Badge>
        <Badge variant="outline" className="flex items-center gap-1">
          <Heart className="w-3 h-3" />
          {data.journeyName ? 'Named' : 'Unnamed'}
        </Badge>
      </div>

      {/* Emotion Curve Visualization */}
      {data.stages.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="w-5 h-5" />
              Emotion Curve
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={getEmotionChartData()}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="stage" />
                  <YAxis domain={[1, 5]} />
                  <Tooltip 
                    formatter={(value, name) => [value, 'Intensity']}
                    labelFormatter={(label) => `Stage: ${label}`}
                  />
                  <Line 
                    type="monotone" 
                    dataKey="intensity" 
                    stroke="#8b5cf6" 
                    strokeWidth={2}
                    dot={{ fill: '#8b5cf6', strokeWidth: 2, r: 4 }}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Journey Stages */}
      <div className="space-y-4">
        {data.stages.map((stage, stageIndex) => (
          <Card key={stageIndex} className="border-2 border-gray-200">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Badge variant="outline">Stage {stageIndex + 1}</Badge>
                  <Input
                    placeholder="Stage name (e.g., 'Awareness', 'Consideration', 'Purchase')"
                    value={stage.name}
                    onChange={(e) => updateStage(stageIndex, 'name', e.target.value)}
                    className="font-semibold"
                  />
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => removeStage(stageIndex)}
                  className="text-red-600 hover:text-red-700"
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Touchpoints */}
              <div>
                <h4 className="font-medium mb-2">Touchpoints</h4>
                <div className="space-y-2">
                  {stage.touchpoints.map((touchpoint, idx) => (
                    <div key={idx} className="flex items-center gap-2">
                      <span className="text-sm bg-blue-100 px-2 py-1 rounded">{touchpoint}</span>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => removeArrayItem(stageIndex, 'touchpoints', idx)}
                        className="h-6 w-6 p-0"
                      >
                        <X className="w-3 h-3" />
                      </Button>
                    </div>
                  ))}
                  <div className="flex gap-2">
                    <Input
                      placeholder="Add touchpoint..."
                      onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                          addArrayItem(stageIndex, 'touchpoints', e.currentTarget.value);
                          e.currentTarget.value = '';
                        }
                      }}
                    />
                    <Button
                      size="sm"
                      onClick={(e) => {
                        const input = e.currentTarget.previousElementSibling as HTMLInputElement;
                        addArrayItem(stageIndex, 'touchpoints', input.value);
                        input.value = '';
                      }}
                    >
                      <Plus className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
              </div>

              {/* User Actions */}
              <div>
                <h4 className="font-medium mb-2">User Actions</h4>
                <div className="space-y-2">
                  {stage.userActions.map((action, idx) => (
                    <div key={idx} className="flex items-center gap-2">
                      <span className="text-sm bg-green-100 px-2 py-1 rounded">{action}</span>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => removeArrayItem(stageIndex, 'userActions', idx)}
                        className="h-6 w-6 p-0"
                      >
                        <X className="w-3 h-3" />
                      </Button>
                    </div>
                  ))}
                  <div className="flex gap-2">
                    <Input
                      placeholder="Add user action..."
                      onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                          addArrayItem(stageIndex, 'userActions', e.currentTarget.value);
                          e.currentTarget.value = '';
                        }
                      }}
                    />
                    <Button
                      size="sm"
                      onClick={(e) => {
                        const input = e.currentTarget.previousElementSibling as HTMLInputElement;
                        addArrayItem(stageIndex, 'userActions', input.value);
                        input.value = '';
                      }}
                    >
                      <Plus className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
              </div>

              {/* Emotions */}
              <div>
                <h4 className="font-medium mb-2">Emotions</h4>
                <div className="space-y-2">
                  {stage.emotions.map((emotion, idx) => {
                    const Icon = emotionIcons[emotion.emotion];
                    return (
                      <div key={idx} className="flex items-center gap-2 p-2 bg-gray-50 rounded">
                        <Icon className="w-4 h-4" style={{ color: emotionColors[emotion.emotion] }} />
                        <span className="text-sm font-medium">{emotion.emotion}</span>
                        <span className="text-sm text-gray-600">Intensity: {emotion.intensity}/5</span>
                        <span className="text-sm text-gray-500">{emotion.notes}</span>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => removeEmotionPoint(stageIndex, idx)}
                          className="h-6 w-6 p-0 ml-auto"
                        >
                          <X className="w-3 h-3" />
                        </Button>
                      </div>
                    );
                  })}
                  <div className="flex gap-2">
                    <select 
                      className="px-3 py-2 border rounded"
                      onChange={(e) => {
                        const emotion = e.target.value as EmotionPoint['emotion'];
                        if (emotion) {
                          addEmotionPoint(stageIndex, {
                            timestamp: 50,
                            emotion,
                            intensity: 3,
                            notes: ''
                          });
                        }
                      }}
                    >
                      <option value="">Select emotion...</option>
                      <option value="frustrated">Frustrated</option>
                      <option value="confused">Confused</option>
                      <option value="neutral">Neutral</option>
                      <option value="satisfied">Satisfied</option>
                      <option value="delighted">Delighted</option>
                    </select>
                    <Button
                      size="sm"
                      onClick={() => {
                        const select = document.querySelector('select') as HTMLSelectElement;
                        const emotion = select.value as EmotionPoint['emotion'];
                        if (emotion) {
                          addEmotionPoint(stageIndex, {
                            timestamp: 50,
                            emotion,
                            intensity: 3,
                            notes: ''
                          });
                        }
                      }}
                    >
                      <Plus className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
              </div>

              {/* Pain Points */}
              <div>
                <h4 className="font-medium mb-2">Pain Points</h4>
                <div className="space-y-2">
                  {stage.painPoints.map((pain, idx) => (
                    <div key={idx} className="flex items-center gap-2">
                      <span className="text-sm bg-red-100 px-2 py-1 rounded">{pain}</span>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => removeArrayItem(stageIndex, 'painPoints', idx)}
                        className="h-6 w-6 p-0"
                      >
                        <X className="w-3 h-3" />
                      </Button>
                    </div>
                  ))}
                  <div className="flex gap-2">
                    <Input
                      placeholder="Add pain point..."
                      onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                          addArrayItem(stageIndex, 'painPoints', e.currentTarget.value);
                          e.currentTarget.value = '';
                        }
                      }}
                    />
                    <Button
                      size="sm"
                      onClick={(e) => {
                        const input = e.currentTarget.previousElementSibling as HTMLInputElement;
                        addArrayItem(stageIndex, 'painPoints', input.value);
                        input.value = '';
                      }}
                    >
                      <Plus className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
              </div>

              {/* Opportunities */}
              <div>
                <h4 className="font-medium mb-2">Opportunities</h4>
                <div className="space-y-2">
                  {stage.opportunities.map((opportunity, idx) => (
                    <div key={idx} className="flex items-center gap-2">
                      <span className="text-sm bg-emerald-100 px-2 py-1 rounded">{opportunity}</span>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => removeArrayItem(stageIndex, 'opportunities', idx)}
                        className="h-6 w-6 p-0"
                      >
                        <X className="w-3 h-3" />
                      </Button>
                    </div>
                  ))}
                  <div className="flex gap-2">
                    <Input
                      placeholder="Add opportunity..."
                      onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                          addArrayItem(stageIndex, 'opportunities', e.currentTarget.value);
                          e.currentTarget.value = '';
                        }
                      }}
                    />
                    <Button
                      size="sm"
                      onClick={(e) => {
                        const input = e.currentTarget.previousElementSibling as HTMLInputElement;
                        addArrayItem(stageIndex, 'opportunities', input.value);
                        input.value = '';
                      }}
                    >
                      <Plus className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Add Stage Button */}
      <Button onClick={addStage} className="w-full" variant="outline">
        <Plus className="w-4 h-4 mr-2" />
        Add Journey Stage
      </Button>

      {/* Tips and Guidance */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <h3 className="font-semibold text-blue-900 mb-2">üí° Tips for Better Journey Maps</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ Start with the user's perspective, not your product</li>
            <li>‚Ä¢ Include both digital and physical touchpoints</li>
            <li>‚Ä¢ Focus on emotions and feelings, not just actions</li>
            <li>‚Ä¢ Identify the most critical pain points for improvement</li>
            <li>‚Ä¢ Look for opportunities to delight users</li>
            <li>‚Ä¢ Base insights on real user research, not assumptions</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/enhanced/EmpathyMapBuilder.tsx ===

import React from 'react';

interface EmpathyMapBuilderProps {
  workflowId: string;
}

export function EmpathyMapBuilder({ workflowId }: EmpathyMapBuilderProps) {
  return (
    <div className="p-4">
      <h3>Empathy Map Builder</h3>
      <p>Component coming soon... Workflow ID: {workflowId}</p>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/enhanced/IdeationCanvas.tsx ===

import React from 'react';

interface IdeationCanvasProps {
  workflowId: string;
}

export function IdeationCanvas({ workflowId }: IdeationCanvasProps) {
  return (
    <div className="p-4">
      <h3>Ideation Canvas</h3>
      <p>Component coming soon... Workflow ID: {workflowId}</p>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/enhanced/AIFacilitationPanel.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Brain, 
  Sparkles, 
  AlertTriangle, 
  CheckCircle, 
  Lightbulb, 
  TrendingUp,
  Clock,
  Users,
  Target,
  Zap,
  MessageSquare,
  ThumbsUp,
  ThumbsDown,
  MoreHorizontal
} from 'lucide-react';

interface AIInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'celebration' | 'recommendation';
  content: string;
  confidence: number;
  actionable: boolean;
  timestamp: Date;
  category?: string;
  priority?: 'high' | 'medium' | 'low';
  relatedPhase?: string;
  participants?: string[];
}

interface AIFacilitationPanelProps {
  insights: AIInsight[];
  onInsightAction: (insightId: string, action: string) => void;
  className?: string;
}

export function AIFacilitationPanel({ 
  insights, 
  onInsightAction, 
  className 
}: AIFacilitationPanelProps) {
  const [filteredInsights, setFilteredInsights] = useState<AIInsight[]>([]);
  const [filter, setFilter] = useState<'all' | 'suggestion' | 'warning' | 'celebration' | 'recommendation'>('all');
  const [sortBy, setSortBy] = useState<'timestamp' | 'confidence' | 'priority'>('timestamp');
  const [isExpanded, setIsExpanded] = useState(true);

  useEffect(() => {
    let filtered = insights;

    // Apply type filter
    if (filter !== 'all') {
      filtered = filtered.filter(insight => insight.type === filter);
    }

    // Apply sorting
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'timestamp':
          return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
        case 'confidence':
          return b.confidence - a.confidence;
        case 'priority':
          const priorityOrder = { high: 3, medium: 2, low: 1 };
          return (priorityOrder[b.priority || 'low'] || 0) - (priorityOrder[a.priority || 'low'] || 0);
        default:
          return 0;
      }
    });

    setFilteredInsights(filtered);
  }, [insights, filter, sortBy]);

  const getInsightIcon = (type: string) => {
    switch (type) {
      case 'suggestion':
        return <Lightbulb className="w-4 h-4" />;
      case 'warning':
        return <AlertTriangle className="w-4 h-4" />;
      case 'celebration':
        return <CheckCircle className="w-4 h-4" />;
      case 'recommendation':
        return <TrendingUp className="w-4 h-4" />;
      default:
        return <Brain className="w-4 h-4" />;
    }
  };

  const getInsightColor = (type: string) => {
    switch (type) {
      case 'suggestion':
        return 'bg-blue-50 border-blue-200 text-blue-800';
      case 'warning':
        return 'bg-yellow-50 border-yellow-200 text-yellow-800';
      case 'celebration':
        return 'bg-green-50 border-green-200 text-green-800';
      case 'recommendation':
        return 'bg-purple-50 border-purple-200 text-purple-800';
      default:
        return 'bg-gray-50 border-gray-200 text-gray-800';
    }
  };

  const getPriorityColor = (priority?: string) => {
    switch (priority) {
      case 'high':
        return 'bg-red-100 text-red-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      case 'low':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const handleInsightAction = (insightId: string, action: string) => {
    onInsightAction(insightId, action);
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 0.8) return 'text-green-600';
    if (confidence >= 0.6) return 'text-yellow-600';
    return 'text-red-600';
  };

  const formatTimestamp = (timestamp: Date) => {
    const now = new Date();
    const diff = now.getTime() - new Date(timestamp).getTime();
    const minutes = Math.floor(diff / 60000);
    
    if (minutes < 1) return 'Just now';
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    const days = Math.floor(hours / 24);
    return `${days}d ago`;
  };

  const getInsightStats = () => {
    const total = insights.length;
    const suggestions = insights.filter(i => i.type === 'suggestion').length;
    const warnings = insights.filter(i => i.type === 'warning').length;
    const celebrations = insights.filter(i => i.type === 'celebration').length;
    const recommendations = insights.filter(i => i.type === 'recommendation').length;

    return { total, suggestions, warnings, celebrations, recommendations };
  };

  const stats = getInsightStats();

  return (
    <Card className={className}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-lg">
            <Brain className="w-5 h-5" />
            AI Facilitation
          </CardTitle>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsExpanded(!isExpanded)}
            className="h-8 w-8 p-0"
          >
            {isExpanded ? '‚àí' : '+'}
          </Button>
        </div>
        
        {isExpanded && (
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <span>{stats.total} insights</span>
            <span>‚Ä¢</span>
            <span className="text-blue-600">{stats.suggestions} suggestions</span>
            <span>‚Ä¢</span>
            <span className="text-yellow-600">{stats.warnings} warnings</span>
            <span>‚Ä¢</span>
            <span className="text-green-600">{stats.celebrations} celebrations</span>
          </div>
        )}
      </CardHeader>

      {isExpanded && (
        <CardContent className="space-y-4">
          {/* Filters and Controls */}
          <div className="flex items-center gap-2">
            <select
              value={filter}
              onChange={(e) => setFilter(e.target.value as any)}
              className="text-sm border rounded px-2 py-1"
            >
              <option value="all">All Types</option>
              <option value="suggestion">Suggestions</option>
              <option value="warning">Warnings</option>
              <option value="celebration">Celebrations</option>
              <option value="recommendation">Recommendations</option>
            </select>
            
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value as any)}
              className="text-sm border rounded px-2 py-1"
            >
              <option value="timestamp">Recent</option>
              <option value="confidence">Confidence</option>
              <option value="priority">Priority</option>
            </select>
          </div>

          {/* Insights List */}
          <ScrollArea className="h-96">
            <div className="space-y-3">
              {filteredInsights.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <Brain className="w-8 h-8 mx-auto mb-2 opacity-50" />
                  <p>No insights available</p>
                </div>
              ) : (
                filteredInsights.map((insight) => (
                  <div
                    key={insight.id}
                    className={`p-3 rounded-lg border ${getInsightColor(insight.type)}`}
                  >
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex items-center gap-2">
                        {getInsightIcon(insight.type)}
                        <span className="text-sm font-medium capitalize">
                          {insight.type}
                        </span>
                        {insight.priority && (
                          <Badge 
                            variant="secondary" 
                            className={`text-xs ${getPriorityColor(insight.priority)}`}
                          >
                            {insight.priority}
                          </Badge>
                        )}
                      </div>
                      <div className="flex items-center gap-1">
                        <span className={`text-xs ${getConfidenceColor(insight.confidence)}`}>
                          {Math.round(insight.confidence * 100)}%
                        </span>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0"
                          onClick={() => handleInsightAction(insight.id, 'more')}
                        >
                          <MoreHorizontal className="w-3 h-3" />
                        </Button>
                      </div>
                    </div>

                    <p className="text-sm mb-2">{insight.content}</p>

                    <div className="flex items-center justify-between text-xs text-gray-600">
                      <div className="flex items-center gap-2">
                        <Clock className="w-3 h-3" />
                        <span>{formatTimestamp(insight.timestamp)}</span>
                        {insight.relatedPhase && (
                          <>
                            <span>‚Ä¢</span>
                            <span className="capitalize">{insight.relatedPhase}</span>
                          </>
                        )}
                      </div>
                      
                      {insight.actionable && (
                        <div className="flex items-center gap-1">
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-6 w-6 p-0"
                            onClick={() => handleInsightAction(insight.id, 'apply')}
                          >
                            <ThumbsUp className="w-3 h-3" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-6 w-6 p-0"
                            onClick={() => handleInsightAction(insight.id, 'dismiss')}
                          >
                            <ThumbsDown className="w-3 h-3" />
                          </Button>
                        </div>
                      )}
                    </div>

                    {insight.participants && insight.participants.length > 0 && (
                      <div className="mt-2 flex items-center gap-1">
                        <Users className="w-3 h-3" />
                        <span className="text-xs">
                          {insight.participants.length} participant{insight.participants.length !== 1 ? 's' : ''}
                        </span>
                      </div>
                    )}
                  </div>
                ))
              )}
            </div>
          </ScrollArea>

          {/* Quick Actions */}
          <div className="pt-3 border-t">
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleInsightAction('all', 'refresh')}
                className="flex items-center gap-1"
              >
                <Sparkles className="w-3 h-3" />
                Refresh
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleInsightAction('all', 'clear')}
                className="flex items-center gap-1"
              >
                <MessageSquare className="w-3 h-3" />
                Clear All
              </Button>
            </div>
          </div>
        </CardContent>
      )}
    </Card>
  );
}


=== FILE: client/src/components/design-thinking/enhanced/POVStatementBuilder.tsx ===

import React from 'react';

interface POVStatementBuilderProps {
  workflowId: string;
}

export function POVStatementBuilder({ workflowId }: POVStatementBuilderProps) {
  return (
    <div className="p-4">
      <h3>POV Statement Builder</h3>
      <p>Component coming soon... Workflow ID: {workflowId}</p>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/enhanced/CollaborationPanel.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Users, 
  UserPlus, 
  UserMinus, 
  Activity, 
  Clock, 
  MessageSquare,
  Video,
  Phone,
  MoreHorizontal,
  Wifi,
  WifiOff,
  Pause,
  Play,
  Square
} from 'lucide-react';

interface Participant {
  id: string;
  name: string;
  role: string;
  avatar?: string;
  isOnline: boolean;
  lastActive: Date;
  status?: 'active' | 'idle' | 'away';
  currentActivity?: string;
}

interface CollaborationUpdate {
  id: string;
  type: 'participant_joined' | 'participant_left' | 'activity_completed' | 'deliverable_created' | 'phase_transition' | 'insight_generated';
  participant: string;
  content: string;
  timestamp: Date;
  metadata?: any;
}

interface CollaborationPanelProps {
  participants: Participant[];
  updates: CollaborationUpdate[];
  onParticipantAction: (participantId: string, action: string) => void;
  className?: string;
}

export function CollaborationPanel({ 
  participants, 
  updates, 
  onParticipantAction, 
  className 
}: CollaborationPanelProps) {
  const [isExpanded, setIsExpanded] = useState(true);
  const [showUpdates, setShowUpdates] = useState(true);
  const [filter, setFilter] = useState<'all' | 'online' | 'offline'>('all');

  const filteredParticipants = participants.filter(participant => {
    if (filter === 'online') return participant.isOnline;
    if (filter === 'offline') return !participant.isOnline;
    return true;
  });

  const onlineCount = participants.filter(p => p.isOnline).length;
  const totalCount = participants.length;

  const getStatusColor = (status?: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-500';
      case 'idle':
        return 'bg-yellow-500';
      case 'away':
        return 'bg-gray-500';
      default:
        return 'bg-gray-400';
    }
  };

  const getUpdateIcon = (type: string) => {
    switch (type) {
      case 'participant_joined':
        return <UserPlus className="w-4 h-4 text-green-600" />;
      case 'participant_left':
        return <UserMinus className="w-4 h-4 text-red-600" />;
      case 'activity_completed':
        return <Activity className="w-4 h-4 text-blue-600" />;
      case 'deliverable_created':
        return <MessageSquare className="w-4 h-4 text-purple-600" />;
      case 'phase_transition':
        return <Play className="w-4 h-4 text-orange-600" />;
      case 'insight_generated':
        return <Activity className="w-4 h-4 text-indigo-600" />;
      default:
        return <Activity className="w-4 h-4 text-gray-600" />;
    }
  };

  const formatTimestamp = (timestamp: Date) => {
    const now = new Date();
    const diff = now.getTime() - new Date(timestamp).getTime();
    const minutes = Math.floor(diff / 60000);
    
    if (minutes < 1) return 'Just now';
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    const days = Math.floor(hours / 24);
    return `${days}d ago`;
  };

  const getParticipantInitials = (name: string) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase();
  };

  const handleParticipantAction = (participantId: string, action: string) => {
    onParticipantAction(participantId, action);
  };

  const handleUpdateAction = (updateId: string, action: string) => {
    // Handle update actions
    console.log('Update action:', updateId, action);
  };

  return (
    <Card className={className}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-lg">
            <Users className="w-5 h-5" />
            Collaboration
          </CardTitle>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsExpanded(!isExpanded)}
            className="h-8 w-8 p-0"
          >
            {isExpanded ? '‚àí' : '+'}
          </Button>
        </div>
        
        {isExpanded && (
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <span>{onlineCount}/{totalCount} online</span>
            <span>‚Ä¢</span>
            <span>{updates.length} updates</span>
          </div>
        )}
      </CardHeader>

      {isExpanded && (
        <CardContent className="space-y-4">
          {/* Participants */}
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium">Participants</h3>
              <div className="flex items-center gap-1">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setFilter(filter === 'all' ? 'online' : 'all')}
                  className="h-6 px-2 text-xs"
                >
                  {filter === 'all' ? 'All' : 'Online'}
                </Button>
              </div>
            </div>

            <ScrollArea className="h-32">
              <div className="space-y-2">
                {filteredParticipants.map((participant) => (
                  <div
                    key={participant.id}
                    className="flex items-center gap-3 p-2 rounded-lg hover:bg-gray-50"
                  >
                    <div className="relative">
                      <Avatar className="h-8 w-8">
                        <AvatarImage src={participant.avatar} />
                        <AvatarFallback className="text-xs">
                          {getParticipantInitials(participant.name)}
                        </AvatarFallback>
                      </Avatar>
                      {participant.isOnline && (
                        <div className="absolute -bottom-0.5 -right-0.5">
                          <div className={`w-3 h-3 rounded-full border-2 border-white ${getStatusColor(participant.status)}`} />
                        </div>
                      )}
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-medium truncate">
                          {participant.name}
                        </span>
                        <Badge variant="secondary" className="text-xs">
                          {participant.role}
                        </Badge>
                      </div>
                      {participant.currentActivity && (
                        <p className="text-xs text-gray-500 truncate">
                          {participant.currentActivity}
                        </p>
                      )}
                    </div>

                    <div className="flex items-center gap-1">
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-6 w-6 p-0"
                        onClick={() => handleParticipantAction(participant.id, 'message')}
                      >
                        <MessageSquare className="w-3 h-3" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-6 w-6 p-0"
                        onClick={() => handleParticipantAction(participant.id, 'call')}
                      >
                        <Phone className="w-3 h-3" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-6 w-6 p-0"
                        onClick={() => handleParticipantAction(participant.id, 'video')}
                      >
                        <Video className="w-3 h-3" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </ScrollArea>
          </div>

          {/* Recent Updates */}
          {showUpdates && (
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-medium">Recent Activity</h3>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowUpdates(!showUpdates)}
                  className="h-6 px-2 text-xs"
                >
                  {showUpdates ? 'Hide' : 'Show'}
                </Button>
              </div>

              <ScrollArea className="h-40">
                <div className="space-y-2">
                  {updates.length === 0 ? (
                    <div className="text-center py-4 text-gray-500">
                      <Activity className="w-6 h-6 mx-auto mb-2 opacity-50" />
                      <p className="text-sm">No recent activity</p>
                    </div>
                  ) : (
                    updates.slice(0, 10).map((update) => (
                      <div
                        key={update.id}
                        className="flex items-start gap-3 p-2 rounded-lg hover:bg-gray-50"
                      >
                        <div className="flex-shrink-0 mt-0.5">
                          {getUpdateIcon(update.type)}
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2">
                            <span className="text-sm font-medium">
                              {update.participant}
                            </span>
                            <span className="text-xs text-gray-500">
                              {formatTimestamp(update.timestamp)}
                            </span>
                          </div>
                          <p className="text-sm text-gray-700 mt-1">
                            {update.content}
                          </p>
                        </div>

                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0"
                          onClick={() => handleUpdateAction(update.id, 'more')}
                        >
                          <MoreHorizontal className="w-3 h-3" />
                        </Button>
                      </div>
                    ))
                  )}
                </div>
              </ScrollArea>
            </div>
          )}

          {/* Quick Actions */}
          <div className="pt-3 border-t">
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleParticipantAction('all', 'invite')}
                className="flex items-center gap-1"
              >
                <UserPlus className="w-3 h-3" />
                Invite
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleParticipantAction('all', 'meeting')}
                className="flex items-center gap-1"
              >
                <Video className="w-3 h-3" />
                Meeting
              </Button>
            </div>
          </div>
        </CardContent>
      )}
    </Card>
  );
}


=== FILE: client/src/components/design-thinking/enhanced/DTAnalyticsDashboard.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  BarChart3, 
  TrendingUp, 
  Users, 
  Clock, 
  Target, 
  Zap,
  Brain,
  Activity,
  Download,
  RefreshCw,
  Eye,
  Lightbulb,
  CheckCircle,
  AlertTriangle
} from 'lucide-react';

interface DTAnalytics {
  workflowId: string;
  effectivenessScore: {
    overall: number;
    dimensions: {
      userCentricity: number;
      ideaDiversity: number;
      iterationSpeed: number;
      teamCollaboration: number;
      outcomeQuality: number;
      processAdherence: number;
    };
  };
  participantMetrics: {
    totalParticipants: number;
    averageParticipationRate: number;
    averageContributionQuality: number;
    averageEngagementScore: number;
  };
  phaseMetrics: {
    phases: Array<{
      phase: string;
      duration: number;
      activities: number;
      participants: number;
      quality: number;
      progress: number;
    }>;
    overallProgress: number;
  };
  collaborationMetrics: {
    totalSessions: number;
    averageSessionDuration: number;
    collaborationQuality: number;
    realTimeUsage: number;
  };
  outcomeMetrics: {
    totalOutcomes: number;
    prototypeSuccessRate: number;
    testEffectiveness: number;
    businessImpact: {
      revenue: number;
      costReduction: number;
      customerSatisfaction: number;
    };
  };
  insights: Array<{
    id: string;
    content: string;
    importance: number;
    confidence: number;
    type: string;
  }>;
  recommendations: Array<{
    id: string;
    content: string;
    priority: 'high' | 'medium' | 'low';
    category: string;
  }>;
}

interface DTAnalyticsDashboardProps {
  workflowId: string;
  className?: string;
}

export function DTAnalyticsDashboard({ workflowId, className }: DTAnalyticsDashboardProps) {
  const [analytics, setAnalytics] = useState<DTAnalytics | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isExpanded, setIsExpanded] = useState(true);
  const [selectedMetric, setSelectedMetric] = useState<string>('overview');

  useEffect(() => {
    loadAnalytics();
  }, [workflowId]);

  const loadAnalytics = async () => {
    try {
      setIsLoading(true);
      const response = await fetch(`/api/dt/workflows/${workflowId}/analytics`);
      if (!response.ok) throw new Error('Failed to load analytics');
      
      const data = await response.json();
      setAnalytics(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load analytics');
    } finally {
      setIsLoading(false);
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 0.8) return 'text-green-600';
    if (score >= 0.6) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBgColor = (score: number) => {
    if (score >= 0.8) return 'bg-green-100';
    if (score >= 0.6) return 'bg-yellow-100';
    return 'bg-red-100';
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'bg-red-100 text-red-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      case 'low':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const formatDuration = (minutes: number) => {
    if (minutes < 60) return `${minutes}m`;
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;
  };

  const formatPercentage = (value: number) => {
    return `${Math.round(value * 100)}%`;
  };

  if (isLoading) {
    return (
      <Card className={className}>
        <CardContent className="flex items-center justify-center h-32">
          <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className={className}>
        <CardContent className="flex items-center justify-center h-32">
          <div className="text-center">
            <AlertTriangle className="h-6 w-6 text-red-500 mx-auto mb-2" />
            <p className="text-sm text-red-600">{error}</p>
            <Button onClick={loadAnalytics} size="sm" className="mt-2">
              Retry
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!analytics) {
    return (
      <Card className={className}>
        <CardContent className="flex items-center justify-center h-32">
          <p className="text-gray-500">No analytics data available</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={className}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-lg">
            <BarChart3 className="w-5 h-5" />
            Analytics
          </CardTitle>
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={loadAnalytics}
              className="h-8 w-8 p-0"
            >
              <RefreshCw className="w-4 h-4" />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsExpanded(!isExpanded)}
              className="h-8 w-8 p-0"
            >
              {isExpanded ? '‚àí' : '+'}
            </Button>
          </div>
        </div>
      </CardHeader>

      {isExpanded && (
        <CardContent className="space-y-4">
          {/* Overview Metrics */}
          <div className="grid grid-cols-2 gap-3">
            <div className="text-center p-3 bg-blue-50 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">
                {formatPercentage(analytics.effectivenessScore.overall)}
              </div>
              <div className="text-xs text-blue-800">Effectiveness</div>
            </div>
            <div className="text-center p-3 bg-green-50 rounded-lg">
              <div className="text-2xl font-bold text-green-600">
                {analytics.participantMetrics.totalParticipants}
              </div>
              <div className="text-xs text-green-800">Participants</div>
            </div>
          </div>

          {/* Effectiveness Dimensions */}
          <div className="space-y-2">
            <h3 className="text-sm font-medium">Effectiveness Dimensions</h3>
            <div className="space-y-2">
              {Object.entries(analytics.effectivenessScore.dimensions).map(([key, value]) => (
                <div key={key} className="flex items-center justify-between">
                  <span className="text-xs capitalize">
                    {key.replace(/([A-Z])/g, ' $1').trim()}
                  </span>
                  <div className="flex items-center gap-2">
                    <Progress value={value * 100} className="w-16 h-2" />
                    <span className={`text-xs font-medium ${getScoreColor(value)}`}>
                      {formatPercentage(value)}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Phase Progress */}
          <div className="space-y-2">
            <h3 className="text-sm font-medium">Phase Progress</h3>
            <div className="space-y-2">
              {analytics.phaseMetrics.phases.map((phase) => (
                <div key={phase.phase} className="flex items-center justify-between">
                  <span className="text-xs capitalize">{phase.phase}</span>
                  <div className="flex items-center gap-2">
                    <Progress value={phase.progress * 100} className="w-16 h-2" />
                    <span className="text-xs text-gray-600">
                      {formatPercentage(phase.progress)}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Key Insights */}
          {analytics.insights.length > 0 && (
            <div className="space-y-2">
              <h3 className="text-sm font-medium">Key Insights</h3>
              <div className="space-y-2">
                {analytics.insights.slice(0, 3).map((insight) => (
                  <div
                    key={insight.id}
                    className="p-2 bg-gray-50 rounded-lg"
                  >
                    <div className="flex items-center gap-2 mb-1">
                      <Brain className="w-3 h-3 text-blue-600" />
                      <span className="text-xs font-medium">
                        {insight.type}
                      </span>
                      <Badge
                        variant="secondary"
                        className={`text-xs ${getScoreBgColor(insight.confidence)}`}
                      >
                        {formatPercentage(insight.confidence)}
                      </Badge>
                    </div>
                    <p className="text-xs text-gray-700">{insight.content}</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Recommendations */}
          {analytics.recommendations.length > 0 && (
            <div className="space-y-2">
              <h3 className="text-sm font-medium">Recommendations</h3>
              <div className="space-y-2">
                {analytics.recommendations.slice(0, 2).map((recommendation) => (
                  <div
                    key={recommendation.id}
                    className="p-2 bg-yellow-50 rounded-lg"
                  >
                    <div className="flex items-center gap-2 mb-1">
                      <Lightbulb className="w-3 h-3 text-yellow-600" />
                      <span className="text-xs font-medium">
                        {recommendation.category}
                      </span>
                      <Badge
                        variant="secondary"
                        className={`text-xs ${getPriorityColor(recommendation.priority)}`}
                      >
                        {recommendation.priority}
                      </Badge>
                    </div>
                    <p className="text-xs text-gray-700">{recommendation.content}</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Quick Actions */}
          <div className="pt-3 border-t">
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {/* Export analytics */}}
                className="flex items-center gap-1"
              >
                <Download className="w-3 h-3" />
                Export
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => {/* View detailed analytics */}}
                className="flex items-center gap-1"
              >
                <Eye className="w-3 h-3" />
                Details
              </Button>
            </div>
          </div>
        </CardContent>
      )}
    </Card>
  );
}


=== FILE: client/src/components/design-thinking/enhanced/DTWorkflowOrchestrator.tsx ===

import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Play, 
  Pause, 
  Square, 
  Users, 
  Lightbulb, 
  Target, 
  Zap, 
  BarChart3,
  Brain,
  Sparkles,
  Clock,
  CheckCircle,
  AlertCircle,
  TrendingUp
} from 'lucide-react';

import { EmpathyMapBuilder } from './EmpathyMapBuilder';
import { POVStatementBuilder } from './POVStatementBuilder';
import { IdeationCanvas } from './IdeationCanvas';
import { PrototypePlanner } from './PrototypePlanner';
import { TestSessionManager } from './TestSessionManager';
import { DTAnalyticsDashboard } from './DTAnalyticsDashboard';
import { AIFacilitationPanel } from './AIFacilitationPanel';
import { CollaborationPanel } from './CollaborationPanel';

interface DTWorkflow {
  id: string;
  name: string;
  description: string;
  currentPhase: DTPhase;
  status: 'active' | 'paused' | 'completed';
  participants: Participant[];
  aiFacilitationEnabled: boolean;
  collaborationMode: 'real-time' | 'async' | 'hybrid';
  createdAt: Date;
  updatedAt: Date;
}

interface Participant {
  id: string;
  name: string;
  role: string;
  avatar?: string;
  isOnline: boolean;
  lastActive: Date;
}

interface DTPhase {
  id: string;
  name: string;
  description: string;
  icon: React.ComponentType;
  color: string;
  progress: number;
  status: 'not_started' | 'in_progress' | 'completed';
  activities: Activity[];
  deliverables: Deliverable[];
}

interface Activity {
  id: string;
  name: string;
  description: string;
  type: string;
  duration: number;
  completed: boolean;
  participants: string[];
}

interface Deliverable {
  id: string;
  name: string;
  description: string;
  type: string;
  status: 'draft' | 'review' | 'approved';
  createdBy: string;
  createdAt: Date;
}

interface AIInsight {
  id: string;
  type: 'suggestion' | 'warning' | 'celebration' | 'recommendation';
  content: string;
  confidence: number;
  actionable: boolean;
  timestamp: Date;
}

interface CollaborationUpdate {
  id: string;
  type: 'participant_joined' | 'participant_left' | 'activity_completed' | 'deliverable_created';
  participant: string;
  content: string;
  timestamp: Date;
}

interface DTWorkflowOrchestratorProps {
  workflowId: string;
  onWorkflowUpdate?: (workflow: DTWorkflow) => void;
  onPhaseTransition?: (from: string, to: string) => void;
}

export function DTWorkflowOrchestrator({ 
  workflowId, 
  onWorkflowUpdate, 
  onPhaseTransition 
}: DTWorkflowOrchestratorProps) {
  const [workflow, setWorkflow] = useState<DTWorkflow | null>(null);
  const [currentPhase, setCurrentPhase] = useState<DTPhase | null>(null);
  const [aiInsights, setAiInsights] = useState<AIInsight[]>([]);
  const [collaborationUpdates, setCollaborationUpdates] = useState<CollaborationUpdate[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Load workflow data
  useEffect(() => {
    loadWorkflow();
  }, [workflowId]);

  // Setup real-time collaboration
  useEffect(() => {
    if (workflow) {
      setupRealTimeCollaboration();
    }
  }, [workflow]);

  // AI insights polling
  useEffect(() => {
    if (workflow?.aiFacilitationEnabled) {
      const interval = setInterval(fetchAIInsights, 30000); // Every 30 seconds
      return () => clearInterval(interval);
    }
  }, [workflow]);

  const loadWorkflow = async () => {
    try {
      setIsLoading(true);
      const response = await fetch(`/api/dt/workflows/${workflowId}`);
      if (!response.ok) throw new Error('Failed to load workflow');
      
      const data = await response.json();
      setWorkflow(data);
      setCurrentPhase(getPhaseData(data.currentPhase));
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load workflow');
    } finally {
      setIsLoading(false);
    }
  };

  const setupRealTimeCollaboration = () => {
    // WebSocket connection for real-time updates
    const ws = new WebSocket(`ws://localhost:3001/dt/workflows/${workflowId}`);
    
    ws.onmessage = (event) => {
      const update = JSON.parse(event.data);
      handleCollaborationUpdate(update);
    };

    return () => ws.close();
  };

  const handleCollaborationUpdate = (update: CollaborationUpdate) => {
    setCollaborationUpdates(prev => [update, ...prev.slice(0, 9)]); // Keep last 10 updates
  };

  const fetchAIInsights = async () => {
    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}/ai-insights`);
      if (response.ok) {
        const insights = await response.json();
        setAiInsights(insights);
      }
    } catch (error) {
      console.error('Error fetching AI insights:', error);
    }
  };

  const transitionToPhase = async (phaseId: string) => {
    try {
      const response = await fetch(`/api/dt/workflows/${workflowId}/phase`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phase: phaseId })
      });

      if (response.ok) {
        const updatedWorkflow = await response.json();
        setWorkflow(updatedWorkflow);
        setCurrentPhase(getPhaseData(String(phaseId)));
        onWorkflowUpdate?.(updatedWorkflow);
        onPhaseTransition?.(workflow?.currentPhase || '', String(phaseId));
      }
    } catch (error) {
      console.error('Error transitioning phase:', error);
    }
  };

  const getPhaseData = (phaseId: string): DTPhase => {
    const phases: Record<string, DTPhase> = {
      empathize: {
        id: 'empathize',
        name: 'Empathize',
        description: 'Understand your users deeply',
        icon: Users,
        color: 'bg-blue-500',
        progress: 0,
        status: 'not_started',
        activities: [],
        deliverables: []
      },
      define: {
        id: 'define',
        name: 'Define',
        description: 'Frame the right problem',
        icon: Target,
        color: 'bg-green-500',
        progress: 0,
        status: 'not_started',
        activities: [],
        deliverables: []
      },
      ideate: {
        id: 'ideate',
        name: 'Ideate',
        description: 'Generate many solutions',
        icon: Lightbulb,
        color: 'bg-yellow-500',
        progress: 0,
        status: 'not_started',
        activities: [],
        deliverables: []
      },
      prototype: {
        id: 'prototype',
        name: 'Prototype',
        description: 'Build to learn',
        icon: Zap,
        color: 'bg-purple-500',
        progress: 0,
        status: 'not_started',
        activities: [],
        deliverables: []
      },
      test: {
        id: 'test',
        name: 'Test',
        description: 'Validate with users',
        icon: CheckCircle,
        color: 'bg-red-500',
        progress: 0,
        status: 'not_started',
        activities: [],
        deliverables: []
      }
    };

    return phases[phaseId] || phases.empathize;
  };

  const getPhaseComponent = () => {
    if (!currentPhase) return null;

    switch (currentPhase.id) {
      case 'empathize':
        return <EmpathyMapBuilder workflowId={workflowId} />;
      case 'define':
        return <POVStatementBuilder workflowId={workflowId} />;
      case 'ideate':
        return <IdeationCanvas workflowId={workflowId} />;
      case 'prototype':
        return <PrototypePlanner workflowId={workflowId} />;
      case 'test':
        return <TestSessionManager workflowId={workflowId} />;
      default:
        return null;
    }
  };

  const getWorkflowStatus = () => {
    if (!workflow) return 'loading';
    return workflow.status;
  };

  const getOverallProgress = () => {
    if (!workflow) return 0;
    // Calculate overall progress based on completed phases
    const phases = ['empathize', 'define', 'ideate', 'prototype', 'test'];
    const currentIndex = phases.indexOf(workflow.currentPhase);
    return ((currentIndex + 1) / phases.length) * 100;
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <p className="text-red-600">{error}</p>
          <Button onClick={loadWorkflow} className="mt-4">
            Retry
          </Button>
        </div>
      </div>
    );
  }

  if (!workflow) {
    return (
      <div className="flex items-center justify-center h-64">
        <p className="text-gray-500">Workflow not found</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Workflow Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">{workflow.name}</h1>
          <p className="text-gray-600 mt-1">{workflow.description}</p>
        </div>
        <div className="flex items-center gap-4">
          <Badge variant={getWorkflowStatus() === 'active' ? 'default' : 'secondary'}>
            {getWorkflowStatus()}
          </Badge>
          <div className="flex items-center gap-2">
            <Users className="w-4 h-4" />
            <span>{workflow.participants.length} participants</span>
          </div>
        </div>
      </div>

      {/* Progress Overview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="w-5 h-5" />
            Progress Overview
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Overall Progress</span>
              <span className="text-sm text-gray-600">{Math.round(getOverallProgress())}%</span>
            </div>
            <Progress value={getOverallProgress()} className="w-full" />
            <div className="flex items-center justify-between text-sm text-gray-600">
              <span>Current Phase: {currentPhase?.name}</span>
              <span>Started: {new Date(workflow.createdAt).toLocaleDateString()}</span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Main Content */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Main Phase Content */}
        <div className="lg:col-span-3">
          <Tabs defaultValue={currentPhase?.id} className="space-y-4">
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="empathize" className="flex items-center gap-2">
                <Users className="w-4 h-4" />
                Empathize
              </TabsTrigger>
              <TabsTrigger value="define" className="flex items-center gap-2">
                <Target className="w-4 h-4" />
                Define
              </TabsTrigger>
              <TabsTrigger value="ideate" className="flex items-center gap-2">
                <Lightbulb className="w-4 h-4" />
                Ideate
              </TabsTrigger>
              <TabsTrigger value="prototype" className="flex items-center gap-2">
                <Zap className="w-4 h-4" />
                Prototype
              </TabsTrigger>
              <TabsTrigger value="test" className="flex items-center gap-2">
                <CheckCircle className="w-4 h-4" />
                Test
              </TabsTrigger>
            </TabsList>

            <TabsContent value={currentPhase?.id || ''} className="space-y-4">
              {getPhaseComponent()}
            </TabsContent>
          </Tabs>
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          {/* AI Facilitation Panel */}
          {workflow.aiFacilitationEnabled && (
            <AIFacilitationPanel 
              insights={aiInsights}
              onInsightAction={(insightId, action) => {
                // Handle insight actions
                console.log('Insight action:', insightId, action);
              }}
            />
          )}

          {/* Collaboration Panel */}
          <CollaborationPanel 
            participants={workflow.participants}
            updates={collaborationUpdates}
            onParticipantAction={(participantId, action) => {
              // Handle participant actions
              console.log('Participant action:', participantId, action);
            }}
          />

          {/* Analytics Dashboard */}
          <DTAnalyticsDashboard workflowId={workflowId} />
        </div>
      </div>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/enhanced/TestSessionManager.tsx ===

import React from 'react';

interface TestSessionManagerProps {
  workflowId: string;
}

export function TestSessionManager({ workflowId }: TestSessionManagerProps) {
  return (
    <div className="p-4">
      <h3>Test Session Manager</h3>
      <p>Component coming soon... Workflow ID: {workflowId}</p>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/enhanced/PrototypePlanner.tsx ===

import React from 'react';

interface PrototypePlannerProps {
  workflowId: string;
}

export function PrototypePlanner({ workflowId }: PrototypePlannerProps) {
  return (
    <div className="p-4">
      <h3>Prototype Planner</h3>
      <p>Component coming soon... Workflow ID: {workflowId}</p>
    </div>
  );
}


=== FILE: client/src/components/design-thinking/sprint/DesignSprintOrchestrator.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { 
  Save, 
  Download, 
  Plus,
  X,
  Calendar,
  Clock,
  Users,
  Target,
  CheckCircle,
  ArrowRight,
  ArrowLeft,
  Play,
  Pause,
  RotateCcw,
  Lightbulb,
  Settings,
  BarChart,
  FileText,
  Zap,
  Eye,
  MessageSquare,
  AlertTriangle,
  TrendingUp
} from 'lucide-react';

export interface SprintParticipant {
  id: string;
  name: string;
  role: string;
  email?: string;
  availability: 'full-time' | 'part-time';
  expertise: string[];
}

export interface SprintActivity {
  id: string;
  day: number;
  title: string;
  description: string;
  duration: number; // minutes
  type: 'workshop' | 'individual' | 'group' | 'presentation' | 'break';
  participants: string[]; // participant IDs
  materials: string[];
  outcomes: string[];
  status: 'pending' | 'in-progress' | 'completed' | 'skipped';
  startTime?: string;
  endTime?: string;
  notes: string;
}

export interface SprintDecision {
  id: string;
  title: string;
  description: string;
  rationale: string;
  impact: 'low' | 'medium' | 'high';
  status: 'proposed' | 'approved' | 'rejected' | 'deferred';
  proposedBy: string;
  decidedAt?: Date;
  decidedBy?: string;
}

export interface SprintOutcome {
  id: string;
  type: 'prototype' | 'insight' | 'decision' | 'next-step';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  owner?: string;
  dueDate?: Date;
  status: 'pending' | 'in-progress' | 'completed';
}

export interface DesignSprint {
  id: string;
  projectId: string;
  title: string;
  description: string;
  challenge: string;
  participants: SprintParticipant[];
  activities: SprintActivity[];
  decisions: SprintDecision[];
  outcomes: SprintOutcome[];
  status: 'planning' | 'active' | 'completed' | 'paused';
  startDate?: Date;
  endDate?: Date;
  currentDay: number;
  currentActivity?: string;
  createdAt: Date;
  updatedAt: Date;
}

interface DesignSprintOrchestratorProps {
  projectId: string;
  initialData?: DesignSprint;
  onSave: (data: DesignSprint) => void;
  onExport?: (data: DesignSprint) => void;
}

const sprintDays = [
  { day: 1, name: 'Monday', focus: 'Map & Sketch', color: 'bg-blue-100 text-blue-800' },
  { day: 2, name: 'Tuesday', focus: 'Decide & Storyboard', color: 'bg-green-100 text-green-800' },
  { day: 3, name: 'Wednesday', focus: 'Prototype', color: 'bg-yellow-100 text-yellow-800' },
  { day: 4, name: 'Thursday', focus: 'Test', color: 'bg-purple-100 text-purple-800' },
  { day: 5, name: 'Friday', focus: 'Decide & Plan', color: 'bg-red-100 text-red-800' }
];

const activityTemplates = {
  1: [ // Monday
    { title: 'Sprint Kickoff', duration: 60, type: 'workshop' },
    { title: 'Problem Definition', duration: 120, type: 'workshop' },
    { title: 'User Journey Mapping', duration: 90, type: 'workshop' },
    { title: 'Lightning Demos', duration: 60, type: 'presentation' },
    { title: 'Four-Step Sketching', duration: 120, type: 'individual' }
  ],
  2: [ // Tuesday
    { title: 'Solution Critique', duration: 60, type: 'group' },
    { title: 'Solution Selection', duration: 90, type: 'group' },
    { title: 'Storyboarding', duration: 120, type: 'workshop' },
    { title: 'Expert Review', duration: 60, type: 'workshop' }
  ],
  3: [ // Wednesday
    { title: 'Prototype Planning', duration: 60, type: 'workshop' },
    { title: 'Prototype Creation', duration: 300, type: 'individual' },
    { title: 'Prototype Review', duration: 60, type: 'group' }
  ],
  4: [ // Thursday
    { title: 'Test Preparation', duration: 60, type: 'workshop' },
    { title: 'User Testing', duration: 240, type: 'workshop' },
    { title: 'Results Analysis', duration: 90, type: 'workshop' }
  ],
  5: [ // Friday
    { title: 'Insights Review', duration: 60, type: 'workshop' },
    { title: 'Decision Making', duration: 90, type: 'workshop' },
    { title: 'Next Steps Planning', duration: 90, type: 'workshop' },
    { title: 'Sprint Retrospective', duration: 60, type: 'workshop' }
  ]
};

export function DesignSprintOrchestrator({ 
  projectId, 
  initialData, 
  onSave, 
  onExport 
}: DesignSprintOrchestratorProps) {
  const [data, setData] = useState<DesignSprint>(
    initialData || {
      id: '',
      projectId,
      title: '',
      description: '',
      challenge: '',
      participants: [],
      activities: [],
      decisions: [],
      outcomes: [],
      status: 'planning',
      currentDay: 1,
      createdAt: new Date(),
      updatedAt: new Date()
    }
  );

  const [isSaving, setIsSaving] = useState(false);
  const [newParticipant, setNewParticipant] = useState<Partial<SprintParticipant>>({
    name: '',
    role: '',
    availability: 'full-time',
    expertise: []
  });
  const [newDecision, setNewDecision] = useState<Partial<SprintDecision>>({
    title: '',
    description: '',
    rationale: '',
    impact: 'medium',
    status: 'proposed',
    proposedBy: ''
  });
  const [newOutcome, setNewOutcome] = useState<Partial<SprintOutcome>>({
    type: 'next-step',
    title: '',
    description: '',
    priority: 'medium',
    status: 'pending'
  });

  useEffect(() => {
    if (initialData) {
      setData(initialData);
    }
  }, [initialData]);

  const updateData = (field: keyof DesignSprint, value: any) => {
    setData(prev => ({ ...prev, [field]: value, updatedAt: new Date() }));
  };

  const addParticipant = () => {
    if (newParticipant.name?.trim() && newParticipant.role?.trim()) {
      const participant: SprintParticipant = {
        id: `participant-${Date.now()}`,
        name: newParticipant.name,
        role: newParticipant.role,
        email: newParticipant.email,
        availability: newParticipant.availability || 'full-time',
        expertise: newParticipant.expertise || []
      };
      
      setData(prev => ({
        ...prev,
        participants: [...prev.participants, participant]
      }));
      
      setNewParticipant({
        name: '',
        role: '',
        availability: 'full-time',
        expertise: []
      });
    }
  };

  const removeParticipant = (participantId: string) => {
    setData(prev => ({
      ...prev,
      participants: prev.participants.filter(p => p.id !== participantId),
      activities: prev.activities.map(a => ({
        ...a,
        participants: a.participants.filter(id => id !== participantId)
      }))
    }));
  };

  const generateActivities = () => {
    const activities: SprintActivity[] = [];
    
    for (let day = 1; day <= 5; day++) {
      const dayTemplates = activityTemplates[day as keyof typeof activityTemplates] || [];
      
      dayTemplates.forEach((template, index) => {
        activities.push({
          id: `activity-${day}-${index}`,
          day,
          title: template.title,
          description: '',
          duration: template.duration,
          type: template.type as any,
          participants: [],
          materials: [],
          outcomes: [],
          status: 'pending',
          notes: ''
        });
      });
    }
    
    setData(prev => ({
      ...prev,
      activities
    }));
  };

  const updateActivity = (activityId: string, field: keyof SprintActivity, value: any) => {
    setData(prev => ({
      ...prev,
      activities: prev.activities.map(a => 
        a.id === activityId ? { ...a, [field]: value } : a
      )
    }));
  };

  const startSprint = () => {
    setData(prev => ({
      ...prev,
      status: 'active',
      startDate: new Date(),
      endDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 days from now
      currentDay: 1
    }));
  };

  const completeSprint = () => {
    setData(prev => ({
      ...prev,
      status: 'completed',
      endDate: new Date()
    }));
  };

  const nextDay = () => {
    if (data.currentDay < 5) {
      setData(prev => ({
        ...prev,
        currentDay: prev.currentDay + 1
      }));
    }
  };

  const previousDay = () => {
    if (data.currentDay > 1) {
      setData(prev => ({
        ...prev,
        currentDay: prev.currentDay - 1
      }));
    }
  };

  const addDecision = () => {
    if (newDecision.title?.trim()) {
      const decision: SprintDecision = {
        id: `decision-${Date.now()}`,
        title: newDecision.title,
        description: newDecision.description || '',
        rationale: newDecision.rationale || '',
        impact: newDecision.impact || 'medium',
        status: 'proposed',
        proposedBy: newDecision.proposedBy || 'Unknown'
      };
      
      setData(prev => ({
        ...prev,
        decisions: [...prev.decisions, decision]
      }));
      
      setNewDecision({
        title: '',
        description: '',
        rationale: '',
        impact: 'medium',
        status: 'proposed',
        proposedBy: ''
      });
    }
  };

  const addOutcome = () => {
    if (newOutcome.title?.trim()) {
      const outcome: SprintOutcome = {
        id: `outcome-${Date.now()}`,
        type: newOutcome.type || 'next-step',
        title: newOutcome.title,
        description: newOutcome.description || '',
        priority: newOutcome.priority || 'medium',
        owner: newOutcome.owner,
        dueDate: newOutcome.dueDate,
        status: 'pending'
      };
      
      setData(prev => ({
        ...prev,
        outcomes: [...prev.outcomes, outcome]
      }));
      
      setNewOutcome({
        type: 'next-step',
        title: '',
        description: '',
        priority: 'medium',
        status: 'pending'
      });
    }
  };

  const getDayActivities = (day: number) => {
    return data.activities.filter(a => a.day === day);
  };

  const getSprintProgress = () => {
    const totalActivities = data.activities.length;
    const completedActivities = data.activities.filter(a => a.status === 'completed').length;
    return totalActivities > 0 ? (completedActivities / totalActivities) * 100 : 0;
  };

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onSave(data);
    } catch (error) {
      console.error('Error saving sprint:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleExport = () => {
    if (onExport) {
      onExport(data);
    }
  };

  const progress = getSprintProgress();
  const currentDayData = sprintDays.find(d => d.day === data.currentDay);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Design Sprint Orchestrator</h2>
          <p className="text-gray-600 mt-1">Plan and manage 5-day design sprints</p>
        </div>
        <div className="flex gap-2">
          <Button 
            onClick={handleSave} 
            disabled={isSaving}
            className="flex items-center gap-2"
          >
            <Save className="w-4 h-4" />
            {isSaving ? 'Saving...' : 'Save'}
          </Button>
          {onExport && (
            <Button 
              variant="outline" 
              onClick={handleExport}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              Export
            </Button>
          )}
        </div>
      </div>

      {/* Sprint Overview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="w-5 h-5" />
            Sprint Overview
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Sprint Title</label>
              <Input
                value={data.title}
                onChange={(e) => updateData('title', e.target.value)}
                placeholder="Enter sprint title..."
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Status</label>
              <div className="flex items-center gap-2">
                <Badge 
                  variant={data.status === 'completed' ? 'default' : data.status === 'active' ? 'secondary' : 'outline'}
                >
                  {data.status}
                </Badge>
                {data.status === 'planning' && (
                  <Button onClick={startSprint} className="flex items-center gap-2">
                    <Play className="w-4 h-4" />
                    Start Sprint
                  </Button>
                )}
                {data.status === 'active' && (
                  <Button onClick={completeSprint} variant="outline" className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4" />
                    Complete Sprint
                  </Button>
                )}
              </div>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Challenge Statement</label>
            <Textarea
              value={data.challenge}
              onChange={(e) => updateData('challenge', e.target.value)}
              placeholder="What problem are you trying to solve?"
              rows={3}
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Description</label>
            <Textarea
              value={data.description}
              onChange={(e) => updateData('description', e.target.value)}
              placeholder="Describe the sprint goals and context..."
              rows={2}
            />
          </div>
        </CardContent>
      </Card>

      {/* Sprint Progress */}
      {data.status === 'active' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart className="w-5 h-5" />
              Sprint Progress
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Overall Progress</span>
                <span className="text-sm text-gray-600">{Math.round(progress)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              
              <div className="grid grid-cols-5 gap-2">
                {sprintDays.map((day) => (
                  <div
                    key={day.day}
                    className={`p-3 rounded-lg text-center ${
                      day.day === data.currentDay 
                        ? 'bg-blue-500 text-white' 
                        : day.day < data.currentDay 
                        ? 'bg-green-500 text-white' 
                        : 'bg-gray-100 text-gray-600'
                    }`}
                  >
                    <div className="text-xs font-medium">{day.name}</div>
                    <div className="text-xs">Day {day.day}</div>
                    <div className="text-xs opacity-75">{day.focus}</div>
                  </div>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Day Navigation */}
      {data.status === 'active' && (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                <Calendar className="w-5 h-5" />
                Day {data.currentDay}: {currentDayData?.name} - {currentDayData?.focus}
              </CardTitle>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={previousDay}
                  disabled={data.currentDay <= 1}
                  className="flex items-center gap-1"
                >
                  <ArrowLeft className="w-4 h-4" />
                  Previous
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={nextDay}
                  disabled={data.currentDay >= 5}
                  className="flex items-center gap-1"
                >
                  Next
                  <ArrowRight className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {getDayActivities(data.currentDay).map((activity) => (
                <div key={activity.id} className="flex items-center justify-between p-3 border rounded">
                  <div className="flex items-center gap-3">
                    <div>
                      <div className="font-medium">{activity.title}</div>
                      <div className="text-sm text-gray-600">
                        {activity.duration} min ‚Ä¢ {activity.type}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge 
                      variant={activity.status === 'completed' ? 'default' : activity.status === 'in-progress' ? 'secondary' : 'outline'}
                    >
                      {activity.status}
                    </Badge>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => updateActivity(activity.id, 'status', 'completed')}
                      disabled={activity.status === 'completed'}
                    >
                      <CheckCircle className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Participants */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="w-5 h-5" />
            Sprint Participants ({data.participants.length})
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            {data.participants.map((participant) => (
              <div key={participant.id} className="flex items-center justify-between p-3 border rounded">
                <div>
                  <div className="font-medium">{participant.name}</div>
                  <div className="text-sm text-gray-600">{participant.role}</div>
                  {participant.expertise.length > 0 && (
                    <div className="flex gap-1 mt-1">
                      {participant.expertise.map((skill, index) => (
                        <Badge key={index} variant="outline" className="text-xs">
                          {skill}
                        </Badge>
                      ))}
                    </div>
                  )}
                </div>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => removeParticipant(participant.id)}
                  className="h-8 w-8 p-0"
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>
            ))}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            <Input
              placeholder="Participant name..."
              value={newParticipant.name || ''}
              onChange={(e) => setNewParticipant(prev => ({ ...prev, name: e.target.value }))}
            />
            <Input
              placeholder="Role..."
              value={newParticipant.role || ''}
              onChange={(e) => setNewParticipant(prev => ({ ...prev, role: e.target.value }))}
            />
          </div>
          <Button onClick={addParticipant} disabled={!newParticipant.name?.trim() || !newParticipant.role?.trim()}>
            <Plus className="w-4 h-4 mr-2" />
            Add Participant
          </Button>
        </CardContent>
      </Card>

      {/* Activities Setup */}
      {data.status === 'planning' && data.activities.length === 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Settings className="w-5 h-5" />
              Sprint Setup
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center py-8">
              <Settings className="w-12 h-12 mx-auto mb-4 opacity-50" />
              <p className="text-gray-600 mb-4">Generate the standard 5-day sprint activities</p>
              <Button onClick={generateActivities} className="flex items-center gap-2">
                <Zap className="w-4 h-4" />
                Generate Sprint Activities
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Decisions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageSquare className="w-5 h-5" />
            Sprint Decisions ({data.decisions.length})
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            {data.decisions.map((decision) => (
              <div key={decision.id} className="p-3 border rounded">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <h3 className="font-medium">{decision.title}</h3>
                    <Badge 
                      variant={decision.status === 'approved' ? 'default' : decision.status === 'rejected' ? 'destructive' : 'outline'}
                    >
                      {decision.status}
                    </Badge>
                    <Badge variant="outline">{decision.impact}</Badge>
                  </div>
                </div>
                <div className="text-sm text-gray-600 mb-2">{decision.description}</div>
                <div className="text-xs text-gray-500">
                  Proposed by: {decision.proposedBy}
                </div>
              </div>
            ))}
          </div>
          
          <div className="space-y-2">
            <Input
              placeholder="Decision title..."
              value={newDecision.title || ''}
              onChange={(e) => setNewDecision(prev => ({ ...prev, title: e.target.value }))}
            />
            <Textarea
              placeholder="Decision description..."
              value={newDecision.description || ''}
              onChange={(e) => setNewDecision(prev => ({ ...prev, description: e.target.value }))}
              rows={2}
            />
            <div className="grid grid-cols-2 gap-2">
              <select
                value={newDecision.impact || 'medium'}
                onChange={(e) => setNewDecision(prev => ({ ...prev, impact: e.target.value as any }))}
                className="px-3 py-2 border rounded-md"
              >
                <option value="low">Low Impact</option>
                <option value="medium">Medium Impact</option>
                <option value="high">High Impact</option>
              </select>
              <Input
                placeholder="Proposed by..."
                value={newDecision.proposedBy || ''}
                onChange={(e) => setNewDecision(prev => ({ ...prev, proposedBy: e.target.value }))}
              />
            </div>
          </div>
          <Button onClick={addDecision} disabled={!newDecision.title?.trim()}>
            <Plus className="w-4 h-4 mr-2" />
            Add Decision
          </Button>
        </CardContent>
      </Card>

      {/* Outcomes */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="w-5 h-5" />
            Sprint Outcomes ({data.outcomes.length})
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            {data.outcomes.map((outcome) => (
              <div key={outcome.id} className="p-3 border rounded">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <h3 className="font-medium">{outcome.title}</h3>
                    <Badge variant="outline">{outcome.type}</Badge>
                    <Badge 
                      variant={outcome.priority === 'critical' ? 'destructive' : outcome.priority === 'high' ? 'default' : 'outline'}
                    >
                      {outcome.priority}
                    </Badge>
                    <Badge 
                      variant={outcome.status === 'completed' ? 'default' : 'outline'}
                    >
                      {outcome.status}
                    </Badge>
                  </div>
                </div>
                <div className="text-sm text-gray-600">{outcome.description}</div>
                {outcome.owner && (
                  <div className="text-xs text-gray-500 mt-1">
                    Owner: {outcome.owner}
                  </div>
                )}
              </div>
            ))}
          </div>
          
          <div className="space-y-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
              <Input
                placeholder="Outcome title..."
                value={newOutcome.title || ''}
                onChange={(e) => setNewOutcome(prev => ({ ...prev, title: e.target.value }))}
              />
              <select
                value={newOutcome.type || 'next-step'}
                onChange={(e) => setNewOutcome(prev => ({ ...prev, type: e.target.value as any }))}
                className="px-3 py-2 border rounded-md"
              >
                <option value="prototype">Prototype</option>
                <option value="insight">Insight</option>
                <option value="decision">Decision</option>
                <option value="next-step">Next Step</option>
              </select>
            </div>
            <Textarea
              placeholder="Outcome description..."
              value={newOutcome.description || ''}
              onChange={(e) => setNewOutcome(prev => ({ ...prev, description: e.target.value }))}
              rows={2}
            />
            <div className="grid grid-cols-2 gap-2">
              <select
                value={newOutcome.priority || 'medium'}
                onChange={(e) => setNewOutcome(prev => ({ ...prev, priority: e.target.value as any }))}
                className="px-3 py-2 border rounded-md"
              >
                <option value="low">Low Priority</option>
                <option value="medium">Medium Priority</option>
                <option value="high">High Priority</option>
                <option value="critical">Critical</option>
              </select>
              <Input
                placeholder="Owner (optional)..."
                value={newOutcome.owner || ''}
                onChange={(e) => setNewOutcome(prev => ({ ...prev, owner: e.target.value }))}
              />
            </div>
          </div>
          <Button onClick={addOutcome} disabled={!newOutcome.title?.trim()}>
            <Plus className="w-4 h-4 mr-2" />
            Add Outcome
          </Button>
        </CardContent>
      </Card>

      {/* Tips and Guidance */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <h3 className="font-semibold text-blue-900 mb-2">üèÉ‚Äç‚ôÇÔ∏è Design Sprint Tips</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ Keep the team small (5-7 people maximum)</li>
            <li>‚Ä¢ Include diverse perspectives and expertise</li>
            <li>‚Ä¢ Focus on one big challenge per sprint</li>
            <li>‚Ä¢ Time-box everything strictly</li>
            <li>‚Ä¢ Test with real users, not just your team</li>
            <li>‚Ä¢ Document all decisions and outcomes</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/PWAInstallPrompt.tsx ===

import { useEffect, useState } from 'react';
import { X, Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';

interface BeforeInstallPromptEvent extends Event {
  prompt: () => Promise<void>;
  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;
}

export default function PWAInstallPrompt() {
  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);
  const [showPrompt, setShowPrompt] = useState(false);
  const [isIOS, setIsIOS] = useState(false);

  useEffect(() => {
    // Check if running on iOS
    const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    setIsIOS(iOS);

    // Check if already installed
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
    if (isStandalone) {
      return;
    }

    // Check if user previously dismissed
    const dismissed = localStorage.getItem('pwa-install-dismissed');
    if (dismissed) {
      const dismissedTime = parseInt(dismissed, 10);
      const daysSinceDismissed = (Date.now() - dismissedTime) / (1000 * 60 * 60 * 24);
      if (daysSinceDismissed < 7) {
        return;
      }
    }

    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      setDeferredPrompt(e as BeforeInstallPromptEvent);
      
      // Show prompt after a short delay for better UX
      setTimeout(() => {
        setShowPrompt(true);
      }, 3000);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);

    // For iOS, show custom prompt
    if (iOS && !isStandalone) {
      setTimeout(() => {
        setShowPrompt(true);
      }, 5000);
    }

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    };
  }, []);

  const handleInstallClick = async () => {
    if (!deferredPrompt && !isIOS) {
      return;
    }

    if (deferredPrompt) {
      deferredPrompt.prompt();
      const choiceResult = await deferredPrompt.userChoice;
      
      if (choiceResult.outcome === 'accepted') {
        console.log('PWA installed');
      }
      
      setDeferredPrompt(null);
      setShowPrompt(false);
    }
  };

  const handleDismiss = () => {
    setShowPrompt(false);
    localStorage.setItem('pwa-install-dismissed', Date.now().toString());
  };

  if (!showPrompt) {
    return null;
  }

  return (
    <div className="fixed bottom-20 left-4 right-4 md:left-auto md:right-4 md:max-w-sm z-40 animate-slide-up">
      <Card className="glass-card shadow-lg border-purple-200 dark:border-purple-800">
        <CardContent className="p-4">
          <div className="flex items-start gap-3">
            <div className="flex-shrink-0 mt-0.5">
              <Download className="h-5 w-5 text-purple-600 dark:text-purple-400" />
            </div>
            <div className="flex-1 min-w-0">
              <h3 className="text-sm font-semibold text-gray-900 dark:text-gray-100 mb-1">
                Install Dashboard App
              </h3>
              <p className="text-xs text-gray-600 dark:text-gray-400 mb-3">
                {isIOS 
                  ? 'Tap the Share button and then "Add to Home Screen" to install.'
                  : 'Install our app for quick access and offline functionality.'}
              </p>
              {!isIOS && (
                <div className="flex gap-2">
                  <Button
                    size="sm"
                    onClick={handleInstallClick}
                    className="flex-1 h-9 text-xs safari-button"
                    data-testid="button-install-pwa"
                  >
                    Install
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={handleDismiss}
                    className="h-9 text-xs"
                    data-testid="button-dismiss-pwa"
                  >
                    Not Now
                  </Button>
                </div>
              )}
              {isIOS && (
                <Button
                  size="sm"
                  variant="outline"
                  onClick={handleDismiss}
                  className="w-full h-9 text-xs"
                  data-testid="button-dismiss-ios-pwa"
                >
                  Got it
                </Button>
              )}
            </div>
            <button
              onClick={handleDismiss}
              className="flex-shrink-0 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
              aria-label="Close"
              data-testid="button-close-pwa"
            >
              <X className="h-4 w-4" />
            </button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/components/onboarding/OnboardingWizard.tsx ===

import React, { useMemo, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Progress } from '@/components/ui/progress';
import { useFeature } from '@/contexts/FeatureFlagsContext';
import { UserType } from '@shared/schema';

type OnboardingData = {
  role: UserType | '';
  companyStage: 'idea' | 'prototype' | 'mvp' | 'growth' | 'scale' | '';
  fundingGoals: string;
  teamSize: number | '';
  primaryChallenges: string;
  industry: string;
};

const initialData: OnboardingData = {
  role: '',
  companyStage: '',
  fundingGoals: '',
  teamSize: '',
  primaryChallenges: '',
  industry: '',
};

type OnboardingWizardProps = {
  onComplete: (data: OnboardingData) => void;
  onSkip?: () => void;
};

export const OnboardingWizard: React.FC<OnboardingWizardProps> = ({ onComplete, onSkip }) => {
  const enabled = useFeature('onboarding_v2');
  const [step, setStep] = useState(1);
  const [data, setData] = useState<OnboardingData>(initialData);

  const steps = useMemo(() => (
    [
      { key: 'role', title: 'Your role', description: 'Tell us who you are' },
      { key: 'companyStage', title: 'Company stage', description: 'Where are you in your journey?' },
      { key: 'industry', title: 'Industry', description: 'What space are you in?' },
      { key: 'fundingGoals', title: 'Funding goals', description: 'What are you aiming to raise?' },
      { key: 'teamSize', title: 'Team size & challenges', description: 'Your team and primary challenges' },
    ] as const
  ), []);

  if (!enabled) return null;

  const progress = (step - 1) / (steps.length - 1) * 100;

  const next = () => setStep(s => Math.min(s + 1, steps.length));
  const back = () => setStep(s => Math.max(s - 1, 1));

  const handleComplete = async () => {
    try {
      await fetch('/api/profile', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          role: data.role,
          preferences: { onboarding_v2: true },
        }),
      });
    } catch {}
    onComplete(data);
  };

  return (
    <div className="max-w-3xl mx-auto p-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Getting started</span>
            <div className="w-40">
              <Progress value={progress} />
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {step === 1 && (
            <div className="space-y-3">
              <Label>Your role</Label>
              <Select value={data.role} onValueChange={(v) => setData(d => ({ ...d, role: v as UserType }))}>
                <SelectTrigger>
                  <SelectValue placeholder="Select your role" />
                </SelectTrigger>
                <SelectContent>
                  {Object.values(UserType).map(r => (
                    <SelectItem key={r} value={r}>{r}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          )}

          {step === 2 && (
            <div className="space-y-3">
              <Label>Company stage</Label>
              <Select value={data.companyStage} onValueChange={(v) => setData(d => ({ ...d, companyStage: v as OnboardingData['companyStage'] }))}>
                <SelectTrigger>
                  <SelectValue placeholder="Select a stage" />
                </SelectTrigger>
                <SelectContent>
                  {['idea','prototype','mvp','growth','scale'].map(s => (
                    <SelectItem key={s} value={s}>{s}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          )}

          {step === 3 && (
            <div className="space-y-3">
              <Label>Industry</Label>
              <Input value={data.industry} onChange={(e) => setData(d => ({ ...d, industry: e.target.value }))} placeholder="e.g., B2B SaaS" />
            </div>
          )}

          {step === 4 && (
            <div className="space-y-3">
              <Label>Funding goals</Label>
              <Input value={data.fundingGoals} onChange={(e) => setData(d => ({ ...d, fundingGoals: e.target.value }))} placeholder="e.g., $500k seed round" />
            </div>
          )}

          {step === 5 && (
            <div className="space-y-3">
              <Label>Team size</Label>
              <Input type="number" value={data.teamSize as any} onChange={(e) => setData(d => ({ ...d, teamSize: e.target.valueAsNumber || '' }))} placeholder="e.g., 5" />
              <Label>Primary challenges</Label>
              <Input value={data.primaryChallenges} onChange={(e) => setData(d => ({ ...d, primaryChallenges: e.target.value }))} placeholder="e.g., GTM focus, fundraising narrative" />
            </div>
          )}

          <div className="flex justify-between pt-4">
            <Button variant="outline" onClick={back} disabled={step === 1}>Back</Button>
            <div className="flex items-center gap-2">
              {onSkip && <Button variant="ghost" onClick={onSkip}>Skip</Button>}
              {step < steps.length ? (
                <Button onClick={next}>Continue</Button>
              ) : (
                <Button onClick={handleComplete}>Finish</Button>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};


=== FILE: client/src/components/onboarding/UserTypeSelector.tsx ===


import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { 
  Rocket, 
  TrendingUp, 
  DollarSign, 
  Heart, 
  Handshake, 
  Users,
  Building2,
  Target,
  Lightbulb,
  Shield,
  Award,
  Crown
} from 'lucide-react';
import { UserType } from '@shared/schema';

interface UserTypeDefinition {
  type: UserType;
  title: string;
  subtitle: string;
  description: string;
  icon: any;
  color: string;
  gradient: string;
  subtypes: Array<{
    value: string;
    label: string;
    description: string;
  }>;
  features: string[];
  examples: string[];
}

const userTypeDefinitions: UserTypeDefinition[] = [
  {
    type: UserType.ENTREPRENEUR,
    title: "I'm an Entrepreneur",
    subtitle: "Build and grow your startup",
    description: "Founders and business builders looking to launch, scale, or improve their ventures",
    icon: Rocket,
    color: "text-purple-600",
    gradient: "from-purple-500 to-indigo-600",
    subtypes: [
      { value: 'first-time-founder', label: 'First-time Founder', description: 'New to entrepreneurship' },
      { value: 'serial-entrepreneur', label: 'Serial Entrepreneur', description: 'Multiple ventures under belt' },
      { value: 'corporate-innovator', label: 'Corporate Innovator', description: 'Innovation within corporations' }
    ],
    features: [
      'Business plan builder with AI assistance',
      'Funding opportunity matching',
      'Growth metrics and KPI tracking',
      'Team management tools',
      'Mentor connection system',
      'Educational resource library'
    ],
    examples: ['Startup founders', 'Business owners', 'Innovation managers', 'Product creators']
  },
  {
    type: UserType.INVESTOR,
    title: "I'm an Investor",
    subtitle: "Discover and fund promising startups",
    description: "Angels, VCs, and institutional investors seeking quality deal flow and portfolio management",
    icon: TrendingUp,
    color: "text-teal-600",
    gradient: "from-teal-500 to-blue-600",
    subtypes: [
      { value: 'angel-investor', label: 'Angel Investor', description: 'Individual high-net-worth investors' },
      { value: 'vc-fund', label: 'VC Fund', description: 'Venture capital firms and partners' },
      { value: 'pe-fund', label: 'PE Fund', description: 'Private equity investment firms' },
      { value: 'family-office', label: 'Family Office', description: 'Wealth management for families' },
      { value: 'strategic-investor', label: 'Strategic Investor', description: 'Corporate venture arms' }
    ],
    features: [
      'Curated deal flow management',
      'Portfolio performance tracking',
      'Comprehensive due diligence tools',
      'ROI calculators and projections',
      'Risk assessment frameworks',
      'Market research and analysis'
    ],
    examples: ['Angel investors', 'VC partners', 'Fund managers', 'Corporate VCs', 'Family offices']
  },
  {
    type: UserType.LENDER,
    title: "I'm a Lender",
    subtitle: "Provide debt financing solutions",
    description: "Banks, credit institutions, and alternative lenders offering startup financing",
    icon: DollarSign,
    color: "text-green-600",
    gradient: "from-green-500 to-emerald-600",
    subtypes: [
      { value: 'commercial-bank', label: 'Commercial Bank', description: 'Traditional banking institutions' },
      { value: 'credit-union', label: 'Credit Union', description: 'Member-owned financial cooperatives' },
      { value: 'online-lender', label: 'Online Lender', description: 'Digital-first lending platforms' },
      { value: 'sba-lender', label: 'SBA Lender', description: 'Small Business Administration lenders' },
      { value: 'alternative-lender', label: 'Alternative Lender', description: 'Non-traditional financing sources' }
    ],
    features: [
      'Automated credit analysis tools',
      'Loan application processing',
      'DSCR calculators and metrics',
      'Collateral evaluation systems',
      'Risk scoring algorithms',
      'Regulatory compliance tools'
    ],
    examples: ['Banks', 'Credit unions', 'Online lenders', 'SBA partners', 'Fintech companies']
  },
  {
    type: UserType.GRANTOR,
    title: "I'm a Grantor",
    subtitle: "Award grants and support innovation",
    description: "Foundations, government agencies, and organizations providing non-dilutive funding",
    icon: Heart,
    color: "text-red-600",
    gradient: "from-orange-500 to-red-600",
    subtypes: [
      { value: 'government-agency', label: 'Government Agency', description: 'Federal, state, and local agencies' },
      { value: 'foundation', label: 'Foundation', description: 'Private charitable foundations' },
      { value: 'corporate-foundation', label: 'Corporate Foundation', description: 'Corporate social responsibility arms' },
      { value: 'research-grant', label: 'Research Grant Provider', description: 'Academic and research institutions' }
    ],
    features: [
      'Social impact measurement tools',
      'Grant application evaluation',
      'Sustainability and ESG tracking',
      'Compliance monitoring dashboards',
      'Beneficiary impact analysis',
      'Outcome reporting systems'
    ],
    examples: ['Foundations', 'Government programs', 'NGOs', 'Research institutions', 'Corporate CSR']
  },
  {
    type: UserType.PARTNER,
    title: "I'm a Partner",
    subtitle: "Support and accelerate startups",
    description: "Service providers, mentors, and ecosystem partners helping startups succeed",
    icon: Handshake,
    color: "text-blue-600",
    gradient: "from-blue-500 to-cyan-600",
    subtypes: [
      { value: 'accelerator', label: 'Accelerator', description: 'Intensive startup programs' },
      { value: 'incubator', label: 'Incubator', description: 'Long-term startup support' },
      { value: 'consultant', label: 'Consultant', description: 'Professional advisory services' },
      { value: 'advisor', label: 'Advisor', description: 'Strategic guidance and mentorship' },
      { value: 'mentor', label: 'Mentor', description: 'Experienced entrepreneurs helping others' },
      { value: 'service-provider', label: 'Service Provider', description: 'Professional services for startups' }
    ],
    features: [
      'AI-powered startup matching',
      'Partnership program management',
      'Resource sharing platforms',
      'Success metrics tracking',
      'Collaboration workflow tools',
      'Network analysis insights'
    ],
    examples: ['Accelerators', 'Incubators', 'Consultants', 'Mentors', 'Service providers', 'Advisors']
  },
  {
    type: UserType.TEAM_MEMBER,
    title: "I'm a Team Member",
    subtitle: "Collaborate within organizations",
    description: "Team members, employees, and collaborators working within startup ecosystems",
    icon: Users,
    color: "text-gray-600",
    gradient: "from-gray-500 to-slate-600",
    subtypes: [
      { value: 'admin', label: 'Admin', description: 'Full administrative access' },
      { value: 'member', label: 'Member', description: 'Standard team member access' },
      { value: 'viewer', label: 'Viewer', description: 'Read-only access to information' },
      { value: 'contributor', label: 'Contributor', description: 'Can contribute content and insights' },
      { value: 'stakeholder', label: 'Stakeholder', description: 'Has stake in outcomes and decisions' }
    ],
    features: [
      'Team collaboration tools',
      'Role-based access control',
      'Document sharing and editing',
      'Task and project management',
      'Communication platforms',
      'Progress tracking dashboards'
    ],
    examples: ['Team members', 'Employees', 'Contractors', 'Stakeholders', 'Collaborators']
  }
];

interface UserTypeSelectorProps {
  onUserTypeSelect: (userType: UserType, subtype: string) => void;
}

export default function UserTypeSelector({ onUserTypeSelect }: UserTypeSelectorProps) {
  const [selectedType, setSelectedType] = useState<UserType | null>(null);
  const [selectedSubtype, setSelectedSubtype] = useState<string>('');

  const selectedDefinition = userTypeDefinitions.find(def => def.type === selectedType);

  const handleTypeSelect = (type: UserType) => {
    setSelectedType(type);
    setSelectedSubtype('');
  };

  const handleSubtypeSelect = (subtype: string) => {
    setSelectedSubtype(subtype);
  };

  const handleContinue = () => {
    if (selectedType && selectedSubtype) {
      onUserTypeSelect(selectedType, selectedSubtype);
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-8">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-4 bg-gradient-to-r from-purple-600 to-teal-600 bg-clip-text text-transparent">
          Welcome to IterativStartups
        </h1>
        <p className="text-lg text-gray-600 max-w-2xl mx-auto">
          Let's personalize your experience by understanding your role in the startup ecosystem
        </p>
      </div>

      {!selectedType ? (
        <div>
          <h2 className="text-xl font-semibold text-center mb-6">What describes you best?</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {userTypeDefinitions.map((userType) => {
              const IconComponent = userType.icon;
              return (
                <Card 
                  key={userType.type}
                  className="cursor-pointer transition-all duration-200 hover:shadow-lg hover:scale-105 border-2 hover:border-purple-200"
                  onClick={() => handleTypeSelect(userType.type)}
                >
                  <CardHeader className="text-center pb-4">
                    <div className={`mx-auto p-4 rounded-full bg-gradient-to-br ${userType.gradient} text-white mb-4`}>
                      <IconComponent className="h-8 w-8" />
                    </div>
                    <CardTitle className="text-lg">{userType.title}</CardTitle>
                    <CardDescription className="text-sm">{userType.subtitle}</CardDescription>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <p className="text-sm text-gray-600 text-center mb-4">
                      {userType.description}
                    </p>
                    <div className="flex flex-wrap gap-1 justify-center">
                      {userType.examples.slice(0, 2).map((example, index) => (
                        <Badge key={index} variant="secondary" className="text-xs">
                          {example}
                        </Badge>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </div>
      ) : (
        <div className="space-y-6">
          <div className="flex items-center gap-4 mb-6">
            <Button 
              variant="outline" 
              onClick={() => setSelectedType(null)}
              className="px-3 py-2"
            >
              ‚Üê Back
            </Button>
            <div className="flex items-center gap-3">
              {selectedDefinition && (
                <>
                  <div className={`p-2 rounded-lg bg-gradient-to-br ${selectedDefinition.gradient} text-white`}>
                    <selectedDefinition.icon className="h-6 w-6" />
                  </div>
                  <div>
                    <h2 className="text-xl font-semibold">{selectedDefinition.title}</h2>
                    <p className="text-gray-600">{selectedDefinition.subtitle}</p>
                  </div>
                </>
              )}
            </div>
          </div>

          {selectedDefinition && (
            <div className="grid md:grid-cols-2 gap-8">
              <Card>
                <CardHeader>
                  <CardTitle>Choose your specific role</CardTitle>
                  <CardDescription>
                    Select the option that best describes your current situation
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <RadioGroup value={selectedSubtype} onValueChange={handleSubtypeSelect}>
                    {selectedDefinition.subtypes.map((subtype) => (
                      <div key={subtype.value} className="flex items-start space-x-3 p-3 rounded-lg hover:bg-gray-50">
                        <RadioGroupItem value={subtype.value} id={subtype.value} className="mt-1" />
                        <Label htmlFor={subtype.value} className="flex-1 cursor-pointer">
                          <div className="font-medium">{subtype.label}</div>
                          <div className="text-sm text-gray-600">{subtype.description}</div>
                        </Label>
                      </div>
                    ))}
                  </RadioGroup>
                </CardContent>
              </Card>

              <div className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Target className="h-5 w-5" />
                      What you'll get access to
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="space-y-2">
                      {selectedDefinition.features.map((feature, index) => (
                        <li key={index} className="flex items-center gap-2 text-sm">
                          <div className="w-2 h-2 bg-green-500 rounded-full" />
                          {feature}
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Building2 className="h-5 w-5" />
                      Join others like you
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex flex-wrap gap-2">
                      {selectedDefinition.examples.map((example, index) => (
                        <Badge key={index} variant="outline">
                          {example}
                        </Badge>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          )}

          <div className="flex justify-center pt-6">
            <Button
              onClick={handleContinue}
              disabled={!selectedSubtype}
              size="lg"
              className="px-8 py-3 bg-gradient-to-r from-purple-600 to-teal-600 hover:from-purple-700 hover:to-teal-700"
            >
              Continue to Setup
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}


=== FILE: client/src/components/business-plan/ChapterNavigation.tsx ===

import React from 'react';
import { 
  FileText, 
  Building2, 
  Package, 
  TrendingUp, 
  Target, 
  Settings, 
  DollarSign, 
  Paperclip,
  CheckCircle,
  Circle,
  Clock
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Card, CardContent } from '@/components/ui/card';
import { useBusinessPlan } from '@/contexts/BusinessPlanContext';
import { useBusinessPlanProgress } from '@/hooks/useBusinessPlanProgress';
import type { PlanChapter } from '@/constants/businessPlanStructure';

interface ChapterNavigationProps {
  chapters: PlanChapter[];
  activeChapterId: string;
  activeSectionId: string;
  onChapterSelect: (chapterId: string) => void;
  onSectionSelect: (chapterId: string, sectionId: string) => void;
}

const iconMap: Record<string, React.ComponentType<any>> = {
  FileText,
  Building2,
  Package,
  TrendingUp,
  Target,
  Settings,
  DollarSign,
  Paperclip
};

export const ChapterNavigation: React.FC<ChapterNavigationProps> = ({
  chapters,
  activeChapterId,
  activeSectionId,
  onChapterSelect,
  onSectionSelect
}) => {
  const { getSectionStatus } = useBusinessPlan();
  const { chapterProgress } = useBusinessPlanProgress();

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'complete':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'in_progress':
        return <Clock className="w-4 h-4 text-yellow-500" />;
      default:
        return <Circle className="w-4 h-4 text-gray-300" />;
    }
  };

  return (
    <Card className="h-full">
      <CardContent className="p-4">
        <div className="space-y-2">
          <h3 className="font-semibold text-sm text-gray-700 mb-4">Business Plan Structure</h3>
          
          {chapters.map((chapter) => {
            const IconComponent = iconMap[chapter.icon] || FileText;
            const progress = chapterProgress.find(p => p.chapterId === chapter.id);
            const isActive = activeChapterId === chapter.id;

            return (
              <div key={chapter.id} className="space-y-1">
                <button
                  onClick={() => onChapterSelect(chapter.id)}
                  className={cn(
                    'w-full flex items-center justify-between px-3 py-2.5 rounded-lg transition-all',
                    isActive
                      ? 'bg-blue-50 text-blue-700 shadow-sm'
                      : 'text-gray-700 hover:bg-gray-50'
                  )}
                >
                  <div className="flex items-center gap-3 flex-1">
                    <IconComponent className={cn(
                      'w-4 h-4',
                      isActive ? 'text-blue-600' : 'text-gray-500'
                    )} />
                    <div className="text-left flex-1">
                      <div className="font-medium text-sm">
                        {chapter.title}
                        {chapter.subtitle && (
                          <span className="ml-1">{chapter.subtitle}</span>
                        )}
                      </div>
                      {progress && (
                        <div className="text-xs text-gray-500 mt-0.5">
                          {progress.completed}/{progress.total} sections
                        </div>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    {progress && (
                      <Badge 
                        variant="secondary" 
                        className="text-xs"
                      >
                        {progress.percentage}%
                      </Badge>
                    )}
                    {getStatusIcon(progress?.status || 'not_started')}
                  </div>
                </button>

                {/* Sections */}
                {isActive && (
                  <div className="ml-7 mt-2 space-y-1 border-l-2 border-blue-200 pl-3">
                    {chapter.sections.map((section) => {
                      const sectionStatus = getSectionStatus(section.id);
                      const isSectionActive = activeSectionId === section.id;

                      return (
                        <button
                          key={section.id}
                          onClick={() => onSectionSelect(chapter.id, section.id)}
                          className={cn(
                            'w-full text-left px-3 py-2 rounded-md text-sm transition-colors',
                            isSectionActive
                              ? 'bg-blue-100 text-blue-800 font-medium'
                              : 'text-gray-600 hover:bg-gray-50'
                          )}
                        >
                          <div className="flex items-center justify-between">
                            <span>{section.title}</span>
                            <div className="flex items-center gap-1">
                              {section.required && (
                                <span className="text-xs text-red-500">*</span>
                              )}
                              {getStatusIcon(sectionStatus)}
                            </div>
                          </div>
                        </button>
                      );
                    })}
                  </div>
                )}

                {/* Chapter Progress Bar */}
                {isActive && progress && (
                  <div className="ml-7 mt-2 px-3">
                    <Progress value={progress.percentage} className="h-1" />
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
};


=== FILE: client/src/components/business-plan/SectionEditor.tsx ===

import React, { useState, useEffect } from 'react';
import { 
  Save, 
  Sparkles, 
  RefreshCw, 
  Lightbulb, 
  TrendingUp,
  CheckCircle,
  AlertCircle,
  Info
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { useBusinessPlan } from '@/contexts/BusinessPlanContext';
import { useBusinessPlanAI } from '@/hooks/useBusinessPlanAI';
import { getSectionById } from '@/constants/businessPlanStructure';
import { useToast } from '@/hooks/use-toast';

interface SectionEditorProps {
  chapterId: string;
  sectionId: string;
  onSave?: () => void;
}

export const SectionEditor: React.FC<SectionEditorProps> = ({
  chapterId,
  sectionId,
  onSave
}) => {
  const { toast } = useToast();
  const { 
    getSectionContent, 
    updateSectionContent, 
    getSectionStatus,
    getSectionWordCount,
    save,
    isDirty
  } = useBusinessPlan();
  
  const {
    generateSectionContent,
    improveSectionContent,
    getSuggestions,
    analyzeContent,
    isGenerating
  } = useBusinessPlanAI();

  const section = getSectionById(chapterId, sectionId);
  const [content, setContent] = useState('');
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [analysis, setAnalysis] = useState<any>(null);
  const [showAIPanel, setShowAIPanel] = useState(false);

  useEffect(() => {
    const initialContent = getSectionContent(sectionId);
    setContent(initialContent);
  }, [sectionId, getSectionContent]);

  useEffect(() => {
    if (content) {
      loadSuggestions();
    }
  }, [sectionId]);

  const loadSuggestions = async () => {
    try {
      const sectionSuggestions = await getSuggestions(sectionId);
      setSuggestions(sectionSuggestions);
    } catch (error) {
      console.error('Failed to load suggestions:', error);
    }
  };

  const handleContentChange = (newContent: string) => {
    setContent(newContent);
    updateSectionContent(sectionId, newContent);
  };

  const handleSave = async () => {
    try {
      await save();
      toast({
        title: 'Saved',
        description: 'Section content saved successfully',
      });
      onSave?.();
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to save section content',
        variant: 'destructive',
      });
    }
  };

  const handleGenerateContent = async () => {
    try {
      const result = await generateSectionContent(chapterId, sectionId);
      setContent(result.content);
      toast({
        title: 'Content Generated',
        description: `AI generated ${result.wordCount} words with ${Math.round(result.confidence * 100)}% confidence`,
      });
      setSuggestions(result.suggestions);
    } catch (error) {
      toast({
        title: 'Generation Failed',
        description: 'Failed to generate content. Please try again.',
        variant: 'destructive',
      });
    }
  };

  const handleImproveContent = async (type: 'clarity' | 'length' | 'tone' | 'detail') => {
    try {
      const improved = await improveSectionContent(sectionId, type);
      setContent(improved);
      toast({
        title: 'Content Improved',
        description: `Content has been improved for ${type}`,
      });
    } catch (error) {
      toast({
        title: 'Improvement Failed',
        description: 'Failed to improve content. Please try again.',
        variant: 'destructive',
      });
    }
  };

  const handleAnalyze = async () => {
    try {
      const result = await analyzeContent(sectionId);
      setAnalysis(result);
      setShowAIPanel(true);
    } catch (error) {
      toast({
        title: 'Analysis Failed',
        description: 'Failed to analyze content.',
        variant: 'destructive',
      });
    }
  };

  if (!section) {
    return (
      <div className="flex items-center justify-center h-64">
        <p className="text-gray-500">Section not found</p>
      </div>
    );
  }

  const wordCount = getSectionWordCount(sectionId);
  const status = getSectionStatus(sectionId);
  const progress = Math.min(100, Math.round((wordCount / section.estimatedWords) * 100));

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <div className="flex items-center gap-3 mb-2">
            <h2 className="text-2xl font-bold text-gray-900">{section.title}</h2>
            <Badge variant={
              status === 'complete' ? 'default' : 
              status === 'in_progress' ? 'secondary' : 
              'outline'
            }>
              {status === 'complete' ? <CheckCircle className="w-3 h-3 mr-1" /> : 
               status === 'in_progress' ? <RefreshCw className="w-3 h-3 mr-1" /> : 
               <AlertCircle className="w-3 h-3 mr-1" />}
              {status.replace('_', ' ')}
            </Badge>
          </div>
          {section.description && (
            <p className="text-gray-600">{section.description}</p>
          )}
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={handleAnalyze}
            disabled={!content || isGenerating}
          >
            <TrendingUp className="w-4 h-4 mr-2" />
            Analyze
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={handleGenerateContent}
            disabled={isGenerating}
          >
            {isGenerating ? (
              <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
            ) : (
              <Sparkles className="w-4 h-4 mr-2" />
            )}
            {isGenerating ? 'Generating...' : 'AI Generate'}
          </Button>
          <Button
            onClick={handleSave}
            disabled={!isDirty}
            size="sm"
          >
            <Save className="w-4 h-4 mr-2" />
            Save
          </Button>
        </div>
      </div>

      {/* Progress */}
      <Card>
        <CardContent className="pt-6">
          <div className="space-y-2">
            <div className="flex items-center justify-between text-sm">
              <span className="text-gray-600">Progress</span>
              <span className="font-medium">
                {wordCount} / {section.estimatedWords} words ({progress}%)
              </span>
            </div>
            <Progress value={progress} className="h-2" />
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Editor */}
        <div className="lg:col-span-2 space-y-4">
          {/* AI Prompt */}
          {section.aiPrompt && (
            <Card className="bg-blue-50 border-blue-200">
              <CardContent className="pt-6">
                <div className="flex items-start gap-3">
                  <Lightbulb className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" />
                  <div>
                    <p className="text-sm font-medium text-blue-900 mb-1">AI Writing Tip</p>
                    <p className="text-sm text-blue-700">{section.aiPrompt}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Text Editor */}
          <Card>
            <CardContent className="pt-6">
              <Textarea
                value={content}
                onChange={(e) => handleContentChange(e.target.value)}
                placeholder="Start writing your content here..."
                className="min-h-[400px] font-mono text-sm"
              />
            </CardContent>
          </Card>

          {/* AI Improvement Options */}
          {content && (
            <Card>
              <CardHeader>
                <CardTitle className="text-base">AI Improvements</CardTitle>
                <CardDescription>Enhance your content with AI assistance</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleImproveContent('clarity')}
                    disabled={isGenerating}
                  >
                    Improve Clarity
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleImproveContent('length')}
                    disabled={isGenerating}
                  >
                    Expand Content
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleImproveContent('tone')}
                    disabled={isGenerating}
                  >
                    Adjust Tone
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleImproveContent('detail')}
                    disabled={isGenerating}
                  >
                    Add Details
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          {/* Tips */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2">
                <Info className="w-4 h-4" />
                Writing Tips
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {section.tips.map((tip, index) => (
                  <li key={index} className="text-sm text-gray-600 flex items-start gap-2">
                    <span className="text-blue-500 mt-1">‚Ä¢</span>
                    <span>{tip}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>

          {/* AI Suggestions */}
          {suggestions.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="text-base flex items-center gap-2">
                  <Sparkles className="w-4 h-4 text-purple-500" />
                  AI Suggestions
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2">
                  {suggestions.map((suggestion, index) => (
                    <li key={index} className="text-sm text-gray-600 flex items-start gap-2">
                      <span className="text-purple-500 mt-1">‚Ä¢</span>
                      <span>{suggestion}</span>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          )}

          {/* Analysis Results */}
          {analysis && showAIPanel && (
            <Card>
              <CardHeader>
                <CardTitle className="text-base flex items-center gap-2">
                  <TrendingUp className="w-4 h-4 text-green-500" />
                  Content Analysis
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium">Overall Score</span>
                    <span className="text-2xl font-bold text-green-600">{analysis.score}</span>
                  </div>
                  <Progress value={analysis.score} className="h-2" />
                </div>

                {analysis.strengths.length > 0 && (
                  <div>
                    <p className="text-sm font-medium mb-2 text-green-700">Strengths</p>
                    <ul className="space-y-1">
                      {analysis.strengths.map((strength: string, index: number) => (
                        <li key={index} className="text-sm text-gray-600 flex items-start gap-2">
                          <CheckCircle className="w-3 h-3 text-green-500 mt-1" />
                          <span>{strength}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {analysis.improvements.length > 0 && (
                  <div>
                    <p className="text-sm font-medium mb-2 text-orange-700">Improvements</p>
                    <ul className="space-y-1">
                      {analysis.improvements.map((improvement: string, index: number) => (
                        <li key={index} className="text-sm text-gray-600 flex items-start gap-2">
                          <AlertCircle className="w-3 h-3 text-orange-500 mt-1" />
                          <span>{improvement}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
};


=== FILE: client/src/components/business-plan/index.ts ===

/**
 * Business Plan Components
 * Export all business plan related components
 */

export { ChapterNavigation } from './ChapterNavigation';
export { SectionEditor } from './SectionEditor';
export { ProgressDashboard } from './ProgressDashboard';


=== FILE: client/src/components/business-plan/ProgressDashboard.tsx ===

import React from 'react';
import { 
  TrendingUp, 
  FileText, 
  CheckCircle, 
  Clock, 
  Target,
  Award,
  Calendar,
  Zap
} from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { useBusinessPlan } from '@/contexts/BusinessPlanContext';
import { useBusinessPlanProgress } from '@/hooks/useBusinessPlanProgress';

export const ProgressDashboard: React.FC = () => {
  const { metadata, lastSaved } = useBusinessPlan();
  const { 
    progressStats, 
    chapterProgress,
    getNextSection,
    getEstimatedTimeRemaining
  } = useBusinessPlanProgress();

  const nextSection = getNextSection();
  const estimatedTime = getEstimatedTimeRemaining();

  return (
    <div className="space-y-6">
      {/* Overall Progress */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="w-5 h-5 text-blue-500" />
            Overall Progress
          </CardTitle>
          <CardDescription>
            Track your business plan completion
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Main Progress Bar */}
          <div>
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium">Completion</span>
              <span className="text-2xl font-bold text-blue-600">
                {progressStats.overallProgress}%
              </span>
            </div>
            <Progress value={progressStats.overallProgress} className="h-3" />
            <p className="text-sm text-gray-600 mt-2">
              {progressStats.completedSections} of {progressStats.totalSections} sections completed
            </p>
          </div>

          {/* Stats Grid */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center p-3 bg-green-50 rounded-lg">
              <CheckCircle className="w-6 h-6 text-green-600 mx-auto mb-1" />
              <div className="text-2xl font-bold text-green-700">
                {progressStats.completedSections}
              </div>
              <div className="text-xs text-green-600">Completed</div>
            </div>

            <div className="text-center p-3 bg-yellow-50 rounded-lg">
              <Clock className="w-6 h-6 text-yellow-600 mx-auto mb-1" />
              <div className="text-2xl font-bold text-yellow-700">
                {progressStats.inProgressSections}
              </div>
              <div className="text-xs text-yellow-600">In Progress</div>
            </div>

            <div className="text-center p-3 bg-gray-50 rounded-lg">
              <FileText className="w-6 h-6 text-gray-600 mx-auto mb-1" />
              <div className="text-2xl font-bold text-gray-700">
                {progressStats.notStartedSections}
              </div>
              <div className="text-xs text-gray-600">Not Started</div>
            </div>

            <div className="text-center p-3 bg-purple-50 rounded-lg">
              <Award className="w-6 h-6 text-purple-600 mx-auto mb-1" />
              <div className="text-2xl font-bold text-purple-700">
                {progressStats.totalWords.toLocaleString()}
              </div>
              <div className="text-xs text-purple-600">Words Written</div>
            </div>
          </div>

          {/* Word Count Progress */}
          <div>
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium">Word Count Progress</span>
              <span className="text-sm text-gray-600">
                {progressStats.totalWords.toLocaleString()} / {progressStats.estimatedTotalWords.toLocaleString()} words
              </span>
            </div>
            <Progress value={progressStats.completionRate} className="h-2" />
          </div>
        </CardContent>
      </Card>

      {/* Next Steps */}
      {nextSection && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="w-5 h-5 text-orange-500" />
              Next Steps
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="p-4 bg-orange-50 rounded-lg border border-orange-200">
              <div className="flex items-start gap-3">
                <Zap className="w-5 h-5 text-orange-600 mt-0.5" />
                <div className="flex-1">
                  <p className="font-medium text-orange-900 mb-1">
                    Continue with: {nextSection.title}
                  </p>
                  <p className="text-sm text-orange-700">
                    Chapter: {nextSection.chapterTitle}
                  </p>
                </div>
                <Badge variant="secondary" className="bg-orange-100 text-orange-800">
                  Next
                </Badge>
              </div>
            </div>

            <div className="flex items-center gap-2 text-sm text-gray-600">
              <Calendar className="w-4 h-4" />
              <span>Estimated time remaining: {estimatedTime} minutes</span>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Chapter Progress */}
      <Card>
        <CardHeader>
          <CardTitle className="text-base">Chapter Progress</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {chapterProgress.map((chapter) => (
              <div key={chapter.chapterId} className="space-y-1">
                <div className="flex items-center justify-between text-sm">
                  <span className="font-medium">{chapter.title}</span>
                  <div className="flex items-center gap-2">
                    <span className="text-gray-600">
                      {chapter.completed}/{chapter.total}
                    </span>
                    <Badge 
                      variant={
                        chapter.status === 'complete' ? 'default' :
                        chapter.status === 'in_progress' ? 'secondary' :
                        'outline'
                      }
                      className="text-xs"
                    >
                      {chapter.percentage}%
                    </Badge>
                  </div>
                </div>
                <Progress value={chapter.percentage} className="h-1.5" />
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Metadata */}
      <Card>
        <CardHeader>
          <CardTitle className="text-base">Plan Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Plan Name:</span>
            <span className="font-medium">{metadata.name}</span>
          </div>
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Industry:</span>
            <span className="font-medium">{metadata.industry}</span>
          </div>
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Stage:</span>
            <Badge variant="secondary">{metadata.businessStage}</Badge>
          </div>
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Funding Stage:</span>
            <Badge variant="secondary">{metadata.fundingStage}</Badge>
          </div>
          {lastSaved && (
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">Last Saved:</span>
              <span className="font-medium">
                {new Date(lastSaved).toLocaleString()}
              </span>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};


=== FILE: client/src/components/ErrorBoundary.tsx ===

import React, { Component, ErrorInfo, ReactNode } from 'react';
import { AppError } from '@shared/error-handling';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: AppError, errorInfo: ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error: AppError | null;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): State {
    // Update state so the next render will show the fallback UI
    const appError = error instanceof AppError 
      ? error 
      : new AppError(error.message, 500, 'UNKNOWN_ERROR', false, error);
    
    return { hasError: true, error: appError };
  }

  override componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    const appError = error instanceof AppError 
      ? error 
      : new AppError(error.message, 500, 'UNKNOWN_ERROR', false, error);

    // Log error to monitoring service
    console.error('ErrorBoundary caught an error:', appError, errorInfo);
    
    // Call custom error handler if provided
    if (this.props.onError) {
      this.props.onError(appError, errorInfo);
    }
  }

  override render() {
    if (this.state.hasError) {
      // Render custom fallback UI
      if (this.props.fallback) {
        return this.props.fallback;
      }

      // Default fallback UI
      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
          <div className="max-w-md w-full bg-white shadow-lg rounded-lg p-6">
            <div className="flex items-center mb-4">
              <div className="flex-shrink-0">
                <svg className="h-8 w-8 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <div className="ml-3">
                <h3 className="text-lg font-medium text-gray-900">
                  Something went wrong
                </h3>
              </div>
            </div>
            
            <div className="mb-4">
              <p className="text-sm text-gray-600">
                {this.state.error?.message || 'An unexpected error occurred'}
              </p>
              {this.state.error?.code && (
                <p className="text-xs text-gray-500 mt-1">
                  Error Code: {this.state.error.code}
                </p>
              )}
            </div>

            <div className="flex space-x-3">
              <button
                onClick={() => window.location.reload()}
                className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                Reload Page
              </button>
              <button
                onClick={() => this.setState({ hasError: false, error: null })}
                className="flex-1 bg-gray-200 text-gray-800 px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500"
              >
                Try Again
              </button>
            </div>

            {process.env.NODE_ENV === 'development' && this.state.error && (
              <details className="mt-4">
                <summary className="text-sm text-gray-500 cursor-pointer">
                  Error Details (Development)
                </summary>
                <pre className="mt-2 text-xs text-gray-600 bg-gray-100 p-2 rounded overflow-auto">
                  {JSON.stringify(this.state.error, null, 2)}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

// Higher-order component for easier usage
export function withErrorBoundary<P extends object>(
  Component: React.ComponentType<P>,
  fallback?: ReactNode,
  onError?: (error: AppError, errorInfo: ErrorInfo) => void
) {
  const WrappedComponent = (props: P) => (
    <ErrorBoundary
      fallback={fallback}
      {...(onError ? { onError } as { onError: (error: AppError, errorInfo: ErrorInfo) => void } : {})}
    >
      <Component {...props} />
    </ErrorBoundary>
  );

  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;
  
  return WrappedComponent;
}

// Hook for functional components to handle errors
export function useErrorHandler() {
  const [error, setError] = React.useState<AppError | null>(null);

  const handleError = React.useCallback((error: unknown) => {
    const appError = error instanceof AppError 
      ? error 
      : new AppError(
          error instanceof Error ? error.message : 'Unknown error',
          500,
          'UNKNOWN_ERROR',
          false,
          error
        );
    
    setError(appError);
  }, []);

  const clearError = React.useCallback(() => {
    setError(null);
  }, []);

  return { error, handleError, clearError };
}

=== FILE: client/src/hooks/useCreditScoring.ts ===

import { useState, useCallback, useMemo } from 'react';
import { useLocalStorage } from './useLocalStorage';
import { useDebounce } from './useDebounce';
import { getCreditRating, matchesDateRange, downloadFile, exportToCSV, exportToJSON } from '@/utils/creditScoringUtils';

export interface CreditAssessment {
  id: number;
  companyName: string;
  ein: string;
  industry: string;
  finalScore: number;
  defaultProbability: number;
  confidence: number;
  assessmentDate: string;
  decision: any;
  requestedAmount: string;
  components: any;
  modelVersion: string;
  status: string;
  processingTime?: number;
  riskFactors?: any[];
  strengths?: any[];
  metrics?: any;
}

export interface FilterCriteria {
  minScore: number;
  maxScore: number;
  industry: string;
  decision: string;
  dateRange: string;
}

export interface PortfolioMetrics {
  avgScore: number;
  totalApplications: number;
  totalExposure: number;
  avgDefaultProb: string;
  ratingDistribution: Record<string, number>;
  decisionDistribution: Record<string, number>;
  approvalRate: string;
  avgConfidence: string;
  processingTime: string;
  modelAccuracy: string;
}

/**
 * Enhanced hook for credit scoring operations with caching and performance optimizations
 */
export function useCreditScoring() {
  const [assessments, setAssessments] = useLocalStorage<CreditAssessment[]>('credit_assessments', []);
  const [filterCriteria, setFilterCriteria] = useState<FilterCriteria>({
    minScore: 0,
    maxScore: 850,
    industry: 'all',
    decision: 'all',
    dateRange: '30d'
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);

  // Debounced search for performance
  const debouncedSearchTerm = useDebounce(searchTerm, 300);

  // Memoized filtered assessments for performance
  const filteredAssessments = useMemo(() => {
    return assessments.filter(assessment => {
      const matchesScore = assessment.finalScore >= filterCriteria.minScore && 
                          assessment.finalScore <= filterCriteria.maxScore;
      const matchesIndustry = filterCriteria.industry === 'all' || 
                             assessment.industry === filterCriteria.industry;
      const matchesDecision = filterCriteria.decision === 'all' || 
                             assessment.decision.decision === filterCriteria.decision;
      const matchesSearch = debouncedSearchTerm === '' || 
        assessment.companyName.toLowerCase().includes(debouncedSearchTerm.toLowerCase()) ||
        (assessment.ein && assessment.ein.includes(debouncedSearchTerm));
      
      // Date range filter (using shared utility)
      const dateMatch = matchesDateRange(assessment.assessmentDate, filterCriteria.dateRange);
      
      return matchesScore && matchesIndustry && matchesDecision && matchesSearch && dateMatch;
    });
  }, [assessments, filterCriteria, debouncedSearchTerm]);

  // Memoized portfolio metrics
  const portfolioMetrics = useMemo((): PortfolioMetrics | null => {
    if (assessments.length === 0) return null;
    
    const avgScore = assessments.reduce((sum, a) => sum + a.finalScore, 0) / assessments.length;
    const totalExposure = assessments.reduce((sum, a) => {
      const amt = parseFloat(a.requestedAmount) || 0;
      return sum + amt;
    }, 0);
    const avgDefaultProb = assessments.reduce((sum, a) => sum + a.defaultProbability, 0) / assessments.length;
    const avgProcessingTime = assessments.reduce((sum, a) => sum + (a.processingTime || 0), 0) / assessments.length;
    
    const ratingDist = assessments.reduce((acc, a) => {
      const rating = getCreditRating(a.finalScore).rating;
      acc[rating] = (acc[rating] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    const decisionDist = assessments.reduce((acc, a) => {
      acc[a.decision.decision] = (acc[a.decision.decision] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    return {
      avgScore: Math.round(avgScore),
      totalApplications: assessments.length,
      totalExposure,
      avgDefaultProb: (avgDefaultProb * 100).toFixed(2),
      ratingDistribution: ratingDist,
      decisionDistribution: decisionDist,
      approvalRate: (assessments.filter(a => a.decision.decision === 'APPROVED').length / assessments.length * 100).toFixed(1),
      avgConfidence: ((assessments.reduce((sum, a) => sum + a.confidence, 0) / assessments.length) * 100).toFixed(1),
      processingTime: avgProcessingTime.toFixed(1),
      modelAccuracy: '94.2' // This would come from model validation in production
    };
  }, [assessments]);

  // Credit rating helper function (now using shared utility)
  // getCreditRating is imported from utils

  // Add new assessment
  const addAssessment = useCallback((assessment: CreditAssessment) => {
    setAssessments(prev => [assessment, ...prev]);
  }, [setAssessments]);

  // Update existing assessment
  const updateAssessment = useCallback((id: number, updates: Partial<CreditAssessment>) => {
    setAssessments(prev => 
      prev.map(assessment => 
        assessment.id === id ? { ...assessment, ...updates } : assessment
      )
    );
  }, [setAssessments]);

  // Delete assessment
  const deleteAssessment = useCallback((id: number) => {
    setAssessments(prev => prev.filter(assessment => assessment.id !== id));
  }, [setAssessments]);

  // Clear all assessments
  const clearAllAssessments = useCallback(() => {
    setAssessments([]);
  }, [setAssessments]);

  // Export data (using shared utilities)
  const exportData = useCallback((format: 'json' | 'csv') => {
    const data = filteredAssessments;
    
    if (format === 'json') {
      return exportToJSON(data);
    } else if (format === 'csv') {
      const headers = ['Company', 'EIN', 'Score', 'Rating', 'Default Prob', 'Decision', 'Approved Amount', 'Interest Rate', 'Date', 'Processing Time'];
      const rowMapper = (a: any) => [
        a.companyName,
        a.ein || 'N/A',
        a.finalScore,
        getCreditRating(a.finalScore).rating,
        (a.defaultProbability * 100).toFixed(2) + '%',
        a.decision.decision,
        a.decision.approvedAmount || 0,
        a.decision.interestRate || 'N/A',
        a.assessmentDate,
        a.processingTime?.toFixed(1) + 'ms' || 'N/A'
      ];
      return exportToCSV(data, headers, rowMapper);
    }
    
    throw new Error('Unsupported export format');
  }, [filteredAssessments]);

  // Download file helper (now using shared utility)
  // downloadFile is imported from utils

  // Reset filters
  const resetFilters = useCallback(() => {
    setFilterCriteria({
      minScore: 0,
      maxScore: 850,
      industry: 'all',
      decision: 'all',
      dateRange: '30d'
    });
    setSearchTerm('');
  }, []);

  return {
    // Data
    assessments,
    filteredAssessments,
    portfolioMetrics,
    
    // Filters and search
    filterCriteria,
    setFilterCriteria,
    searchTerm,
    setSearchTerm,
    resetFilters,
    
    // State
    isProcessing,
    setIsProcessing,
    
    // Actions
    addAssessment,
    updateAssessment,
    deleteAssessment,
    clearAllAssessments,
    
    // Utilities
    getCreditRating,
    exportData,
    downloadFile
  };
}

export default useCreditScoring;


=== FILE: client/src/hooks/use-notifications.ts ===


import { useState, useEffect, useCallback } from 'react';

export interface Notification {
  id: string;
  title: string;
  message: string;
  type: 'success' | 'warning' | 'error' | 'info';
  timestamp: Date;
  read: boolean;
  persistent?: boolean;
}

export function useNotifications() {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [permission, setPermission] = useState<NotificationPermission>('default');

  // Request notification permission
  const requestPermission = useCallback(async () => {
    if ('Notification' in window) {
      const result = await Notification.requestPermission();
      setPermission(result);
      return result === 'granted';
    }
    return false;
  }, []);

  // Add a new notification
  const addNotification = useCallback((notification: Omit<Notification, 'id'>) => {
    const newNotification: Notification = {
      ...notification,
      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    };

    setNotifications(prev => [newNotification, ...prev.slice(0, 49)]); // Keep last 50
    setUnreadCount(prev => prev + 1);

    // Show browser notification if permission granted
    if (permission === 'granted' && 'Notification' in window) {
      const browserNotification = new Notification(notification.title, {
        body: notification.message,
        icon: '/icon-192.png',
        badge: '/badge-72.png',
        tag: newNotification.id,
        requireInteraction: notification.persistent,
        timestamp: notification.timestamp.getTime(),
      });

      browserNotification.onclick = () => {
        window.focus();
        browserNotification.close();
        markAsRead(newNotification.id);
      };

      // Auto-close non-persistent notifications
      if (!notification.persistent) {
        setTimeout(() => browserNotification.close(), 5000);
      }
    }

    // Store in localStorage for persistence
    try {
      const stored = localStorage.getItem('notifications') || '[]';
      const existing = JSON.parse(stored);
      existing.unshift(newNotification);
      localStorage.setItem('notifications', JSON.stringify(existing.slice(0, 50)));
    } catch (error) {
      console.warn('Failed to store notification:', error);
    }

    return newNotification.id;
  }, [permission]);

  // Mark notification as read
  const markAsRead = useCallback((id: string) => {
    setNotifications(prev => 
      prev.map(notif => 
        notif.id === id ? { ...notif, read: true } : notif
      )
    );
    setUnreadCount(prev => Math.max(0, prev - 1));

    // Update localStorage
    try {
      const stored = localStorage.getItem('notifications') || '[]';
      const existing = JSON.parse(stored);
      const updated = existing.map((notif: Notification) => 
        notif.id === id ? { ...notif, read: true } : notif
      );
      localStorage.setItem('notifications', JSON.stringify(updated));
    } catch (error) {
      console.warn('Failed to update notification:', error);
    }
  }, []);

  // Mark all as read
  const markAllAsRead = useCallback(() => {
    setNotifications(prev => prev.map(notif => ({ ...notif, read: true })));
    setUnreadCount(0);

    try {
      const stored = localStorage.getItem('notifications') || '[]';
      const existing = JSON.parse(stored);
      const updated = existing.map((notif: Notification) => ({ ...notif, read: true }));
      localStorage.setItem('notifications', JSON.stringify(updated));
    } catch (error) {
      console.warn('Failed to update notifications:', error);
    }
  }, []);

  // Clear notification
  const clearNotification = useCallback((id: string) => {
    setNotifications(prev => {
      const filtered = prev.filter(notif => notif.id !== id);
      const wasUnread = prev.find(notif => notif.id === id && !notif.read);
      if (wasUnread) {
        setUnreadCount(count => Math.max(0, count - 1));
      }
      return filtered;
    });

    try {
      const stored = localStorage.getItem('notifications') || '[]';
      const existing = JSON.parse(stored);
      const updated = existing.filter((notif: Notification) => notif.id !== id);
      localStorage.setItem('notifications', JSON.stringify(updated));
    } catch (error) {
      console.warn('Failed to clear notification:', error);
    }
  }, []);

  // Clear all notifications
  const clearAll = useCallback(() => {
    setNotifications([]);
    setUnreadCount(0);
    try {
      localStorage.removeItem('notifications');
    } catch (error) {
      console.warn('Failed to clear notifications:', error);
    }
  }, []);

  // Load notifications from localStorage on mount
  useEffect(() => {
    try {
      const stored = localStorage.getItem('notifications');
      if (stored) {
        const parsed = JSON.parse(stored);
        setNotifications(parsed);
        setUnreadCount(parsed.filter((n: Notification) => !n.read).length);
      }
    } catch (error) {
      console.warn('Failed to load notifications:', error);
    }

    // Check current permission
    if ('Notification' in window) {
      setPermission(Notification.permission);
    }
  }, []);

  // Auto-generate notifications based on metrics changes
  const createMetricNotification = useCallback((
    metric: string, 
    value: number, 
    threshold: number, 
    type: 'increase' | 'decrease' = 'increase'
  ) => {
    const isAlert = type === 'increase' ? value > threshold : value < threshold;
    if (isAlert) {
      addNotification({
        title: `${metric} Alert`,
        message: `${metric} is ${type === 'increase' ? 'above' : 'below'} threshold: ${value}`,
        type: type === 'increase' ? 'warning' : 'error',
        timestamp: new Date(),
        read: false,
        persistent: true
      });
    }
  }, [addNotification]);

  return {
    notifications,
    unreadCount,
    permission,
    addNotification,
    markAsRead,
    markAllAsRead,
    clearNotification,
    clearAll,
    requestPermission,
    createMetricNotification,
  };
}


=== FILE: client/src/hooks/useAssessment.ts ===

/**
 * Assessment Hook
 * 
 * React hook for managing assessment sessions and results
 * - Start/resume assessments
 * - Submit responses
 * - Track progress
 * - View results
 */

import { useState, useEffect, useCallback } from 'react';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';

// ============================================================================
// TYPES
// ============================================================================

export interface AssessmentType {
  id: string;
  name: string;
  description: string;
  duration: string;
  questions: number;
  benefits: string[];
}

export interface AssessmentSession {
  sessionId: string;
  assessmentType: string;
  totalQuestions: number;
  currentQuestionIndex: number;
  progressPercentage: number;
  status: 'in_progress' | 'completed' | 'abandoned';
}

export interface AssessmentQuestion {
  id: string;
  text: string;
  category?: string;
  options?: Array<{ value: number; label: string }>;
}

export interface AssessmentProgress {
  currentQuestionIndex: number;
  totalQuestions: number;
  progressPercentage: number;
  isComplete: boolean;
}

// ============================================================================
// API FUNCTIONS
// ============================================================================

async function fetchAssessmentTypes(): Promise<AssessmentType[]> {
  const response = await fetch('/api/assessments/types');
  if (!response.ok) throw new Error('Failed to fetch assessment types');
  const data = await response.json();
  return data.assessmentTypes;
}

async function startAssessment(assessmentType: string): Promise<{
  session: AssessmentSession;
  questions: AssessmentQuestion[];
}> {
  const response = await fetch('/api/assessments/start', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ assessmentType })
  });
  
  if (!response.ok) throw new Error('Failed to start assessment');
  return await response.json();
}

async function submitResponse(
  sessionId: string,
  questionId: string,
  value: number | string
): Promise<AssessmentProgress> {
  const response = await fetch('/api/assessments/response', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ sessionId, questionId, value })
  });
  
  if (!response.ok) throw new Error('Failed to submit response');
  const data = await response.json();
  return data.progress;
}

async function completeAssessment(sessionId: string): Promise<any> {
  const response = await fetch('/api/assessments/complete', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ sessionId })
  });
  
  if (!response.ok) throw new Error('Failed to complete assessment');
  return await response.json();
}

async function abandonAssessment(sessionId: string): Promise<void> {
  const response = await fetch('/api/assessments/abandon', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ sessionId })
  });
  
  if (!response.ok) throw new Error('Failed to abandon assessment');
}

async function fetchActiveSessions(): Promise<AssessmentSession[]> {
  const response = await fetch('/api/assessments/active');
  if (!response.ok) throw new Error('Failed to fetch active sessions');
  const data = await response.json();
  return data.sessions;
}

async function fetchAssessmentResults(assessmentType: string): Promise<any> {
  const response = await fetch(`/api/assessments/results/${assessmentType}`);
  if (!response.ok) {
    if (response.status === 404) return null;
    throw new Error('Failed to fetch assessment results');
  }
  const data = await response.json();
  return data.assessment;
}

async function fetchAllResults(): Promise<any[]> {
  const response = await fetch('/api/assessments/results');
  if (!response.ok) throw new Error('Failed to fetch assessments');
  const data = await response.json();
  return data.assessments;
}

async function fetchCompositeProfile(): Promise<any> {
  const response = await fetch('/api/assessments/profile');
  if (!response.ok) {
    if (response.status === 404) return null;
    throw new Error('Failed to fetch composite profile');
  }
  const data = await response.json();
  return data.profile;
}

async function triggerAgentAdaptation(): Promise<any> {
  const response = await fetch('/api/assessments/adapt-agents', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' }
  });
  
  if (!response.ok) throw new Error('Failed to trigger agent adaptation');
  return await response.json();
}

// ============================================================================
// MAIN HOOK
// ============================================================================

export function useAssessment() {
  const queryClient = useQueryClient();
  const [currentSession, setCurrentSession] = useState<AssessmentSession | null>(null);
  const [currentQuestions, setCurrentQuestions] = useState<AssessmentQuestion[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);

  // Fetch available assessment types
  const { data: assessmentTypes, isLoading: isLoadingTypes } = useQuery({
    queryKey: ['assessmentTypes'],
    queryFn: fetchAssessmentTypes
  });

  // Fetch active sessions
  const { data: activeSessions, isLoading: isLoadingActiveSessions } = useQuery({
    queryKey: ['activeSessions'],
    queryFn: fetchActiveSessions
  });

  // Start assessment mutation
  const startAssessmentMutation = useMutation({
    mutationFn: (assessmentType: string) => startAssessment(assessmentType),
    onSuccess: (data) => {
      setCurrentSession(data.session);
      setCurrentQuestions(data.questions);
      setCurrentQuestionIndex(data.session.currentQuestionIndex);
      queryClient.invalidateQueries({ queryKey: ['activeSessions'] });
    }
  });

  // Submit response mutation
  const submitResponseMutation = useMutation({
    mutationFn: ({ sessionId, questionId, value }: {
      sessionId: string;
      questionId: string;
      value: number | string;
    }) => submitResponse(sessionId, questionId, value),
    onSuccess: (progress) => {
      setCurrentQuestionIndex(progress.currentQuestionIndex);
      
      if (currentSession) {
        setCurrentSession({
          ...currentSession,
          currentQuestionIndex: progress.currentQuestionIndex,
          progressPercentage: progress.progressPercentage
        });
      }
    }
  });

  // Complete assessment mutation
  const completeAssessmentMutation = useMutation({
    mutationFn: (sessionId: string) => completeAssessment(sessionId),
    onSuccess: () => {
      setCurrentSession(null);
      setCurrentQuestions([]);
      setCurrentQuestionIndex(0);
      queryClient.invalidateQueries({ queryKey: ['activeSessions'] });
      queryClient.invalidateQueries({ queryKey: ['assessmentResults'] });
      queryClient.invalidateQueries({ queryKey: ['compositeProfile'] });
    }
  });

  // Abandon assessment mutation
  const abandonAssessmentMutation = useMutation({
    mutationFn: (sessionId: string) => abandonAssessment(sessionId),
    onSuccess: () => {
      setCurrentSession(null);
      setCurrentQuestions([]);
      setCurrentQuestionIndex(0);
      queryClient.invalidateQueries({ queryKey: ['activeSessions'] });
    }
  });

  // Trigger agent adaptation mutation
  const adaptAgentsMutation = useMutation({
    mutationFn: () => triggerAgentAdaptation(),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['agentAdaptation'] });
    }
  });

  // ============================================================================
  // CONVENIENCE METHODS
  // ============================================================================

  const startNewAssessment = useCallback((assessmentType: string) => {
    return startAssessmentMutation.mutateAsync(assessmentType);
  }, [startAssessmentMutation]);

  const answerQuestion = useCallback((questionId: string, value: number | string) => {
    if (!currentSession) {
      throw new Error('No active session');
    }

    return submitResponseMutation.mutateAsync({
      sessionId: currentSession.sessionId,
      questionId,
      value
    });
  }, [currentSession, submitResponseMutation]);

  const finishAssessment = useCallback(() => {
    if (!currentSession) {
      throw new Error('No active session');
    }

    return completeAssessmentMutation.mutateAsync(currentSession.sessionId);
  }, [currentSession, completeAssessmentMutation]);

  const cancelAssessment = useCallback(() => {
    if (!currentSession) {
      throw new Error('No active session');
    }

    return abandonAssessmentMutation.mutateAsync(currentSession.sessionId);
  }, [currentSession, abandonAssessmentMutation]);

  const getCurrentQuestion = useCallback(() => {
    if (!currentQuestions || currentQuestionIndex >= currentQuestions.length) {
      return null;
    }
    return currentQuestions[currentQuestionIndex];
  }, [currentQuestions, currentQuestionIndex]);

  const goToNextQuestion = useCallback(() => {
    if (currentQuestionIndex < currentQuestions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    }
  }, [currentQuestionIndex, currentQuestions]);

  const goToPreviousQuestion = useCallback(() => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
    }
  }, [currentQuestionIndex]);

  const isLastQuestion = currentQuestionIndex === currentQuestions.length - 1;
  const isFirstQuestion = currentQuestionIndex === 0;

  return {
    // Data
    assessmentTypes,
    activeSessions,
    currentSession,
    currentQuestion: getCurrentQuestion(),
    currentQuestionIndex,
    totalQuestions: currentQuestions.length,
    progressPercentage: currentSession?.progressPercentage || 0,
    
    // State
    isLoadingTypes,
    isLoadingActiveSessions,
    isStarting: startAssessmentMutation.isPending,
    isSubmitting: submitResponseMutation.isPending,
    isCompleting: completeAssessmentMutation.isPending,
    isAbandoning: abandonAssessmentMutation.isPending,
    isAdaptingAgents: adaptAgentsMutation.isPending,
    
    // Navigation
    isLastQuestion,
    isFirstQuestion,
    canGoNext: currentQuestionIndex < currentQuestions.length - 1,
    canGoPrevious: currentQuestionIndex > 0,
    
    // Actions
    startNewAssessment,
    answerQuestion,
    finishAssessment,
    cancelAssessment,
    goToNextQuestion,
    goToPreviousQuestion,
    adaptAgents: () => adaptAgentsMutation.mutateAsync(),
    
    // Errors
    error: startAssessmentMutation.error || 
           submitResponseMutation.error || 
           completeAssessmentMutation.error ||
           abandonAssessmentMutation.error
  };
}

// ============================================================================
// RESULTS HOOK
// ============================================================================

export function useAssessmentResults(assessmentType?: string) {
  const queryClient = useQueryClient();

  // Fetch specific assessment results
  const { data: results, isLoading, error } = useQuery({
    queryKey: ['assessmentResults', assessmentType],
    queryFn: () => assessmentType ? fetchAssessmentResults(assessmentType) : null,
    enabled: !!assessmentType
  });

  // Fetch all results
  const { data: allResults, isLoading: isLoadingAll } = useQuery({
    queryKey: ['allAssessmentResults'],
    queryFn: fetchAllResults
  });

  // Fetch composite profile
  const { data: compositeProfile, isLoading: isLoadingProfile } = useQuery({
    queryKey: ['compositeProfile'],
    queryFn: fetchCompositeProfile
  });

  const refreshResults = useCallback(() => {
    queryClient.invalidateQueries({ queryKey: ['assessmentResults'] });
    queryClient.invalidateQueries({ queryKey: ['allAssessmentResults'] });
    queryClient.invalidateQueries({ queryKey: ['compositeProfile'] });
  }, [queryClient]);

  return {
    results,
    allResults,
    compositeProfile,
    isLoading: isLoading || isLoadingAll || isLoadingProfile,
    error,
    refreshResults,
    hasResults: !!results,
    hasCompositeProfile: !!compositeProfile
  };
}

// ============================================================================
// AGENT ADAPTATION HOOK
// ============================================================================

export function useAgentAdaptation(agentType?: string) {
  const queryClient = useQueryClient();

  // Fetch agent adaptation
  const { data: adaptation, isLoading } = useQuery({
    queryKey: ['agentAdaptation', agentType],
    queryFn: async () => {
      if (!agentType) return null;
      
      const response = await fetch(`/api/assessments/agent-adaptation/${agentType}`);
      if (!response.ok) {
        if (response.status === 404) return null;
        throw new Error('Failed to fetch agent adaptation');
      }
      const data = await response.json();
      return data.adaptation;
    },
    enabled: !!agentType
  });

  // Fetch personality insights
  const { data: personalityInsights, isLoading: isLoadingInsights } = useQuery({
    queryKey: ['personalityInsights'],
    queryFn: async () => {
      const response = await fetch('/api/assessments/personality/insights');
      if (!response.ok) {
        if (response.status === 404) return [];
        throw new Error('Failed to fetch personality insights');
      }
      const data = await response.json();
      return data.insights;
    }
  });

  const refreshAdaptation = useCallback(() => {
    queryClient.invalidateQueries({ queryKey: ['agentAdaptation'] });
    queryClient.invalidateQueries({ queryKey: ['personalityInsights'] });
  }, [queryClient]);

  return {
    adaptation,
    personalityInsights,
    isLoading: isLoading || isLoadingInsights,
    refreshAdaptation,
    hasAdaptation: !!adaptation
  };
}


=== FILE: client/src/hooks/use-mobile.tsx ===

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


=== FILE: client/src/hooks/useBusinessPlanProgress.ts ===

import { useMemo } from 'react';
import { useBusinessPlan } from '@/contexts/BusinessPlanContext';
import { BUSINESS_PLAN_STRUCTURE } from '@/constants/businessPlanStructure';

export interface ProgressStats {
  totalSections: number;
  completedSections: number;
  inProgressSections: number;
  notStartedSections: number;
  overallProgress: number;
  totalWords: number;
  estimatedTotalWords: number;
  completionRate: number;
}

export interface ChapterProgressInfo {
  chapterId: string;
  title: string;
  completed: number;
  total: number;
  percentage: number;
  status: 'not_started' | 'in_progress' | 'complete';
}

export const useBusinessPlanProgress = () => {
  const { getSectionStatus, getSectionWordCount, completedSections } = useBusinessPlan();

  const progressStats = useMemo((): ProgressStats => {
    let totalSections = 0;
    let completedCount = 0;
    let inProgressCount = 0;
    let notStartedCount = 0;
    let totalWords = 0;
    let estimatedTotalWords = 0;

    BUSINESS_PLAN_STRUCTURE.forEach(chapter => {
      chapter.sections.forEach(section => {
        totalSections++;
        const status = getSectionStatus(section.id);
        const wordCount = getSectionWordCount(section.id);
        
        totalWords += wordCount;
        estimatedTotalWords += section.estimatedWords;

        if (status === 'complete') completedCount++;
        else if (status === 'in_progress') inProgressCount++;
        else notStartedCount++;
      });
    });

    const overallProgress = totalSections > 0 
      ? Math.round((completedCount / totalSections) * 100) 
      : 0;

    const completionRate = estimatedTotalWords > 0
      ? Math.round((totalWords / estimatedTotalWords) * 100)
      : 0;

    return {
      totalSections,
      completedSections: completedCount,
      inProgressSections: inProgressCount,
      notStartedSections: notStartedCount,
      overallProgress,
      totalWords,
      estimatedTotalWords,
      completionRate
    };
  }, [getSectionStatus, getSectionWordCount]);

  const chapterProgress = useMemo((): ChapterProgressInfo[] => {
    return BUSINESS_PLAN_STRUCTURE.map(chapter => {
      const total = chapter.sections.length;
      const completed = chapter.sections.filter(s => 
        getSectionStatus(s.id) === 'complete'
      ).length;
      const inProgress = chapter.sections.filter(s => 
        getSectionStatus(s.id) === 'in_progress'
      ).length;

      const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;
      
      let status: 'not_started' | 'in_progress' | 'complete' = 'not_started';
      if (completed === total) status = 'complete';
      else if (completed > 0 || inProgress > 0) status = 'in_progress';

      return {
        chapterId: chapter.id,
        title: chapter.title + (chapter.subtitle ? ' ' + chapter.subtitle : ''),
        completed,
        total,
        percentage,
        status
      };
    });
  }, [getSectionStatus]);

  const getNextSection = useMemo(() => {
    return () => {
      for (const chapter of BUSINESS_PLAN_STRUCTURE) {
        for (const section of chapter.sections) {
          const status = getSectionStatus(section.id);
          if (status === 'not_started' || status === 'in_progress') {
            return {
              chapterId: chapter.id,
              sectionId: section.id,
              title: section.title,
              chapterTitle: chapter.title
            };
          }
        }
      }
      return null;
    };
  }, [getSectionStatus]);

  const getRecommendedSections = useMemo(() => {
    return (limit = 3) => {
      const recommended: Array<{
        chapterId: string;
        sectionId: string;
        title: string;
        reason: string;
        priority: 'high' | 'medium' | 'low';
      }> = [];

      // First priority: Required sections not started
      BUSINESS_PLAN_STRUCTURE.forEach(chapter => {
        chapter.sections.forEach(section => {
          if (section.required && getSectionStatus(section.id) === 'not_started') {
            recommended.push({
              chapterId: chapter.id,
              sectionId: section.id,
              title: section.title,
              reason: 'Required section',
              priority: 'high'
            });
          }
        });
      });

      // Second priority: In-progress sections
      BUSINESS_PLAN_STRUCTURE.forEach(chapter => {
        chapter.sections.forEach(section => {
          if (getSectionStatus(section.id) === 'in_progress') {
            recommended.push({
              chapterId: chapter.id,
              sectionId: section.id,
              title: section.title,
              reason: 'Continue working',
              priority: 'medium'
            });
          }
        });
      });

      // Third priority: Optional sections not started
      BUSINESS_PLAN_STRUCTURE.forEach(chapter => {
        chapter.sections.forEach(section => {
          if (!section.required && getSectionStatus(section.id) === 'not_started') {
            recommended.push({
              chapterId: chapter.id,
              sectionId: section.id,
              title: section.title,
              reason: 'Enhance your plan',
              priority: 'low'
            });
          }
        });
      });

      return recommended.slice(0, limit);
    };
  }, [getSectionStatus]);

  const isChapterComplete = useMemo(() => {
    return (chapterId: string): boolean => {
      const chapter = BUSINESS_PLAN_STRUCTURE.find(c => c.id === chapterId);
      if (!chapter) return false;

      return chapter.sections.every(section => 
        getSectionStatus(section.id) === 'complete'
      );
    };
  }, [getSectionStatus]);

  const getEstimatedTimeRemaining = useMemo(() => {
    return (): number => {
      // Estimate 5 minutes per 100 words
      const remainingWords = progressStats.estimatedTotalWords - progressStats.totalWords;
      return Math.ceil((remainingWords / 100) * 5);
    };
  }, [progressStats]);

  return {
    progressStats,
    chapterProgress,
    getNextSection,
    getRecommendedSections,
    isChapterComplete,
    getEstimatedTimeRemaining
  };
};


=== FILE: client/src/hooks/use-organizations.ts ===

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useToast } from "./use-toast";
import { UserType } from "../../../shared/schema";

interface Organization {
  id: string;
  name: string;
  description?: string;
  organizationType: UserType;
  ownerId: string;
  industry?: string;
  size?: string;
  location?: string;
  website?: string;
  logoUrl?: string;
  verified: boolean;
  createdAt: string;
  updatedAt: string;
  memberCount?: number;
  revenue?: number;
  fundingStage?: string;
  socialLinks?: {
    linkedin?: string;
    twitter?: string;
    github?: string;
  };
  contactInfo?: {
    email?: string;
    phone?: string;
    address?: string;
  };
}

interface OrganizationMember {
  id: string;
  name: string;
  email: string;
  role: 'owner' | 'admin' | 'member' | 'viewer';
  avatar?: string;
  status: 'active' | 'pending' | 'inactive';
  joinedAt: string;
  department?: string;
}

interface OrganizationStats {
  totalOrganizations: number;
  activeOrganizations: number;
  totalMembers: number;
  industries: { [key: string]: number };
  organizationTypes: { [key: string]: number };
  totalRevenue: number;
  averageRevenue: number;
}

interface CreateOrganizationData {
  name: string;
  description?: string;
  organizationType: UserType;
  industry?: string;
  size?: string;
  location?: string;
  website?: string;
  email?: string;
  phone?: string;
  address?: string;
  linkedin?: string;
  twitter?: string;
  github?: string;
}

interface UpdateOrganizationData {
  name?: string;
  description?: string;
  organizationType?: UserType;
  industry?: string;
  size?: string;
  location?: string;
  website?: string;
  email?: string;
  phone?: string;
  address?: string;
  linkedin?: string;
  twitter?: string;
  github?: string;
}

interface InviteMemberData {
  email: string;
  role: 'admin' | 'member' | 'viewer';
  message?: string;
}

async function fetchOrganizations(): Promise<Organization[]> {
  const response = await fetch("/api/organizations");
  if (!response.ok) {
    throw new Error("Failed to fetch organizations");
  }
  return await response.json();
}

async function fetchOrganization(orgId: string): Promise<Organization> {
  const response = await fetch(`/api/organizations/${orgId}`);
  if (!response.ok) {
    throw new Error("Failed to fetch organization");
  }
  return await response.json();
}

async function fetchOrganizationMembers(orgId: string): Promise<OrganizationMember[]> {
  const response = await fetch(`/api/organizations/${orgId}/members`);
  if (!response.ok) {
    throw new Error("Failed to fetch organization members");
  }
  return await response.json();
}

async function fetchOrganizationAnalytics(orgId: string): Promise<any> {
  const response = await fetch(`/api/organizations/${orgId}/analytics`);
  if (!response.ok) {
    throw new Error("Failed to fetch organization analytics");
  }
  return await response.json();
}

async function createOrganization(data: CreateOrganizationData): Promise<Organization> {
  const response = await fetch("/api/organizations", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to create organization");
  }

  return await response.json();
}

async function updateOrganization(orgId: string, data: UpdateOrganizationData): Promise<Organization> {
  const response = await fetch(`/api/organizations/${orgId}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to update organization");
  }

  return await response.json();
}

async function deleteOrganization(orgId: string): Promise<void> {
  const response = await fetch(`/api/organizations/${orgId}`, {
    method: "DELETE",
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to delete organization");
  }
}

async function inviteMember(orgId: string, data: InviteMemberData): Promise<any> {
  const response = await fetch(`/api/organizations/${orgId}/members`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to invite member");
  }

  return await response.json();
}

export function useOrganizations() {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  // Organizations list
  const {
    data: organizations,
    isLoading: isLoadingOrganizations,
    error: organizationsError
  } = useQuery({
    queryKey: ["organizations"],
    queryFn: fetchOrganizations,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Create organization mutation
  const createOrganizationMutation = useMutation({
    mutationFn: createOrganization,
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ["organizations"] });
      toast({
        title: "Organization created",
        description: `${data.name} has been created successfully.`,
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to create organization. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Update organization mutation
  const updateOrganizationMutation = useMutation({
    mutationFn: ({ orgId, data }: { orgId: string; data: UpdateOrganizationData }) =>
      updateOrganization(orgId, data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ["organizations"] });
      queryClient.invalidateQueries({ queryKey: ["organization", data.id] });
      toast({
        title: "Organization updated",
        description: `${data.name} has been updated successfully.`,
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to update organization. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Delete organization mutation
  const deleteOrganizationMutation = useMutation({
    mutationFn: deleteOrganization,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["organizations"] });
      toast({
        title: "Organization deleted",
        description: "Organization has been deleted successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to delete organization. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Invite member mutation
  const inviteMemberMutation = useMutation({
    mutationFn: ({ orgId, data }: { orgId: string; data: InviteMemberData }) =>
      inviteMember(orgId, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["organization-members"] });
      toast({
        title: "Invitation sent",
        description: "Member invitation has been sent successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to send invitation. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Calculate stats
  const stats: OrganizationStats | undefined = organizations ? {
    totalOrganizations: organizations.length,
    activeOrganizations: organizations.filter(org => org.verified).length,
    totalMembers: organizations.reduce((sum, org) => sum + (org.memberCount || 0), 0),
    industries: organizations.reduce((acc, org) => {
      if (org.industry) {
        acc[org.industry] = (acc[org.industry] || 0) + 1;
      }
      return acc;
    }, {} as { [key: string]: number }),
    organizationTypes: organizations.reduce((acc, org) => {
      acc[org.organizationType] = (acc[org.organizationType] || 0) + 1;
      return acc;
    }, {} as { [key: string]: number }),
    totalRevenue: organizations.reduce((sum, org) => sum + (org.revenue || 0), 0),
    averageRevenue: organizations.length > 0 
      ? organizations.reduce((sum, org) => sum + (org.revenue || 0), 0) / organizations.length 
      : 0
  } : undefined;

  return {
    // Data
    organizations,
    stats,
    
    // Loading states
    isLoadingOrganizations,
    isLoading: isLoadingOrganizations,
    
    // Error states
    organizationsError,
    
    // Mutations
    createOrganization: createOrganizationMutation.mutate,
    isCreating: createOrganizationMutation.isPending,
    
    updateOrganization: updateOrganizationMutation.mutate,
    isUpdating: updateOrganizationMutation.isPending,
    
    deleteOrganization: deleteOrganizationMutation.mutate,
    isDeleting: deleteOrganizationMutation.isPending,
    
    inviteMember: inviteMemberMutation.mutate,
    isInviting: inviteMemberMutation.isPending,
  };
}

export function useOrganization(orgId: string) {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  // Organization details
  const {
    data: organization,
    isLoading: isLoadingOrganization,
    error: organizationError
  } = useQuery({
    queryKey: ["organization", orgId],
    queryFn: () => fetchOrganization(orgId),
    enabled: !!orgId,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Organization members
  const {
    data: members,
    isLoading: isLoadingMembers,
    error: membersError
  } = useQuery({
    queryKey: ["organization-members", orgId],
    queryFn: () => fetchOrganizationMembers(orgId),
    enabled: !!orgId,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Organization analytics
  const {
    data: analytics,
    isLoading: isLoadingAnalytics,
    error: analyticsError
  } = useQuery({
    queryKey: ["organization-analytics", orgId],
    queryFn: () => fetchOrganizationAnalytics(orgId),
    enabled: !!orgId,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  return {
    // Data
    organization,
    members,
    analytics,
    
    // Loading states
    isLoadingOrganization,
    isLoadingMembers,
    isLoadingAnalytics,
    isLoading: isLoadingOrganization || isLoadingMembers || isLoadingAnalytics,
    
    // Error states
    organizationError,
    membersError,
    analyticsError,
  };
}


=== FILE: client/src/hooks/useBusinessPlanAI.ts ===

import { useState, useCallback } from 'react';
import { useBusinessPlan } from '@/contexts/BusinessPlanContext';
import { getSectionById } from '@/constants/businessPlanStructure';

export interface AIGenerationOptions {
  tone?: 'professional' | 'casual' | 'technical' | 'persuasive';
  length?: 'short' | 'medium' | 'long';
  includeExamples?: boolean;
  customPrompt?: string;
}

export interface AIGenerationResult {
  content: string;
  confidence: number;
  suggestions: string[];
  wordCount: number;
}

export const useBusinessPlanAI = () => {
  const { updateSectionContent, getSectionContent, metadata } = useBusinessPlan();
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const generateSectionContent = useCallback(async (
    chapterId: string,
    sectionId: string,
    options: AIGenerationOptions = {}
  ): Promise<AIGenerationResult> => {
    setIsGenerating(true);
    setError(null);

    try {
      const section = getSectionById(chapterId, sectionId);
      if (!section) {
        throw new Error('Section not found');
      }

      // TODO: Replace with actual AI API call
      // For now, simulate AI generation
      await new Promise(resolve => setTimeout(resolve, 2000));

      const generatedContent = generateMockContent(
        section.title,
        section.aiPrompt || '',
        metadata,
        options
      );

      const result: AIGenerationResult = {
        content: generatedContent,
        confidence: 0.85,
        suggestions: [
          'Consider adding specific metrics and data',
          'Include real-world examples',
          'Expand on competitive advantages'
        ],
        wordCount: generatedContent.split(/\s+/).length
      };

      // Update the section with AI-generated content
      updateSectionContent(sectionId, generatedContent, true);

      return result;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to generate content';
      setError(errorMessage);
      throw err;
    } finally {
      setIsGenerating(false);
    }
  }, [metadata, updateSectionContent]);

  const improveSectionContent = useCallback(async (
    sectionId: string,
    improvementType: 'clarity' | 'length' | 'tone' | 'detail'
  ): Promise<string> => {
    setIsGenerating(true);
    setError(null);

    try {
      const currentContent = getSectionContent(sectionId);
      if (!currentContent) {
        throw new Error('No content to improve');
      }

      // TODO: Replace with actual AI API call
      await new Promise(resolve => setTimeout(resolve, 1500));

      let improvedContent = currentContent;
      
      switch (improvementType) {
        case 'clarity':
          improvedContent = `${currentContent}\n\n[Improved for clarity with better structure and clearer language]`;
          break;
        case 'length':
          improvedContent = `${currentContent}\n\nAdditional context and details have been added to provide more comprehensive coverage of this topic.`;
          break;
        case 'tone':
          improvedContent = `${currentContent}\n\n[Tone adjusted to be more professional and persuasive]`;
          break;
        case 'detail':
          improvedContent = `${currentContent}\n\nSpecific examples:\n- Example 1: Detailed scenario\n- Example 2: Real-world application\n- Example 3: Industry benchmark`;
          break;
      }

      updateSectionContent(sectionId, improvedContent, false);
      return improvedContent;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to improve content';
      setError(errorMessage);
      throw err;
    } finally {
      setIsGenerating(false);
    }
  }, [getSectionContent, updateSectionContent]);

  const getSuggestions = useCallback(async (
    sectionId: string
  ): Promise<string[]> => {
    try {
      const content = getSectionContent(sectionId);
      
      // TODO: Replace with actual AI API call
      await new Promise(resolve => setTimeout(resolve, 1000));

      const suggestions = [
        'Add more specific data and metrics',
        'Include customer testimonials or case studies',
        'Expand on competitive advantages',
        'Clarify your unique value proposition',
        'Add visual elements like charts or diagrams'
      ];

      return suggestions;
    } catch (err) {
      console.error('Failed to get suggestions:', err);
      return [];
    }
  }, [getSectionContent]);

  const analyzeContent = useCallback(async (
    sectionId: string
  ): Promise<{
    score: number;
    strengths: string[];
    improvements: string[];
    readability: number;
    completeness: number;
  }> => {
    try {
      const content = getSectionContent(sectionId);
      
      // TODO: Replace with actual AI API call
      await new Promise(resolve => setTimeout(resolve, 1000));

      const wordCount = content.split(/\s+/).length;
      const hasData = /\d+%|\$\d+|[0-9,]+/.test(content);
      const hasStructure = content.includes('\n\n') || content.includes('##');

      const score = Math.min(100, 
        (wordCount > 100 ? 30 : wordCount * 0.3) +
        (hasData ? 30 : 0) +
        (hasStructure ? 20 : 0) +
        20
      );

      return {
        score: Math.round(score),
        strengths: [
          wordCount > 200 ? 'Good length and detail' : null,
          hasData ? 'Includes data and metrics' : null,
          hasStructure ? 'Well-structured content' : null
        ].filter(Boolean) as string[],
        improvements: [
          wordCount < 100 ? 'Add more detail and context' : null,
          !hasData ? 'Include specific metrics and data' : null,
          !hasStructure ? 'Improve structure with headings' : null
        ].filter(Boolean) as string[],
        readability: Math.round(Math.random() * 20 + 70),
        completeness: Math.round((wordCount / 300) * 100)
      };
    } catch (err) {
      console.error('Failed to analyze content:', err);
      throw err;
    }
  }, [getSectionContent]);

  return {
    generateSectionContent,
    improveSectionContent,
    getSuggestions,
    analyzeContent,
    isGenerating,
    error
  };
};

// Mock content generator (replace with actual AI API)
function generateMockContent(
  title: string,
  prompt: string,
  metadata: any,
  options: AIGenerationOptions
): string {
  const companyName = metadata.name || 'Your Company';
  const industry = metadata.industry || 'Technology';

  const templates: Record<string, string> = {
    'Summary': `${companyName} is a ${metadata.businessStage} stage company in the ${industry} industry. We are revolutionizing the market with our innovative approach to solving critical challenges.

## Key Highlights
- Strong market opportunity with significant growth potential
- Experienced team with proven track record
- Unique competitive advantages
- Clear path to profitability

## Our Vision
We envision becoming the leading solution provider in our market segment, delivering exceptional value to customers while building a sustainable and profitable business.`,

    'Our Mission': `At ${companyName}, our mission is to transform the ${industry} industry by delivering innovative solutions that address real customer needs.

## Core Values
- Customer Success: We prioritize customer satisfaction above all
- Innovation: We continuously push boundaries
- Integrity: We operate with transparency and ethics
- Excellence: We strive for the highest quality in everything we do

## Long-term Vision
To become the most trusted and innovative company in our industry, setting new standards for quality and customer service.`,

    'default': `# ${title}

${prompt}

## Overview
${companyName} operates in the ${industry} sector, focusing on delivering value through innovative solutions.

## Key Points
- Strategic approach aligned with market needs
- Data-driven decision making
- Focus on sustainable growth
- Customer-centric philosophy

## Details
Our approach is built on deep market understanding and commitment to excellence. We leverage industry best practices while innovating to stay ahead of competition.

${options.includeExamples ? '\n## Examples\n- Example 1: Practical application\n- Example 2: Real-world scenario\n- Example 3: Success story' : ''}

## Conclusion
This positions us strongly for success in the ${industry} market.`
  };

  return templates[title] || templates['default'];
}


=== FILE: client/src/hooks/use-profile.ts ===

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useToast } from "./use-toast";

interface ProfileData {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  profileImageUrl?: string;
  userType: string;
  userSubtype?: string;
  role?: string;
  bio?: string;
  location?: string;
  website?: string;
  linkedin?: string;
  twitter?: string;
  phone?: string;
  preferences?: {
    notifications: {
      email: boolean;
      push: boolean;
      sms: boolean;
      marketing: boolean;
    };
    privacy: {
      profileVisibility: string;
      showEmail: boolean;
      showPhone: boolean;
      showLocation: boolean;
    };
    display: {
      theme: string;
      language: string;
      timezone: string;
    };
  };
  metrics?: any;
  verified: boolean;
  onboardingCompleted: boolean;
  createdAt: string;
  updatedAt: string;
}

interface ProfileFormData {
  firstName: string;
  lastName: string;
  email: string;
  userSubtype?: string;
  role?: string;
  bio?: string;
  location?: string;
  website?: string;
  linkedin?: string;
  twitter?: string;
  phone?: string;
  preferences?: any;
}

async function fetchProfile(): Promise<ProfileData | null> {
  try {
    const response = await fetch("/api/profile");
    if (response.status === 401) {
      return null;
    }
    if (!response.ok) {
      throw new Error("Failed to fetch profile");
    }
    return await response.json();
  } catch (error) {
    console.error("Error fetching profile:", error);
    return null;
  }
}

async function updateProfile(profileData: ProfileFormData): Promise<ProfileData> {
  const response = await fetch("/api/profile", {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(profileData),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to update profile");
  }

  return await response.json();
}

async function uploadProfileImage(file: File): Promise<{ imageUrl: string }> {
  const formData = new FormData();
  formData.append("image", file);

  const response = await fetch("/api/profile/upload-image", {
    method: "POST",
    body: formData,
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to upload image");
  }

  return await response.json();
}

export function useProfile() {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const {
    data: profile,
    isLoading,
    error
  } = useQuery({
    queryKey: ["profile"],
    queryFn: fetchProfile,
    retry: false,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  const updateProfileMutation = useMutation({
    mutationFn: updateProfile,
    onSuccess: (data) => {
      queryClient.setQueryData(["profile"], data);
      toast({
        title: "Profile updated",
        description: "Your profile has been successfully updated.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to update profile. Please try again.",
        variant: "destructive",
      });
    },
  });

  const uploadImageMutation = useMutation({
    mutationFn: uploadProfileImage,
    onSuccess: (data) => {
      // Update the profile data with the new image URL
      queryClient.setQueryData(["profile"], (old: ProfileData | undefined) => {
        if (old) {
          return { ...old, profileImageUrl: data.imageUrl };
        }
        return old;
      });
      toast({
        title: "Image uploaded",
        description: "Your profile image has been successfully updated.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to upload image. Please try again.",
        variant: "destructive",
      });
    },
  });

  return {
    profile,
    isLoading,
    error,
    updateProfile: updateProfileMutation.mutate,
    isUpdating: updateProfileMutation.isPending,
    uploadImage: uploadImageMutation.mutate,
    isUploading: uploadImageMutation.isPending,
  };
}


=== FILE: client/src/hooks/useRealTimeAlerts.ts ===

import { useState, useCallback, useEffect } from 'react';
import { useLocalStorage } from './useLocalStorage';

export interface Alert {
  id: string;
  type: 'info' | 'warning' | 'danger' | 'success';
  title: string;
  message: string;
  business?: string;
  timestamp: string;
  read: boolean;
  dismissed: boolean;
}

export interface AlertConfig {
  enabled: boolean;
  scoreThreshold: number;
  riskThreshold: number;
  volumeThreshold: number;
  emailNotifications: boolean;
  soundNotifications: boolean;
}

/**
 * Hook for managing real-time alerts and notifications
 */
export function useRealTimeAlerts() {
  const [alerts, setAlerts] = useLocalStorage<Alert[]>('credit_alerts', []);
  const [alertConfig, setAlertConfig] = useLocalStorage<AlertConfig>('alert_config', {
    enabled: true,
    scoreThreshold: 600,
    riskThreshold: 0.25,
    volumeThreshold: 10,
    emailNotifications: false,
    soundNotifications: true
  });
  const [isAlertsModalOpen, setIsAlertsModalOpen] = useState(false);

  // Add new alert
  const addAlert = useCallback((alert: Omit<Alert, 'id' | 'timestamp' | 'read' | 'dismissed'>) => {
    if (!alertConfig.enabled) return;

    const newAlert: Alert = {
      ...alert,
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      timestamp: new Date().toISOString(),
      read: false,
      dismissed: false
    };

    setAlerts(prev => [newAlert, ...prev].slice(0, 100)); // Keep last 100 alerts

    // Play sound notification if enabled
    if (alertConfig.soundNotifications && typeof window !== 'undefined') {
      playNotificationSound(alert.type);
    }

    // Show browser notification if permissions granted
    if (typeof window !== 'undefined' && 'Notification' in window && Notification.permission === 'granted') {
      new Notification(alert.title, {
        body: alert.message,
        icon: '/favicon.ico',
        tag: newAlert.id
      });
    }
  }, [alertConfig, setAlerts]);

  // Mark alert as read
  const markAsRead = useCallback((alertId: string) => {
    setAlerts(prev => 
      prev.map(alert => 
        alert.id === alertId ? { ...alert, read: true } : alert
      )
    );
  }, [setAlerts]);

  // Dismiss alert
  const dismissAlert = useCallback((alertId: string) => {
    setAlerts(prev => 
      prev.map(alert => 
        alert.id === alertId ? { ...alert, dismissed: true } : alert
      )
    );
  }, [setAlerts]);

  // Clear all alerts
  const clearAllAlerts = useCallback(() => {
    setAlerts([]);
  }, [setAlerts]);

  // Mark all as read
  const markAllAsRead = useCallback(() => {
    setAlerts(prev => 
      prev.map(alert => ({ ...alert, read: true }))
    );
  }, [setAlerts]);

  // Get active (non-dismissed) alerts
  const activeAlerts = alerts.filter(alert => !alert.dismissed);

  // Get unread alerts count
  const unreadCount = activeAlerts.filter(alert => !alert.read).length;

  // Check for score-based alerts
  const checkScoreAlert = useCallback((companyName: string, score: number) => {
    if (alertConfig.enabled && score < alertConfig.scoreThreshold) {
      addAlert({
        type: score < 500 ? 'danger' : 'warning',
        title: 'Low Credit Score Alert',
        message: `${companyName} has a credit score of ${score}, below the threshold of ${alertConfig.scoreThreshold}`,
        business: companyName
      });
    }
  }, [alertConfig, addAlert]);

  // Check for risk-based alerts
  const checkRiskAlert = useCallback((companyName: string, riskProbability: number) => {
    if (alertConfig.enabled && riskProbability > alertConfig.riskThreshold) {
      addAlert({
        type: riskProbability > 0.4 ? 'danger' : 'warning',
        title: 'High Default Risk Alert',
        message: `${companyName} has a default risk of ${(riskProbability * 100).toFixed(2)}%, above the threshold of ${(alertConfig.riskThreshold * 100).toFixed(2)}%`,
        business: companyName
      });
    }
  }, [alertConfig, addAlert]);

  // Check for volume-based alerts
  const checkVolumeAlert = useCallback((assessmentCount: number) => {
    if (alertConfig.enabled && assessmentCount >= alertConfig.volumeThreshold) {
      addAlert({
        type: 'info',
        title: 'High Volume Alert',
        message: `${assessmentCount} assessments processed today, reaching the volume threshold of ${alertConfig.volumeThreshold}`,
      });
    }
  }, [alertConfig, addAlert]);

  // System alert for model performance
  const addSystemAlert = useCallback((title: string, message: string, type: Alert['type'] = 'info') => {
    addAlert({
      type,
      title,
      message
    });
  }, [addAlert]);

  // Request notification permission
  const requestNotificationPermission = useCallback(async () => {
    if (typeof window !== 'undefined' && 'Notification' in window) {
      const permission = await Notification.requestPermission();
      return permission === 'granted';
    }
    return false;
  }, []);

  // Play notification sound
  const playNotificationSound = useCallback((type: Alert['type']) => {
    if (typeof window === 'undefined') return;

    // Create audio context for different alert sounds
    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
    
    const frequencies = {
      info: 440,
      success: 523,
      warning: 659,
      danger: 784
    };

    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();

    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);

    oscillator.frequency.setValueAtTime(frequencies[type] || 440, audioContext.currentTime);
    oscillator.type = 'sine';

    gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);

    oscillator.start();
    oscillator.stop(audioContext.currentTime + 0.5);
  }, []);

  // Update alert configuration
  const updateAlertConfig = useCallback((updates: Partial<AlertConfig>) => {
    setAlertConfig(prev => ({ ...prev, ...updates }));
  }, [setAlertConfig]);

  // Auto-dismiss old alerts (30 days)
  useEffect(() => {
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    setAlerts(prev => 
      prev.filter(alert => new Date(alert.timestamp) > thirtyDaysAgo)
    );
  }, [setAlerts]);

  return {
    // Alert data
    alerts: activeAlerts,
    alertConfig,
    unreadCount,
    
    // Modal state
    isAlertsModalOpen,
    setIsAlertsModalOpen,
    
    // Alert actions
    addAlert,
    markAsRead,
    dismissAlert,
    clearAllAlerts,
    markAllAsRead,
    
    // Alert checkers
    checkScoreAlert,
    checkRiskAlert,
    checkVolumeAlert,
    addSystemAlert,
    
    // Configuration
    updateAlertConfig,
    
    // Notification permissions
    requestNotificationPermission,
    
    // Utilities
    playNotificationSound
  };
}

export default useRealTimeAlerts;


=== FILE: client/src/hooks/use-auth.ts ===


import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  profileImageUrl?: string;
  userType?: string;
}

async function fetchUser(): Promise<User | null> {
  try {
    const response = await fetch("/api/user");
    
    if (response.status === 401) {
      if (import.meta.env.DEV) {
        return {
          id: 'dev-user-123',
          email: 'dev@example.com',
          firstName: 'Dev',
          lastName: 'User',
          profileImageUrl: undefined,
          userType: 'ENTREPRENEUR'
        };
      }
      return null;
    }
    
    if (!response.ok) {
      throw new Error(`Failed to fetch user: ${response.status}`);
    }
    
    const userData = await response.json();
    return userData;
  } catch (error) {
    if (import.meta.env.DEV) {
      console.warn('Auth error in development mode, using mock user:', error);
      return {
        id: 'dev-user-123',
        email: 'dev@example.com',
        firstName: 'Dev',
        lastName: 'User',
        profileImageUrl: undefined,
        userType: 'ENTREPRENEUR'
      };
    }
    console.error('Failed to fetch user:', error);
    return null;
  }
}

async function logout(): Promise<void> {
  window.location.href = "/api/logout";
}

export function useAuth() {
  const queryClient = useQueryClient();
  
  const {
    data: user,
    isLoading,
    error
  } = useQuery({
    queryKey: ["user"],
    queryFn: fetchUser,
    retry: false,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  const logoutMutation = useMutation({
    mutationFn: logout,
    onSuccess: () => {
      queryClient.clear();
    },
  });

  const login = () => {
    window.location.href = "/api/login";
  };

  return {
    user,
    isLoading,
    isAuthenticated: !!user,
    login,
    logout: logoutMutation.mutate,
    error
  };
}


=== FILE: client/src/hooks/use-empathy-maps.ts ===

import { useState, useEffect } from 'react';
import { EmpathyMapData } from '@/components/design-thinking/empathize/EmpathyMapBuilder';

export function useEmpathyMaps(projectId: string) {
  const [empathyMaps, setEmpathyMaps] = useState<EmpathyMapData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchEmpathyMaps = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await fetch(`/api/dt/projects/${projectId}/empathy-maps`, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        setEmpathyMaps(data);
      } catch (err) {
        console.error('Error fetching empathy maps:', err);
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    };

    if (projectId) {
      fetchEmpathyMaps();
    }
  }, [projectId]);

  const createEmpathyMap = async (data: Omit<EmpathyMapData, 'id' | 'createdAt' | 'updatedAt'>) => {
    try {
      setError(null);
      
      const response = await fetch(`/api/dt/projects/${projectId}/empathy-maps`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const newEmpathyMap = await response.json();
      setEmpathyMaps(prev => [...prev, newEmpathyMap]);
      return newEmpathyMap;
    } catch (err) {
      console.error('Error creating empathy map:', err);
      setError(err instanceof Error ? err.message : 'Unknown error');
      throw err;
    }
  };

  const updateEmpathyMap = async (id: string, updates: Partial<EmpathyMapData>) => {
    try {
      setError(null);
      
      const response = await fetch(`/api/dt/empathy-maps/${id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updates)
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const updatedEmpathyMap = await response.json();
      setEmpathyMaps(prev => prev.map(map => map.id === id ? updatedEmpathyMap : map));
      return updatedEmpathyMap;
    } catch (err) {
      console.error('Error updating empathy map:', err);
      setError(err instanceof Error ? err.message : 'Unknown error');
      throw err;
    }
  };

  const deleteEmpathyMap = async (id: string) => {
    try {
      setError(null);
      
      const response = await fetch(`/api/dt/empathy-maps/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      setEmpathyMaps(prev => prev.filter(map => map.id !== id));
    } catch (err) {
      console.error('Error deleting empathy map:', err);
      setError(err instanceof Error ? err.message : 'Unknown error');
      throw err;
    }
  };

  const getEmpathyMapById = (id: string) => {
    return empathyMaps.find(map => map.id === id);
  };

  const getTotalItems = (empathyMap: EmpathyMapData) => {
    return Object.values(empathyMap).reduce((total, items) => {
      return total + (Array.isArray(items) ? items.length : 0);
    }, 0);
  };

  const getAnalytics = () => {
    if (empathyMaps.length === 0) {
      return {
        totalMaps: 0,
        averageItems: 0,
        mostCompleteMap: null,
        leastCompleteMap: null
      };
    }

    const analytics = empathyMaps.map(map => ({
      id: map.id,
      userPersona: map.userPersona,
      totalItems: getTotalItems(map),
      completeness: getTotalItems(map) / 30 * 100 // Assuming 30 is max items
    }));

    const sortedByCompleteness = analytics.sort((a, b) => b.totalItems - a.totalItems);

    return {
      totalMaps: empathyMaps.length,
      averageItems: Math.round(analytics.reduce((sum, map) => sum + map.totalItems, 0) / analytics.length),
      mostCompleteMap: sortedByCompleteness[0],
      leastCompleteMap: sortedByCompleteness[sortedByCompleteness.length - 1]
    };
  };

  return {
    empathyMaps,
    loading,
    error,
    createEmpathyMap,
    updateEmpathyMap,
    deleteEmpathyMap,
    getEmpathyMapById,
    getAnalytics,
    refetch: () => {
      if (projectId) {
        setLoading(true);
        // Trigger useEffect to refetch
        setEmpathyMaps([]);
      }
    }
  };
}


=== FILE: client/src/hooks/use-settings.ts ===

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useToast } from "./use-toast";

interface UserSettings {
  // Account Settings
  firstName: string;
  lastName: string;
  email: string;
  phone?: string;
  timezone: string;
  language: string;
  
  // Privacy Settings
  profileVisibility: 'public' | 'private' | 'organization';
  dataSharing: boolean;
  analyticsOptIn: boolean;
  marketingEmails: boolean;
  
  // Notification Settings
  emailNotifications: boolean;
  pushNotifications: boolean;
  smsNotifications: boolean;
  notificationFrequency: 'immediate' | 'daily' | 'weekly';
  
  // AI Agent Settings
  aiPersonality: 'professional' | 'casual' | 'technical' | 'creative';
  aiResponseLength: 'brief' | 'detailed' | 'comprehensive';
  aiProactiveInsights: boolean;
  aiDataRetention: number; // days
  
  // Organization Settings
  defaultOrganization: string;
  organizationNotifications: boolean;
  teamCollaboration: boolean;
  
  // Appearance Settings
  theme: 'light' | 'dark' | 'system';
  fontSize: 'small' | 'medium' | 'large';
  compactMode: boolean;
  
  // Security Settings
  twoFactorAuth: boolean;
  sessionTimeout: number; // minutes
  loginNotifications: boolean;
  deviceTrust: boolean;
}

async function fetchSettings(): Promise<UserSettings> {
  const response = await fetch("/api/settings");
  if (!response.ok) {
    throw new Error("Failed to fetch settings");
  }
  return await response.json();
}

async function updateSettings(settings: Partial<UserSettings>): Promise<UserSettings> {
  const response = await fetch("/api/settings", {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(settings),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to update settings");
  }

  return await response.json();
}

async function resetSettings(): Promise<void> {
  const response = await fetch("/api/settings/reset", {
    method: "POST",
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to reset settings");
  }
}

async function exportSettings(): Promise<Blob> {
  const response = await fetch("/api/settings/export");
  if (!response.ok) {
    throw new Error("Failed to export settings");
  }
  return await response.blob();
}

export function useSettings() {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  // Settings data
  const {
    data: settings,
    isLoading,
    error
  } = useQuery({
    queryKey: ["settings"],
    queryFn: fetchSettings,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Update settings mutation
  const updateSettingsMutation = useMutation({
    mutationFn: updateSettings,
    onSuccess: (data) => {
      queryClient.setQueryData(["settings"], data);
      toast({
        title: "Settings updated",
        description: "Your settings have been saved successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to update settings. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Reset settings mutation
  const resetSettingsMutation = useMutation({
    mutationFn: resetSettings,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["settings"] });
      toast({
        title: "Settings reset",
        description: "Your settings have been reset to default values.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to reset settings. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Export settings mutation
  const exportSettingsMutation = useMutation({
    mutationFn: exportSettings,
    onSuccess: (blob) => {
      // Create download link
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `settings-export-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      toast({
        title: "Settings exported",
        description: "Your settings have been exported successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to export settings. Please try again.",
        variant: "destructive",
      });
    },
  });

  return {
    // Data
    settings,
    
    // Loading states
    isLoading,
    
    // Error states
    error,
    
    // Mutations
    updateSettings: updateSettingsMutation.mutate,
    isUpdating: updateSettingsMutation.isPending,
    
    resetSettings: resetSettingsMutation.mutate,
    isResetting: resetSettingsMutation.isPending,
    
    exportSettings: exportSettingsMutation.mutate,
    isExporting: exportSettingsMutation.isPending,
  };
}


=== FILE: client/src/hooks/use-team.ts ===

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useToast } from "./use-toast";

interface TeamMember {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'member' | 'viewer' | 'owner';
  avatar?: string;
  status: 'active' | 'pending' | 'inactive';
  joinedAt: string;
  lastActive?: string;
  department?: string;
  skills?: string[];
  bio?: string;
  location?: string;
  phone?: string;
  website?: string;
  linkedin?: string;
  twitter?: string;
  github?: string;
}

interface TeamInvitation {
  id: string;
  email: string;
  role: 'admin' | 'member' | 'viewer';
  status: 'pending' | 'accepted' | 'declined' | 'expired';
  invitedBy: string;
  invitedAt: string;
  expiresAt: string;
  message?: string;
}

interface TeamStats {
  totalMembers: number;
  activeMembers: number;
  pendingInvites: number;
  departments: { [key: string]: number };
  roles: { [key: string]: number };
}

interface InviteData {
  email: string;
  role: 'admin' | 'member' | 'viewer';
  message?: string;
}

interface UpdateMemberData {
  role?: 'admin' | 'member' | 'viewer';
  department?: string;
  status?: 'active' | 'pending' | 'inactive';
}

async function fetchTeamMembers(): Promise<TeamMember[]> {
  const response = await fetch("/api/team/members");
  if (!response.ok) {
    throw new Error("Failed to fetch team members");
  }
  return await response.json();
}

async function fetchTeamInvitations(): Promise<TeamInvitation[]> {
  const response = await fetch("/api/team/invitations");
  if (!response.ok) {
    throw new Error("Failed to fetch team invitations");
  }
  return await response.json();
}

async function inviteTeamMember(data: InviteData): Promise<TeamInvitation> {
  const response = await fetch("/api/team/invite", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to invite team member");
  }

  return await response.json();
}

async function updateTeamMember(memberId: string, data: UpdateMemberData): Promise<TeamMember> {
  const response = await fetch(`/api/team/members/${memberId}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to update team member");
  }

  return await response.json();
}

async function removeTeamMember(memberId: string): Promise<void> {
  const response = await fetch(`/api/team/members/${memberId}`, {
    method: "DELETE",
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to remove team member");
  }
}

async function resendInvitation(invitationId: string): Promise<void> {
  const response = await fetch(`/api/team/invitations/${invitationId}/resend`, {
    method: "POST",
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to resend invitation");
  }
}

async function cancelInvitation(invitationId: string): Promise<void> {
  const response = await fetch(`/api/team/invitations/${invitationId}`, {
    method: "DELETE",
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Failed to cancel invitation");
  }
}

export function useTeam() {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  // Team members
  const {
    data: members,
    isLoading: isLoadingMembers,
    error: membersError
  } = useQuery({
    queryKey: ["team-members"],
    queryFn: fetchTeamMembers,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Team invitations
  const {
    data: invitations,
    isLoading: isLoadingInvitations,
    error: invitationsError
  } = useQuery({
    queryKey: ["team-invitations"],
    queryFn: fetchTeamInvitations,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Invite member mutation
  const inviteMemberMutation = useMutation({
    mutationFn: inviteTeamMember,
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ["team-invitations"] });
      toast({
        title: "Invitation sent",
        description: `Invitation sent to ${data.email}`,
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to send invitation. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Update member mutation
  const updateMemberMutation = useMutation({
    mutationFn: ({ memberId, data }: { memberId: string; data: UpdateMemberData }) =>
      updateTeamMember(memberId, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["team-members"] });
      toast({
        title: "Member updated",
        description: "Team member has been updated successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to update team member. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Remove member mutation
  const removeMemberMutation = useMutation({
    mutationFn: removeTeamMember,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["team-members"] });
      toast({
        title: "Member removed",
        description: "Team member has been removed successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to remove team member. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Resend invitation mutation
  const resendInvitationMutation = useMutation({
    mutationFn: resendInvitation,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["team-invitations"] });
      toast({
        title: "Invitation resent",
        description: "Invitation has been resent successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to resend invitation. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Cancel invitation mutation
  const cancelInvitationMutation = useMutation({
    mutationFn: cancelInvitation,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["team-invitations"] });
      toast({
        title: "Invitation cancelled",
        description: "Invitation has been cancelled successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to cancel invitation. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Calculate team stats
  const stats: TeamStats | undefined = members ? {
    totalMembers: members.length,
    activeMembers: members.filter(m => m.status === 'active').length,
    pendingInvites: invitations?.filter(i => i.status === 'pending').length || 0,
    departments: members.reduce((acc, member) => {
      if (member.department) {
        acc[member.department] = (acc[member.department] || 0) + 1;
      }
      return acc;
    }, {} as { [key: string]: number }),
    roles: members.reduce((acc, member) => {
      acc[member.role] = (acc[member.role] || 0) + 1;
      return acc;
    }, {} as { [key: string]: number })
  } : undefined;

  return {
    // Data
    members,
    invitations,
    stats,
    
    // Loading states
    isLoadingMembers,
    isLoadingInvitations,
    isLoading: isLoadingMembers || isLoadingInvitations,
    
    // Error states
    membersError,
    invitationsError,
    
    // Mutations
    inviteMember: inviteMemberMutation.mutate,
    isInviting: inviteMemberMutation.isPending,
    
    updateMember: updateMemberMutation.mutate,
    isUpdating: updateMemberMutation.isPending,
    
    removeMember: removeMemberMutation.mutate,
    isRemoving: removeMemberMutation.isPending,
    
    resendInvitation: resendInvitationMutation.mutate,
    isResending: resendInvitationMutation.isPending,
    
    cancelInvitation: cancelInvitationMutation.mutate,
    isCancelling: cancelInvitationMutation.isPending,
  };
}


=== FILE: client/src/hooks/use-toast.ts ===

import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


=== FILE: client/src/hooks/useLocalStorage.ts ===

import { useState, useEffect } from 'react';

/**
 * Custom hook for localStorage with SSR safety and JSON serialization
 * @param key - The localStorage key
 * @param initialValue - The initial value if no stored value exists
 * @returns [value, setValue] tuple
 */
export function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T | ((val: T) => T)) => void] {
  // State to store our value
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === "undefined") {
      return initialValue;
    }
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  // Return a wrapped version of useState's setter function that persists the new value to localStorage
  const setValue = (value: T | ((val: T) => T)) => {
    try {
      // Allow value to be a function so we have the same API as useState
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      
      // Save to localStorage
      if (typeof window !== "undefined") {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  };

  return [storedValue, setValue];
}

export default useLocalStorage;


=== FILE: client/src/hooks/ai/useAgent.ts ===

import { useState, useCallback } from 'react';
import { useAuth } from '../use-auth';
import { processStreamingResponse, getOrCreateSessionId, handleAgentError } from '@/utils/streamingUtils';

interface AgentRequest {
  message: string;
  userType?: string;
  streaming?: boolean;
  context?: Record<string, unknown>;
}

interface AgentInsight {
  type: 'recommendation' | 'warning' | 'info' | 'success';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  actionable: boolean;
}

interface AgentResponse {
  id: string;
  content: string;
  agentType: string;
  timestamp: Date;
  suggestions?: string[];
  insights?: AgentInsight[];
  metadata?: Record<string, unknown>;
}

export function useAgent() {
  const { user } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const sendMessage = useCallback(async (
    message: string,
    options?: {
      userType?: string;
      streaming?: boolean;
      onChunk?: (chunk: string) => void;
      context?: Record<string, unknown>;
    }
  ): Promise<AgentResponse | null> => {
    if (!user) {
      setError('User not authenticated');
      return null;
    }

    setIsLoading(true);
    setError(null);

    try {
      const sessionId = getOrCreateSessionId();
      
      const requestBody = {
        userId: user.id,
        userType: options?.userType || user.userType,
        message,
        sessionId,
        streaming: options?.streaming || false,
        context: options?.context || {}
      };

      if (options?.streaming) {
        return await handleStreamingRequest(requestBody, options.onChunk);
      } else {
        return await handleRegularRequest(requestBody);
      }
    } catch (err) {
      const errorMessage = handleAgentError(err, 'Agent message');
      setError(errorMessage);
      return null;
    } finally {
      setIsLoading(false);
    }
  }, [user]);

  const handleRegularRequest = async (requestBody: AgentRequest & { userId: string; sessionId: string }): Promise<AgentResponse> => {
    const response = await fetch('/api/ai/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return {
      ...data,
      timestamp: new Date(data.timestamp)
    };
  };

  const handleStreamingRequest = async (
    requestBody: AgentRequest & { userId: string; sessionId: string },
    onChunk?: (chunk: string) => void
  ): Promise<AgentResponse> => {
    const response = await fetch('/api/ai/chat/stream', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody)
    });

    return processStreamingResponse(response, onChunk, requestBody.userType);
  };

  return {
    sendMessage,
    isLoading,
    error
  };
}

// Session ID utility moved to streamingUtils.ts

=== FILE: client/src/hooks/ai/useAgentChat.ts ===

import { useState, useCallback, useEffect } from 'react';
import { useAgent } from './useAgent';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  insights?: any[];
  suggestions?: string[];
  metadata?: Record<string, any>;
}

export function useAgentChat() {
  const [messages, setMessages] = useState<Message[]>([]);
  const { sendMessage: sendAgentMessage, isLoading, error } = useAgent();

  // Load conversation history on mount
  useEffect(() => {
    loadConversationHistory();
  }, []);

  // Save messages to localStorage when they change
  useEffect(() => {
    if (messages.length > 0) {
      saveConversationHistory();
    }
  }, [messages]);

  const loadConversationHistory = useCallback(() => {
    try {
      const stored = localStorage.getItem('ai_chat_history');
      if (stored) {
        const parsed = JSON.parse(stored);
        setMessages(parsed.map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp)
        })));
      }
    } catch (error) {
      console.error('Failed to load chat history:', error);
    }
  }, []);

  const saveConversationHistory = useCallback(() => {
    try {
      localStorage.setItem('ai_chat_history', JSON.stringify(messages));
    } catch (error) {
      console.error('Failed to save chat history:', error);
    }
  }, [messages]);

  const sendMessage = useCallback(async (content: string, context?: Record<string, any>) => {
    // Add user message immediately
    const userMessage: Message = {
      id: `msg-${Date.now()}-user`,
      role: 'user',
      content,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);

    // Send to agent with streaming
    let assistantContent = '';
    const assistantId = `msg-${Date.now()}-assistant`;

    const response = await sendAgentMessage(content, {
      streaming: true,
      context,
      onChunk: (chunk) => {
        assistantContent += chunk;
        
        setMessages(prev => {
          const withoutLastAssistant = prev.filter(m => m.id !== assistantId);
          return [
            ...withoutLastAssistant,
            {
              id: assistantId,
              role: 'assistant' as const,
              content: assistantContent,
              timestamp: new Date()
            }
          ];
        });
      }
    });

    // Update with final response including insights and suggestions
    if (response) {
      setMessages(prev => {
        const withoutLastAssistant = prev.filter(m => m.id !== assistantId);
        return [
          ...withoutLastAssistant,
          {
            id: response.id,
            role: 'assistant' as const,
            content: response.content,
            timestamp: response.timestamp,
            insights: response.insights,
            suggestions: response.suggestions,
            metadata: response.metadata
          }
        ];
      });
    }
  }, [sendAgentMessage]);

  const clearHistory = useCallback(() => {
    setMessages([]);
    localStorage.removeItem('ai_chat_history');
  }, []);

  const deleteMessage = useCallback((id: string) => {
    setMessages(prev => prev.filter(msg => msg.id !== id));
  }, []);

  const regenerateLastResponse = useCallback(async () => {
    if (messages.length < 2) return;

    // Find the last user message
    const lastUserMessage = [...messages].reverse().find(m => m.role === 'user');
    if (!lastUserMessage) return;

    // Remove the last assistant response
    setMessages(prev => {
      const lastAssistantIndex = prev.findLastIndex(m => m.role === 'assistant');
      if (lastAssistantIndex === -1) return prev;
      return prev.slice(0, lastAssistantIndex);
    });

    // Resend the last user message
    await sendMessage(lastUserMessage.content);
  }, [messages, sendMessage]);

  return {
    messages,
    sendMessage,
    clearHistory,
    deleteMessage,
    regenerateLastResponse,
    isLoading,
    error
  };
}

=== FILE: client/src/hooks/ai/useAutomation.ts ===

import { useState, useEffect, useCallback } from 'react';

interface AutomationRule {
  id: string;
  name: string;
  description: string;
  trigger: {
    type: 'event' | 'schedule' | 'manual';
    event?: string;
    schedule?: string;
  };
  conditions: Array<{
    field: string;
    operator: string;
    value: any;
  }>;
  actions: Array<{
    type: string;
    parameters: Record<string, any>;
  }>;
  enabled: boolean;
  priority: number;
}

export function useAutomation() {
  const [rules, setRules] = useState<AutomationRule[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadRules();
  }, []);

  const loadRules = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/ai/automation/rules');
      if (!response.ok) throw new Error('Failed to load rules');
      
      const data = await response.json();
      setRules(data.rules || []);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load rules');
      console.error('Error loading automation rules:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const createRule = async (rule: Omit<AutomationRule, 'id'>) => {
    try {
      const response = await fetch('/api/ai/automation/rules', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(rule)
      });

      if (!response.ok) throw new Error('Failed to create rule');
      
      const data = await response.json();
      setRules(prev => [...prev, data.rule]);
      return data.rule;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create rule');
      throw err;
    }
  };

  const updateRule = async (id: string, updates: Partial<AutomationRule>) => {
    try {
      const response = await fetch(`/api/ai/automation/rules/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      });

      if (!response.ok) throw new Error('Failed to update rule');
      
      const data = await response.json();
      setRules(prev => prev.map(r => r.id === id ? data.rule : r));
      return data.rule;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update rule');
      throw err;
    }
  };

  const deleteRule = async (id: string) => {
    try {
      const response = await fetch(`/api/ai/automation/rules/${id}`, {
        method: 'DELETE'
      });

      if (!response.ok) throw new Error('Failed to delete rule');
      
      setRules(prev => prev.filter(r => r.id !== id));
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete rule');
      throw err;
    }
  };

  const toggleRule = useCallback(async (id: string) => {
    const rule = rules.find(r => r.id === id);
    if (!rule) return;

    await updateRule(id, { enabled: !rule.enabled });
  }, [rules]);

  const triggerRule = async (id: string, context?: Record<string, any>) => {
    try {
      const response = await fetch(`/api/ai/automation/rules/${id}/trigger`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ context })
      });

      if (!response.ok) throw new Error('Failed to trigger rule');
      
      return await response.json();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to trigger rule');
      throw err;
    }
  };

  return {
    rules,
    isLoading,
    error,
    loadRules,
    createRule,
    updateRule,
    deleteRule,
    toggleRule,
    triggerRule
  };
}

=== FILE: client/src/hooks/ai/useSmartSuggestions.ts ===

import { useState, useEffect } from 'react';
import { useAuth } from '../use-auth';

interface SmartSuggestion {
  id: string;
  title: string;
  description: string;
  prompt: string;
  category: string;
  priority: number;
}

export function useSmartSuggestions() {
  const { user } = useAuth();
  const [suggestions, setSuggestions] = useState<SmartSuggestion[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (user) {
      loadSuggestions();
    }
  }, [user]);

  const loadSuggestions = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/ai/suggestions', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });

      if (response.ok) {
        const data = await response.json();
        setSuggestions(data.suggestions || []);
      }
    } catch (error) {
      console.error('Failed to load suggestions:', error);
      // Fallback to default suggestions
      setSuggestions(getDefaultSuggestions(user?.userType));
    } finally {
      setIsLoading(false);
    }
  };

  const refreshSuggestions = async (context?: Record<string, any>) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/ai/suggestions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ context })
      });

      if (response.ok) {
        const data = await response.json();
        setSuggestions(data.suggestions || []);
      }
    } catch (error) {
      console.error('Failed to refresh suggestions:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return {
    suggestions,
    isLoading,
    refreshSuggestions
  };
}

function getDefaultSuggestions(userType?: string): SmartSuggestion[] {
  const suggestionMap: Record<string, SmartSuggestion[]> = {
    entrepreneur: [
      {
        id: '1',
        title: 'Review Business Plan',
        description: 'Get AI feedback on your business plan',
        prompt: 'Can you review my business plan and provide specific feedback?',
        category: 'planning',
        priority: 1
      },
      {
        id: '2',
        title: 'Calculate Financial Runway',
        description: 'Analyze your cash position and burn rate',
        prompt: 'Calculate my financial runway based on current metrics',
        category: 'financial',
        priority: 2
      },
      {
        id: '3',
        title: 'Market Analysis',
        description: 'Get insights on your target market',
        prompt: 'Help me analyze my target market and competition',
        category: 'market',
        priority: 3
      }
    ],
    investor: [
      {
        id: '1',
        title: 'Evaluate Deal',
        description: 'Analyze a potential investment',
        prompt: 'Help me evaluate this investment opportunity',
        category: 'analysis',
        priority: 1
      },
      {
        id: '2',
        title: 'Portfolio Review',
        description: 'Review your investment portfolio',
        prompt: 'Analyze my current investment portfolio',
        category: 'portfolio',
        priority: 2
      }
    ],
    lender: [
      {
        id: '1',
        title: 'Credit Assessment',
        description: 'Evaluate loan application creditworthiness',
        prompt: 'Assess the credit risk of this application',
        category: 'credit',
        priority: 1
      }
    ],
    grantor: [
      {
        id: '1',
        title: 'Impact Evaluation',
        description: 'Assess social and environmental impact',
        prompt: 'Evaluate the impact potential of this grant application',
        category: 'impact',
        priority: 1
      }
    ],
    partner: [
      {
        id: '1',
        title: 'Startup Matching',
        description: 'Find compatible startups for your program',
        prompt: 'Find startups that match our partnership criteria',
        category: 'matching',
        priority: 1
      }
    ]
  };

  return suggestionMap[userType || 'entrepreneur'] || suggestionMap.entrepreneur;
}

=== FILE: client/src/hooks/ai/useAgentAnalytics.ts ===

import { useState, useEffect } from 'react';

interface AgentAnalytics {
  totalConversations: number;
  totalMessages: number;
  averageResponseTime: number;
  satisfactionScore: number;
  topTopics: Array<{
    topic: string;
    count: number;
  }>;
  recentActivities: Array<{
    id: string;
    type: string;
    title: string;
    description: string;
    timestamp: Date;
  }>;
  usageStats: {
    today: number;
    thisWeek: number;
    thisMonth: number;
  };
}

export function useAgentAnalytics() {
  const [analytics, setAnalytics] = useState<AgentAnalytics | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadAnalytics();
  }, []);

  const loadAnalytics = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/ai/analytics');
      
      if (!response.ok) {
        throw new Error('Failed to load analytics');
      }

      const data = await response.json();
      setAnalytics({
        ...data,
        recentActivities: data.recentActivities?.map((activity: any) => ({
          ...activity,
          timestamp: new Date(activity.timestamp)
        })) || []
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load analytics');
      console.error('Error loading agent analytics:', err);
      
      // Set fallback data
      setAnalytics({
        totalConversations: 0,
        totalMessages: 0,
        averageResponseTime: 0,
        satisfactionScore: 0,
        topTopics: [],
        recentActivities: [],
        usageStats: {
          today: 0,
          thisWeek: 0,
          thisMonth: 0
        }
      });
    } finally {
      setIsLoading(false);
    }
  };

  const trackInteraction = async (type: string, metadata?: Record<string, any>) => {
    try {
      await fetch('/api/ai/analytics/track', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ type, metadata, timestamp: new Date() })
      });
    } catch (err) {
      console.error('Failed to track interaction:', err);
    }
  };

  const provideFeedback = async (messageId: string, rating: number, comment?: string) => {
    try {
      await fetch('/api/ai/analytics/feedback', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ messageId, rating, comment })
      });
      
      // Reload analytics to reflect new feedback
      await loadAnalytics();
    } catch (err) {
      console.error('Failed to provide feedback:', err);
      throw err;
    }
  };

  return {
    analytics,
    isLoading,
    error,
    loadAnalytics,
    trackInteraction,
    provideFeedback
  };
}

=== FILE: client/src/hooks/ai/__tests__/useAgent.test.ts ===

import { renderHook, act } from '@testing-library/react';
import { useAgent } from '../useAgent';
import { useAuth } from '../../use-auth';

// Mock the useAuth hook
jest.mock('../../use-auth', () => ({
  useAuth: jest.fn()
}));

// Mock the streaming utils
jest.mock('@/utils/streamingUtils', () => ({
  processStreamingResponse: jest.fn(),
  getOrCreateSessionId: jest.fn(() => 'test-session-id'),
  handleAgentError: jest.fn((error) => error.message)
}));

const mockUseAuth = useAuth as jest.MockedFunction<typeof useAuth>;

describe('useAgent', () => {
  const mockUser = {
    id: 'user-123',
    email: 'test@example.com',
    userType: 'entrepreneur' as const
  };

  beforeEach(() => {
    mockUseAuth.mockReturnValue({
      user: mockUser,
      login: jest.fn(),
      logout: jest.fn(),
      isLoading: false
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('sendMessage', () => {
    it('should return null when user is not authenticated', async () => {
      mockUseAuth.mockReturnValue({
        user: null,
        login: jest.fn(),
        logout: jest.fn(),
        isLoading: false
      });

      const { result } = renderHook(() => useAgent());

      let response: any;
      await act(async () => {
        response = await result.current.sendMessage('test message');
      });

      expect(response).toBeNull();
      expect(result.current.error).toBe('User not authenticated');
    });

    it('should send a message successfully', async () => {
      const mockResponse = {
        id: 'response-123',
        content: 'Test response',
        agentType: 'advisor',
        timestamp: new Date(),
        suggestions: ['suggestion1', 'suggestion2']
      };

      global.fetch = jest.fn().mockResolvedValue({
        ok: true,
        json: () => Promise.resolve(mockResponse)
      });

      const { result } = renderHook(() => useAgent());

      let response: any;
      await act(async () => {
        response = await result.current.sendMessage('test message');
      });

      expect(response).toEqual({
        ...mockResponse,
        timestamp: expect.any(Date)
      });
      expect(result.current.isLoading).toBe(false);
      expect(result.current.error).toBeNull();
    });

    it('should handle streaming requests', async () => {
      const { processStreamingResponse } = require('@/utils/streamingUtils');
      const mockStreamResponse = {
        id: 'response-123',
        content: 'Streaming response',
        agentType: 'advisor',
        timestamp: new Date()
      };

      processStreamingResponse.mockResolvedValue(mockStreamResponse);

      const { result } = renderHook(() => useAgent());

      let response: any;
      await act(async () => {
        response = await result.current.sendMessage('test message', {
          streaming: true,
          onChunk: jest.fn()
        });
      });

      expect(processStreamingResponse).toHaveBeenCalled();
      expect(response).toEqual(mockStreamResponse);
    });

    it('should handle errors gracefully', async () => {
      const mockError = new Error('Network error');
      global.fetch = jest.fn().mockRejectedValue(mockError);

      const { result } = renderHook(() => useAgent());

      let response: any;
      await act(async () => {
        response = await result.current.sendMessage('test message');
      });

      expect(response).toBeNull();
      expect(result.current.error).toBe('Network error');
      expect(result.current.isLoading).toBe(false);
    });
  });

  describe('loading state', () => {
    it('should set loading to true during request', async () => {
      let resolvePromise: (value: any) => void;
      const promise = new Promise((resolve) => {
        resolvePromise = resolve;
      });

      global.fetch = jest.fn().mockReturnValue(promise);

      const { result } = renderHook(() => useAgent());

      act(() => {
        result.current.sendMessage('test message');
      });

      expect(result.current.isLoading).toBe(true);

      await act(async () => {
        resolvePromise({
          ok: true,
          json: () => Promise.resolve({})
        });
      });

      expect(result.current.isLoading).toBe(false);
    });
  });
});


=== FILE: client/src/hooks/useFormMutation.ts ===

import { useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { queryClient, apiRequest } from "@/lib/queryClient";

/**
 * Centralized form mutation hook
 * Eliminates duplication of form submission, error handling, and success notifications
 */

interface FormMutationOptions<TData = any> {
  endpoint: string;
  method?: 'POST' | 'PUT' | 'PATCH' | 'DELETE';
  successTitle?: string;
  successDescription?: string;
  errorTitle?: string;
  errorDescription?: string;
  invalidateQueries?: string[];
  onSuccess?: (data: TData) => void;
  onError?: (error: any) => void;
  transformData?: (data: any) => any;
}

export function useFormMutation<TData = any, TVariables = any>({
  endpoint,
  method = 'POST',
  successTitle = "Success",
  successDescription = "Operation completed successfully.",
  errorTitle = "Error",
  errorDescription = "Operation failed. Please try again.",
  invalidateQueries = [],
  onSuccess,
  onError,
  transformData
}: FormMutationOptions<TData>) {
  const { toast } = useToast();

  return useMutation({
    mutationFn: async (data: TVariables) => {
      const transformedData = transformData ? transformData(data) : data;
      
      const response = await apiRequest(endpoint, {
        method,
        body: JSON.stringify(transformedData),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      return response.json();
    },
    onSuccess: (data: TData) => {
      // Invalidate specified queries
      invalidateQueries.forEach(queryKey => {
        queryClient.invalidateQueries({ queryKey: [queryKey] });
      });

      // Show success toast
      toast({
        title: successTitle,
        description: successDescription,
      });

      // Call custom success handler
      onSuccess?.(data);
    },
    onError: (error: any) => {
      // Show error toast
      toast({
        title: errorTitle,
        description: errorDescription,
        variant: "destructive",
      });

      // Call custom error handler
      onError?.(error);
    },
  });
}

/**
 * Specialized hooks for common CRUD operations
 */

export function useCreateMutation<TData = any, TVariables = any>(
  endpoint: string,
  entityName: string,
  invalidateQueries: string[] = []
) {
  return useFormMutation<TData, TVariables>({
    endpoint,
    method: 'POST',
    successTitle: `${entityName} created`,
    successDescription: `The ${entityName.toLowerCase()} has been created successfully.`,
    errorTitle: "Error",
    errorDescription: `Failed to create ${entityName.toLowerCase()}. Please try again.`,
    invalidateQueries
  });
}

export function useUpdateMutation<TData = any, TVariables = any>(
  endpoint: string,
  entityName: string,
  invalidateQueries: string[] = []
) {
  return useFormMutation<TData, TVariables>({
    endpoint,
    method: 'PUT',
    successTitle: `${entityName} updated`,
    successDescription: `The ${entityName.toLowerCase()} has been updated successfully.`,
    errorTitle: "Error",
    errorDescription: `Failed to update ${entityName.toLowerCase()}. Please try again.`,
    invalidateQueries
  });
}

export function useDeleteMutation<TData = any>(
  endpoint: string,
  entityName: string,
  invalidateQueries: string[] = []
) {
  return useFormMutation<TData, { id: string | number }>({
    endpoint,
    method: 'DELETE',
    successTitle: `${entityName} deleted`,
    successDescription: `The ${entityName.toLowerCase()} has been deleted successfully.`,
    errorTitle: "Error",
    errorDescription: `Failed to delete ${entityName.toLowerCase()}. Please try again.`,
    invalidateQueries
  });
}


=== FILE: client/src/hooks/useDebounce.ts ===

import { useState, useEffect } from 'react';

/**
 * Custom hook that debounces a value with a specified delay
 * @param value - The value to debounce
 * @param delay - The delay in milliseconds
 * @returns The debounced value
 */
export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}

export default useDebounce;


=== FILE: client/src/hooks/co-founder/useAccountability.ts ===


import { useQuery, useMutation } from '@tanstack/react-query';
import { apiRequest, queryClient } from '@/lib/queryClient';

export interface Goal {
  id: string;
  description: string;
  dueDate: string;
  status: 'pending' | 'in_progress' | 'completed' | 'overdue';
  priority: 'low' | 'medium' | 'high' | 'critical';
  progress: number;
}

export interface Commitment {
  id: string;
  description: string;
  dueDate: string;
  status: 'pending' | 'completed' | 'overdue';
}

export function useAccountability() {
  const goalsQuery = useQuery<Goal[]>({
    queryKey: ['/api/ai-agents/co-founder/goals'],
  });

  const commitmentsQuery = useQuery<Commitment[]>({
    queryKey: ['/api/ai-agents/co-founder/commitments'],
  });

  const addGoalMutation = useMutation({
    mutationFn: async (goal: Omit<Goal, 'id' | 'status' | 'progress'>) => {
      return await apiRequest('/api/ai-agents/co-founder/goals', {
        method: 'POST',
        body: JSON.stringify(goal)
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/ai-agents/co-founder/goals'] });
    }
  });

  const updateGoalMutation = useMutation({
    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Goal> }) => {
      return await apiRequest(`/api/ai-agents/co-founder/goals/${id}`, {
        method: 'PATCH',
        body: JSON.stringify(updates)
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/ai-agents/co-founder/goals'] });
    }
  });

  const addCommitmentMutation = useMutation({
    mutationFn: async (commitment: Omit<Commitment, 'id' | 'status'>) => {
      return await apiRequest('/api/ai-agents/co-founder/commitments', {
        method: 'POST',
        body: JSON.stringify(commitment)
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/ai-agents/co-founder/commitments'] });
    }
  });

  return {
    goals: goalsQuery.data || [],
    commitments: commitmentsQuery.data || [],
    isLoadingGoals: goalsQuery.isLoading,
    isLoadingCommitments: commitmentsQuery.isLoading,
    addGoal: addGoalMutation.mutate,
    updateGoal: updateGoalMutation.mutate,
    addCommitment: addCommitmentMutation.mutate,
    isAddingGoal: addGoalMutation.isPending,
    isUpdatingGoal: updateGoalMutation.isPending
  };
}


=== FILE: client/src/hooks/co-founder/useCoFounder.ts ===


import { useState, useCallback } from 'react';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useMutation, useQuery } from '@tanstack/react-query';

export interface CoFounderMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: string;
  mode?: string;
}

export interface CoFounderResponse {
  content: string;
  suggestions?: string[];
  actions?: Array<{
    type: string;
    label: string;
    data?: any;
  }>;
  insights?: any[];
}

export function useCoFounder() {
  const [conversationHistory, setConversationHistory] = useState<CoFounderMessage[]>([]);
  const [currentMode, setCurrentMode] = useState<string>('general');

  const sendMessageMutation = useMutation({
    mutationFn: async ({ message, mode }: { message: string; mode?: string }) => {
      const response = await apiRequest<CoFounderResponse>('/api/ai-agents/co-founder/chat', {
        method: 'POST',
        body: JSON.stringify({
          message,
          mode: mode || currentMode,
          conversationHistory: conversationHistory.slice(-10)
        })
      });
      return response;
    },
    onSuccess: (data, variables) => {
      setConversationHistory(prev => [
        ...prev,
        {
          role: 'user',
          content: variables.message,
          timestamp: new Date().toISOString(),
          mode: variables.mode || currentMode
        },
        {
          role: 'assistant',
          content: data.content,
          timestamp: new Date().toISOString(),
          mode: variables.mode || currentMode
        }
      ]);
    }
  });

  const startSession = useCallback((mode: string) => {
    setCurrentMode(mode);
    setConversationHistory([]);
  }, []);

  const sendMessage = useCallback(async (message: string, mode?: string) => {
    return sendMessageMutation.mutateAsync({ message, mode });
  }, [sendMessageMutation]);

  const clearHistory = useCallback(() => {
    setConversationHistory([]);
  }, []);

  return {
    conversationHistory,
    currentMode,
    startSession,
    sendMessage,
    clearHistory,
    isLoading: sendMessageMutation.isPending
  };
}


=== FILE: client/src/hooks/co-founder/useDecisionSupport.ts ===


import { useMutation } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';

export interface DecisionAnalysis {
  criteria: Array<{
    factor: string;
    weight: number;
    evaluation: string;
  }>;
  options: Array<{
    name: string;
    score: number;
    pros: string[];
    cons: string[];
  }>;
  recommendation: string;
  reasoning: string;
}

export interface ScenarioAnalysis {
  scenarios: {
    bestCase: {
      description: string;
      probability: number;
      outcomes: string[];
    };
    likelyCase: {
      description: string;
      probability: number;
      outcomes: string[];
    };
    worstCase: {
      description: string;
      probability: number;
      outcomes: string[];
    };
  };
  earlyWarningSignals: string[];
}

export function useDecisionSupport() {
  const analyzeDecisionMutation = useMutation({
    mutationFn: async ({ decision, options }: { decision: string; options?: string[] }) => {
      return await apiRequest<DecisionAnalysis>('/api/ai-agents/co-founder/decision/analyze', {
        method: 'POST',
        body: JSON.stringify({ decision, options })
      });
    }
  });

  const runScenariosMutation = useMutation({
    mutationFn: async (decision: string) => {
      return await apiRequest<ScenarioAnalysis>('/api/ai-agents/co-founder/decision/scenarios', {
        method: 'POST',
        body: JSON.stringify({ decision })
      });
    }
  });

  const runPremortemMutation = useMutation({
    mutationFn: async (decision: string) => {
      return await apiRequest('/api/ai-agents/co-founder/decision/premortem', {
        method: 'POST',
        body: JSON.stringify({ decision })
      });
    }
  });

  return {
    analyzeDecision: analyzeDecisionMutation.mutateAsync,
    runScenarios: runScenariosMutation.mutateAsync,
    runPremortem: runPremortemMutation.mutateAsync,
    isAnalyzing: analyzeDecisionMutation.isPending,
    isRunningScenarios: runScenariosMutation.isPending,
    isRunningPremortem: runPremortemMutation.isPending,
    decisionAnalysis: analyzeDecisionMutation.data,
    scenarioAnalysis: runScenariosMutation.data
  };
}


=== FILE: client/src/lib/safari-26-optimizations.ts ===

/**
 * Safari 26.0 Optimizations and Features
 * Implements Apple's latest web technologies and design principles
 */

// Safari 26.0 Feature Detection
export const Safari26Features = {
  // Check for Safari 26.0 specific features
  hasContainerQueries: () => {
    return CSS.supports('container-type: inline-size');
  },
  
  hasCSSGridLevel3: () => {
    return CSS.supports('grid-template-columns: subgrid');
  },
  
  hasLogicalProperties: () => {
    return CSS.supports('margin-inline-start: 1rem');
  },
  
  hasBackdropFilter: () => {
    return CSS.supports('backdrop-filter: blur(10px)');
  },
  
  hasWebStreams: () => {
    return typeof ReadableStream !== 'undefined';
  },
  
  hasWebLocks: () => {
    return typeof navigator.locks !== 'undefined';
  },
  
  hasWebAnimations: () => {
    return typeof Element.prototype.animate !== 'undefined';
  }
};

// Performance optimizations for Safari 26.0
export const Safari26Performance = {
  // Optimize for Safari's Nitro 2.0 JavaScript engine
  optimizeJavaScript: () => {
    // Use modern JavaScript features that Safari 26.0 optimizes
    const optimizations = {
      useAsyncAwait: true,
      useOptionalChaining: true,
      useNullishCoalescing: true,
      useDynamicImports: true,
      useWebWorkers: true
    };
    
    return optimizations;
  },
  
  // Optimize CSS for Safari 26.0 rendering engine
  optimizeCSS: () => {
    const cssOptimizations = {
      useCSSGrid: true,
      useFlexbox: true,
      useCustomProperties: true,
      useLogicalProperties: true,
      useContainerQueries: true,
      useBackdropFilter: true
    };
    
    return cssOptimizations;
  },
  
  // Memory management optimizations
  optimizeMemory: () => {
    return {
      useWeakMap: true,
      useWeakSet: true,
      useAbortController: true,
      useIntersectionObserver: true,
      useResizeObserver: true
    };
  }
};

// Safari 26.0 Security Features
export const Safari26Security = {
  // Enhanced privacy features
  privacyFeatures: {
    intelligentTrackingPrevention: true,
    crossSiteTrackingPrevention: true,
    fingerprintingPrevention: true,
    cryptominerBlocking: true,
    socialMediaTrackingPrevention: true
  },
  
  // Security headers for Safari 26.0
  securityHeaders: {
    'Content-Security-Policy': "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'",
    'X-Frame-Options': 'DENY',
    'X-Content-Type-Options': 'nosniff',
    'Referrer-Policy': 'strict-origin-when-cross-origin',
    'Permissions-Policy': 'camera=(), microphone=(), geolocation=()'
  }
};

// Safari 26.0 Accessibility Features
export const Safari26Accessibility = {
  // Enhanced accessibility support
  accessibilityFeatures: {
    voiceOverSupport: true,
    switchControlSupport: true,
    dynamicTypeSupport: true,
    highContrastSupport: true,
    reducedMotionSupport: true,
    colorBlindSupport: true
  },
  
  // ARIA enhancements for Safari 26.0
  ariaEnhancements: {
    liveRegions: true,
    landmarks: true,
    headings: true,
    forms: true,
    tables: true,
    buttons: true
  }
};

// Safari 26.0 PWA Features
export const Safari26PWA = {
  // Progressive Web App capabilities
  pwaFeatures: {
    serviceWorkerSupport: true,
    manifestSupport: true,
    installPromptSupport: true,
    offlineSupport: true,
    pushNotificationSupport: true,
    backgroundSyncSupport: true
  },
  
  // Safari-specific PWA optimizations
  safariOptimizations: {
    useAppleTouchIcons: true,
    useWebAppManifest: true,
    useMetaThemeColor: true,
    useViewportMeta: true,
    useAppleWebAppCapable: true
  }
};

// Safari 26.0 Design System Integration
export const Safari26DesignSystem = {
  // Apple design principles implementation
  designPrinciples: {
    usability: {
      clearNavigation: true,
      intuitiveInteractions: true,
      consistentPatterns: true,
      accessibleControls: true
    },
    communication: {
      clearFeedback: true,
      contextualHelp: true,
      progressIndicators: true,
      statusUpdates: true
    },
    functionality: {
      purposeDriven: true,
      efficientWorkflows: true,
      errorPrevention: true,
      taskCompletion: true
    },
    aesthetics: {
      visualHierarchy: true,
      balancedComposition: true,
      appropriateTypography: true,
      harmoniousColors: true
    },
    emotionalConnections: {
      engagingInteractions: true,
      positiveFeedback: true,
      personalTouch: true,
      memorableExperiences: true
    },
    attentionToDetail: {
      preciseSpacing: true,
      refinedTypography: true,
      subtleAnimations: true,
      qualityCraftsmanship: true
    },
    consistency: {
      unifiedLanguage: true,
      predictablePatterns: true,
      coherentNavigation: true,
      standardComponents: true
    },
    minimalism: {
      essentialElements: true,
      cleanInterfaces: true,
      focusedContent: true,
      reducedComplexity: true
    }
  }
};

// Safari 26.0 Animation and Interaction Optimizations
export const Safari26Animations = {
  // Optimized animations for Safari 26.0
  animationOptimizations: {
    useTransform: true,
    useOpacity: true,
    useWillChange: true,
    useBackfaceVisibility: true,
    usePerspective: true
  },
  
  // Performance-optimized transitions
  transitions: {
    duration: {
      fast: '150ms',
      normal: '250ms',
      slow: '350ms'
    },
    easing: {
      easeOut: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
      easeIn: 'cubic-bezier(0.55, 0.06, 0.68, 0.19)',
      easeInOut: 'cubic-bezier(0.42, 0, 0.58, 1)'
    }
  }
};

// Safari 26.0 Responsive Design Enhancements
export const Safari26Responsive = {
  // Enhanced responsive design for Safari 26.0
  responsiveFeatures: {
    containerQueries: true,
    logicalProperties: true,
    aspectRatio: true,
    clamp: true,
    minMax: true
  },
  
  // Safari-specific viewport optimizations
  viewportOptimizations: {
    useSafeAreaInsets: true,
    useViewportUnits: true,
    useMediaQueries: true,
    useContainerQueries: true
  }
};

// Safari 26.0 Performance Monitoring
export const Safari26PerformanceMonitoring = {
  // Performance metrics for Safari 26.0
  metrics: {
    firstContentfulPaint: true,
    largestContentfulPaint: true,
    firstInputDelay: true,
    cumulativeLayoutShift: true,
    timeToInteractive: true
  },
  
  // Safari-specific performance optimizations
  optimizations: {
    useResourceHints: true,
    usePreload: true,
    usePrefetch: true,
    usePreconnect: true,
    useDnsPrefetch: true
  }
};

// Safari 26.0 Integration Helper
export class Safari26Integration {
  private static instance: Safari26Integration;
  
  public static getInstance(): Safari26Integration {
    if (!Safari26Integration.instance) {
      Safari26Integration.instance = new Safari26Integration();
    }
    return Safari26Integration.instance;
  }
  
  // Initialize Safari 26.0 optimizations
  public initialize(): void {
    this.detectFeatures();
    this.applyOptimizations();
    this.setupPerformanceMonitoring();
    this.enableAccessibilityFeatures();
  }
  
  private detectFeatures(): void {
    console.log('Safari 26.0 Features Detected:', Safari26Features);
  }
  
  private applyOptimizations(): void {
    // Apply performance optimizations
    const jsOpts = Safari26Performance.optimizeJavaScript();
    const cssOpts = Safari26Performance.optimizeCSS();
    const memoryOpts = Safari26Performance.optimizeMemory();
    
    console.log('Applied Safari 26.0 optimizations:', {
      javascript: jsOpts,
      css: cssOpts,
      memory: memoryOpts
    });
  }
  
  private setupPerformanceMonitoring(): void {
    // Setup performance monitoring for Safari 26.0
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        console.log('Performance metric:', entry.name, (entry as any).value || 'N/A');
      }
      });
      
      observer.observe({ entryTypes: ['measure', 'navigation', 'paint'] });
    }
  }
  
  private enableAccessibilityFeatures(): void {
    // Enable Safari 26.0 accessibility features
    document.documentElement.setAttribute('data-safari-accessibility', 'enabled');
    
    // Add reduced motion support
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      document.documentElement.classList.add('reduced-motion');
    }
    
    // Add high contrast support
    if (window.matchMedia('(prefers-contrast: high)').matches) {
      document.documentElement.classList.add('high-contrast');
    }
  }
}

// Auto-initialize Safari 26.0 integration
if (typeof window !== 'undefined') {
  const safari26 = Safari26Integration.getInstance();
  safari26.initialize();
}


=== FILE: client/src/lib/utils.ts ===

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


=== FILE: client/src/lib/ai/agent-client.ts ===

import { processStreamingResponse } from '@/utils/streamingUtils';

export interface AgentRequest {
  userId: string;
  userType: string;
  message: string;
  sessionId: string;
  taskType?: string;
  streaming?: boolean;
  context?: Record<string, any>;
}

export interface AgentResponse {
  id: string;
  content: string;
  agentType: string;
  timestamp: Date;
  suggestions?: string[];
  actions?: Array<{
    type: string;
    description: string;
    parameters: Record<string, any>;
  }>;
  insights?: Array<{
    type: 'warning' | 'recommendation' | 'opportunity' | 'risk';
    title: string;
    description: string;
    priority: 'low' | 'medium' | 'high';
  }>;
  metadata?: Record<string, any>;
}

export class AgentClient {
  private baseUrl: string;

  constructor(baseUrl: string = '/api/ai') {
    this.baseUrl = baseUrl;
  }

  async sendMessage(request: AgentRequest): Promise<AgentResponse> {
    const response = await fetch(`${this.baseUrl}/chat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(request)
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Failed to send message');
    }

    const data = await response.json();
    return {
      ...data,
      timestamp: new Date(data.timestamp)
    };
  }

  async sendStreamingMessage(
    request: AgentRequest,
    onChunk: (chunk: string) => void
  ): Promise<AgentResponse> {
    const response = await fetch(`${this.baseUrl}/chat/stream`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ ...request, streaming: true })
    });

    return processStreamingResponse(response, onChunk, request.userType);
  }

  async getSessionHistory(userId: string, sessionId: string): Promise<any[]> {
    const response = await fetch(
      `${this.baseUrl}/sessions/${userId}/${sessionId}/history`
    );

    if (!response.ok) {
      throw new Error('Failed to get session history');
    }

    const data = await response.json();
    return data.messages || [];
  }

  async clearSession(userId: string, sessionId: string): Promise<void> {
    const response = await fetch(
      `${this.baseUrl}/sessions/${userId}/${sessionId}`,
      { method: 'DELETE' }
    );

    if (!response.ok) {
      throw new Error('Failed to clear session');
    }
  }

  async getSuggestions(userType: string, context?: Record<string, any>): Promise<any[]> {
    const response = await fetch(`${this.baseUrl}/suggestions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ userType, context })
    });

    if (!response.ok) {
      throw new Error('Failed to get suggestions');
    }

    const data = await response.json();
    return data.suggestions || [];
  }
}

export const agentClient = new AgentClient();

=== FILE: client/src/lib/creditScoringCache.ts ===

/**
 * In-memory cache for credit scoring calculations with TTL support
 */
class CreditScoringCache {
  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();
  private defaultTTL = 5 * 60 * 1000; // 5 minutes default TTL

  /**
   * Generate cache key from form data
   */
  private generateKey(data: any): string {
    const sortedKeys = Object.keys(data).sort();
    const keyString = sortedKeys.map(key => `${key}:${data[key]}`).join('|');
    return btoa(keyString); // Base64 encode for consistent key format
  }

  /**
   * Check if cache entry is still valid
   */
  private isValid(entry: { timestamp: number; ttl: number }): boolean {
    return Date.now() - entry.timestamp < entry.ttl;
  }

  /**
   * Set cache entry with optional TTL
   */
  set(key: string, data: any, ttl?: number): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl: ttl || this.defaultTTL
    });
  }

  /**
   * Get cache entry if valid
   */
  get(key: string): any | null {
    const entry = this.cache.get(key);
    if (!entry) return null;
    
    if (!this.isValid(entry)) {
      this.cache.delete(key);
      return null;
    }
    
    return entry.data;
  }

  /**
   * Get cached score result by form data
   */
  getCachedScore(formData: any): any | null {
    const key = this.generateKey(formData);
    return this.get(key);
  }

  /**
   * Cache score result by form data
   */
  setCachedScore(formData: any, scoreResult: any, ttl?: number): void {
    const key = this.generateKey(formData);
    this.set(key, scoreResult, ttl);
  }

  /**
   * Check if score is cached
   */
  hasCachedScore(formData: any): boolean {
    const key = this.generateKey(formData);
    return this.getCachedScore(formData) !== null;
  }

  /**
   * Clear all cache entries
   */
  clear(): void {
    this.cache.clear();
  }

  /**
   * Clear expired entries
   */
  clearExpired(): void {
    for (const [key, entry] of this.cache.entries()) {
      if (!this.isValid(entry)) {
        this.cache.delete(key);
      }
    }
  }

  /**
   * Get cache statistics
   */
  getStats(): { size: number; hitRate: number; keys: string[] } {
    return {
      size: this.cache.size,
      hitRate: 0, // Would need to track hits/misses to calculate
      keys: Array.from(this.cache.keys())
    };
  }

  /**
   * Set default TTL for new entries
   */
  setDefaultTTL(ttl: number): void {
    this.defaultTTL = ttl;
  }
}

// Create singleton instance
export const creditScoringCache = new CreditScoringCache();

/**
 * Decorator for caching expensive calculations
 */
export function withCache<T extends (...args: any[]) => any>(
  fn: T,
  ttl?: number
): T {
  return ((...args: any[]) => {
    const key = JSON.stringify(args);
    const cached = creditScoringCache.get(key);
    
    if (cached !== null) {
      return cached;
    }
    
    const result = fn(...args);
    creditScoringCache.set(key, result, ttl);
    
    return result;
  }) as T;
}

/**
 * Memoization decorator for React components
 */
export function memoizeComponent<T>(component: T): T {
  // Note: React needs to be imported where this is used
  return component; // Simplified for now, would need React import
}

export default creditScoringCache;


=== FILE: client/src/lib/queryClient.ts ===

import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const res = await fetch(queryKey[0] as string, {
      credentials: "include",
    });

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});


=== FILE: client/src/lib/icons.ts ===

// Common icons used across the application
export {
  // Navigation & UI
  Menu,
  X,
  ChevronDown,
  ChevronRight,
  Plus,
  Search,
  Filter,
  Settings,
  MoreVertical,
  
  // Files & Documents
  FileText,
  Upload,
  Download,
  Share2,
  Edit,
  Trash2,
  Eye,
  Copy,
  Save,
  RefreshCw,
  
  // Status & Actions
  CheckCircle,
  AlertCircle,
  Clock,
  Star,
  Award,
  Target,
  Zap,
  
  // Business & Analytics
  DollarSign,
  TrendingUp,
  TrendingDown,
  BarChart3,
  PieChart,
  LineChart,
  Activity,
  Users,
  Building2,
  Building,
  Globe,
  
  // Communication
  MessageSquare,
  Bell,
  Bot,
  Brain,
  Sparkles,
  Wand2,
  
  // Time & Calendar
  Calendar,
  Clock as ClockIcon,
  
  // Security & Access
  Lock,
  Unlock,
  Shield,
  
  // Media & Content
  Image,
  Video,
  Presentation,
  FileSpreadsheet,
  
  // Organization
  Archive,
  Bookmark,
  Tag,
  Folder,
  FolderOpen,
  
  // User & Profile
  User,
  LogOut,
  
  // Education & Learning
  GraduationCap,
  Lightbulb,
  Trophy,
  
  // Finance & Payments
  CreditCard,
  ReceiptText,
  
  // Technology & Development
  Rocket,
  Network,
  LifeBuoy,
  ExternalLink,
  
  // Workflow & Process
  ArrowRight,
  ArrowUp,
  ArrowDown,
  Handshake,
  Briefcase,
  
  // Data & Information
  Info,
  XCircle,
  CheckCircle as CheckCircleIcon,
  
  // Network & Connectivity
  Wifi,
  WifiOff,
  Smartphone,
  
  // Design & Layout
  Layout,
  Layers,
  PenTool,
  Maximize,
  ArrowRightLeft,
  
  // AI & Intelligence
  Brain as BrainIcon,
  Sparkles as SparklesIcon,
  Wand2 as Wand2Icon,
  Bot as BotIcon,
  
  // Business Operations
  Building2 as Building2Icon,
  Handshake as HandshakeIcon,
  Briefcase as BriefcaseIcon,
  GraduationCap as GraduationCapIcon,
  
  // Analytics & Metrics
  BarChart3 as BarChart3Icon,
  PieChart as PieChartIcon,
  LineChart as LineChartIcon,
  Activity as ActivityIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  
  // User Interface
  Users as UsersIcon,
  Target as TargetIcon,
  DollarSign as DollarSignIcon,
  Calendar as CalendarIcon,
  Clock as ClockIcon2,
  Bell as BellIcon,
  MessageSquare as MessageSquareIcon,
  Zap as ZapIcon,
  Award as AwardIcon,
  Star as StarIcon,
  CheckCircle as CheckCircleIcon2,
  AlertCircle as AlertCircleIcon,
  Eye as EyeIcon,
  Edit as EditIcon,
  Trash2 as Trash2Icon,
  Download as DownloadIcon,
  Share2 as Share2Icon,
  Copy as CopyIcon,
  RefreshCw as RefreshCwIcon,
  Settings as SettingsIcon,
  MoreVertical as MoreVerticalIcon,
  Plus as PlusIcon,
  Search as SearchIcon,
  Filter as FilterIcon,
  Menu as MenuIcon,
  X as XIcon,
  ChevronDown as ChevronDownIcon,
  ChevronRight as ChevronRightIcon,
  Globe as GlobeIcon,
  Building as BuildingIcon,
  User as UserIcon,
  LogOut as LogOutIcon,
  Sparkles as SparklesIcon2,
  Bot as BotIcon2,
  Brain as BrainIcon2,
  Wand2 as Wand2Icon2,
  Rocket as RocketIcon,
  Lightbulb as LightbulbIcon,
  Trophy as TrophyIcon,
  CreditCard as CreditCardIcon,
  ReceiptText as ReceiptTextIcon,
  Network as NetworkIcon,
  LifeBuoy as LifeBuoyIcon,
  ExternalLink as ExternalLinkIcon,
  ArrowRight as ArrowRightIcon,
  ArrowUp as ArrowUpIcon,
  ArrowDown as ArrowDownIcon,
  Handshake as HandshakeIcon2,
  Briefcase as BriefcaseIcon2,
  Info as InfoIcon,
  XCircle as XCircleIcon,
  Wifi as WifiIcon,
  WifiOff as WifiOffIcon,
  Smartphone as SmartphoneIcon,
  Layout as LayoutIcon,
  Layers as LayersIcon,
  PenTool as PenToolIcon,
  Maximize as MaximizeIcon,
  ArrowRightLeft as ArrowRightLeftIcon,
  FileText as FileTextIcon,
  Upload as UploadIcon,
  Download as DownloadIcon2,
  Share2 as Share2Icon2,
  Edit as EditIcon2,
  Trash2 as Trash2Icon2,
  Eye as EyeIcon2,
  Copy as CopyIcon2,
  Save as SaveIcon,
  RefreshCw as RefreshCwIcon2,
  Clock as ClockIcon3,
  CheckCircle as CheckCircleIcon3,
  AlertCircle as AlertCircleIcon2,
  Star as StarIcon2,
  Award as AwardIcon2,
  Target as TargetIcon2,
  Zap as ZapIcon2,
  MessageSquare as MessageSquareIcon2,
  Bell as BellIcon2,
  Bot as BotIcon3,
  Brain as BrainIcon3,
  Sparkles as SparklesIcon3,
  Wand2 as Wand2Icon3,
  Calendar as CalendarIcon2,
  Globe as GlobeIcon2,
  Lock as LockIcon,
  Unlock as UnlockIcon,
  Image as ImageIcon,
  Video as VideoIcon,
  Presentation as PresentationIcon,
  FileSpreadsheet as FileSpreadsheetIcon,
  Archive as ArchiveIcon,
  Bookmark as BookmarkIcon,
  Tag as TagIcon,
  Folder as FolderIcon,
  FolderOpen as FolderOpenIcon,
  User as UserIcon2,
  LogOut as LogOutIcon2,
  GraduationCap as GraduationCapIcon2,
  Lightbulb as LightbulbIcon2,
  Trophy as TrophyIcon2,
  CreditCard as CreditCardIcon2,
  ReceiptText as ReceiptTextIcon2,
  Rocket as RocketIcon2,
  Network as NetworkIcon2,
  LifeBuoy as LifeBuoyIcon2,
  ExternalLink as ExternalLinkIcon2,
  ArrowRight as ArrowRightIcon2,
  ArrowUp as ArrowUpIcon2,
  ArrowDown as ArrowDownIcon2,
  Handshake as HandshakeIcon3,
  Briefcase as BriefcaseIcon3,
  Info as InfoIcon2,
  XCircle as XCircleIcon2,
  Wifi as WifiIcon2,
  WifiOff as WifiOffIcon2,
  Smartphone as SmartphoneIcon2,
  Layout as LayoutIcon2,
  Layers as LayersIcon2,
  PenTool as PenToolIcon2,
  Maximize as MaximizeIcon2,
  ArrowRightLeft as ArrowRightLeftIcon2
} from 'lucide-react';


=== FILE: client/src/pages/settings.tsx ===

import React, { useState } from 'react';
import { useAuth } from '@/hooks/use-auth';
import { useSettings } from '@/hooks/use-settings';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';
import { 
  Settings as SettingsIcon, 
  User, 
  Bell, 
  Shield, 
  Bot, 
  Building, 
  Palette, 
  Globe, 
  Key, 
  Trash2, 
  Download, 
  Upload,
  Save,
  Eye,
  EyeOff,
  CheckCircle,
  AlertTriangle,
  Info,
  Clock,
  Mail,
  Phone,
  MapPin,
  Link,
  Lock,
  Unlock,
  Database,
  Cloud,
  Wifi,
  WifiOff,
  Volume2,
  VolumeX,
  Sun,
  Moon,
  Monitor
} from 'lucide-react';

interface UserSettings {
  // Account Settings
  firstName: string;
  lastName: string;
  email: string;
  phone?: string;
  timezone: string;
  language: string;
  
  // Privacy Settings
  profileVisibility: 'public' | 'private' | 'organization';
  dataSharing: boolean;
  analyticsOptIn: boolean;
  marketingEmails: boolean;
  
  // Notification Settings
  emailNotifications: boolean;
  pushNotifications: boolean;
  smsNotifications: boolean;
  notificationFrequency: 'immediate' | 'daily' | 'weekly';
  
  // AI Agent Settings
  aiPersonality: 'professional' | 'casual' | 'technical' | 'creative';
  aiResponseLength: 'brief' | 'detailed' | 'comprehensive';
  aiProactiveInsights: boolean;
  aiDataRetention: number; // days
  
  // Organization Settings
  defaultOrganization: string;
  organizationNotifications: boolean;
  teamCollaboration: boolean;
  
  // Appearance Settings
  theme: 'light' | 'dark' | 'system';
  fontSize: 'small' | 'medium' | 'large';
  compactMode: boolean;
  
  // Security Settings
  twoFactorAuth: boolean;
  sessionTimeout: number; // minutes
  loginNotifications: boolean;
  deviceTrust: boolean;
}

export default function Settings() {
  const { user } = useAuth();
  const { toast } = useToast();
  const { 
    settings, 
    isLoading, 
    updateSettings, 
    resetSettings, 
    exportSettings, 
    isUpdating, 
    isResetting, 
    isExporting 
  } = useSettings();
  const [activeTab, setActiveTab] = useState('account');

  // Local state for form data
  const [formData, setFormData] = useState<UserSettings>({
    firstName: user?.firstName || 'John',
    lastName: user?.lastName || 'Doe',
    email: user?.email || 'john.doe@example.com',
    phone: '+1 (555) 123-4567',
    timezone: 'America/New_York',
    language: 'en',
    profileVisibility: 'organization',
    dataSharing: true,
    analyticsOptIn: true,
    marketingEmails: false,
    emailNotifications: true,
    pushNotifications: true,
    smsNotifications: false,
    notificationFrequency: 'daily',
    aiPersonality: 'professional',
    aiResponseLength: 'detailed',
    aiProactiveInsights: true,
    aiDataRetention: 90,
    defaultOrganization: 'techstart-inc',
    organizationNotifications: true,
    teamCollaboration: true,
    theme: 'system',
    fontSize: 'medium',
    compactMode: false,
    twoFactorAuth: false,
    sessionTimeout: 60,
    loginNotifications: true,
    deviceTrust: true
  });

  // Update form data when settings are loaded
  React.useEffect(() => {
    if (settings) {
      setFormData(settings);
    }
  }, [settings]);

  const handleSaveSettings = () => {
    updateSettings(formData);
  };

  const handleResetSettings = () => {
    resetSettings();
  };

  const handleExportSettings = () => {
    exportSettings();
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-6xl">
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Settings</h1>
            <p className="text-gray-600 mt-1">Manage your account preferences and application settings</p>
          </div>
          <div className="flex items-center space-x-2">
            <Button variant="outline" onClick={handleExportSettings} disabled={isExporting}>
              {isExporting ? (
                <>
                  <Clock className="h-4 w-4 mr-2 animate-spin" />
                  Exporting...
                </>
              ) : (
                <>
                  <Download className="h-4 w-4 mr-2" />
                  Export
                </>
              )}
            </Button>
            <Button variant="outline" onClick={handleResetSettings} disabled={isResetting}>
              {isResetting ? (
                <>
                  <Clock className="h-4 w-4 mr-2 animate-spin" />
                  Resetting...
                </>
              ) : (
                <>
                  <Trash2 className="h-4 w-4 mr-2" />
                  Reset
                </>
              )}
            </Button>
            <Button onClick={handleSaveSettings} disabled={isUpdating}>
              {isUpdating ? (
                <>
                  <Clock className="h-4 w-4 mr-2 animate-spin" />
                  Saving...
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-2" />
                  Save Changes
                </>
              )}
            </Button>
          </div>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-6">
            <TabsTrigger value="account">Account</TabsTrigger>
            <TabsTrigger value="notifications">Notifications</TabsTrigger>
            <TabsTrigger value="privacy">Privacy</TabsTrigger>
            <TabsTrigger value="ai">AI Agents</TabsTrigger>
            <TabsTrigger value="appearance">Appearance</TabsTrigger>
            <TabsTrigger value="security">Security</TabsTrigger>
          </TabsList>

          {/* Account Settings */}
          <TabsContent value="account" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <User className="h-5 w-5 mr-2" />
                  Account Information
                </CardTitle>
                <CardDescription>
                  Manage your personal information and account details
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="firstName">First Name</Label>
                    <Input
                      id="firstName"
                      value={formData.firstName}
                      onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="lastName">Last Name</Label>
                    <Input
                      id="lastName"
                      value={formData.lastName}
                      onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="email">Email Address</Label>
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="phone">Phone Number</Label>
                    <Input
                      id="phone"
                      value={formData.phone}
                      onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="timezone">Timezone</Label>
                    <Select value={formData.timezone} onValueChange={(value) => setFormData(prev => ({ ...prev, timezone: value }))}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="America/New_York">Eastern Time</SelectItem>
                        <SelectItem value="America/Chicago">Central Time</SelectItem>
                        <SelectItem value="America/Denver">Mountain Time</SelectItem>
                        <SelectItem value="America/Los_Angeles">Pacific Time</SelectItem>
                        <SelectItem value="Europe/London">London</SelectItem>
                        <SelectItem value="Europe/Paris">Paris</SelectItem>
                        <SelectItem value="Asia/Tokyo">Tokyo</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="language">Language</Label>
                    <Select value={formData.language} onValueChange={(value) => setFormData(prev => ({ ...prev, language: value }))}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="en">English</SelectItem>
                        <SelectItem value="es">Spanish</SelectItem>
                        <SelectItem value="fr">French</SelectItem>
                        <SelectItem value="de">German</SelectItem>
                        <SelectItem value="ja">Japanese</SelectItem>
                        <SelectItem value="zh">Chinese</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Notifications Settings */}
          <TabsContent value="notifications" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Bell className="h-5 w-5 mr-2" />
                  Notification Preferences
                </CardTitle>
                <CardDescription>
                  Choose how and when you want to be notified
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Email Notifications</Label>
                      <p className="text-sm text-gray-600">Receive notifications via email</p>
                    </div>
                    <Switch
                      checked={formData.emailNotifications}
                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, emailNotifications: checked }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Push Notifications</Label>
                      <p className="text-sm text-gray-600">Receive push notifications in your browser</p>
                    </div>
                    <Switch
                      checked={formData.pushNotifications}
                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, pushNotifications: checked }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>SMS Notifications</Label>
                      <p className="text-sm text-gray-600">Receive notifications via SMS</p>
                    </div>
                    <Switch
                      checked={formData.smsNotifications}
                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, smsNotifications: checked }))}
                    />
                  </div>

                  <Separator />

                  <div className="space-y-2">
                    <Label>Notification Frequency</Label>
                    <Select value={formData.notificationFrequency} onValueChange={(value: any) => setFormData(prev => ({ ...prev, notificationFrequency: value }))}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="immediate">Immediate</SelectItem>
                        <SelectItem value="daily">Daily Digest</SelectItem>
                        <SelectItem value="weekly">Weekly Summary</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Privacy Settings */}
          <TabsContent value="privacy" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Shield className="h-5 w-5 mr-2" />
                  Privacy & Data
                </CardTitle>
                <CardDescription>
                  Control your privacy settings and data sharing preferences
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label>Profile Visibility</Label>
                    <Select value={formData.profileVisibility} onValueChange={(value: any) => setFormData(prev => ({ ...prev, profileVisibility: value }))}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="public">Public</SelectItem>
                        <SelectItem value="organization">Organization Only</SelectItem>
                        <SelectItem value="private">Private</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Data Sharing</Label>
                      <p className="text-sm text-gray-600">Allow sharing of anonymized data for product improvement</p>
                    </div>
                    <Switch
                      checked={formData.dataSharing}
                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, dataSharing: checked }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Analytics Opt-in</Label>
                      <p className="text-sm text-gray-600">Help us improve by sharing usage analytics</p>
                    </div>
                    <Switch
                      checked={formData.analyticsOptIn}
                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, analyticsOptIn: checked }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Marketing Emails</Label>
                      <p className="text-sm text-gray-600">Receive marketing and promotional emails</p>
                    </div>
                    <Switch
                      checked={formData.marketingEmails}
                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, marketingEmails: checked }))}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* AI Agent Settings */}
          <TabsContent value="ai" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Bot className="h-5 w-5 mr-2" />
                  AI Agent Preferences
                </CardTitle>
                <CardDescription>
                  Customize your AI agent's behavior and responses
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label>AI Personality</Label>
                    <Select value={formData.aiPersonality} onValueChange={(value: any) => setFormData(prev => ({ ...prev, aiPersonality: value }))}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="professional">Professional</SelectItem>
                        <SelectItem value="casual">Casual</SelectItem>
                        <SelectItem value="technical">Technical</SelectItem>
                        <SelectItem value="creative">Creative</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label>Response Length</Label>
                    <Select value={formData.aiResponseLength} onValueChange={(value: any) => setFormData(prev => ({ ...prev, aiResponseLength: value }))}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="brief">Brief</SelectItem>
                        <SelectItem value="detailed">Detailed</SelectItem>
                        <SelectItem value="comprehensive">Comprehensive</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Proactive Insights</Label>
                      <p className="text-sm text-gray-600">Allow AI to provide proactive suggestions and insights</p>
                    </div>
                    <Switch
                      checked={formData.aiProactiveInsights}
                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, aiProactiveInsights: checked }))}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>Data Retention (days)</Label>
                    <Input
                      type="number"
                      value={formData.aiDataRetention}
                      onChange={(e) => setFormData(prev => ({ ...prev, aiDataRetention: parseInt(e.target.value) }))}
                      min="1"
                      max="365"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Appearance Settings */}
          <TabsContent value="appearance" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Palette className="h-5 w-5 mr-2" />
                  Appearance
                </CardTitle>
                <CardDescription>
                  Customize the look and feel of your application
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label>Theme</Label>
                    <Select value={formData.theme} onValueChange={(value: any) => setFormData(prev => ({ ...prev, theme: value }))}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="light">
                          <div className="flex items-center">
                            <Sun className="h-4 w-4 mr-2" />
                            Light
                          </div>
                        </SelectItem>
                        <SelectItem value="dark">
                          <div className="flex items-center">
                            <Moon className="h-4 w-4 mr-2" />
                            Dark
                          </div>
                        </SelectItem>
                        <SelectItem value="system">
                          <div className="flex items-center">
                            <Monitor className="h-4 w-4 mr-2" />
                            System
                          </div>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label>Font Size</Label>
                    <Select value={formData.fontSize} onValueChange={(value: any) => setFormData(prev => ({ ...prev, fontSize: value }))}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="small">Small</SelectItem>
                        <SelectItem value="medium">Medium</SelectItem>
                        <SelectItem value="large">Large</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Compact Mode</Label>
                      <p className="text-sm text-gray-600">Use a more compact interface layout</p>
                    </div>
                    <Switch
                      checked={formData.compactMode}
                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, compactMode: checked }))}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Security Settings */}
          <TabsContent value="security" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Lock className="h-5 w-5 mr-2" />
                  Security
                </CardTitle>
                <CardDescription>
                  Manage your account security and authentication settings
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Two-Factor Authentication</Label>
                      <p className="text-sm text-gray-600">Add an extra layer of security to your account</p>
                    </div>
                    <Switch
                      checked={formData.twoFactorAuth}
                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, twoFactorAuth: checked }))}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>Session Timeout (minutes)</Label>
                    <Input
                      type="number"
                      value={formData.sessionTimeout}
                      onChange={(e) => setFormData(prev => ({ ...prev, sessionTimeout: parseInt(e.target.value) }))}
                      min="5"
                      max="480"
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Login Notifications</Label>
                      <p className="text-sm text-gray-600">Get notified when someone logs into your account</p>
                    </div>
                    <Switch
                      checked={formData.loginNotifications}
                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, loginNotifications: checked }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Device Trust</Label>
                      <p className="text-sm text-gray-600">Remember this device for faster login</p>
                    </div>
                    <Switch
                      checked={formData.deviceTrust}
                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, deviceTrust: checked }))}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}


=== FILE: client/src/pages/edit-plan.tsx ===

import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams, useLocation } from 'wouter';
import { 
  FileText, 
  ArrowLeft, 
  Home,
  Eye,
  Download,
  BarChart3
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { BusinessPlanProvider } from '@/contexts/BusinessPlanContext';
import { BUSINESS_PLAN_STRUCTURE } from '@/constants/businessPlanStructure';
import { ChapterNavigation } from '@/components/business-plan/ChapterNavigation';
import { SectionEditor } from '@/components/business-plan/SectionEditor';
import { ProgressDashboard } from '@/components/business-plan/ProgressDashboard';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

function EditPlanContent() {
  const { id } = useParams();
  const [location, setLocation] = useLocation();
  const { toast } = useToast();

  const [activeChapter, setActiveChapter] = useState('executive-summary');
  const [activeSection, setActiveSection] = useState('summary');
  const [activeTab, setActiveTab] = useState('editor');

  // Parse URL for chapter and section if they exist
  useEffect(() => {
    const params = new URLSearchParams(location.split('?')[1]);
    const chapter = params.get('chapter');
    const section = params.get('section');
    
    if (chapter) {
      setActiveChapter(chapter);
    }
    if (section) {
      setActiveSection(section);
    }
  }, [location]);

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
  });

  // Update URL when chapter/section changes
  useEffect(() => {
    const basePath = location.split('?')[0] || '';
    const params = new URLSearchParams();
    params.set('chapter', activeChapter);
    params.set('section', activeSection);
    setLocation(`${basePath}?${params.toString()}`, { replace: true });
  }, [activeChapter, activeSection, setLocation]);

  const activeChapterData = BUSINESS_PLAN_STRUCTURE.find(c => c.id === activeChapter);
  const activeSectionData = activeChapterData?.sections.find(s => s.id === activeSection);

  const handleChapterSelect = (chapterId: string) => {
    setActiveChapter(chapterId);
    const chapter = BUSINESS_PLAN_STRUCTURE.find(c => c.id === chapterId);
    if (chapter && chapter.sections.length > 0) {
      setActiveSection(chapter.sections[0].id);
    }
  };

  const handleSectionSelect = (chapterId: string, sectionId: string) => {
    setActiveChapter(chapterId);
    setActiveSection(sectionId);
    setActiveTab('editor');
  };

  const handleBack = () => {
    setLocation('/dashboard');
  };

  const handlePreview = () => {
    // TODO: Implement preview functionality
    toast({
      title: 'Preview',
      description: 'Preview functionality coming soon',
    });
  };

  const handleExport = () => {
    // TODO: Implement export functionality
    toast({
      title: 'Export',
      description: 'Export functionality coming soon',
    });
  };

  if (isLoadingPlan) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button
                variant="ghost"
                size="sm"
                onClick={handleBack}
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back
              </Button>
              <div className="h-6 w-px bg-gray-300" />
              <div>
                <h1 className="text-xl font-bold text-gray-900">
                  {businessPlan && typeof businessPlan === 'object' && 'name' in businessPlan
                    ? String(businessPlan.name)
                    : 'Business Plan'}
                </h1>
                <p className="text-sm text-gray-500">
                  {activeChapterData?.title} {activeChapterData?.subtitle && activeChapterData.subtitle} ¬∑ {activeSectionData?.title}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={() => setLocation('/dashboard')}>
                <Home className="h-4 w-4 mr-2" />
                Dashboard
              </Button>
              <Button variant="outline" size="sm" onClick={handlePreview}>
                <Eye className="h-4 w-4 mr-2" />
                Preview
              </Button>
              <Button variant="outline" size="sm" onClick={handleExport}>
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-6 py-6">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="bg-white border">
            <TabsTrigger value="editor">
              <FileText className="h-4 w-4 mr-2" />
              Editor
            </TabsTrigger>
            <TabsTrigger value="progress">
              <BarChart3 className="h-4 w-4 mr-2" />
              Progress
            </TabsTrigger>
          </TabsList>

          <TabsContent value="editor" className="space-y-0">
            <div className="grid grid-cols-12 gap-6">
              {/* Navigation */}
              <div className="col-span-3">
                <ChapterNavigation
                  chapters={BUSINESS_PLAN_STRUCTURE}
                  activeChapterId={activeChapter}
                  activeSectionId={activeSection}
                  onChapterSelect={handleChapterSelect}
                  onSectionSelect={handleSectionSelect}
                />
              </div>

              {/* Editor */}
              <div className="col-span-9">
                <SectionEditor
                  chapterId={activeChapter}
                  sectionId={activeSection}
                  onSave={() => {
                    toast({
                      title: 'Saved',
                      description: 'Section saved successfully',
                    });
                  }}
                />
              </div>
            </div>
          </TabsContent>

          <TabsContent value="progress">
            <div className="grid grid-cols-12 gap-6">
              <div className="col-span-3">
                <ChapterNavigation
                  chapters={BUSINESS_PLAN_STRUCTURE}
                  activeChapterId={activeChapter}
                  activeSectionId={activeSection}
                  onChapterSelect={handleChapterSelect}
                  onSectionSelect={handleSectionSelect}
                />
              </div>
              <div className="col-span-9">
                <ProgressDashboard />
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

function EditPlan() {
  const { id } = useParams();
  
  return (
    <BusinessPlanProvider planId={id}>
      <EditPlanContent />
    </BusinessPlanProvider>
  );
}

export default EditPlan;

=== FILE: client/src/pages/ai-business-plan.tsx ===

import React, { useState, useEffect } from 'react';
import { useMutation } from '@tanstack/react-query';
import { useToast } from '@/hooks/use-toast';
import { 
  FileText, 
  Sparkles, 
  CheckCircle, 
  ArrowRight, 
  BarChart3, 
  TrendingUp, 
  DollarSign,
  Users,
  Target,
  Lightbulb,
  Rocket,
  Building2,
  Globe,
  Zap,
  Download,
  Share2,
  Eye,
  Clock,
  Star,
  Award,
  Brain,
  Calculator,
  PieChart,
  LineChart
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface BusinessPlanQuestion {
  id: string;
  question: string;
  type: 'text' | 'select' | 'number' | 'textarea' | 'multi-select';
  options?: string[];
  required: boolean;
  category: string;
  aiPrompt?: string;
}

interface BusinessPlanSection {
  id: string;
  title: string;
  content: string;
  aiGenerated: boolean;
  completeness: number;
}

interface BusinessPlanTemplate {
  id: string;
  name: string;
  description: string;
  industry: string;
  icon: React.ComponentType<any>;
  color: string;
  questions: BusinessPlanQuestion[];
  sections: BusinessPlanSection[];
}

function AIBusinessPlan() {
  const { toast } = useToast();
  const [currentStep, setCurrentStep] = useState(0);
  const [answers, setAnswers] = useState<Record<string, any>>({});
  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPlan, setGeneratedPlan] = useState<BusinessPlanSection[]>([]);
  const [showPreview, setShowPreview] = useState(false);

  // Business Plan Templates inspired by VenturePlanner.ai
  const businessPlanTemplates: BusinessPlanTemplate[] = [
    {
      id: 'tech-startup',
      name: 'Tech Startup',
      description: 'AI-powered business plan for technology startups',
      industry: 'Technology',
      icon: Rocket,
      color: 'from-blue-500 to-purple-600',
      questions: [
        {
          id: 'company-name',
          question: 'What is your company name?',
          type: 'text',
          required: true,
          category: 'basic'
        },
        {
          id: 'problem-solving',
          question: 'What problem does your product/service solve?',
          type: 'textarea',
          required: true,
          category: 'problem',
          aiPrompt: 'Describe the core problem your startup addresses and why existing solutions are inadequate.'
        },
        {
          id: 'target-market',
          question: 'Who is your target market?',
          type: 'textarea',
          required: true,
          category: 'market',
          aiPrompt: 'Define your target customer segments, their characteristics, and market size.'
        },
        {
          id: 'revenue-model',
          question: 'How will you make money?',
          type: 'select',
          options: ['Subscription', 'One-time purchase', 'Freemium', 'Marketplace', 'Advertising'],
          required: true,
          category: 'business-model'
        },
        {
          id: 'funding-amount',
          question: 'How much funding are you seeking?',
          type: 'number',
          required: true,
          category: 'financials'
        }
      ],
      sections: [
        { id: 'executive-summary', title: 'Executive Summary', content: '', aiGenerated: false, completeness: 0 },
        { id: 'company-description', title: 'Company Description', content: '', aiGenerated: false, completeness: 0 },
        { id: 'market-analysis', title: 'Market Analysis', content: '', aiGenerated: false, completeness: 0 },
        { id: 'business-model', title: 'Business Model', content: '', aiGenerated: false, completeness: 0 },
        { id: 'financial-projections', title: 'Financial Projections', content: '', aiGenerated: false, completeness: 0 }
      ]
    },
    {
      id: 'ecommerce',
      name: 'E-commerce Business',
      description: 'Comprehensive plan for online retail businesses',
      industry: 'E-commerce',
      icon: Globe,
      color: 'from-green-500 to-teal-600',
      questions: [
        {
          id: 'company-name',
          question: 'What is your company name?',
          type: 'text',
          required: true,
          category: 'basic'
        },
        {
          id: 'products',
          question: 'What products will you sell?',
          type: 'textarea',
          required: true,
          category: 'products',
          aiPrompt: 'Describe your product catalog, categories, and unique selling propositions.'
        },
        {
          id: 'target-customers',
          question: 'Who are your target customers?',
          type: 'textarea',
          required: true,
          category: 'market',
          aiPrompt: 'Define your customer personas, demographics, and buying behavior.'
        },
        {
          id: 'competition',
          question: 'Who are your main competitors?',
          type: 'textarea',
          required: true,
          category: 'competition',
          aiPrompt: 'Analyze your competitive landscape and differentiation strategy.'
        }
      ],
      sections: [
        { id: 'executive-summary', title: 'Executive Summary', content: '', aiGenerated: false, completeness: 0 },
        { id: 'market-research', title: 'Market Research', content: '', aiGenerated: false, completeness: 0 },
        { id: 'marketing-strategy', title: 'Marketing Strategy', content: '', aiGenerated: false, completeness: 0 },
        { id: 'operations', title: 'Operations Plan', content: '', aiGenerated: false, completeness: 0 },
        { id: 'financial-projections', title: 'Financial Projections', content: '', aiGenerated: false, completeness: 0 }
      ]
    },
    {
      id: 'service-business',
      name: 'Service Business',
      description: 'Professional service business planning',
      industry: 'Services',
      icon: Building2,
      color: 'from-orange-500 to-red-600',
      questions: [
        {
          id: 'company-name',
          question: 'What is your company name?',
          type: 'text',
          required: true,
          category: 'basic'
        },
        {
          id: 'services',
          question: 'What services do you offer?',
          type: 'textarea',
          required: true,
          category: 'services',
          aiPrompt: 'Detail your service offerings, pricing structure, and value proposition.'
        },
        {
          id: 'target-clients',
          question: 'Who are your target clients?',
          type: 'textarea',
          required: true,
          category: 'market',
          aiPrompt: 'Define your ideal client profile and market segments.'
        }
      ],
      sections: [
        { id: 'executive-summary', title: 'Executive Summary', content: '', aiGenerated: false, completeness: 0 },
        { id: 'service-description', title: 'Service Description', content: '', aiGenerated: false, completeness: 0 },
        { id: 'market-analysis', title: 'Market Analysis', content: '', aiGenerated: false, completeness: 0 },
        { id: 'operations', title: 'Operations Plan', content: '', aiGenerated: false, completeness: 0 },
        { id: 'financial-projections', title: 'Financial Projections', content: '', aiGenerated: false, completeness: 0 }
      ]
    }
  ];

  const currentTemplate = businessPlanTemplates.find(t => t.id === selectedTemplate);
  const currentQuestion = currentTemplate?.questions[currentStep];
  const totalSteps = currentTemplate?.questions.length || 0;
  const progress = totalSteps > 0 ? ((currentStep + 1) / totalSteps) * 100 : 0;

  // AI Generation Mutation
  const generatePlanMutation = useMutation({
    mutationFn: async () => {
      setIsGenerating(true);
      
      // Simulate AI generation
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const generatedSections = currentTemplate?.sections.map(section => ({
        ...section,
        content: generateAIContent(section.id, answers),
        aiGenerated: true,
        completeness: 100
      })) || [];
      
      setGeneratedPlan(generatedSections);
      setIsGenerating(false);
      
      return generatedSections;
    },
    onSuccess: () => {
      toast({
        title: "Business Plan Generated",
        description: "Your AI-powered business plan is ready!"
      });
    },
    onError: () => {
      toast({
        title: "Generation Failed",
        description: "Failed to generate business plan. Please try again.",
        variant: "destructive"
      });
    }
  });

  const generateAIContent = (sectionId: string, answers: Record<string, any>) => {
    const companyName = answers['company-name'] || 'Your Company';
    
    switch (sectionId) {
      case 'executive-summary':
        return `# Executive Summary

**${companyName}** is positioned to revolutionize the market with our innovative solution. 

## Key Highlights:
- **Market Opportunity**: Large and growing market with significant unmet needs
- **Competitive Advantage**: Unique technology and approach that sets us apart
- **Financial Projections**: Strong revenue growth projected over the next 3 years
- **Team**: Experienced leadership with proven track record

## Mission Statement:
To deliver exceptional value to our customers while building a sustainable and profitable business.

## Financial Summary:
- **Year 1 Revenue**: $500K projected
- **Year 2 Revenue**: $1.2M projected  
- **Year 3 Revenue**: $2.5M projected
- **Break-even**: Month 18
- **Funding Required**: $${answers['funding-amount'] || '500K'} for initial growth`;

      case 'market-analysis':
        return `# Market Analysis

## Market Size & Opportunity
- **Total Addressable Market (TAM)**: $12B
- **Serviceable Addressable Market (SAM)**: $3.2B
- **Serviceable Obtainable Market (SOM)**: $180M

## Target Market
${answers['target-market'] || 'Our target market consists of...'}

## Market Trends
- Growing demand for innovative solutions
- Digital transformation driving adoption
- Increasing customer expectations
- Regulatory changes creating opportunities

## Competitive Landscape
- **Direct Competitors**: 3-5 major players
- **Indirect Competitors**: Traditional solutions
- **Competitive Advantage**: ${answers['problem-solving'] || 'Our unique approach...'}`;

      case 'financial-projections':
        return `# Financial Projections

## Revenue Projections
| Year | Revenue | Growth Rate |
|------|---------|-------------|
| Year 1 | $500K | - |
| Year 2 | $1.2M | 140% |
| Year 3 | $2.5M | 108% |

## Key Financial Metrics
- **Gross Margin**: 75%
- **Operating Margin**: 25%
- **Customer Acquisition Cost**: $150
- **Lifetime Value**: $2,500
- **Payback Period**: 6 months

## Funding Requirements
- **Total Funding Needed**: $${answers['funding-amount'] || '500K'}
- **Use of Funds**:
  - Product Development: 40%
  - Marketing & Sales: 35%
  - Operations: 15%
  - Working Capital: 10%

## Break-even Analysis
- **Break-even Point**: Month 18
- **Monthly Burn Rate**: $25K
- **Runway**: 20 months`;

      default:
        return `# ${currentTemplate?.sections.find(s => s.id === sectionId)?.title || 'Section'}

This section has been generated using AI based on your responses to our questionnaire.

**Key Points:**
- Generated content tailored to your specific business
- Industry best practices incorporated
- Professional formatting and structure
- Ready for investor presentations

**Customization:**
You can edit this content to better reflect your specific situation and requirements.`;

    }
  };

  const handleAnswerChange = (questionId: string, value: any) => {
    setAnswers(prev => ({
      ...prev,
      [questionId]: value
    }));
  };

  const handleNext = () => {
    if (currentStep < totalSteps - 1) {
      setCurrentStep(prev => prev + 1);
    } else {
      // All questions answered, generate plan
      generatePlanMutation.mutate();
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(prev => prev - 1);
    }
  };

  const handleTemplateSelect = (templateId: string) => {
    setSelectedTemplate(templateId);
    setCurrentStep(0);
    setAnswers({});
    setGeneratedPlan([]);
  };

  const renderQuestion = (question: BusinessPlanQuestion) => {
    const value = answers[question.id] || '';

    switch (question.type) {
      case 'text':
        return (
          <Input
            value={value}
            onChange={(e) => handleAnswerChange(question.id, e.target.value)}
            placeholder="Enter your answer..."
            className="w-full"
          />
        );
      
      case 'textarea':
        return (
          <Textarea
            value={value}
            onChange={(e) => handleAnswerChange(question.id, e.target.value)}
            placeholder="Enter your answer..."
            className="min-h-[120px]"
          />
        );
      
      case 'select':
        return (
          <select
            value={value}
            onChange={(e) => handleAnswerChange(question.id, e.target.value)}
            className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Select an option...</option>
            {question.options?.map(option => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
        );
      
      case 'number':
        return (
          <Input
            type="number"
            value={value}
            onChange={(e) => handleAnswerChange(question.id, e.target.value)}
            placeholder="Enter amount..."
            className="w-full"
          />
        );
      
      default:
        return null;
    }
  };

  if (!selectedTemplate) {
    return (
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            AI Business Plan Generator
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Create professional business plans in minutes with AI. No typing required - just answer our smart questions and we'll generate everything you need.
          </p>
        </div>

        {/* Template Selection */}
        <div className="grid md:grid-cols-3 gap-6">
          {businessPlanTemplates.map((template) => {
            const IconComponent = template.icon;
            return (
              <Card
                key={template.id}
                className="cursor-pointer hover:shadow-xl transition-all duration-300 border-2 hover:border-blue-300"
                onClick={() => handleTemplateSelect(template.id)}
              >
                <CardHeader>
                  <div className={`w-16 h-16 rounded-lg bg-gradient-to-r ${template.color} flex items-center justify-center mb-4`}>
                    <IconComponent className="h-8 w-8 text-white" />
                  </div>
                  <CardTitle className="text-xl">{template.name}</CardTitle>
                  <CardDescription>{template.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <CheckCircle className="h-4 w-4 text-green-500" />
                      <span>{template.questions.length} smart questions</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <CheckCircle className="h-4 w-4 text-green-500" />
                      <span>{template.sections.length} comprehensive sections</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <CheckCircle className="h-4 w-4 text-green-500" />
                      <span>AI-powered generation</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Features */}
        <div className="bg-white rounded-lg shadow-sm p-8">
          <h2 className="text-2xl font-bold text-center mb-8">Why Choose Our AI Business Plan Generator?</h2>
          <div className="grid md:grid-cols-3 gap-8">
            <div className="text-center">
              <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Brain className="h-8 w-8 text-blue-600" />
              </div>
              <h3 className="text-lg font-semibold mb-2">No Typing Required</h3>
              <p className="text-gray-600">Answer smart questions, AI generates professional content</p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Calculator className="h-8 w-8 text-green-600" />
              </div>
              <h3 className="text-lg font-semibold mb-2">Automated Financials</h3>
              <p className="text-gray-600">AI creates accurate projections and financial forecasts</p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Award className="h-8 w-8 text-purple-600" />
              </div>
              <h3 className="text-lg font-semibold mb-2">Professional Quality</h3>
              <p className="text-gray-600">Investor-ready plans created by business experts</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (isGenerating) {
    return (
      <div className="max-w-4xl mx-auto text-center py-12">
        <div className="w-24 h-24 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-6">
          <Sparkles className="h-12 w-12 text-white animate-pulse" />
        </div>
        <h2 className="text-3xl font-bold mb-4">Generating Your Business Plan</h2>
        <p className="text-gray-600 mb-8">Our AI is analyzing your responses and creating a comprehensive business plan...</p>
        <div className="w-full bg-gray-200 rounded-full h-3 mb-4">
          <div className="bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full animate-pulse" style={{ width: '75%' }}></div>
        </div>
        <p className="text-sm text-gray-500">This usually takes 30-60 seconds</p>
      </div>
    );
  }

  if (generatedPlan.length > 0) {
    return (
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-gray-800">Your AI-Generated Business Plan</h1>
            <p className="text-gray-600">Professional business plan ready for investors</p>
          </div>
          <div className="flex space-x-2">
            <Button variant="outline" onClick={() => setShowPreview(!showPreview)}>
              <Eye className="h-4 w-4 mr-2" />
              {showPreview ? 'Edit' : 'Preview'}
            </Button>
            <Button variant="outline">
              <Download className="h-4 w-4 mr-2" />
              Export PDF
            </Button>
            <Button variant="outline">
              <Share2 className="h-4 w-4 mr-2" />
              Share
            </Button>
          </div>
        </div>

        {/* Business Plan Sections */}
        <div className="grid lg:grid-cols-4 gap-6">
          {/* Sidebar */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Plan Sections</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {generatedPlan.map((section, index) => (
                  <div key={section.id} className="flex items-center gap-2 p-2 rounded hover:bg-gray-50 cursor-pointer">
                    <div className="flex items-center gap-2">
                      {section.aiGenerated && <Sparkles className="h-4 w-4 text-blue-500" />}
                      <span className="text-sm font-medium">{section.title}</span>
                    </div>
                    <div className="ml-auto">
                      <Badge variant="secondary" className="text-xs">
                        {section.completeness}%
                      </Badge>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* Content */}
          <div className="lg:col-span-3">
            <Card>
              <CardContent className="p-8">
                {showPreview ? (
                  <div className="prose max-w-none">
                    {generatedPlan.map((section) => (
                      <div key={section.id} className="mb-8">
                        <div className="flex items-center gap-2 mb-4">
                          <h2 className="text-2xl font-bold">{section.title}</h2>
                          {section.aiGenerated && (
                            <Badge className="bg-blue-100 text-blue-800">
                              <Sparkles className="h-3 w-3 mr-1" />
                              AI Generated
                            </Badge>
                          )}
                        </div>
                        <div className="whitespace-pre-line text-gray-700">
                          {section.content}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <Tabs defaultValue={generatedPlan[0]?.id} className="w-full">
                    <TabsList className="grid w-full grid-cols-2 lg:grid-cols-3">
                      {generatedPlan.map((section) => (
                        <TabsTrigger key={section.id} value={section.id}>
                          {section.title}
                        </TabsTrigger>
                      ))}
                    </TabsList>
                    {generatedPlan.map((section) => (
                      <TabsContent key={section.id} value={section.id} className="mt-6">
                        <div className="space-y-4">
                          <div className="flex items-center gap-2">
                            <h3 className="text-xl font-semibold">{section.title}</h3>
                            {section.aiGenerated && (
                              <Badge className="bg-blue-100 text-blue-800">
                                <Sparkles className="h-3 w-3 mr-1" />
                                AI Generated
                              </Badge>
                            )}
                          </div>
                          <Textarea
                            value={section.content}
                            onChange={(e) => {
                              const updatedPlan = generatedPlan.map(s => 
                                s.id === section.id ? { ...s, content: e.target.value } : s
                              );
                              setGeneratedPlan(updatedPlan);
                            }}
                            className="min-h-[400px]"
                          />
                        </div>
                      </TabsContent>
                    ))}
                  </Tabs>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Progress */}
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">
              {currentTemplate?.name} Business Plan
            </h2>
            <span className="text-sm text-gray-600">
              Step {currentStep + 1} of {totalSteps}
            </span>
          </div>
          <Progress value={progress} className="mb-4" />
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <Clock className="h-4 w-4" />
            <span>Estimated time: {Math.max(1, totalSteps - currentStep)} minutes remaining</span>
          </div>
        </CardContent>
      </Card>

      {/* Question */}
      <Card>
        <CardContent className="p-8">
          <div className="space-y-6">
            <div>
              <h3 className="text-2xl font-semibold mb-2">
                {currentQuestion?.question}
              </h3>
              {currentQuestion?.aiPrompt && (
                <div className="bg-blue-50 rounded-lg p-4 mb-4">
                  <div className="flex items-center gap-2 mb-2">
                    <Brain className="h-4 w-4 text-blue-600" />
                    <span className="text-sm font-medium text-blue-800">AI Tip</span>
                  </div>
                  <p className="text-sm text-blue-700">{currentQuestion.aiPrompt}</p>
                </div>
              )}
            </div>

            <div>
              {currentQuestion && renderQuestion(currentQuestion)}
            </div>

            <div className="flex justify-between">
              <Button
                variant="outline"
                onClick={handlePrevious}
                disabled={currentStep === 0}
              >
                Previous
              </Button>
              <Button
                onClick={handleNext}
                disabled={!answers[currentQuestion?.id || ''] && currentQuestion?.required}
              >
                {currentStep === totalSteps - 1 ? 'Generate Plan' : 'Next'}
                <ArrowRight className="h-4 w-4 ml-2" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export default AIBusinessPlan;


=== FILE: client/src/pages/venture-building.tsx ===

import { useQuery, useMutation } from "@tanstack/react-query";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { 
  Loader2, 
  Lightbulb, 
  Beaker, 
  Rocket, 
  Users, 
  BarChart3, 
  CheckCircle2, 
  Clock, 
  ArrowUpRight,
  XCircle,
  FileCheck
} from "lucide-react";

// Venture Project Schema
const ventureProjectSchema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  description: z.string().optional(),
  organizationId: z.number(),
  stage: z.enum(["idea", "validation", "prototype", "mvp", "scaling"]),
  businessPlanId: z.number().optional(),
});

type VentureProject = {
  id: number;
  name: string;
  description: string | null;
  organizationId: number;
  stage: string;
  businessPlanId: number | null;
  team: any;
  resources: any;
  roadmap: any;
  validationResults: any;
  createdAt: string;
  updatedAt: string;
};

function VentureProjectsList() {
  // State for selected organization (for demo we'll use a fixed value)
  const organizationId = 4; // Assuming ID 4 is for a venture builder organization
  const { toast } = useToast();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);

  // Query venture projects
  const { data: projects, isLoading } = useQuery({
    queryKey: ['/api/venture-projects/organization', organizationId],
    queryFn: () => apiRequest(`/api/venture-projects/organization/${organizationId}`),
  });

  // Create venture project form
  const form = useForm<z.infer<typeof ventureProjectSchema>>({
    resolver: zodResolver(ventureProjectSchema),
    defaultValues: {
      name: "",
      description: "",
      organizationId: organizationId,
      stage: "idea",
    },
  });

  // Mutation to create venture project
  const createProject = useMutation({
    mutationFn: (values: z.infer<typeof ventureProjectSchema>) => apiRequest('/api/venture-projects', {
      method: 'POST',
      body: JSON.stringify(values),
      headers: {
        'Content-Type': 'application/json',
      },
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/venture-projects/organization', organizationId] });
      toast({
        title: "Project created",
        description: "The venture project has been created successfully.",
      });
      setIsCreateDialogOpen(false);
      form.reset();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create venture project. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Handle form submission
  function onSubmit(values: z.infer<typeof ventureProjectSchema>) {
    const projectData = {
      ...values,
      team: { members: [] },
      resources: { allocated: {}, required: {} },
      roadmap: { milestones: [] },
      validationResults: { interviews: [], surveys: [], experiments: [] }
    };
    createProject.mutate(projectData);
  }

  // Helper function to get stage icon
  const getStageIcon = (stage: string) => {
    switch (stage) {
      case "idea":
        return <Lightbulb className="h-5 w-5" />;
      case "validation":
        return <FileCheck className="h-5 w-5" />;
      case "prototype":
        return <Beaker className="h-5 w-5" />;
      case "mvp":
        return <Rocket className="h-5 w-5" />;
      case "scaling":
        return <BarChart3 className="h-5 w-5" />;
      default:
        return <Lightbulb className="h-5 w-5" />;
    }
  };

  // Helper function to get stage color
  const getStageColor = (stage: string) => {
    switch (stage) {
      case "idea":
        return "bg-violet-500";
      case "validation":
        return "bg-blue-500";
      case "prototype":
        return "bg-teal-500";
      case "mvp":
        return "bg-orange-500";
      case "scaling":
        return "bg-green-500";
      default:
        return "bg-gray-500";
    }
  };

  // Mock project data for demo
  const getProjectData = (project: VentureProject) => {
    // In a real app, this would come from the API
    const stageMap: { [key: string]: number } = {
      "idea": 1,
      "validation": 2,
      "prototype": 3,
      "mvp": 4,
      "scaling": 5
    };
    
    const stageValue = stageMap[project.stage] || 1;
    const progress = (stageValue / 5) * 100;
    
    return {
      teamSize: Math.floor(Math.random() * 5) + 2,
      progress,
      tasks: {
        total: Math.floor(Math.random() * 30) + 10,
        completed: Math.floor(Math.random() * 20) + 5
      },
      nextMilestone: ["Market Research", "Customer Interviews", "MVP Development", "Beta Launch", "Seed Funding"][Math.floor(Math.random() * 5)],
      daysRemaining: Math.floor(Math.random() * 30) + 5
    };
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
      </div>
    );
  }

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-4xl font-bold">Venture Projects</h1>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>Create New Project</Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[550px]">
            <DialogHeader>
              <DialogTitle>Create New Venture Project</DialogTitle>
              <DialogDescription>
                Start a new venture building project from scratch or based on an existing business plan.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Project Name</FormLabel>
                      <FormControl>
                        <Input placeholder="EcoSolutions Marketplace" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="A B2B marketplace connecting eco-friendly suppliers with sustainable businesses..."
                          className="min-h-32"
                          {...field}
                          value={field.value || ""}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="stage"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Current Stage</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select project stage" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="idea">Idea</SelectItem>
                          <SelectItem value="validation">Validation</SelectItem>
                          <SelectItem value="prototype">Prototype</SelectItem>
                          <SelectItem value="mvp">MVP</SelectItem>
                          <SelectItem value="scaling">Scaling</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <DialogFooter>
                  <Button type="submit" disabled={createProject.isPending}>
                    {createProject.isPending && (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    Create Project
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {projects && projects.length > 0 ? (
          projects.map((project: VentureProject) => {
            const projectData = getProjectData(project);
            return (
              <Card key={project.id} className="overflow-hidden shadow-md">
                <CardHeader className="pb-3">
                  <div className="flex justify-between items-start">
                    <CardTitle className="text-xl">{project.name}</CardTitle>
                    <Badge className={getStageColor(project.stage)}>
                      <span className="flex items-center gap-1">
                        {getStageIcon(project.stage)}
                        {project.stage.charAt(0).toUpperCase() + project.stage.slice(1)}
                      </span>
                    </Badge>
                  </div>
                  <CardDescription className="text-sm truncate">
                    {project.description || "No description provided."}
                  </CardDescription>
                </CardHeader>
                <CardContent className="pb-3">
                  <div className="mb-4">
                    <p className="text-sm font-medium mb-1">Project Progress</p>
                    <div className="flex items-center gap-2">
                      <Progress value={projectData.progress} className="h-2 flex-1" />
                      <span className="text-sm font-medium">{Math.round(projectData.progress)}%</span>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div className="flex items-center space-x-2">
                      <Users className="h-5 w-5 text-gray-500" />
                      <div>
                        <p className="text-sm font-medium">Team Size</p>
                        <p className="text-gray-600">{projectData.teamSize} members</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <CheckCircle2 className="h-5 w-5 text-green-500" />
                      <div>
                        <p className="text-sm font-medium">Tasks</p>
                        <p className="text-gray-600">{projectData.tasks.completed}/{projectData.tasks.total} complete</p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="border rounded-md p-3 bg-gray-50 dark:bg-gray-800">
                    <div className="flex justify-between items-center mb-1">
                      <p className="text-sm font-medium">Next Milestone</p>
                      <Badge variant="outline" className="font-normal">
                        <Clock className="h-3 w-3 mr-1" />
                        {projectData.daysRemaining} days
                      </Badge>
                    </div>
                    <p className="text-gray-700 dark:text-gray-300">{projectData.nextMilestone}</p>
                  </div>
                </CardContent>
                <CardFooter className="flex justify-between border-t p-3 pt-3">
                  <Button variant="outline" size="sm">
                    View Details
                  </Button>
                  <Button size="sm">
                    Manage <ArrowUpRight className="ml-1 h-4 w-4" />
                  </Button>
                </CardFooter>
              </Card>
            );
          })
        ) : (
          <div className="col-span-2 text-center py-10">
            <p className="text-lg text-gray-500 dark:text-gray-400">
              No venture projects found. Create your first project to get started.
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

function ValidationFramework() {
  return (
    <div className="container mx-auto py-10">
      <div className="text-center py-20">
        <h3 className="text-xl font-medium mb-2">Idea Validation Framework</h3>
        <p className="text-gray-500 mb-4">This feature is coming soon.</p>
        <Button>Go to Venture Projects</Button>
      </div>
    </div>
  );
}

function ResourceAllocation() {
  return (
    <div className="container mx-auto py-10">
      <div className="text-center py-20">
        <h3 className="text-xl font-medium mb-2">Resource Allocation</h3>
        <p className="text-gray-500 mb-4">This feature is coming soon.</p>
        <Button>Go to Venture Projects</Button>
      </div>
    </div>
  );
}

export default function VentureBuildingPage() {
  const tabs = ["Projects", "Validation", "Resources"];
  
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-6">Venture Building</h1>
      <Tabs defaultValue="Projects" className="w-full">
        <TabsList className="grid w-[400px] grid-cols-3 mb-8">
          {tabs.map((tab) => (
            <TabsTrigger key={tab} value={tab}>
              {tab}
            </TabsTrigger>
          ))}
        </TabsList>
        <TabsContent value="Projects" className="space-y-4">
          <VentureProjectsList />
        </TabsContent>
        <TabsContent value="Validation" className="space-y-4">
          <ValidationFramework />
        </TabsContent>
        <TabsContent value="Resources" className="space-y-4">
          <ResourceAllocation />
        </TabsContent>
      </Tabs>
    </div>
  );
}

=== FILE: client/src/pages/documents-hub.tsx ===

import React from 'react';
import DocumentsHubApp from '@/features/documents-hub/DocumentsHubApp';

export default function DocumentsHub() {
  return <DocumentsHubApp />;
}


=== FILE: client/src/pages/pitch-deck.tsx ===

import React, { useState } from 'react';
import { useParams } from 'wouter';
import { useQuery, useMutation } from '@tanstack/react-query';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { useDropzone } from 'react-dropzone';
import { 
  Presentation, Layers, PenTool, Maximize, ArrowRightLeft, 
  Trash2, Save, Plus, MessageSquare, LineChart, Layout,
  Upload, FileText, Globe, Sparkles, Wand2, Download,
  Share2, Eye, Copy, RefreshCw, Zap, Target, TrendingUp,
  Users, DollarSign, BarChart3, Lightbulb, Rocket,
  CheckCircle, Star, Award, Clock, Filter, Search,
  Building2
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Slider } from '@/components/ui/slider';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';

interface Slide {
  id: string;
  type: 'title' | 'problem' | 'solution' | 'market' | 'business-model' | 'traction' | 'team' | 'financials' | 'ask';
  title: string;
  content: string;
  template: 'minimal' | 'corporate' | 'bold' | 'modern' | 'creative' | 'professional';
  layout: 'left' | 'right' | 'center';
  aiGenerated?: boolean;
  design?: {
    backgroundColor?: string;
    textColor?: string;
    accentColor?: string;
    fontFamily?: string;
  };
}

interface AITemplate {
  id: string;
  name: string;
  description: string;
  category: 'startup' | 'corporate' | 'creative' | 'minimal';
  icon: React.ComponentType<any>;
  color: string;
  slides: Partial<Slide>[];
}

interface DocumentUpload {
  file: File;
  type: 'pdf' | 'doc' | 'docx' | 'txt';
  status: 'uploading' | 'processing' | 'completed' | 'error';
  progress: number;
}

function PitchDeck() {
  const { id } = useParams();
  const { toast } = useToast();

  // States
  const [activeSlide, setActiveSlide] = useState<string | null>(null);
  const [aiPrompt, setAiPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [previewMode, setPreviewMode] = useState(false);
  const [showAITemplates, setShowAITemplates] = useState(false);
  const [urlInput, setUrlInput] = useState('');
  const [isProcessingURL, setIsProcessingURL] = useState(false);
  const [documentUploads, setDocumentUploads] = useState<DocumentUpload[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);
  // AI Templates
  const aiTemplates: AITemplate[] = [
    {
      id: 'startup-pitch',
      name: 'Startup Pitch Deck',
      description: 'Professional startup pitch with modern design',
      category: 'startup',
      icon: Rocket,
      color: 'from-blue-500 to-purple-600',
      slides: [
        { type: 'title', title: 'Company Name', content: 'Revolutionary solution for [target market]', template: 'modern' },
        { type: 'problem', title: 'The Problem', content: 'Current solutions fail to address [specific pain point]', template: 'modern' },
        { type: 'solution', title: 'Our Solution', content: 'Innovative approach that solves the problem', template: 'modern' },
        { type: 'market', title: 'Market Opportunity', content: 'Large and growing market with clear need', template: 'modern' },
        { type: 'business-model', title: 'Business Model', content: 'Sustainable revenue streams and pricing', template: 'modern' },
        { type: 'traction', title: 'Traction', content: 'Key metrics and growth indicators', template: 'modern' },
        { type: 'team', title: 'Team', content: 'Experienced founders and advisors', template: 'modern' },
        { type: 'financials', title: 'Financial Projections', content: 'Revenue forecasts and key assumptions', template: 'modern' },
        { type: 'ask', title: 'The Ask', content: 'Funding requirements and use of funds', template: 'modern' }
      ]
    },
    {
      id: 'corporate-presentation',
      name: 'Corporate Presentation',
      description: 'Professional corporate deck with clean design',
      category: 'corporate',
      icon: Building2,
      color: 'from-gray-600 to-blue-600',
      slides: [
        { type: 'title', title: 'Executive Summary', content: 'Key highlights and strategic overview', template: 'corporate' },
        { type: 'problem', title: 'Business Challenge', content: 'Current challenges and opportunities', template: 'corporate' },
        { type: 'solution', title: 'Proposed Solution', content: 'Strategic approach and implementation', template: 'corporate' },
        { type: 'market', title: 'Market Analysis', content: 'Market size, trends, and competitive landscape', template: 'corporate' },
        { type: 'business-model', title: 'Implementation Plan', content: 'Timeline, resources, and milestones', template: 'corporate' },
        { type: 'traction', title: 'Results & Metrics', content: 'Performance indicators and achievements', template: 'corporate' },
        { type: 'team', title: 'Team & Resources', content: 'Key personnel and organizational structure', template: 'corporate' },
        { type: 'financials', title: 'Financial Impact', content: 'ROI projections and cost-benefit analysis', template: 'corporate' },
        { type: 'ask', title: 'Next Steps', content: 'Recommendations and action items', template: 'corporate' }
      ]
    },
    {
      id: 'creative-pitch',
      name: 'Creative Pitch',
      description: 'Bold and engaging presentation design',
      category: 'creative',
      icon: Sparkles,
      color: 'from-pink-500 to-orange-500',
      slides: [
        { type: 'title', title: 'Innovation Showcase', content: 'Bold vision and creative approach', template: 'creative' },
        { type: 'problem', title: 'The Challenge', content: 'Creative problem identification', template: 'creative' },
        { type: 'solution', title: 'Creative Solution', content: 'Innovative and unique approach', template: 'creative' },
        { type: 'market', title: 'Market Vision', content: 'Creative market positioning', template: 'creative' },
        { type: 'business-model', title: 'Innovation Model', content: 'Creative business approach', template: 'creative' },
        { type: 'traction', title: 'Creative Impact', content: 'Unique metrics and achievements', template: 'creative' },
        { type: 'team', title: 'Creative Team', content: 'Talented and innovative team', template: 'creative' },
        { type: 'financials', title: 'Creative Economics', content: 'Innovative financial model', template: 'creative' },
        { type: 'ask', title: 'Creative Partnership', content: 'Unique collaboration opportunity', template: 'creative' }
      ]
    }
  ];

  const [slides, setSlides] = useState<Slide[]>([
    {
      id: '1',
      type: 'title',
      title: 'Company Name',
      content: 'Tagline: Solving X for Y',
      template: 'minimal',
      layout: 'center'
    },
    {
      id: '2',
      type: 'problem',
      title: 'The Problem',
      content: 'Describe the problem your company is solving',
      template: 'minimal',
      layout: 'left'
    },
    {
      id: '3',
      type: 'solution',
      title: 'Our Solution',
      content: 'Explain how your product/service solves the problem',
      template: 'minimal',
      layout: 'right'
    },
    {
      id: '4',
      type: 'market',
      title: 'Market Opportunity',
      content: 'Market size, TAM/SAM/SOM, growth rate',
      template: 'minimal',
      layout: 'left'
    },
    {
      id: '5',
      type: 'business-model',
      title: 'Business Model',
      content: 'Revenue streams, pricing, customer acquisition',
      template: 'minimal',
      layout: 'center'
    },
    {
      id: '6',
      type: 'traction',
      title: 'Traction & Milestones',
      content: 'Key metrics, growth, achievements',
      template: 'minimal',
      layout: 'left'
    },
    {
      id: '7',
      type: 'team',
      title: 'Team',
      content: 'Founders and key team members',
      template: 'minimal',
      layout: 'center'
    },
    {
      id: '8',
      type: 'financials',
      title: 'Financials',
      content: 'Projections, key metrics, unit economics',
      template: 'minimal',
      layout: 'right'
    },
    {
      id: '9',
      type: 'ask',
      title: 'The Ask',
      content: 'Funding amount, use of funds, timeline',
      template: 'minimal',
      layout: 'center'
    }
  ]);

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Fetch pitch deck
  const { data: pitchDeck, isLoading: isLoadingDeck } = useQuery({
    queryKey: [`/api/business-plans/${id}/pitch-deck`],
    enabled: !!id
  });

  // Handle pitch deck data when it loads
  React.useEffect(() => {
    if (pitchDeck && (pitchDeck as any).slides) {
      setSlides((pitchDeck as any).slides);
      if ((pitchDeck as any).slides.length > 0 && !activeSlide) {
        setActiveSlide((pitchDeck as any).slides[0].id);
      }
    } else if (slides.length > 0 && !activeSlide) {
      setActiveSlide(slides[0].id);
    }
  }, [pitchDeck, slides.length, activeSlide]);

  // Save pitch deck mutation
  const saveMutation = useMutation({
    mutationFn: async () => {
      const payload = {
        planId: parseInt(id as string),
        slides: slides,
        metrics: {
          slidesCount: slides.length,
          wordsCount: slides.reduce((count, slide) => {
            return count + (slide.content.split(' ').length || 0);
          }, 0)
        }
      };

      if (pitchDeck && (pitchDeck as any).id) {
        const response = await apiRequest(
          'PATCH',
          `/api/business-plans/${id}/pitch-deck/${(pitchDeck as any).id}`,
          payload
        );
        return response.json();
      } else {
        const response = await apiRequest(
          'POST',
          `/api/business-plans/${id}/pitch-deck`,
          payload
        );
        return response.json();
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/business-plans/${id}/pitch-deck`] });
      toast({
        title: "Success",
        description: "Pitch deck saved successfully"
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to save pitch deck",
        variant: "destructive"
      });
    }
  });

  // Enhanced AI content generation
  const handleGenerateContent = () => {
    if (!aiPrompt) {
      toast({
        title: "Input Required",
        description: "Please enter a prompt for the AI",
        variant: "destructive"
      });
      return;
    }

    setIsGenerating(true);
    
    // Simulated AI generation with enhanced content
    setTimeout(() => {
      const currentSlide = slides.find(s => s.id === activeSlide);
      if (currentSlide) {
        let generatedContent = '';
        
        switch(currentSlide.type) {
          case 'problem':
            generatedContent = `Problem Statement:\n\n1. Current market solutions fail to address [specific pain point]\n2. Users struggle with [limitation of existing solutions]\n3. This costs businesses an estimated $X million annually\n\nValidated through interviews with 50+ potential customers who confirmed they're actively seeking better solutions.`;
            break;
          case 'solution':
            generatedContent = `Our Solution:\n\n‚Ä¢ Proprietary [technology/method] that increases efficiency by 35%\n‚Ä¢ Intuitive interface reducing learning curve by 60%\n‚Ä¢ Seamless integration with existing workflows\n‚Ä¢ AI-powered analytics providing actionable insights\n\nKey differentiator: We're the only solution that combines [unique feature 1] with [unique feature 2].`;
            break;
          case 'market':
            generatedContent = `Market Size & Opportunity:\n\nTAM: $12B (Total enterprises that could use our solution)\nSAM: $3.2B (Enterprises in our target segments)\nSOM: $180M (Realistic capture in first 3 years)\n\nMarket growing at 23% CAGR with increasing demand from [specific sectors]. Current competitors only serve 15% of potential customers effectively.`;
            break;
          default:
            generatedContent = `Generated content for "${currentSlide.title}" slide based on your prompt: "${aiPrompt}".\n\nThis content includes:\n‚Ä¢ Key messaging points\n‚Ä¢ Data-driven insights\n‚Ä¢ Persuasive elements to engage investors\n‚Ä¢ Clear call to action`;
        }
        
        const updatedSlides = slides.map(slide => 
          slide.id === activeSlide ? {...slide, content: generatedContent, aiGenerated: true} : slide
        );
        
        setSlides(updatedSlides);
      }
      
      setIsGenerating(false);
      
      toast({
        title: "Content Generated",
        description: "AI has generated content for this slide"
      });
    }, 2000);
  };

  // AI Template Application
  const handleApplyTemplate = (template: AITemplate) => {
    const newSlides = template.slides.map((slideTemplate, index) => ({
      id: String(slides.length + index + 1),
      type: slideTemplate.type || 'title',
      title: slideTemplate.title || 'New Slide',
      content: slideTemplate.content || 'Enter content here...',
      template: slideTemplate.template || 'minimal',
      layout: 'center' as const,
      aiGenerated: true
    }));

    setSlides([...slides, ...newSlides]);
    setSelectedTemplate(template.id);
    setShowAITemplates(false);
    
    toast({
      title: "Template Applied",
      description: `${template.name} template has been added to your presentation`
    });
  };

  // URL Processing
  const handleProcessURL = async () => {
    if (!urlInput) {
      toast({
        title: "URL Required",
        description: "Please enter a valid URL",
        variant: "destructive"
      });
      return;
    }

    setIsProcessingURL(true);
    
    // Simulate URL processing
    setTimeout(() => {
      const newSlides = [
        {
          id: String(slides.length + 1),
          type: 'title' as const,
          title: 'Web Content Analysis',
          content: `Content extracted from: ${urlInput}\n\nKey insights and data points from the webpage have been analyzed and structured into presentation format.`,
          template: 'modern' as const,
          layout: 'center' as const,
          aiGenerated: true
        }
      ];

      setSlides([...slides, ...newSlides]);
      setUrlInput('');
      setIsProcessingURL(false);
      
      toast({
        title: "URL Processed",
        description: "Content from the webpage has been converted to slides"
      });
    }, 3000);
  };

  // Document Upload Handling
  const onDrop = (acceptedFiles: File[]) => {
    const newUploads = acceptedFiles.map(file => ({
      file,
      type: file.name.split('.').pop()?.toLowerCase() as 'pdf' | 'doc' | 'docx' | 'txt',
      status: 'uploading' as const,
      progress: 0
    }));

    setDocumentUploads([...documentUploads, ...newUploads]);

    // Simulate document processing
    newUploads.forEach((upload, index) => {
      setTimeout(() => {
        setDocumentUploads(prev => 
          prev.map((u, i) => 
            u.file === upload.file 
              ? { ...u, status: 'processing', progress: 50 }
              : u
          )
        );
      }, 1000 + index * 500);

      setTimeout(() => {
        setDocumentUploads(prev => 
          prev.map(u => 
            u.file === upload.file 
              ? { ...u, status: 'completed', progress: 100 }
              : u
          )
        );

        // Add slides from document
        const newSlides = [
          {
            id: String(slides.length + 1),
            type: 'title' as const,
            title: `Document: ${upload.file.name}`,
            content: `Content extracted from ${upload.file.name}\n\nKey information and insights have been structured into presentation format.`,
            template: 'modern' as const,
            layout: 'center' as const,
            aiGenerated: true
          }
        ];

        setSlides(prev => [...prev, ...newSlides]);
        
        toast({
          title: "Document Processed",
          description: `${upload.file.name} has been converted to slides`
        });
      }, 3000 + index * 1000);
    });
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'application/msword': ['.doc'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],
      'text/plain': ['.txt']
    },
    multiple: true
  });

  const handleAddSlide = () => {
    const newId = String(slides.length + 1);
    const newSlide: Slide = {
      id: newId,
      type: 'market',
      title: 'New Slide',
      content: 'Enter content here...',
      template: 'minimal',
      layout: 'left'
    };
    
    setSlides([...slides, newSlide]);
    setActiveSlide(newId);
  };

  const handleDeleteSlide = (slideId: string) => {
    if (slides.length <= 1) {
      toast({
        title: "Cannot Delete",
        description: "You must have at least one slide",
        variant: "destructive"
      });
      return;
    }
    
    const updatedSlides = slides.filter(slide => slide.id !== slideId);
    setSlides(updatedSlides);
    
    if (activeSlide === slideId) {
      setActiveSlide(updatedSlides[0].id);
    }
  };

  const handleSlideUpdate = (field: keyof Slide, value: string) => {
    const updatedSlides = slides.map(slide => 
      slide.id === activeSlide ? {...slide, [field]: value} : slide
    );
    setSlides(updatedSlides);
  };

  const currentSlide = slides.find(slide => slide.id === activeSlide);

  if (isLoadingPlan || isLoadingDeck) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  const getSlideTypeIcon = (type: string) => {
    switch(type) {
      case 'title': return <Presentation />;
      case 'problem': return <MessageSquare />;
      case 'solution': return <Layers />;
      case 'market': return <LineChart />;
      case 'business-model': return <ArrowRightLeft />;
      case 'traction': return <LineChart />;
      case 'team': return <Layout />;
      case 'financials': return <LineChart />;
      case 'ask': return <Maximize />;
      default: return <Layers />;
    }
  };

  // Slide templates
  const renderSlidePreview = (slide: Slide) => {
    const isActive = slide.id === activeSlide;
    
    const getLayoutClass = (layout: string) => {
      switch(layout) {
        case 'left': return 'text-left';
        case 'right': return 'text-right';
        case 'center': return 'text-center';
        default: return 'text-left';
      }
    };
    
    const getTemplateClass = (template: string) => {
      switch(template) {
        case 'minimal': return 'bg-white';
        case 'corporate': return 'bg-gray-50';
        case 'bold': return 'bg-gradient-to-r from-blue-50 to-indigo-50';
        default: return 'bg-white';
      }
    };
    
    return (
      <div 
        className={`${getTemplateClass(slide.template)} rounded-lg shadow-sm p-6 ${getLayoutClass(slide.layout)} cursor-pointer border-2 transition-all ${isActive ? 'border-blue-500 scale-100' : 'border-transparent hover:border-gray-200 scale-95'}`}
        style={{ minHeight: '250px', aspectRatio: '16/9' }}
        onClick={() => setActiveSlide(slide.id)}
      >
        <div className="flex justify-between mb-2">
          <div className="flex items-center gap-2">
            <span className="text-xs text-gray-400">Slide {slides.indexOf(slide) + 1}</span>
            {slide.aiGenerated && (
              <div className="flex items-center gap-1 text-xs text-blue-600">
                <Sparkles className="h-3 w-3" />
                <span>AI</span>
              </div>
            )}
          </div>
          {isActive && !previewMode && (
            <button onClick={() => handleDeleteSlide(slide.id)} className="text-red-500 hover:text-red-700">
              <Trash2 className="h-4 w-4" />
            </button>
          )}
        </div>
        
        <h2 className={`text-xl font-semibold mb-4 ${slide.template === 'bold' ? 'text-indigo-700' : 'text-gray-800'}`}>
          {slide.title}
        </h2>
        
        <div className="text-sm text-gray-600 whitespace-pre-line h-32 overflow-hidden">
          {slide.content.substring(0, 120)}
          {slide.content.length > 120 && '...'}
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      {/* Enhanced Header with AI Features */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
              <Sparkles className="h-6 w-6 text-blue-500" />
              AI Pitch Deck Studio
              {businessPlan && typeof businessPlan === 'object' && 'name' in businessPlan ? 
                ` for ${businessPlan.name}` : ''}
            </h1>
            <p className="text-gray-600">
              Create stunning presentations with AI-powered content generation and professional templates
            </p>
          </div>
          <div className="flex space-x-2">
            <Button
              variant="outline"
              onClick={() => setShowAITemplates(!showAITemplates)}
            >
              <Wand2 className="mr-2 h-4 w-4" />
              AI Templates
            </Button>
            <Button
              variant="outline"
              onClick={() => setPreviewMode(!previewMode)}
            >
              {previewMode ? 'Exit Preview' : 'Preview'} <Maximize className="ml-2 h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              onClick={() => {
                // Simulate export functionality
                toast({
                  title: "Export Started",
                  description: "Your presentation is being prepared for download"
                });
              }}
            >
              <Download className="mr-2 h-4 w-4" />
              Export
            </Button>
            <Button
              variant="outline"
              onClick={() => {
                // Simulate sharing functionality
                navigator.clipboard.writeText(window.location.href);
                toast({
                  title: "Link Copied",
                  description: "Presentation link copied to clipboard"
                });
              }}
            >
              <Share2 className="mr-2 h-4 w-4" />
              Share
            </Button>
            <Button
              onClick={() => saveMutation.mutate()}
              disabled={saveMutation.isPending}
            >
              {saveMutation.isPending ? (
                <div className="animate-spin h-4 w-4 mr-2 border-b-2 border-white rounded-full"></div>
              ) : (
                <Save className="mr-2 h-4 w-4" />
              )}
              Save Deck
            </Button>
          </div>
        </div>

        {/* AI Creation Options */}
        <div className="grid md:grid-cols-3 gap-4 mb-6">
          <Card className="border-2 border-dashed border-blue-200 hover:border-blue-400 transition-colors">
            <CardContent className="p-4">
              <div className="flex items-center gap-3 mb-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Upload className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <h3 className="font-semibold text-gray-800">Upload Documents</h3>
                  <p className="text-sm text-gray-600">Convert PDFs, Word docs, and text files</p>
                </div>
              </div>
              <div {...getRootProps()} className="cursor-pointer">
                <input {...getInputProps()} />
                <div className={`text-center py-4 rounded-lg border-2 border-dashed transition-colors ${
                  isDragActive ? 'border-blue-400 bg-blue-50' : 'border-gray-300 hover:border-gray-400'
                }`}>
                  <FileText className="h-8 w-8 mx-auto text-gray-400 mb-2" />
                  <p className="text-sm text-gray-600">
                    {isDragActive ? 'Drop files here' : 'Drag & drop or click to upload'}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-dashed border-green-200 hover:border-green-400 transition-colors">
            <CardContent className="p-4">
              <div className="flex items-center gap-3 mb-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <Globe className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <h3 className="font-semibold text-gray-800">Convert Web URLs</h3>
                  <p className="text-sm text-gray-600">Transform webpages into presentations</p>
                </div>
              </div>
              <div className="space-y-2">
                <Input
                  placeholder="Enter website URL..."
                  value={urlInput}
                  onChange={(e) => setUrlInput(e.target.value)}
                />
                <Button
                  onClick={handleProcessURL}
                  disabled={isProcessingURL || !urlInput}
                  className="w-full"
                  size="sm"
                >
                  {isProcessingURL ? (
                    <>
                      <div className="animate-spin h-4 w-4 mr-2 border-b-2 border-white rounded-full"></div>
                      Processing...
                    </>
                  ) : (
                    <>
                      <Globe className="h-4 w-4 mr-2" />
                      Convert URL
                    </>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-dashed border-purple-200 hover:border-purple-400 transition-colors">
            <CardContent className="p-4">
              <div className="flex items-center gap-3 mb-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Sparkles className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <h3 className="font-semibold text-gray-800">AI Generation</h3>
                  <p className="text-sm text-gray-600">Generate content with AI prompts</p>
                </div>
              </div>
              <Button
                onClick={() => setShowAITemplates(true)}
                className="w-full"
                size="sm"
              >
                <Sparkles className="h-4 w-4 mr-2" />
                Start with AI
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Document Upload Progress */}
        {documentUploads.length > 0 && (
          <div className="space-y-2">
            <h4 className="font-semibold text-gray-800">Processing Documents</h4>
            {documentUploads.map((upload, index) => (
              <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                <FileText className="h-5 w-5 text-gray-500" />
                <div className="flex-1">
                  <p className="text-sm font-medium text-gray-800">{upload.file.name}</p>
                  <div className="w-full bg-gray-200 rounded-full h-2 mt-1">
                    <div
                      className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${upload.progress}%` }}
                    />
                  </div>
                </div>
                <div className="text-sm text-gray-600">
                  {upload.status === 'completed' ? (
                    <CheckCircle className="h-5 w-5 text-green-500" />
                  ) : upload.status === 'error' ? (
                    <span className="text-red-500">Error</span>
                  ) : (
                    `${upload.progress}%`
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* AI Templates Modal */}
      {showAITemplates && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[80vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-2xl font-bold text-gray-800">AI Templates</h2>
                <Button
                  variant="outline"
                  onClick={() => setShowAITemplates(false)}
                >
                  Close
                </Button>
              </div>
              
              <div className="grid md:grid-cols-3 gap-6">
                {aiTemplates.map((template) => {
                  const IconComponent = template.icon;
                  return (
                    <Card
                      key={template.id}
                      className="cursor-pointer hover:shadow-lg transition-shadow"
                      onClick={() => handleApplyTemplate(template)}
                    >
                      <CardContent className="p-6">
                        <div className={`w-12 h-12 rounded-lg bg-gradient-to-r ${template.color} flex items-center justify-center mb-4`}>
                          <IconComponent className="h-6 w-6 text-white" />
                        </div>
                        <h3 className="font-semibold text-gray-800 mb-2">{template.name}</h3>
                        <p className="text-sm text-gray-600 mb-4">{template.description}</p>
                        <div className="flex items-center justify-between">
                          <span className="text-xs text-gray-500">{template.slides.length} slides</span>
                          <Button size="sm" className="bg-gradient-to-r from-blue-500 to-purple-600">
                            Use Template
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Slide Thumbnails */}
        <div className="bg-white rounded-lg shadow-sm p-6 lg:col-span-1">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold text-gray-800">Slides</h2>
            {!previewMode && (
              <Button variant="outline" size="sm" onClick={handleAddSlide}>
                <Plus className="h-4 w-4 mr-1" /> Add Slide
              </Button>
            )}
          </div>
          
          <div className="space-y-4 max-h-[600px] overflow-y-auto pr-2">
            {slides.map(slide => (
              <div key={slide.id} className="relative">
                {renderSlidePreview(slide)}
              </div>
            ))}
          </div>
        </div>

        {/* Slide Editor or Preview */}
        <div className="bg-white rounded-lg shadow-sm p-6 lg:col-span-2">
          {previewMode ? (
            <div className="space-y-6">
              <h2 className="text-lg font-semibold text-gray-800">Preview Mode</h2>
              <div className="aspect-video bg-white rounded-lg shadow-lg p-8 flex items-center justify-center">
                {currentSlide && (
                  <div className="w-full max-w-3xl">
                    <h2 className="text-3xl font-bold mb-6">{currentSlide.title}</h2>
                    <div className="text-lg text-gray-700 whitespace-pre-line">
                      {currentSlide.content}
                    </div>
                  </div>
                )}
              </div>
              <div className="flex justify-center mt-4">
                {slides.map((slide, index) => (
                  <div 
                    key={slide.id}
                    className={`h-2 w-2 rounded-full mx-1 cursor-pointer ${slide.id === activeSlide ? 'bg-blue-500' : 'bg-gray-300'}`}
                    onClick={() => setActiveSlide(slide.id)}
                  />
                ))}
              </div>
            </div>
          ) : (
            <div>
              {currentSlide ? (
                <Tabs defaultValue="content">
                  <TabsList className="grid grid-cols-3 mb-4">
                    <TabsTrigger value="content">Content</TabsTrigger>
                    <TabsTrigger value="design">Design</TabsTrigger>
                    <TabsTrigger value="ai">AI Assistant</TabsTrigger>
                  </TabsList>

                  <TabsContent value="content" className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Slide Title
                      </label>
                      <Input 
                        value={currentSlide.title}
                        onChange={(e) => handleSlideUpdate('title', e.target.value)}
                        placeholder="Enter slide title"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Slide Type
                      </label>
                      <select 
                        className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        value={currentSlide.type}
                        onChange={(e) => handleSlideUpdate('type', e.target.value)}
                      >
                        <option value="title">Title Slide</option>
                        <option value="problem">Problem</option>
                        <option value="solution">Solution</option>
                        <option value="market">Market Size</option>
                        <option value="business-model">Business Model</option>
                        <option value="traction">Traction</option>
                        <option value="team">Team</option>
                        <option value="financials">Financials</option>
                        <option value="ask">Ask</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Content
                      </label>
                      <Textarea 
                        value={currentSlide.content}
                        onChange={(e) => handleSlideUpdate('content', e.target.value)}
                        placeholder="Enter slide content"
                        className="min-h-[200px]"
                      />
                    </div>
                  </TabsContent>

                  <TabsContent value="design" className="space-y-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Template
                      </label>
                      <ToggleGroup 
                        type="single" 
                        value={currentSlide.template}
                        onValueChange={(value) => {
                          if (value) handleSlideUpdate('template', value);
                        }}
                      >
                        <ToggleGroupItem value="minimal">Minimal</ToggleGroupItem>
                        <ToggleGroupItem value="corporate">Corporate</ToggleGroupItem>
                        <ToggleGroupItem value="bold">Bold</ToggleGroupItem>
                      </ToggleGroup>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Layout
                      </label>
                      <ToggleGroup 
                        type="single" 
                        value={currentSlide.layout}
                        onValueChange={(value) => {
                          if (value) handleSlideUpdate('layout', value);
                        }}
                      >
                        <ToggleGroupItem value="left">Left</ToggleGroupItem>
                        <ToggleGroupItem value="center">Center</ToggleGroupItem>
                        <ToggleGroupItem value="right">Right</ToggleGroupItem>
                      </ToggleGroup>
                    </div>
                  </TabsContent>

                  <TabsContent value="ai" className="space-y-4">
                    <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4 text-sm">
                      <h3 className="font-medium text-blue-800 mb-2 flex items-center gap-2">
                        <Sparkles className="h-4 w-4" />
                        AI Assistant
                      </h3>
                      <p className="text-blue-700">
                        Describe what you want for this slide, and our AI will generate professionally-written content.
                      </p>
                    </div>
                    
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Your Prompt
                        </label>
                        <Textarea 
                          value={aiPrompt}
                          onChange={(e) => setAiPrompt(e.target.value)}
                          placeholder="e.g., Generate a compelling problem statement with key market statistics"
                          className="min-h-[100px]"
                        />
                      </div>
                      
                      <div className="space-y-3">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Quick Prompts
                          </label>
                          <div className="space-y-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => setAiPrompt("Generate a compelling problem statement with market statistics and customer pain points")}
                              className="w-full text-left justify-start"
                            >
                              <Target className="h-4 w-4 mr-2" />
                              Problem Statement
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => setAiPrompt("Create a solution overview with key features and competitive advantages")}
                              className="w-full text-left justify-start"
                            >
                              <Lightbulb className="h-4 w-4 mr-2" />
                              Solution Overview
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => setAiPrompt("Generate market analysis with TAM, SAM, SOM and growth projections")}
                              className="w-full text-left justify-start"
                            >
                              <TrendingUp className="h-4 w-4 mr-2" />
                              Market Analysis
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => setAiPrompt("Create financial projections with revenue forecasts and key metrics")}
                              className="w-full text-left justify-start"
                            >
                              <DollarSign className="h-4 w-4 mr-2" />
                              Financial Projections
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <Button
                      onClick={handleGenerateContent}
                      disabled={isGenerating || !aiPrompt}
                      className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:opacity-90"
                    >
                      {isGenerating ? (
                        <>
                          <div className="animate-spin h-4 w-4 mr-2 border-b-2 border-white rounded-full"></div>
                          Generating...
                        </>
                      ) : (
                        <>
                          <Wand2 className="h-4 w-4 mr-2" />
                          Generate Content
                        </>
                      )}
                    </Button>
                    
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <h3 className="text-sm font-medium text-gray-700 mb-2">Tips for Great Results:</h3>
                        <ul className="text-sm text-gray-600 space-y-1 list-disc pl-5">
                          <li>Be specific about what metrics or data points to include</li>
                          <li>Mention your target audience (e.g., "for Series A investors")</li>
                          <li>Specify tone (professional, conversational, bold)</li>
                          <li>Include any specific terminology from your industry</li>
                        </ul>
                      </div>
                      
                      <div>
                        <h3 className="text-sm font-medium text-gray-700 mb-2">AI Features:</h3>
                        <div className="space-y-2">
                          <div className="flex items-center gap-2 text-sm text-gray-600">
                            <CheckCircle className="h-4 w-4 text-green-500" />
                            <span>Industry-specific content</span>
                          </div>
                          <div className="flex items-center gap-2 text-sm text-gray-600">
                            <CheckCircle className="h-4 w-4 text-green-500" />
                            <span>Data-driven insights</span>
                          </div>
                          <div className="flex items-center gap-2 text-sm text-gray-600">
                            <CheckCircle className="h-4 w-4 text-green-500" />
                            <span>Investor-ready language</span>
                          </div>
                          <div className="flex items-center gap-2 text-sm text-gray-600">
                            <CheckCircle className="h-4 w-4 text-green-500" />
                            <span>Professional formatting</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </TabsContent>
                </Tabs>
              ) : (
                <div className="flex flex-col items-center justify-center h-64">
                  <Presentation className="h-12 w-12 text-gray-400 mb-4" />
                  <p className="text-gray-600">Select a slide to edit or create a new one</p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Export and Sharing Section */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
          <Download className="h-5 w-5 text-blue-500" />
          Export & Share
        </h2>
        
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card className="border-2 border-dashed border-blue-200 hover:border-blue-400 transition-colors cursor-pointer">
            <CardContent className="p-4 text-center">
              <div className="p-3 bg-blue-100 rounded-lg w-fit mx-auto mb-3">
                <Download className="h-6 w-6 text-blue-600" />
              </div>
              <h3 className="font-semibold text-gray-800 mb-2">PDF Export</h3>
              <p className="text-sm text-gray-600 mb-3">Download as PDF for offline viewing</p>
              <Button size="sm" className="w-full">
                Export PDF
              </Button>
            </CardContent>
          </Card>

          <Card className="border-2 border-dashed border-green-200 hover:border-green-400 transition-colors cursor-pointer">
            <CardContent className="p-4 text-center">
              <div className="p-3 bg-green-100 rounded-lg w-fit mx-auto mb-3">
                <Presentation className="h-6 w-6 text-green-600" />
              </div>
              <h3 className="font-semibold text-gray-800 mb-2">PowerPoint</h3>
              <p className="text-sm text-gray-600 mb-3">Export as editable PowerPoint file</p>
              <Button size="sm" variant="outline" className="w-full">
                Export PPTX
              </Button>
            </CardContent>
          </Card>

          <Card className="border-2 border-dashed border-purple-200 hover:border-purple-400 transition-colors cursor-pointer">
            <CardContent className="p-4 text-center">
              <div className="p-3 bg-purple-100 rounded-lg w-fit mx-auto mb-3">
                <Share2 className="h-6 w-6 text-purple-600" />
              </div>
              <h3 className="font-semibold text-gray-800 mb-2">Share Link</h3>
              <p className="text-sm text-gray-600 mb-3">Create shareable presentation link</p>
              <Button size="sm" variant="outline" className="w-full">
                Generate Link
              </Button>
            </CardContent>
          </Card>

          <Card className="border-2 border-dashed border-orange-200 hover:border-orange-400 transition-colors cursor-pointer">
            <CardContent className="p-4 text-center">
              <div className="p-3 bg-orange-100 rounded-lg w-fit mx-auto mb-3">
                <Eye className="h-6 w-6 text-orange-600" />
              </div>
              <h3 className="font-semibold text-gray-800 mb-2">Live Present</h3>
              <p className="text-sm text-gray-600 mb-3">Present directly from browser</p>
              <Button size="sm" variant="outline" className="w-full">
                Start Presenting
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Presentation Statistics */}
        <div className="mt-6 pt-6 border-t">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">Presentation Analytics</h3>
          <div className="grid md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600 mb-1">{slides.length}</div>
              <div className="text-sm text-gray-600">Total Slides</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600 mb-1">
                {slides.filter(s => s.aiGenerated).length}
              </div>
              <div className="text-sm text-gray-600">AI Generated</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600 mb-1">
                {slides.reduce((count, slide) => count + slide.content.split(' ').length, 0)}
              </div>
              <div className="text-sm text-gray-600">Total Words</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600 mb-1">
                {new Set(slides.map(s => s.template)).size}
              </div>
              <div className="text-sm text-gray-600">Templates Used</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default PitchDeck;

=== FILE: client/src/pages/analytics-dashboard.tsx ===

import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { 
  TrendingUp, 
  TrendingDown, 
  DollarSign, 
  Users, 
  Target, 
  AlertTriangle,
  BarChart3,
  LineChart,
  Activity,
  Shield,
  Zap,
  Lightbulb,
  Calendar,
  Eye,
  Bell,
  Wifi,
  WifiOff,
  Smartphone
} from "lucide-react";
import { BarChart, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Line, Bar, Area, AreaChart, LineChart as RechartsLineChart } from "recharts";

interface AnalyticsData {
  performanceMetrics: {
    totalRevenue: number;
    revenueGrowth: number;
    userGrowth: number;
    conversionRate: number;
    customerAcquisitionCost: number;
    lifetimeValue: number;
    burnRate: number;
    runway: number;
    activeUsers: number;
    churnRate: number;
  };
  predictiveModels: {
    revenueForecasting: Array<{
      month: string;
      predicted: number;
      actual?: number;
      confidence: number;
    }>;
    userGrowthPrediction: Array<{
      month: string;
      predicted: number;
      lowerBound: number;
      upperBound: number;
    }>;
    riskFactors: Array<{
      factor: string;
      likelihood: number;
      impact: 'High' | 'Medium' | 'Low';
      mitigation: string;
    }>;
    marketOpportunities: Array<{
      opportunity: string;
      score: number;
      timeline: string;
      potential: string;
    }>;
  };
  realTimeMetrics: {
    activeUsers: number;
    salesConversions: number;
    marketSentiment: number;
    competitivePosition: number;
  };
}

interface NotificationData {
  id: string;
  title: string;
  message: string;
  type: 'success' | 'warning' | 'error' | 'info';
  timestamp: Date;
  read: boolean;
}

const COLORS = ['#8A4EF5', '#4ED0F5', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'];

// Safe number formatting helpers to avoid calling toLocaleString on undefined
const formatNumber = (n?: number) => (typeof n === 'number' && isFinite(n) ? n.toLocaleString() : '0');
const formatPercent = (n?: number) => (typeof n === 'number' && isFinite(n) ? `${n}%` : '0%');

export default function AnalyticsDashboard() {
  const [selectedMetric, setSelectedMetric] = useState<string>("overview");
  const [timeRange, setTimeRange] = useState<string>("30d");
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [notifications, setNotifications] = useState<NotificationData[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);

  // Cache key for offline support
  const cacheKey = `analytics-dashboard-${timeRange}`;

  // Online/offline detection
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // Load cached data for offline support
  const loadCachedData = (): AnalyticsData | null => {
    try {
      const cached = localStorage.getItem(cacheKey);
      return cached ? JSON.parse(cached) : null;
    } catch {
      return null;
    }
  };

  // Save data to cache
  const saveToCache = (data: AnalyticsData) => {
    try {
      localStorage.setItem(cacheKey, JSON.stringify(data));
      localStorage.setItem(`${cacheKey}-timestamp`, Date.now().toString());
    } catch (error) {
      console.warn('Failed to cache data:', error);
    }
  };

  // Fetch analytics data with offline fallback
  const { data: analyticsData, isLoading } = useQuery<AnalyticsData>({
    queryKey: [`/api/analytics/dashboard`, timeRange],
    queryFn: async () => {
      const response = await fetch(`/api/analytics/dashboard?timeRange=${timeRange}`);
      if (!response.ok) throw new Error('Failed to fetch analytics data');
      const data = await response.json();
      saveToCache(data);
      return data;
    },
    enabled: isOnline,
    staleTime: 5 * 60 * 1000, // 5 minutes
    refetchInterval: 30000, // 30 seconds when online
  });

  // Use cached data when offline
  const data = analyticsData || loadCachedData();

  // Mock data for demonstration
  const mockData: AnalyticsData = {
    performanceMetrics: {
      totalRevenue: 485000,
      revenueGrowth: 23.5,
      userGrowth: 18.2,
      conversionRate: 12.8,
      customerAcquisitionCost: 285,
      lifetimeValue: 3450,
      burnRate: 45000,
      runway: 18.5,
      activeUsers: 12470,
      churnRate: 5.2
    },
    predictiveModels: {
      revenueForecasting: [
        { month: "Jan", predicted: 42000, actual: 41200, confidence: 0.92 },
        { month: "Feb", predicted: 46000, actual: 47800, confidence: 0.89 },
        { month: "Mar", predicted: 52000, actual: 51200, confidence: 0.91 },
        { month: "Apr", predicted: 58000, confidence: 0.87 },
        { month: "May", predicted: 64000, confidence: 0.85 },
        { month: "Jun", predicted: 72000, confidence: 0.83 }
      ],
      userGrowthPrediction: [
        { month: "Jan", predicted: 10000, lowerBound: 9500, upperBound: 10500 },
        { month: "Feb", predicted: 11500, lowerBound: 10800, upperBound: 12200 },
        { month: "Mar", predicted: 13200, lowerBound: 12300, upperBound: 14100 },
        { month: "Apr", predicted: 15100, lowerBound: 13900, upperBound: 16300 },
        { month: "May", predicted: 17200, lowerBound: 15700, upperBound: 18700 },
        { month: "Jun", predicted: 19600, lowerBound: 17800, upperBound: 21400 }
      ],
      riskFactors: [
        { factor: "Market Saturation", likelihood: 65, impact: "High", mitigation: "Expand to new markets" },
        { factor: "Competition Increase", likelihood: 78, impact: "Medium", mitigation: "Strengthen USP" },
        { factor: "Economic Downturn", likelihood: 42, impact: "High", mitigation: "Diversify revenue streams" }
      ],
      marketOpportunities: [
        { opportunity: "AI Integration", score: 89, timeline: "3-6 months", potential: "$120K ARR" },
        { opportunity: "Mobile App", score: 76, timeline: "6-9 months", potential: "$80K ARR" },
        { opportunity: "Enterprise Sales", score: 94, timeline: "2-4 months", potential: "$200K ARR" }
      ]
    },
    realTimeMetrics: {
      activeUsers: 1247,
      salesConversions: 23,
      marketSentiment: 78,
      competitivePosition: 85
    }
  };

  const currentData = data || mockData;

  // Notification management
  const addNotification = (notification: Omit<NotificationData, 'id'>) => {
    const newNotification = {
      ...notification,
      id: Date.now().toString(),
    };
    setNotifications(prev => [newNotification, ...prev.slice(0, 9)]); // Keep last 10
    setUnreadCount(prev => prev + 1);
  };

  // Generate notifications based on metrics
  useEffect(() => {
    if (!currentData?.performanceMetrics) return;

    const { performanceMetrics } = currentData;

    // Check for important updates
    if (performanceMetrics.revenueGrowth > 25) {
      addNotification({
        title: "Revenue Milestone!",
        message: `Revenue growth exceeded 25% (${performanceMetrics.revenueGrowth}%)`,
        type: 'success',
        timestamp: new Date(),
        read: false
      });
    }

    if (performanceMetrics.churnRate > 7) {
      addNotification({
        title: "High Churn Alert",
        message: `Customer churn rate is at ${performanceMetrics.churnRate}%`,
        type: 'warning',
        timestamp: new Date(),
        read: false
      });
    }

    if (performanceMetrics.runway < 12) {
      addNotification({
        title: "Low Runway Warning",
        message: `Only ${performanceMetrics.runway} months of runway remaining`,
        type: 'error',
        timestamp: new Date(),
        read: false
      });
    }
  }, [currentData?.performanceMetrics]);

  const MetricCard = ({ 
    title, 
    value, 
    change, 
    icon: Icon, 
    trend, 
    description,
    color = "blue"
  }: {
    title: string;
    value: string | number;
    change: number;
    icon: any;
    trend: "up" | "down";
    description: string;
    color?: string;
  }) => (
    <Card className="glass-card hover:shadow-lg transition-all duration-200">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <Icon className={`h-4 w-4 text-${color}-500`} />
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
        <div className="flex items-center text-xs text-muted-foreground mt-1">
          {trend === 'up' ? (
            <TrendingUp className="h-3 w-3 text-green-500 mr-1" />
          ) : (
            <TrendingDown className="h-3 w-3 text-red-500 mr-1" />
          )}
          <span className={trend === 'up' ? 'text-green-500' : 'text-red-500'}>
            {Math.abs(change)}%
          </span>
          <span className="ml-1">{description}</span>
        </div>
      </CardContent>
    </Card>
  );

  const NotificationBell = () => (
    <div className="relative">
      <Button variant="ghost" size="sm" className="relative">
        <Bell className="h-4 w-4" />
        {unreadCount > 0 && (
          <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
            {unreadCount > 9 ? '9+' : unreadCount}
          </span>
        )}
      </Button>
    </div>
  );

  const RiskFactorCard = ({ factor }: { factor: typeof currentData.predictiveModels.riskFactors[0] }) => (
    <Card className="glass-card">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-sm">{factor.factor}</CardTitle>
          <Badge variant={factor.likelihood > 70 ? "destructive" : factor.likelihood > 40 ? "secondary" : "default"}>
            {factor.likelihood}%
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          <div className="flex justify-between text-xs">
            <span>Impact:</span>
            <span className={factor.impact === "High" ? "text-red-500" : factor.impact === "Medium" ? "text-yellow-500" : "text-green-500"}>
              {factor.impact}
            </span>
          </div>
          <Progress value={factor.likelihood} className="h-2" />
          <p className="text-xs text-muted-foreground mt-2">{factor.mitigation}</p>
        </div>
      </CardContent>
    </Card>
  );

  const OpportunityCard = ({ opportunity }: { opportunity: typeof currentData.predictiveModels.marketOpportunities[0] }) => (
    <Card className="glass-card">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-sm">{opportunity.opportunity}</CardTitle>
          <Badge variant="default" className="bg-green-100 text-green-800">
            {opportunity.score}/100
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          <div className="flex justify-between text-xs">
            <span>Timeline:</span>
            <span>{opportunity.timeline}</span>
          </div>
          <div className="flex justify-between text-xs">
            <span>Potential:</span>
            <span className="font-semibold text-green-600">{opportunity.potential}</span>
          </div>
          <Progress value={opportunity.score} className="h-2" />
        </div>
      </CardContent>
    </Card>
  );

  if (isLoading && !data) {
    return (
      <div className="container mx-auto px-4 py-8 space-y-6">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mx-auto mb-4"></div>
          <p>Loading analytics dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-teal-50">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-6" data-testid="analytics-dashboard">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <BarChart3 className="h-10 w-10 text-purple-600" />
            <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-600 to-teal-500 bg-clip-text text-transparent">
              Analytics Hub
            </h1>
            <div className="flex items-center gap-2 ml-2">
              {isOnline ? (
                <Wifi className="h-5 w-5 text-green-500" />
              ) : (
                <div className="flex items-center gap-1">
                  <WifiOff className="h-5 w-5 text-orange-500" />
                  <span className="text-xs text-orange-500">Offline</span>
                </div>
              )}
            </div>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-6">
            AI-powered insights with predictive analytics and real-time metrics
          </p>
          <div className="flex items-center justify-center gap-2 flex-wrap">
          <Button 
            variant={timeRange === "7d" ? "default" : "outline"}
            size="sm"
            onClick={() => setTimeRange("7d")}
            data-testid="timerange-7d"
          >
            7D
          </Button>
          <Button 
            variant={timeRange === "30d" ? "default" : "outline"}
            size="sm"
            onClick={() => setTimeRange("30d")}
            data-testid="timerange-30d"
          >
            30D
          </Button>
          <Button 
            variant={timeRange === "90d" ? "default" : "outline"}
            size="sm"
            onClick={() => setTimeRange("90d")}
            data-testid="timerange-90d"
          >
            90D
          </Button>
        </div>
      </div>

      {/* Real-time Metrics */}
      <Card className="glass-card">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Activity className="h-5 w-5" />
            Real-time Metrics
          </CardTitle>
          <CardDescription>Live updates every 30 seconds</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="text-center p-4 rounded-lg bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20">
              <Users className="h-6 w-6 mx-auto mb-2 text-purple-600" />
              <div className="text-2xl font-bold" data-testid="metric-active-users">{currentData.realTimeMetrics.activeUsers}</div>
              <div className="text-xs text-muted-foreground">Active Users</div>
            </div>
            <div className="text-center p-4 rounded-lg bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20">
              <Target className="h-6 w-6 mx-auto mb-2 text-green-600" />
              <div className="text-2xl font-bold" data-testid="metric-conversions">{currentData.realTimeMetrics.salesConversions}</div>
              <div className="text-xs text-muted-foreground">Conversions Today</div>
            </div>
            <div className="text-center p-4 rounded-lg bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20">
              <Eye className="h-6 w-6 mx-auto mb-2 text-blue-600" />
              <div className="text-2xl font-bold" data-testid="metric-sentiment">{currentData.realTimeMetrics.marketSentiment}%</div>
              <div className="text-xs text-muted-foreground">Market Sentiment</div>
            </div>
            <div className="text-center p-4 rounded-lg bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-900/20 dark:to-orange-800/20">
              <Zap className="h-6 w-6 mx-auto mb-2 text-orange-600" />
              <div className="text-2xl font-bold" data-testid="metric-position">{currentData.realTimeMetrics.competitivePosition}%</div>
              <div className="text-xs text-muted-foreground">Competitive Position</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Key Performance Indicators */}
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
        <MetricCard
          title="Revenue"
          value={`$${(currentData.performanceMetrics.totalRevenue / 1000).toFixed(0)}K`}
          change={currentData.performanceMetrics.revenueGrowth}
          icon={DollarSign}
          trend="up"
          description="vs last month"
          color="green"
        />
        <MetricCard
          title="Active Users"
          value={formatNumber(currentData.performanceMetrics.activeUsers)}
          change={currentData.performanceMetrics.userGrowth}
          icon={Users}
          trend="up"
          description="growth"
          color="blue"
        />
        <MetricCard
          title="Conversion"
          value={`${currentData.performanceMetrics.conversionRate}%`}
          change={2.1}
          icon={Target}
          trend="up"
          description="rate"
          color="purple"
        />
        <MetricCard
          title="Churn Rate"
          value={`${currentData.performanceMetrics.churnRate}%`}
          change={-1.2}
          icon={AlertTriangle}
          trend="down"
          description="improved"
          color="orange"
        />
        <MetricCard
          title="LTV/CAC"
          value={`${(currentData.performanceMetrics.lifetimeValue / currentData.performanceMetrics.customerAcquisitionCost).toFixed(1)}x`}
          change={8.5}
          icon={BarChart3}
          trend="up"
          description="ratio"
          color="teal"
        />
        <MetricCard
          title="Runway"
          value={`${currentData.performanceMetrics.runway}mo`}
          change={-2.1}
          icon={Calendar}
          trend="down"
          description="remaining"
          color="red"
        />
      </div>

      {/* Main Content Tabs */}
      <Tabs value={selectedMetric} onValueChange={setSelectedMetric} className="space-y-6">
        <TabsList className="grid w-full grid-cols-2 md:grid-cols-4">
          <TabsTrigger value="overview" className="flex items-center gap-1">
            <BarChart3 className="h-4 w-4" />
            <span className="hidden sm:inline">Overview</span>
          </TabsTrigger>
          <TabsTrigger value="predictions" className="flex items-center gap-1">
            <Lightbulb className="h-4 w-4" />
            <span className="hidden sm:inline">Predictions</span>
          </TabsTrigger>
          <TabsTrigger value="risks" className="flex items-center gap-1">
            <Shield className="h-4 w-4" />
            <span className="hidden sm:inline">Risk Analysis</span>
          </TabsTrigger>
          <TabsTrigger value="opportunities" className="flex items-center gap-1">
            <Target className="h-4 w-4" />
            <span className="hidden sm:inline">Opportunities</span>
          </TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Revenue Forecasting Chart */}
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <LineChart className="h-5 w-5" />
                  Revenue Forecasting
                </CardTitle>
                <CardDescription>AI-predicted vs actual revenue trends</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <AreaChart data={currentData.predictiveModels.revenueForecasting}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Area type="monotone" dataKey="predicted" stackId="1" stroke="#8A4EF5" fill="#8A4EF5" fillOpacity={0.6} />
                    <Area type="monotone" dataKey="actual" stackId="2" stroke="#4ED0F5" fill="#4ED0F5" fillOpacity={0.8} />
                  </AreaChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            {/* User Growth Prediction */}
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Users className="h-5 w-5" />
                  User Growth Prediction
                </CardTitle>
                <CardDescription>Predicted user acquisition with confidence bands</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <RechartsLineChart data={currentData.predictiveModels.userGrowthPrediction}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Area 
                      type="monotone" 
                      dataKey="upperBound" 
                      stroke="#E5E7EB" 
                      fill="#E5E7EB" 
                      fillOpacity={0.3} 
                    />
                    <Area 
                      type="monotone" 
                      dataKey="lowerBound" 
                      stroke="#E5E7EB" 
                      fill="#FFFFFF" 
                      fillOpacity={1} 
                    />
                    <Line 
                      type="monotone" 
                      dataKey="predicted" 
                      stroke="#10B981" 
                      strokeWidth={2} 
                    />
                  </RechartsLineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>

          {/* Financial Health Overview */}
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="h-5 w-5" />
                Financial Health
              </CardTitle>
              <CardDescription>Key financial metrics and ratios</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-sm">CAC vs LTV Ratio</span>
                <div className="text-right">
                  <div className="text-lg font-semibold">1:12.1</div>
                  <div className="text-xs text-green-500">Healthy</div>
                </div>
              </div>
              <Progress value={82} className="h-2" />
              
              <Separator />
              
              <div className="flex items-center justify-between">
                <span className="text-sm">Burn Rate</span>
                <div className="text-right">
                  <div className="text-lg font-semibold">${formatNumber(currentData.performanceMetrics.burnRate)}/mo</div>
                  <div className="text-xs text-yellow-500">Monitor</div>
                </div>
              </div>
              <Progress value={65} className="h-2" />
              
              <Separator />
              
              <div className="flex items-center justify-between">
                <span className="text-sm">Growth Rate</span>
                <div className="text-right">
                  <div className="text-lg font-semibold">{currentData.performanceMetrics.revenueGrowth}%</div>
                  <div className="text-xs text-green-500">Strong</div>
                </div>
              </div>
              <Progress value={currentData.performanceMetrics.revenueGrowth * 3} className="h-2" />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="predictions" className="space-y-6">
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Lightbulb className="h-5 w-5" />
                AI-Powered Predictions
              </CardTitle>
              <CardDescription>Machine learning insights for business planning</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-sm font-semibold mb-4">Revenue Confidence Levels</h4>
                  <ResponsiveContainer width="100%" height={250}>
                    <BarChart data={currentData.predictiveModels.revenueForecasting.map(d => ({ ...d, confidence: d.confidence * 100 }))}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis domain={[0, 100]} />
                      <Tooltip formatter={(value: number) => `${value.toFixed(0)}%`} />
                      <Bar dataKey="confidence" fill="#8A4EF5" radius={[4, 4, 0, 0]} />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
                
                <div>
                  <h4 className="text-sm font-semibold mb-4">Prediction Accuracy</h4>
                  <div className="space-y-3">
                    {currentData.predictiveModels.revenueForecasting
                      .filter(d => d.actual)
                      .map((item, index) => (
                        <div key={index} className="flex items-center justify-between p-3 rounded-lg bg-gray-50 dark:bg-gray-800">
                          <span className="text-sm">{item.month}</span>
                          <div className="text-right">
                            <div className="text-sm font-semibold">
                              {((1 - Math.abs(item.predicted - (item.actual || 0)) / item.predicted) * 100).toFixed(1)}% accurate
                            </div>
                            <div className="text-xs text-muted-foreground">
                              ${formatNumber(item.predicted)} vs ${item.actual ? formatNumber(item.actual) : 'N/A'}
                            </div>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="risks" className="space-y-6">
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                Risk Assessment
              </CardTitle>
              <CardDescription>AI-powered risk analysis and mitigation strategies</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {currentData.predictiveModels.riskFactors.map((factor, index) => (
                  <RiskFactorCard key={index} factor={factor} />
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="opportunities" className="space-y-6">
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Target className="h-5 w-5" />
                Market Opportunities
              </CardTitle>
              <CardDescription>AI-identified growth opportunities and strategic recommendations</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {currentData.predictiveModels.marketOpportunities.map((opportunity, index) => (
                  <OpportunityCard key={index} opportunity={opportunity} />
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Mobile-Optimized Quick Actions */}
      <Card className="glass-card lg:hidden">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Smartphone className="h-5 w-5" />
            Quick Actions
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 gap-3">
            <Button variant="outline" size="sm" className="flex items-center gap-2">
              <BarChart3 className="h-4 w-4" />
              Reports
            </Button>
            <Button variant="outline" size="sm" className="flex items-center gap-2">
              <Bell className="h-4 w-4" />
              Alerts
            </Button>
            <Button variant="outline" size="sm" className="flex items-center gap-2">
              <Activity className="h-4 w-4" />
              Monitor
            </Button>
            <Button variant="outline" size="sm" className="flex items-center gap-2">
              <TrendingUp className="h-4 w-4" />
              Forecast
            </Button>
          </div>
        </CardContent>
      </Card>
      </div>
    </div>
  );
}

=== FILE: client/src/pages/equity-funding.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  ArrowRight, Search, Filter, DollarSign, Building2, Globe, PieChart, Clock, Shield,
  TrendingUp, Users, Award, CheckCircle, AlertCircle, CreditCard, History, Info,
  BarChart2, HelpCircle, Wallet, Target, Star, ExternalLink, Building, Zap
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

interface Investor {
  id: number;
  name: string;
  type: 'angel' | 'vc' | 'pe';
  logo: string;
  minInvestment: number;
  maxInvestment: number;
  industries: string[];
  stages: string[];
  regions: string[];
  portfolio: number;
  successRate: number;
  matchScore: number;
  description: string;
  website: string;
  recentInvestments: string[];
}

function EquityFunding() {
  const { id } = useParams();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);
  const [fundingRange, setFundingRange] = useState([50000, 5000000]);
  const [selectedStage, setSelectedStage] = useState<string>('all');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for equity investors
  const investors: Investor[] = [
    {
      id: 1,
      name: "Sequoia Capital",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 500000,
      maxInvestment: 10000000,
      industries: ["Software", "FinTech", "Healthcare"],
      stages: ["Seed", "Series A", "Series B"],
      regions: ["North America", "Europe", "Asia"],
      portfolio: 156,
      successRate: 0.78,
      matchScore: 92,
      description: "Leading venture capital firm focused on technology companies from seed to growth stage.",
      website: "https://sequoiacap.com",
      recentInvestments: ["Airbnb", "WhatsApp", "Stripe"]
    },
    {
      id: 2,
      name: "Andreessen Horowitz",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 1000000,
      maxInvestment: 20000000,
      industries: ["AI", "Blockchain", "Enterprise"],
      stages: ["Series A", "Series B", "Series C"],
      regions: ["North America", "Europe"],
      portfolio: 208,
      successRate: 0.82,
      matchScore: 88,
      description: "Technology-focused venture capital firm investing in software and internet companies.",
      website: "https://a16z.com",
      recentInvestments: ["Coinbase", "GitHub", "Oculus"]
    },
    {
      id: 3,
      name: "Accel Partners",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 250000,
      maxInvestment: 15000000,
      industries: ["SaaS", "E-commerce", "Mobile"],
      stages: ["Seed", "Series A"],
      regions: ["North America", "Europe"],
      portfolio: 134,
      successRate: 0.75,
      matchScore: 85,
      description: "Early-stage venture capital firm with a focus on consumer and enterprise software.",
      website: "https://accel.com",
      recentInvestments: ["Facebook", "Slack", "Dropbox"]
    },
    {
      id: 4,
      name: "Y Combinator",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 125000,
      maxInvestment: 2000000,
      industries: ["All Industries"],
      stages: ["Pre-seed", "Seed"],
      regions: ["Global"],
      portfolio: 3000,
      successRate: 0.65,
      matchScore: 95,
      description: "Startup accelerator and seed fund providing funding and mentorship to early-stage companies.",
      website: "https://ycombinator.com",
      recentInvestments: ["Airbnb", "Stripe", "DoorDash"]
    },
    {
      id: 5,
      name: "First Round Capital",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 100000,
      maxInvestment: 5000000,
      industries: ["Technology", "Consumer", "Enterprise"],
      stages: ["Seed", "Series A"],
      regions: ["North America"],
      portfolio: 89,
      successRate: 0.71,
      matchScore: 82,
      description: "Early-stage venture capital firm focused on technology companies.",
      website: "https://firstround.com",
      recentInvestments: ["Uber", "Square", "Warby Parker"]
    }
  ];

  const angelInvestors: Investor[] = [
    {
      id: 6,
      name: "Jason Calacanis",
      type: "angel",
      logo: "https://via.placeholder.com/40",
      minInvestment: 10000,
      maxInvestment: 100000,
      industries: ["Technology", "Media"],
      stages: ["Pre-seed", "Seed"],
      regions: ["North America"],
      portfolio: 45,
      successRate: 0.68,
      matchScore: 78,
      description: "Angel investor and entrepreneur with investments in early-stage technology companies.",
      website: "https://calacanis.com",
      recentInvestments: ["Uber", "Thumbtack", "Robinhood"]
    },
    {
      id: 7,
      name: "Naval Ravikant",
      type: "angel",
      logo: "https://via.placeholder.com/40",
      minInvestment: 5000,
      maxInvestment: 50000,
      industries: ["Technology", "Crypto"],
      stages: ["Pre-seed", "Seed"],
      regions: ["Global"],
      portfolio: 78,
      successRate: 0.72,
      matchScore: 85,
      description: "Angel investor and founder of AngelList, focused on technology startups.",
      website: "https://nav.al",
      recentInvestments: ["Twitter", "Uber", "Snapchat"]
    }
  ];

  const allInvestors = [...investors, ...angelInvestors];

  const filteredInvestors = allInvestors.filter(investor => {
    const matchesSearch = investor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         investor.industries.some(industry => 
                           industry.toLowerCase().includes(searchQuery.toLowerCase())
                         );
    const matchesIndustry = selectedIndustries.length === 0 || 
                           selectedIndustries.some(industry => 
                             investor.industries.includes(industry)
                           );
    const matchesStage = selectedStage === 'all' || investor.stages.includes(selectedStage);
    const matchesRange = investor.minInvestment <= fundingRange[1] && 
                        investor.maxInvestment >= fundingRange[0];
    
    return matchesSearch && matchesIndustry && matchesStage && matchesRange;
  });

  const industries = ["Software", "FinTech", "Healthcare", "AI", "Blockchain", "Enterprise", "SaaS", "E-commerce", "Mobile", "Technology", "Consumer", "Media", "Crypto"];

  const stages = [
    { value: 'all', label: 'All Stages' },
    { value: 'Pre-seed', label: 'Pre-seed' },
    { value: 'Seed', label: 'Seed' },
    { value: 'Series A', label: 'Series A' },
    { value: 'Series B', label: 'Series B' },
    { value: 'Series C', label: 'Series C' }
  ];

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    }
    return `$${amount}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-blue-100 rounded-lg">
              <Building className="h-6 w-6 text-blue-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Equity Funding
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Connect with venture capitalists, angel investors, and equity partners to fuel your company's growth.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <TrendingUp className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">$2.4B</p>
                  <p className="text-sm text-gray-600">Total Funding Available</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Users className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">127</p>
                  <p className="text-sm text-gray-600">Active Investors</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Award className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">73%</p>
                  <p className="text-sm text-gray-600">Success Rate</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <Clock className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">45</p>
                  <p className="text-sm text-gray-600">Days Avg. Close</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Filter className="h-5 w-5" />
              Find Your Perfect Match
            </CardTitle>
            <CardDescription>
              Use filters to find investors that align with your business needs
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Search Investors
                </label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search by name or industry..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Funding Stage
                </label>
                <select
                  value={selectedStage}
                  onChange={(e) => setSelectedStage(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {stages.map(stage => (
                    <option key={stage.value} value={stage.value}>
                      {stage.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Funding Range: {formatCurrency(fundingRange[0])} - {formatCurrency(fundingRange[1])}
              </label>
              <Slider
                value={fundingRange}
                onValueChange={setFundingRange}
                min={10000}
                max={10000000}
                step={10000}
                className="w-full"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Industries
              </label>
              <div className="flex flex-wrap gap-2">
                {industries.map(industry => (
                  <Badge
                    key={industry}
                    variant={selectedIndustries.includes(industry) ? "default" : "outline"}
                    className="cursor-pointer"
                    onClick={() => {
                      setSelectedIndustries(prev => 
                        prev.includes(industry) 
                          ? prev.filter(i => i !== industry)
                          : [...prev, industry]
                      );
                    }}
                  >
                    {industry}
                  </Badge>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Results */}
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-gray-900">
              {filteredInvestors.length} Investors Found
            </h2>
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <span>Sorted by Match Score</span>
              <TrendingUp className="h-4 w-4" />
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredInvestors.map(investor => (
              <Card key={investor.id} className="hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <img
                        src={investor.logo}
                        alt={investor.name}
                        className="w-12 h-12 rounded-lg object-cover"
                      />
                      <div>
                        <CardTitle className="text-lg">{investor.name}</CardTitle>
                        <CardDescription className="capitalize">
                          {investor.type === 'vc' ? 'Venture Capital' : 
                           investor.type === 'angel' ? 'Angel Investor' : 'Private Equity'}
                        </CardDescription>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="flex items-center gap-1 mb-1">
                        <Star className="h-4 w-4 text-yellow-500 fill-current" />
                        <span className="text-sm font-medium">{investor.matchScore}% Match</span>
                      </div>
                      <Progress value={investor.matchScore} className="w-20 h-2" />
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-600 mb-4">{investor.description}</p>
                  
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <p className="text-sm font-medium text-gray-700">Investment Range</p>
                      <p className="text-sm text-gray-600">
                        {formatCurrency(investor.minInvestment)} - {formatCurrency(investor.maxInvestment)}
                      </p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">Portfolio Size</p>
                      <p className="text-sm text-gray-600">{investor.portfolio} companies</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">Success Rate</p>
                      <p className="text-sm text-gray-600">{(investor.successRate * 100).toFixed(0)}%</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">Regions</p>
                      <p className="text-sm text-gray-600">{investor.regions.join(', ')}</p>
                    </div>
                  </div>

                  <div className="mb-4">
                    <p className="text-sm font-medium text-gray-700 mb-2">Industries</p>
                    <div className="flex flex-wrap gap-1">
                      {investor.industries.slice(0, 3).map(industry => (
                        <Badge key={industry} variant="secondary" className="text-xs">
                          {industry}
                        </Badge>
                      ))}
                      {investor.industries.length > 3 && (
                        <Badge variant="outline" className="text-xs">
                          +{investor.industries.length - 3} more
                        </Badge>
                      )}
                    </div>
                  </div>

                  <div className="mb-4">
                    <p className="text-sm font-medium text-gray-700 mb-2">Recent Investments</p>
                    <div className="flex flex-wrap gap-1">
                      {investor.recentInvestments.slice(0, 3).map(company => (
                        <Badge key={company} variant="outline" className="text-xs">
                          {company}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="flex gap-2">
                  <Button className="flex-1">
                    <ExternalLink className="h-4 w-4 mr-2" />
                    View Profile
                  </Button>
                  <Button variant="outline" className="flex-1">
                    <Users className="h-4 w-4 mr-2" />
                    Connect
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>

        {/* CTA Section */}
        <Card className="mt-8 bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
          <CardContent className="p-8">
            <div className="text-center">
              <h3 className="text-2xl font-bold mb-4">Ready to Raise Equity?</h3>
              <p className="text-blue-100 mb-6 max-w-2xl mx-auto">
                Get matched with the right investors for your startup. Our AI-powered platform 
                analyzes your business and connects you with investors who are actively looking 
                for companies like yours.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button size="lg" variant="secondary">
                  <Zap className="h-5 w-5 mr-2" />
                  Start Matching
                </Button>
                <Button size="lg" variant="outline" className="border-white text-white hover:bg-white hover:text-blue-600">
                  <HelpCircle className="h-5 w-5 mr-2" />
                  Learn More
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default EquityFunding;


=== FILE: client/src/pages/team.tsx ===

import React, { useState } from 'react';
import { useAuth } from '@/hooks/use-auth';
import { useTeam } from '@/hooks/use-team';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Separator } from '@/components/ui/separator';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { 
  Users, 
  UserPlus, 
  Mail, 
  Crown, 
  Shield, 
  User, 
  Trash2, 
  Edit,
  Settings,
  MessageSquare,
  Calendar,
  FileText,
  Activity,
  Search,
  Filter,
  MoreVertical,
  CheckCircle,
  Clock,
  XCircle,
  Plus,
  Building,
  MapPin,
  Phone,
  Globe,
  Linkedin,
  Twitter,
  Github
} from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

interface TeamMember {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'member' | 'viewer' | 'owner';
  avatar?: string;
  status: 'active' | 'pending' | 'inactive';
  joinedAt: string;
  lastActive?: string;
  department?: string;
  skills?: string[];
  bio?: string;
  location?: string;
  phone?: string;
  website?: string;
  linkedin?: string;
  twitter?: string;
  github?: string;
}

interface TeamInvitation {
  id: string;
  email: string;
  role: 'admin' | 'member' | 'viewer';
  status: 'pending' | 'accepted' | 'declined' | 'expired';
  invitedBy: string;
  invitedAt: string;
  expiresAt: string;
  message?: string;
}

interface TeamStats {
  totalMembers: number;
  activeMembers: number;
  pendingInvites: number;
  departments: { [key: string]: number };
  roles: { [key: string]: number };
}

export default function Team() {
  const { user } = useAuth();
  const { 
    members, 
    invitations, 
    stats, 
    isLoading, 
    inviteMember, 
    isInviting, 
    removeMember, 
    isRemoving,
    resendInvitation,
    isResending,
    cancelInvitation,
    isCancelling
  } = useTeam();
  const { toast } = useToast();
  const [searchTerm, setSearchTerm] = useState('');
  const [filterRole, setFilterRole] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [isInviteDialogOpen, setIsInviteDialogOpen] = useState(false);
  const [inviteEmail, setInviteEmail] = useState('');
  const [inviteRole, setInviteRole] = useState<'admin' | 'member' | 'viewer'>('member');
  const [inviteMessage, setInviteMessage] = useState('');

  // Loading state
  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </div>
    );
  }

  const getRoleIcon = (role: string) => {
    switch (role) {
      case 'owner': return <Crown className="h-4 w-4 text-yellow-500" />;
      case 'admin': return <Shield className="h-4 w-4 text-blue-500" />;
      case 'member': return <User className="h-4 w-4 text-green-500" />;
      case 'viewer': return <User className="h-4 w-4 text-gray-500" />;
      default: return <User className="h-4 w-4" />;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active': return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200"><CheckCircle className="h-3 w-3 mr-1" />Active</Badge>;
      case 'pending': return <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200"><Clock className="h-3 w-3 mr-1" />Pending</Badge>;
      case 'inactive': return <Badge variant="outline" className="bg-gray-50 text-gray-700 border-gray-200"><XCircle className="h-3 w-3 mr-1" />Inactive</Badge>;
      default: return <Badge variant="outline">Unknown</Badge>;
    }
  };

  const filteredMembers = members?.filter(member => {
    const matchesSearch = member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         member.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         member.department?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesRole = filterRole === 'all' || member.role === filterRole;
    const matchesStatus = filterStatus === 'all' || member.status === filterStatus;
    
    return matchesSearch && matchesRole && matchesStatus;
  }) || [];

  const handleSendInvite = () => {
    if (!inviteEmail || !inviteRole) {
      toast({
        title: "Error",
        description: "Please fill in all required fields.",
        variant: "destructive",
      });
      return;
    }

    inviteMember({
      email: inviteEmail,
      role: inviteRole,
      message: inviteMessage
    });

    setInviteEmail('');
    setInviteMessage('');
    setIsInviteDialogOpen(false);
  };

  const handleRemoveMember = (memberId: string) => {
    removeMember(memberId);
  };

  const handleResendInvite = (inviteId: string) => {
    resendInvitation(inviteId);
  };

  const handleCancelInvite = (inviteId: string) => {
    cancelInvitation(inviteId);
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl">
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Team Management</h1>
            <p className="text-gray-600 mt-1">Manage your team members, roles, and permissions</p>
          </div>
          <Dialog open={isInviteDialogOpen} onOpenChange={setIsInviteDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <UserPlus className="h-4 w-4 mr-2" />
                Invite Member
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Invite Team Member</DialogTitle>
                <DialogDescription>
                  Send an invitation to join your team
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="email">Email Address</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="colleague@company.com"
                    value={inviteEmail}
                    onChange={(e) => setInviteEmail(e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="role">Role</Label>
                  <Select value={inviteRole} onValueChange={(value: any) => setInviteRole(value)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="admin">Admin</SelectItem>
                      <SelectItem value="member">Member</SelectItem>
                      <SelectItem value="viewer">Viewer</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="message">Personal Message (Optional)</Label>
                  <Textarea
                    id="message"
                    placeholder="Add a personal message to the invitation..."
                    value={inviteMessage}
                    onChange={(e) => setInviteMessage(e.target.value)}
                    rows={3}
                  />
                </div>
                <div className="flex justify-end space-x-2">
                  <Button variant="outline" onClick={() => setIsInviteDialogOpen(false)}>
                    Cancel
                  </Button>
                  <Button onClick={handleSendInvite}>
                    Send Invitation
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <Users className="h-8 w-8 text-blue-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total Members</p>
                  <p className="text-2xl font-bold">{stats?.totalMembers || 0}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <CheckCircle className="h-8 w-8 text-green-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Active</p>
                  <p className="text-2xl font-bold">{stats?.activeMembers || 0}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <Clock className="h-8 w-8 text-yellow-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Pending</p>
                  <p className="text-2xl font-bold">{stats?.pendingInvites || 0}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <Building className="h-8 w-8 text-purple-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Departments</p>
                  <p className="text-2xl font-bold">{Object.keys(stats?.departments || {}).length}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="members" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="members">Members</TabsTrigger>
            <TabsTrigger value="invitations">Invitations</TabsTrigger>
            <TabsTrigger value="departments">Departments</TabsTrigger>
            <TabsTrigger value="settings">Settings</TabsTrigger>
          </TabsList>

          {/* Members Tab */}
          <TabsContent value="members" className="space-y-6">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Team Members</CardTitle>
                    <CardDescription>
                      Manage your team members and their roles
                    </CardDescription>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                      <Input
                        placeholder="Search members..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10 w-64"
                      />
                    </div>
                    <Select value={filterRole} onValueChange={setFilterRole}>
                      <SelectTrigger className="w-32">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Roles</SelectItem>
                        <SelectItem value="owner">Owner</SelectItem>
                        <SelectItem value="admin">Admin</SelectItem>
                        <SelectItem value="member">Member</SelectItem>
                        <SelectItem value="viewer">Viewer</SelectItem>
                      </SelectContent>
                    </Select>
                    <Select value={filterStatus} onValueChange={setFilterStatus}>
                      <SelectTrigger className="w-32">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Status</SelectItem>
                        <SelectItem value="active">Active</SelectItem>
                        <SelectItem value="pending">Pending</SelectItem>
                        <SelectItem value="inactive">Inactive</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {filteredMembers.map((member) => (
                    <div key={member.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
                      <div className="flex items-center space-x-4">
                        <Avatar className="h-12 w-12">
                          <AvatarImage src={member.avatar} />
                          <AvatarFallback>
                            {member.name.split(' ').map(n => n[0]).join('')}
                          </AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2">
                            <h3 className="font-semibold">{member.name}</h3>
                            {getRoleIcon(member.role)}
                            {getStatusBadge(member.status)}
                          </div>
                          <p className="text-sm text-gray-600">{member.email}</p>
                          <div className="flex items-center space-x-4 text-sm text-gray-500">
                            {member.department && (
                              <span className="flex items-center">
                                <Building className="h-4 w-4 mr-1" />
                                {member.department}
                              </span>
                            )}
                            {member.location && (
                              <span className="flex items-center">
                                <MapPin className="h-4 w-4 mr-1" />
                                {member.location}
                              </span>
                            )}
                            <span>Joined {new Date(member.joinedAt).toLocaleDateString()}</span>
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="sm">
                              <MoreVertical className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuLabel>Actions</DropdownMenuLabel>
                            <DropdownMenuItem>
                              <Edit className="h-4 w-4 mr-2" />
                              Edit Member
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <MessageSquare className="h-4 w-4 mr-2" />
                              Send Message
                            </DropdownMenuItem>
                            <DropdownMenuSeparator />
                            <DropdownMenuItem 
                              className="text-red-600"
                              onClick={() => handleRemoveMember(member.id)}
                            >
                              <Trash2 className="h-4 w-4 mr-2" />
                              Remove Member
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Invitations Tab */}
          <TabsContent value="invitations" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Pending Invitations</CardTitle>
                <CardDescription>
                  Manage team invitations and their status
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {invitations.map((invite) => (
                    <div key={invite.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex items-center space-x-4">
                        <div className="h-12 w-12 rounded-full bg-gray-100 flex items-center justify-center">
                          <Mail className="h-6 w-6 text-gray-400" />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2">
                            <h3 className="font-semibold">{invite.email}</h3>
                            <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200">
                              {invite.status}
                            </Badge>
                          </div>
                          <p className="text-sm text-gray-600">
                            Invited by {invite.invitedBy} ‚Ä¢ {new Date(invite.invitedAt).toLocaleDateString()}
                          </p>
                          <p className="text-sm text-gray-500">
                            Role: {invite.role} ‚Ä¢ Expires: {new Date(invite.expiresAt).toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Button variant="outline" size="sm" onClick={() => handleResendInvite(invite.id)}>
                          Resend
                        </Button>
                        <Button variant="outline" size="sm" onClick={() => handleCancelInvite(invite.id)}>
                          Cancel
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Departments Tab */}
          <TabsContent value="departments" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {Object.entries(stats?.departments || {}).map(([department, count]) => (
                <Card key={department}>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="font-semibold">{department}</h3>
                        <p className="text-2xl font-bold text-blue-600">{count}</p>
                        <p className="text-sm text-gray-500">members</p>
                      </div>
                      <Building className="h-8 w-8 text-blue-600" />
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Settings Tab */}
          <TabsContent value="settings" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Team Settings</CardTitle>
                <CardDescription>
                  Configure team-wide settings and permissions
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="team-name">Team Name</Label>
                    <Input id="team-name" defaultValue="My Startup Team" />
                  </div>
                  <div>
                    <Label htmlFor="team-description">Team Description</Label>
                    <Textarea 
                      id="team-description" 
                      defaultValue="Our amazing startup team working together to build the future."
                      rows={3}
                    />
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="invite-expiry">Invitation Expiry (days)</Label>
                      <Input id="invite-expiry" type="number" defaultValue="7" />
                    </div>
                    <div>
                      <Label htmlFor="max-members">Maximum Members</Label>
                      <Input id="max-members" type="number" defaultValue="50" />
                    </div>
                  </div>
                </div>
                <div className="flex justify-end">
                  <Button>Save Settings</Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}


=== FILE: client/src/pages/investor-dashboard.tsx ===

import React, { useState } from 'react';
import { Link } from 'wouter';
import { useQuery } from '@tanstack/react-query';
import { 
  Building2, TrendingUp, DollarSign, Users, Search, 
  Filter, PieChart, Map, Briefcase, Clock, ArrowRight, 
  Award, CheckCircle, AlertCircle
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';

interface StartupDeal {
  id: number;
  name: string;
  logo: string;
  industry: string;
  stage: string;
  location: string;
  foundedYear: number;
  raised: number;
  targetRaise: number;
  valuation: number;
  revenue: number;
  growth: number;
  team: number;
  highlights: string[];
  riskScore: number;
  matchScore: number;
  status: 'new' | 'reviewing' | 'due-diligence' | 'negotiating' | 'invested' | 'passed';
  lastActivity: string; // ISO date string
}

interface Investment {
  id: number;
  startupId: number;
  startupName: string;
  amount: number;
  sharePercent: number;
  date: string; // ISO date string
  valuation: number;
  currentValuation: number;
  kpis: {
    revenue: number[];
    users: number[];
    growth: number[];
  }
}

function InvestorDashboard() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);
  const [selectedStages, setSelectedStages] = useState<string[]>([]);
  const [selectedStatuses, setSelectedStatuses] = useState<string[]>([]);

  // Fetch investor profile
  const { data: investor, isLoading: isLoadingInvestor } = useQuery({
    queryKey: ['/api/investor/profile'],
    enabled: false // Disabled for demo
  });
  
  // Fetch portfolios data
  const { data: portfolios, isLoading: isLoadingPortfolios } = useQuery({
    queryKey: ['/api/portfolios'],
    staleTime: 0
  });
  
  // Fetch investments data
  const { data: investmentData, isLoading: isLoadingInvestments } = useQuery({
    queryKey: ['/api/investments/investor/2'],
    staleTime: 0
  });
  
  // Simulated data
  const deals: StartupDeal[] = [
    {
      id: 1,
      name: "TechInnovate",
      logo: "https://via.placeholder.com/40",
      industry: "SaaS",
      stage: "Seed",
      location: "San Francisco, CA",
      foundedYear: 2021,
      raised: 250000,
      targetRaise: 2000000,
      valuation: 8000000,
      revenue: 540000,
      growth: 127,
      team: 8,
      highlights: ["3x revenue growth YoY", "Enterprise clients include Fortune 500", "Proprietary AI algorithm"],
      riskScore: 65,
      matchScore: 92,
      status: 'new',
      lastActivity: '2023-11-20T15:32:00Z'
    },
    {
      id: 2,
      name: "HealthTech Solutions",
      logo: "https://via.placeholder.com/40",
      industry: "HealthTech",
      stage: "Series A",
      location: "Boston, MA",
      foundedYear: 2020,
      raised: 1500000,
      targetRaise: 7000000,
      valuation: 25000000,
      revenue: 1800000,
      growth: 85,
      team: 15,
      highlights: ["FDA approval for main product", "75% customer retention rate", "8 pending patents"],
      riskScore: 45,
      matchScore: 87,
      status: 'reviewing',
      lastActivity: '2023-11-18T09:20:00Z'
    },
    {
      id: 3,
      name: "GreenCommerce",
      logo: "https://via.placeholder.com/40",
      industry: "E-commerce",
      stage: "Seed",
      location: "Austin, TX",
      foundedYear: 2022,
      raised: 150000,
      targetRaise: 1500000,
      valuation: 5000000,
      revenue: 320000,
      growth: 210,
      team: 6,
      highlights: ["Carbon-neutral operations", "15K monthly active users", "B Corp certified"],
      riskScore: 72,
      matchScore: 84,
      status: 'due-diligence',
      lastActivity: '2023-11-15T17:45:00Z'
    },
    {
      id: 4,
      name: "FinEdge",
      logo: "https://via.placeholder.com/40",
      industry: "FinTech",
      stage: "Series A",
      location: "New York, NY",
      foundedYear: 2019,
      raised: 3000000,
      targetRaise: 10000000,
      valuation: 40000000,
      revenue: 2500000,
      growth: 68,
      team: 23,
      highlights: ["Banking partnerships with top 5 banks", "Regulatory approvals in 18 states", "180K users"],
      riskScore: 38,
      matchScore: 91,
      status: 'negotiating',
      lastActivity: '2023-11-21T11:30:00Z'
    },
    {
      id: 5,
      name: "RoboFlow",
      logo: "https://via.placeholder.com/40",
      industry: "Robotics",
      stage: "Series B",
      location: "Seattle, WA",
      foundedYear: 2018,
      raised: 12000000,
      targetRaise: 25000000,
      valuation: 120000000,
      revenue: 8500000,
      growth: 42,
      team: 47,
      highlights: ["Industrial automation for Fortune 1000", "93% reduction in manufacturing errors", "12 patents"],
      riskScore: 32,
      matchScore: 76,
      status: 'invested',
      lastActivity: '2023-11-10T14:15:00Z'
    }
  ];

  // Sample investment data for now - will be replaced by API data
  const mockInvestments: Investment[] = [
    {
      id: 1,
      startupId: 5,
      startupName: "RoboFlow",
      amount: 2000000,
      sharePercent: 4.5,
      date: '2022-06-15T00:00:00Z',
      valuation: 44000000,
      currentValuation: 120000000,
      kpis: {
        revenue: [4200000, 5800000, 6900000, 8500000],
        users: [120, 185, 210, 260],
        growth: [52, 38, 19, 23]
      }
    },
    {
      id: 2,
      startupId: 6,
      startupName: "CloudSecure",
      amount: 500000,
      sharePercent: 8.2,
      date: '2021-09-10T00:00:00Z',
      valuation: 6100000,
      currentValuation: 22000000,
      kpis: {
        revenue: [380000, 920000, 1600000, 2400000],
        users: [1200, 5800, 9200, 13500],
        growth: [142, 74, 47, 32]
      }
    },
    {
      id: 3,
      startupId: 7,
      startupName: "EduSpark",
      amount: 750000,
      sharePercent: 12.0,
      date: '2021-03-22T00:00:00Z',
      valuation: 6250000,
      currentValuation: 15000000,
      kpis: {
        revenue: [250000, 680000, 1200000, 1750000],
        users: [5000, 12000, 28000, 42000],
        growth: [175, 132, 75, 46]
      }
    }
  ];

  // Simulated industries and stages for filtering
  const industries = ["SaaS", "HealthTech", "E-commerce", "FinTech", "Robotics", "AI", "CleanTech"];
  const stages = ["Pre-seed", "Seed", "Series A", "Series B", "Series C", "Growth"];
  const statuses = ["new", "reviewing", "due-diligence", "negotiating", "invested", "passed"];

  // Apply filters
  const filteredDeals = deals
    .filter(deal => 
      (searchQuery === '' || 
       deal.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
       deal.industry.toLowerCase().includes(searchQuery.toLowerCase()))
    )
    .filter(deal => 
      (selectedIndustries.length === 0 || 
       selectedIndustries.includes(deal.industry))
    )
    .filter(deal => 
      (selectedStages.length === 0 || 
       selectedStages.includes(deal.stage))
    )
    .filter(deal => 
      (selectedStatuses.length === 0 || 
       selectedStatuses.includes(deal.status))
    )
    .sort((a, b) => b.matchScore - a.matchScore);

  // Portfolio metrics
  const portfolioValue = mockInvestments.reduce((sum, inv) => sum + inv.currentValuation * (inv.sharePercent / 100), 0);
  const totalInvested = mockInvestments.reduce((sum, inv) => sum + inv.amount, 0);
  const roi = (portfolioValue - totalInvested) / totalInvested * 100;

  if (isLoadingInvestor || isLoadingPortfolios || isLoadingInvestments) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    } else {
      return `$${amount}`;
    }
  };

  const getStatusBadge = (status: string) => {
    switch(status) {
      case 'new':
        return <Badge variant="outline" className="bg-blue-50 text-blue-600 border-blue-200">New</Badge>;
      case 'reviewing':
        return <Badge variant="outline" className="bg-purple-50 text-purple-600 border-purple-200">Reviewing</Badge>;
      case 'due-diligence':
        return <Badge variant="outline" className="bg-amber-50 text-amber-600 border-amber-200">Due Diligence</Badge>;
      case 'negotiating':
        return <Badge variant="outline" className="bg-indigo-50 text-indigo-600 border-indigo-200">Negotiating</Badge>;
      case 'invested':
        return <Badge variant="outline" className="bg-green-50 text-green-600 border-green-200">Invested</Badge>;
      case 'passed':
        return <Badge variant="outline" className="bg-gray-50 text-gray-600 border-gray-200">Passed</Badge>;
      default:
        return null;
    }
  };

  return (
    <div className="space-y-8">
      <div className="bg-white rounded-lg shadow-sm p-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-2">
          Investor Dashboard
        </h1>
        <p className="text-gray-600">
          Manage your deal flow, track investments, and analyze portfolio performance
        </p>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-500">Portfolio Value</p>
                <p className="text-2xl font-bold text-gray-800">{formatCurrency(portfolioValue)}</p>
              </div>
              <div className="h-12 w-12 bg-blue-50 rounded-full flex items-center justify-center">
                <DollarSign className="h-6 w-6 text-blue-600" />
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-500">Total Invested</p>
                <p className="text-2xl font-bold text-gray-800">{formatCurrency(totalInvested)}</p>
              </div>
              <div className="h-12 w-12 bg-indigo-50 rounded-full flex items-center justify-center">
                <Briefcase className="h-6 w-6 text-indigo-600" />
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-500">ROI</p>
                <p className="text-2xl font-bold text-gray-800">{roi.toFixed(1)}%</p>
              </div>
              <div className="h-12 w-12 bg-green-50 rounded-full flex items-center justify-center">
                <TrendingUp className="h-6 w-6 text-green-600" />
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-500">Active Investments</p>
                <p className="text-2xl font-bold text-gray-800">{mockInvestments.length}</p>
              </div>
              <div className="h-12 w-12 bg-amber-50 rounded-full flex items-center justify-center">
                <Building2 className="h-6 w-6 text-amber-600" />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="dealflow">
        <TabsList className="w-full grid grid-cols-3">
          <TabsTrigger value="dealflow">Deal Flow</TabsTrigger>
          <TabsTrigger value="portfolio">Portfolio</TabsTrigger>
          <TabsTrigger value="duediligence">Due Diligence</TabsTrigger>
        </TabsList>
        
        {/* Deal Flow Tab */}
        <TabsContent value="dealflow" className="pt-6">
          <div className="bg-white rounded-lg shadow-sm p-6">
            <div className="flex flex-col md:flex-row gap-4 mb-6">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search startups by name or industry..."
                    className="pl-10"
                    value={searchQuery}
                    onChange={e => setSearchQuery(e.target.value)}
                  />
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Filter className="h-4 w-4 text-gray-400" />
                <span className="text-sm text-gray-600">Filters:</span>
              </div>
            </div>

            <div className="grid grid-cols-3 gap-4 mb-6">
              <div>
                <p className="text-sm text-gray-600 mb-2">Industry</p>
                <div className="flex flex-wrap gap-2">
                  {industries.map(industry => (
                    <Badge
                      key={industry}
                      variant={selectedIndustries.includes(industry) ? "default" : "outline"}
                      className="cursor-pointer"
                      onClick={() => {
                        if (selectedIndustries.includes(industry)) {
                          setSelectedIndustries(selectedIndustries.filter(i => i !== industry));
                        } else {
                          setSelectedIndustries([...selectedIndustries, industry]);
                        }
                      }}
                    >
                      {industry}
                    </Badge>
                  ))}
                </div>
              </div>
              <div>
                <p className="text-sm text-gray-600 mb-2">Stage</p>
                <div className="flex flex-wrap gap-2">
                  {stages.map(stage => (
                    <Badge
                      key={stage}
                      variant={selectedStages.includes(stage) ? "default" : "outline"}
                      className="cursor-pointer"
                      onClick={() => {
                        if (selectedStages.includes(stage)) {
                          setSelectedStages(selectedStages.filter(s => s !== stage));
                        } else {
                          setSelectedStages([...selectedStages, stage]);
                        }
                      }}
                    >
                      {stage}
                    </Badge>
                  ))}
                </div>
              </div>
              <div>
                <p className="text-sm text-gray-600 mb-2">Status</p>
                <div className="flex flex-wrap gap-2">
                  {statuses.map(status => (
                    <Badge
                      key={status}
                      variant={selectedStatuses.includes(status) ? "default" : "outline"}
                      className="cursor-pointer"
                      onClick={() => {
                        if (selectedStatuses.includes(status)) {
                          setSelectedStatuses(selectedStatuses.filter(s => s !== status));
                        } else {
                          setSelectedStatuses([...selectedStatuses, status]);
                        }
                      }}
                    >
                      {status.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                    </Badge>
                  ))}
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredDeals.map(deal => (
                <Card key={deal.id} className={`border-l-4 ${deal.matchScore >= 90 ? 'border-l-green-500' : deal.matchScore >= 80 ? 'border-l-blue-500' : 'border-l-gray-300'}`}>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <div className="flex items-center space-x-4">
                      <div className="h-12 w-12 rounded-full bg-gray-200 flex items-center justify-center">
                        <Building2 className="h-6 w-6 text-gray-600" />
                      </div>
                      <div>
                        <CardTitle className="text-lg">{deal.name}</CardTitle>
                        <CardDescription className="flex items-center gap-2">
                          <Badge variant="secondary">{deal.industry}</Badge>
                          <Badge variant="outline">{deal.stage}</Badge>
                          {getStatusBadge(deal.status)}
                        </CardDescription>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-blue-600">{deal.matchScore}%</div>
                      <div className="text-xs text-gray-500">Match Score</div>
                    </div>
                  </CardHeader>
                  <CardContent className="py-2">
                    <div className="grid grid-cols-3 gap-2 text-sm mb-3">
                      <div>
                        <div className="text-gray-500">Valuation</div>
                        <div className="font-semibold">{formatCurrency(deal.valuation)}</div>
                      </div>
                      <div>
                        <div className="text-gray-500">Revenue</div>
                        <div className="font-semibold">{formatCurrency(deal.revenue)}</div>
                      </div>
                      <div>
                        <div className="text-gray-500">Growth</div>
                        <div className="font-semibold text-green-600">+{deal.growth}%</div>
                      </div>
                    </div>
                    
                    <div className="mb-3">
                      <div className="flex justify-between text-sm mb-1">
                        <span>Raise Progress</span>
                        <span>{formatCurrency(deal.raised)} of {formatCurrency(deal.targetRaise)}</span>
                      </div>
                      <Progress value={(deal.raised / deal.targetRaise) * 100} className="h-2" />
                    </div>
                    
                    <div className="space-y-1">
                      {deal.highlights.slice(0, 2).map((highlight, idx) => (
                        <div key={idx} className="flex items-center text-xs text-gray-600">
                          <CheckCircle className="h-3 w-3 text-green-500 mr-2" />
                          {highlight}
                        </div>
                      ))}
                    </div>
                  </CardContent>
                  <CardFooter className="flex justify-between">
                    <div className="flex items-center">
                      <Map className="h-4 w-4 text-gray-400 mr-1" />
                      <span className="text-xs text-gray-600">{deal.location}</span>
                    </div>
                    <Link href={`/startup/${deal.id}`}>
                      <Button>View Details <ArrowRight className="ml-2 h-4 w-4" /></Button>
                    </Link>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </div>
        </TabsContent>
        
        {/* Portfolio Tab */}
        <TabsContent value="portfolio" className="pt-6">
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4">
              Your Investment Portfolio
            </h2>
            
            <div className="grid grid-cols-1 gap-4">
              {mockInvestments.map(investment => (
                <Card key={investment.id}>
                  <CardHeader className="pb-2">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="h-12 w-12 rounded-full bg-gray-200 flex items-center justify-center">
                          <Building2 className="h-6 w-6 text-gray-600" />
                        </div>
                        <div>
                          <CardTitle>{investment.startupName}</CardTitle>
                          <CardDescription>Invested: {new Date(investment.date).toLocaleDateString()}</CardDescription>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-semibold">
                          {investment.sharePercent}% Equity
                        </div>
                        <div className="text-sm text-gray-500">
                          {formatCurrency(investment.amount)} invested
                        </div>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div>
                        <div className="text-gray-500 text-sm">Initial Valuation</div>
                        <div className="font-semibold">{formatCurrency(investment.valuation)}</div>
                      </div>
                      <div>
                        <div className="text-gray-500 text-sm">Current Valuation</div>
                        <div className="font-semibold">{formatCurrency(investment.currentValuation)}</div>
                      </div>
                      <div>
                        <div className="text-gray-500 text-sm">Value of Your Shares</div>
                        <div className="font-semibold">
                          {formatCurrency(investment.currentValuation * (investment.sharePercent / 100))}
                        </div>
                      </div>
                      <div>
                        <div className="text-gray-500 text-sm">Return</div>
                        <div className="font-semibold text-green-600">
                          {(((investment.currentValuation * (investment.sharePercent / 100)) / investment.amount) - 1) * 100}%
                        </div>
                      </div>
                    </div>
                    
                    <div className="border-t pt-4">
                      <h3 className="text-sm font-medium text-gray-700 mb-2">Key Performance Indicators</h3>
                      <div className="grid grid-cols-3 gap-4">
                        <div>
                          <div className="text-gray-500 text-sm mb-1">Revenue (Quarterly)</div>
                          <div className="flex items-center gap-2">
                            <span className="font-semibold">{formatCurrency(investment.kpis.revenue[investment.kpis.revenue.length - 1])}</span>
                            <span className="text-xs text-green-600">
                              +{Math.round((investment.kpis.revenue[investment.kpis.revenue.length - 1] / investment.kpis.revenue[investment.kpis.revenue.length - 2] - 1) * 100)}%
                            </span>
                          </div>
                        </div>
                        <div>
                          <div className="text-gray-500 text-sm mb-1">Customers/Users</div>
                          <div className="flex items-center gap-2">
                            <span className="font-semibold">{investment.kpis.users[investment.kpis.users.length - 1]}</span>
                            <span className="text-xs text-green-600">
                              +{Math.round((investment.kpis.users[investment.kpis.users.length - 1] / investment.kpis.users[investment.kpis.users.length - 2] - 1) * 100)}%
                            </span>
                          </div>
                        </div>
                        <div>
                          <div className="text-gray-500 text-sm mb-1">Growth Rate</div>
                          <div className="flex items-center gap-2">
                            <span className="font-semibold">{investment.kpis.growth[investment.kpis.growth.length - 1]}%</span>
                            <span className="text-xs text-amber-600">
                              {investment.kpis.growth[investment.kpis.growth.length - 1] > investment.kpis.growth[investment.kpis.growth.length - 2] ? '‚Üë' : '‚Üì'}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter className="justify-end">
                    <Link href={`/portfolio/${investment.startupId}`}>
                      <Button variant="outline">View Details</Button>
                    </Link>
                    <Button className="ml-2">Schedule Call</Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </div>
        </TabsContent>
        
        {/* Due Diligence Tab */}
        <TabsContent value="duediligence" className="pt-6">
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4">
              Due Diligence Tools
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <PieChart className="h-5 w-5 mr-2 text-blue-600" />
                    Financial Health Scores
                  </CardTitle>
                  <CardDescription>
                    Analyze financial statements and metrics
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600 mb-4">
                    Automatically evaluate burn rate, runway, unit economics, and financial projections.
                  </p>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Liquidity Ratio</span>
                      <span className="text-sm font-medium">83%</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Cash Runway</span>
                      <span className="text-sm font-medium">14 months</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">CAC/LTV Ratio</span>
                      <span className="text-sm font-medium">1:4.2</span>
                    </div>
                  </div>
                </CardContent>
                <CardFooter>
                  <Button className="w-full">Run Analysis</Button>
                </CardFooter>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Users className="h-5 w-5 mr-2 text-indigo-600" />
                    Founder Background Check
                  </CardTitle>
                  <CardDescription>
                    Verify founder credentials and history
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600 mb-4">
                    Perform comprehensive background checks on founding team members and executives.
                  </p>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Identity Verification</span>
                      <CheckCircle className="h-4 w-4 text-green-500" />
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Criminal History</span>
                      <CheckCircle className="h-4 w-4 text-green-500" />
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Education Verification</span>
                      <AlertCircle className="h-4 w-4 text-amber-500" />
                    </div>
                  </div>
                </CardContent>
                <CardFooter>
                  <Button className="w-full">Request Check</Button>
                </CardFooter>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <TrendingUp className="h-5 w-5 mr-2 text-green-600" />
                    ROI Simulator
                  </CardTitle>
                  <CardDescription>
                    Project investment returns
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600 mb-4">
                    Run simulations on potential investments with different scenarios and exit strategies.
                  </p>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Conservative Return</span>
                      <span className="text-sm font-medium">2.8x</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Moderate Return</span>
                      <span className="text-sm font-medium">5.2x</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Optimistic Return</span>
                      <span className="text-sm font-medium">12.4x</span>
                    </div>
                  </div>
                </CardContent>
                <CardFooter>
                  <Button className="w-full">Run Simulation</Button>
                </CardFooter>
              </Card>
            </div>
            
            <div className="mt-6">
              <h3 className="text-lg font-semibold mb-4">Active Due Diligence</h3>
              <Card>
                <CardContent className="p-0">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left py-3 px-4 font-medium text-gray-600">Company</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-600">Stage</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-600">Started</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-600">Completion</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-600">Status</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-600">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr className="border-b">
                        <td className="py-4 px-4">
                          <div className="flex items-center">
                            <div className="h-8 w-8 rounded-full bg-gray-200 mr-2 flex items-center justify-center">
                              <Building2 className="h-4 w-4 text-gray-600" />
                            </div>
                            <span className="font-medium">FinEdge</span>
                          </div>
                        </td>
                        <td className="py-4 px-4">Series A</td>
                        <td className="py-4 px-4">Nov 15, 2023</td>
                        <td className="py-4 px-4">
                          <Progress value={65} className="h-2 w-24" />
                          <span className="text-xs text-gray-500">65%</span>
                        </td>
                        <td className="py-4 px-4">
                          <Badge variant="outline" className="bg-amber-50 text-amber-600 border-amber-200">In Progress</Badge>
                        </td>
                        <td className="py-4 px-4">
                          <Button variant="outline" size="sm">Continue</Button>
                        </td>
                      </tr>
                      <tr className="border-b">
                        <td className="py-4 px-4">
                          <div className="flex items-center">
                            <div className="h-8 w-8 rounded-full bg-gray-200 mr-2 flex items-center justify-center">
                              <Building2 className="h-4 w-4 text-gray-600" />
                            </div>
                            <span className="font-medium">GreenCommerce</span>
                          </div>
                        </td>
                        <td className="py-4 px-4">Seed</td>
                        <td className="py-4 px-4">Nov 10, 2023</td>
                        <td className="py-4 px-4">
                          <Progress value={85} className="h-2 w-24" />
                          <span className="text-xs text-gray-500">85%</span>
                        </td>
                        <td className="py-4 px-4">
                          <Badge variant="outline" className="bg-indigo-50 text-indigo-600 border-indigo-200">Near Complete</Badge>
                        </td>
                        <td className="py-4 px-4">
                          <Button variant="outline" size="sm">Continue</Button>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}

export default InvestorDashboard;

=== FILE: client/src/pages/login.tsx ===


import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { GoogleSignIn } from "@/components/GoogleSignIn";
import { Building, FileText, TrendingUp, Users } from "lucide-react";

export default function Login() {

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <Card className="shadow-xl">
          <CardHeader className="text-center space-y-4">
            <div className="mx-auto w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center">
              <FileText className="h-6 w-6 text-white" />
            </div>
            <div>
              <CardTitle className="text-2xl font-bold">Welcome to IterativStartups</CardTitle>
              <CardDescription className="text-gray-600 mt-2">
                Your strategic documents platform for startup success
              </CardDescription>
            </div>
          </CardHeader>
          
          <CardContent className="space-y-6">
            <div className="grid grid-cols-2 gap-4 text-center">
              <div className="space-y-2">
                <Building className="h-8 w-8 mx-auto text-blue-600" />
                <p className="text-sm text-gray-600">Business Plans</p>
              </div>
              <div className="space-y-2">
                <FileText className="h-8 w-8 mx-auto text-green-600" />
                <p className="text-sm text-gray-600">Proposals</p>
              </div>
              <div className="space-y-2">
                <TrendingUp className="h-8 w-8 mx-auto text-purple-600" />
                <p className="text-sm text-gray-600">Pitch Decks</p>
              </div>
              <div className="space-y-2">
                <Users className="h-8 w-8 mx-auto text-orange-600" />
                <p className="text-sm text-gray-600">Applications</p>
              </div>
            </div>

            <div className="space-y-4">
              <GoogleSignIn />
            </div>

            <p className="text-xs text-center text-gray-500">
              By signing in, you agree to our Terms of Service and Privacy Policy
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


=== FILE: client/src/pages/dashboard.tsx ===

export default function Dashboard() {
  console.log("üìä Minimal Dashboard rendering...");
  return (
    <div style={{ padding: 24 }}>
      <h1 style={{ fontSize: 24, marginBottom: 8 }}>Dashboard</h1>
      <p>React is rendering correctly. This is a minimal dashboard page.</p>
    </div>
  );
}

=== FILE: client/src/pages/lender-dashboard.tsx ===


import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  DollarSign, 
  TrendingUp, 
  Shield, 
  AlertTriangle,
  CheckCircle,
  Clock,
  Users,
  BarChart3,
  FileText,
  Calculator
} from "lucide-react";

const portfolioStats = [
  { label: "Active Loans", value: "127", icon: FileText, color: "text-blue-600" },
  { label: "Portfolio Value", value: "$12.4M", icon: DollarSign, color: "text-green-600" },
  { label: "Default Rate", value: "2.3%", icon: AlertTriangle, color: "text-red-600" },
  { label: "Avg Interest", value: "8.5%", icon: TrendingUp, color: "text-purple-600" }
];

const pendingApplications = [
  {
    company: "TechFlow Solutions",
    amount: "$250,000",
    type: "Term Loan",
    creditScore: 720,
    dscr: 1.8,
    status: "Under Review",
    days: 5
  },
  {
    company: "Green Energy Co",
    amount: "$500,000", 
    type: "Equipment Financing",
    creditScore: 680,
    dscr: 2.1,
    status: "Pending Approval",
    days: 12
  }
];

export default function LenderDashboard() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50">
      <div className="container mx-auto py-8 px-4">
        <div className="mb-8">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent mb-2">
            Lender Dashboard üè¶
          </h1>
          <p className="text-gray-600">
            Manage your loan portfolio and evaluate new applications
          </p>
        </div>

        {/* Portfolio Overview */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          {portfolioStats.map((stat, index) => {
            const IconComponent = stat.icon;
            return (
              <Card key={index}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">{stat.label}</p>
                      <p className="text-2xl font-bold">{stat.value}</p>
                    </div>
                    <IconComponent className={`h-8 w-8 ${stat.color}`} />
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        <Tabs defaultValue="applications" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="applications">Applications</TabsTrigger>
            <TabsTrigger value="portfolio">Portfolio</TabsTrigger>
            <TabsTrigger value="risk">Risk Analysis</TabsTrigger>
            <TabsTrigger value="tools">Lending Tools</TabsTrigger>
          </TabsList>

          <TabsContent value="applications">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Pending Applications
                </CardTitle>
                <CardDescription>Review and process loan applications</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {pendingApplications.map((app, index) => (
                    <div key={index} className="p-4 border rounded-lg">
                      <div className="flex justify-between items-start mb-3">
                        <div>
                          <h3 className="font-semibold">{app.company}</h3>
                          <p className="text-sm text-gray-600">{app.type}</p>
                        </div>
                        <div className="text-right">
                          <p className="font-semibold text-green-600">{app.amount}</p>
                          <Badge variant="outline">{app.status}</Badge>
                        </div>
                      </div>
                      <div className="grid grid-cols-3 gap-4 text-sm">
                        <div>
                          <span className="text-gray-600">Credit Score:</span>
                          <span className="font-medium ml-2">{app.creditScore}</span>
                        </div>
                        <div>
                          <span className="text-gray-600">DSCR:</span>
                          <span className="font-medium ml-2">{app.dscr}</span>
                        </div>
                        <div>
                          <span className="text-gray-600">Days Pending:</span>
                          <span className="font-medium ml-2">{app.days}</span>
                        </div>
                      </div>
                      <div className="flex gap-2 mt-4">
                        <Button size="sm">Review Application</Button>
                        <Button size="sm" variant="outline">View Documents</Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="portfolio">
            <Card>
              <CardHeader>
                <CardTitle>Loan Portfolio Overview</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <BarChart3 className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Portfolio analytics coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="risk">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  Risk Analysis Tools
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <Shield className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Risk analysis tools coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="tools">
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Calculator className="h-5 w-5" />
                    DSCR Calculator
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600 mb-4">
                    Calculate debt service coverage ratios for loan applications
                  </p>
                  <Button className="w-full">Open Calculator</Button>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <BarChart3 className="h-5 w-5" />
                    Credit Analyzer
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600 mb-4">
                    Automated credit scoring and risk assessment
                  </p>
                  <Button className="w-full">Analyze Credit</Button>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <CheckCircle className="h-5 w-5" />
                    Compliance Checker
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600 mb-4">
                    Ensure regulatory compliance for all loans
                  </p>
                  <Button className="w-full">Check Compliance</Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}


=== FILE: client/src/pages/portfolios.tsx ===

import { useQuery, useMutation } from "@tanstack/react-query";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { 
  Loader2, 
  BarChart2,
  TrendingUp,
  TrendingDown,
  PieChart,
  DollarSign,
  ArrowRight,
  Plus,
  Building,
  Calendar,
  Briefcase
} from "lucide-react";

// Portfolio schema
const portfolioSchema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  description: z.string().optional(),
  organizationId: z.number(),
  totalValue: z.string().optional(),
});

type Portfolio = {
  id: number;
  name: string;
  description: string | null;
  organizationId: number;
  metrics: any;
  totalValue: string | null;
  createdAt: string;
};

// Portfolio Company schema
const portfolioCompanySchema = z.object({
  portfolioId: z.number(),
  businessPlanId: z.number(),
  status: z.string().min(1, { message: "Status is required" }),
  investmentAmount: z.string().optional(),
  equityPercentage: z.string().transform(val => val ? parseFloat(val) : null).optional(),
  cohortId: z.number().nullable().optional(),
});

type PortfolioCompany = {
  id: number;
  portfolioId: number;
  businessPlanId: number;
  cohortId: number | null;
  investmentAmount: string | null;
  equityPercentage: number | null;
  status: string;
  performance: any;
  valuationHistory: any;
  createdAt: string;
  updatedAt: string;
};

function PortfoliosList() {
  // State for selected organization (for demo we'll use a fixed value)
  const organizationId = 2; // Assuming ID 2 is for an investor organization
  const { toast } = useToast();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);

  // Query portfolios
  const { data: portfolios, isLoading } = useQuery({
    queryKey: ['/api/portfolios/organization', organizationId],
    queryFn: () => apiRequest(`/api/portfolios/organization/${organizationId}`),
  });

  // Create portfolio form
  const form = useForm<z.infer<typeof portfolioSchema>>({
    resolver: zodResolver(portfolioSchema),
    defaultValues: {
      name: "",
      description: "",
      organizationId: organizationId,
      totalValue: "",
    },
  });

  // Mutation to create portfolio
  const createPortfolio = useMutation({
    mutationFn: (values: z.infer<typeof portfolioSchema>) => apiRequest('/api/portfolios', {
      method: 'POST',
      body: JSON.stringify(values),
      headers: {
        'Content-Type': 'application/json',
      },
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/portfolios/organization', organizationId] });
      toast({
        title: "Portfolio created",
        description: "The portfolio has been created successfully.",
      });
      setIsCreateDialogOpen(false);
      form.reset();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create portfolio. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Handle form submission
  function onSubmit(values: z.infer<typeof portfolioSchema>) {
    const portfolioData = {
      ...values,
      metrics: {
        totalCompanies: 0,
        averageROI: 0,
        totalInvested: "$0",
        sectorAllocation: {},
        performanceByStage: {},
      }
    };
    createPortfolio.mutate(portfolioData);
  }

  // Get portfolio metrics for display
  const getPortfolioMetrics = (portfolio: Portfolio) => {
    // In a real app, this would come from the API
    if (!portfolio.metrics) {
      return {
        totalCompanies: 0,
        averageROI: "0%",
        totalInvested: "$0",
        sectors: [],
        totalValue: portfolio.totalValue || "$0",
      };
    }

    return {
      totalCompanies: portfolio.metrics.totalCompanies || 0,
      averageROI: portfolio.metrics.averageROI ? `${portfolio.metrics.averageROI}%` : "0%",
      totalInvested: portfolio.metrics.totalInvested || "$0",
      sectors: Object.keys(portfolio.metrics.sectorAllocation || {}),
      totalValue: portfolio.totalValue || "$0",
    };
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
      </div>
    );
  }

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-4xl font-bold">Investment Portfolios</h1>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Create New Portfolio
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[550px]">
            <DialogHeader>
              <DialogTitle>Create New Portfolio</DialogTitle>
              <DialogDescription>
                Create a new investment portfolio to manage your investments.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Portfolio Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Early Stage SaaS" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="A portfolio focused on early-stage SaaS companies..."
                          className="min-h-24"
                          {...field}
                          value={field.value || ""}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="totalValue"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Initial Value (USD)</FormLabel>
                      <FormControl>
                        <Input placeholder="1000000" {...field} value={field.value || ""} />
                      </FormControl>
                      <FormDescription>
                        Enter the initial value of your portfolio in USD.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <DialogFooter>
                  <Button type="submit" disabled={createPortfolio.isPending}>
                    {createPortfolio.isPending && (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    Create Portfolio
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {portfolios && portfolios.length > 0 ? (
          portfolios.map((portfolio: Portfolio) => {
            const metrics = getPortfolioMetrics(portfolio);
            return (
              <Card key={portfolio.id} className="overflow-hidden">
                <CardHeader className="pb-3">
                  <div className="flex justify-between items-start">
                    <CardTitle className="text-xl">{portfolio.name}</CardTitle>
                    <Badge variant="outline" className="font-medium">
                      {metrics.totalCompanies} Companies
                    </Badge>
                  </div>
                  <CardDescription className="text-sm line-clamp-2">
                    {portfolio.description || "No description provided."}
                  </CardDescription>
                </CardHeader>
                <CardContent className="pb-3">
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div className="flex items-center space-x-2">
                      <DollarSign className="h-5 w-5 text-green-500" />
                      <div>
                        <p className="text-sm text-gray-500">Total Value</p>
                        <p className="text-sm font-medium">{metrics.totalValue}</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Briefcase className="h-5 w-5 text-gray-500" />
                      <div>
                        <p className="text-sm text-gray-500">Total Invested</p>
                        <p className="text-sm font-medium">{metrics.totalInvested}</p>
                      </div>
                    </div>
                  </div>
                  <div className="grid grid-cols-1 gap-4">
                    <div className="flex items-center space-x-2">
                      <TrendingUp className="h-5 w-5 text-blue-500" />
                      <div className="flex-1">
                        <div className="flex justify-between">
                          <p className="text-sm text-gray-500">Average ROI</p>
                          <p className="text-sm font-medium">{metrics.averageROI}</p>
                        </div>
                      </div>
                    </div>
                    <div className="bg-gray-50 dark:bg-gray-800 p-2 rounded-md">
                      <p className="text-sm font-medium mb-1">Top Sectors</p>
                      <div className="flex flex-wrap gap-1">
                        {metrics.sectors.length > 0 ? (
                          metrics.sectors.slice(0, 3).map((sector, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {sector}
                            </Badge>
                          ))
                        ) : (
                          <p className="text-xs text-gray-500">No sectors defined</p>
                        )}
                      </div>
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="flex justify-between border-t p-3 pt-3">
                  <Button variant="outline" size="sm">
                    <PieChart className="h-4 w-4 mr-1" />
                    Analytics
                  </Button>
                  <Button size="sm">
                    Manage
                    <ArrowRight className="ml-1 h-4 w-4" />
                  </Button>
                </CardFooter>
              </Card>
            );
          })
        ) : (
          <div className="col-span-3 text-center py-10">
            <p className="text-lg text-gray-500 dark:text-gray-400">
              No portfolios found. Create your first portfolio to get started.
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

function CompanyAnalytics() {
  return (
    <div className="container mx-auto py-10">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-3">
          <Card>
            <CardHeader>
              <CardTitle>Portfolio Performance</CardTitle>
              <CardDescription>
                Overall performance of your portfolio companies over time
              </CardDescription>
            </CardHeader>
            <CardContent className="h-80 flex items-center justify-center">
              <div className="text-center text-gray-500">
                <BarChart2 className="h-16 w-16 mx-auto mb-4 text-gray-300" />
                <p>Analytics visualization coming soon</p>
              </div>
            </CardContent>
          </Card>
        </div>
        
        <Card>
          <CardHeader>
            <CardTitle>Sector Allocation</CardTitle>
          </CardHeader>
          <CardContent className="h-56 flex items-center justify-center">
            <div className="text-center text-gray-500">
              <PieChart className="h-12 w-12 mx-auto mb-4 text-gray-300" />
              <p>Sector chart coming soon</p>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle>Stage Distribution</CardTitle>
          </CardHeader>
          <CardContent className="h-56 flex items-center justify-center">
            <div className="text-center text-gray-500">
              <BarChart2 className="h-12 w-12 mx-auto mb-4 text-gray-300" />
              <p>Stage chart coming soon</p>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle>ROI by Investment Year</CardTitle>
          </CardHeader>
          <CardContent className="h-56 flex items-center justify-center">
            <div className="text-center text-gray-500">
              <TrendingUp className="h-12 w-12 mx-auto mb-4 text-gray-300" />
              <p>ROI chart coming soon</p>
            </div>
          </CardContent>
        </Card>
        
        <div className="lg:col-span-3">
          <Card>
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>Top Performing Companies</CardTitle>
                <Button variant="outline" size="sm">View All</Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-center py-10 text-gray-500">
                <Building className="h-16 w-16 mx-auto mb-4 text-gray-300" />
                <p>Company performance metrics coming soon</p>
                <p className="text-sm mt-2">This feature will display your top performing investments</p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

export default function PortfoliosPage() {
  const tabs = ["Portfolios", "Companies", "Analytics", "Reports"];
  
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-6">Portfolio Management</h1>
      <Tabs defaultValue="Portfolios" className="w-full">
        <TabsList className="grid w-[500px] grid-cols-4 mb-8">
          {tabs.map((tab) => (
            <TabsTrigger key={tab} value={tab}>
              {tab}
            </TabsTrigger>
          ))}
        </TabsList>
        <TabsContent value="Portfolios" className="space-y-4">
          <PortfoliosList />
        </TabsContent>
        <TabsContent value="Companies" className="space-y-4">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Portfolio Companies</h3>
            <p className="text-gray-500 mb-4">This feature is coming soon.</p>
            <Button>Go to Portfolios</Button>
          </div>
        </TabsContent>
        <TabsContent value="Analytics" className="space-y-4">
          <CompanyAnalytics />
        </TabsContent>
        <TabsContent value="Reports" className="space-y-4">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Portfolio Reports</h3>
            <p className="text-gray-500 mb-4">This feature is coming soon.</p>
            <Button>Go to Analytics</Button>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}

=== FILE: client/src/pages/valuation.tsx ===

import React, { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  BarChart,
  TrendingUp,
  DollarSign,
  Activity,
  Users,
  Target,
  Zap,
  Calendar,
  PieChart,
  BarChart2,
  Share2,
  Download,
  Info,
  Briefcase,
  Award,
  LineChart,
  CheckCircle,
  XCircle,
  ArrowUp,
  ArrowDown,
  ReceiptText,
  Network,
  LifeBuoy,
} from "lucide-react";

interface ValuationMetric {
  label: string;
  value: string;
  benchmark?: string;
  trend: number;
  change: string;
  description: string;
  icon: React.ReactNode;
  color?: string;
}

interface ValuationMethod {
  method: string;
  applicability: string;
  description: string;
  result?: string;
}

interface SummaryMetric {
  label: string;
  value: string;
  trend: number;
  change: string;
  description: string;
  icon: React.ReactNode;
}

interface TeamMember {
  name: string;
  role: string;
  experience: string;
  prior_exits: string;
  expertise: string[];
}

// Function to get appropriate icon for each metric based on label
const getIconForMetric = (label: string) => {
  switch (label) {
    case "Valuation":
      return <DollarSign className="h-5 w-5 text-green-500" />;
    case "Revenue Multiple":
      return <BarChart className="h-5 w-5 text-blue-500" />;
    case "Runway":
      return <Activity className="h-5 w-5 text-orange-500" />;
    case "Burn Rate":
      return <TrendingUp className="h-5 w-5 text-red-500" />;
    case "Revenue":
      return <DollarSign className="h-5 w-5 text-green-500" />;
    case "Growth Rate":
      return <TrendingUp className="h-5 w-5 text-blue-500" />;
    case "EBITDA Margin":
      return <ReceiptText className="h-5 w-5 text-purple-500" />;
    case "Active Users":
      return <Users className="h-5 w-5 text-blue-500" />;
    case "Retention Rate":
      return <LifeBuoy className="h-5 w-5 text-green-500" />;
    case "Customer LTV":
      return <PieChart className="h-5 w-5 text-orange-500" />;
    case "CAC":
      return <Target className="h-5 w-5 text-purple-500" />;
    case "Market Size":
      return <Network className="h-5 w-5 text-blue-500" />;
    case "Market Share":
      return <PieChart className="h-5 w-5 text-green-500" />;
    default:
      return <Info className="h-5 w-5 text-gray-500" />;
  }
};

export default function ValuationDashboard() {
  const [industry, setIndustry] = useState("saas");
  const [stage, setStage] = useState("seed");
  const [timeframe, setTimeframe] = useState("quarterly");
  const [dateRange, setDateRange] = useState("Q1 2023 - Q4 2023");
  const [planId, setPlanId] = useState(1); // Default to first business plan

  // Define valuation data type
  interface ValuationDataType {
    valuationSummary: {
      summaryMetrics: SummaryMetric[];
      financialMetrics: ValuationMetric[];
      nonFinancialMetrics: ValuationMetric[];
      marketMetrics: ValuationMetric[];
      teamMetrics: TeamMember[];
      valuationMethods: ValuationMethod[];
    }
  }

  // Fetch valuation data from API
  const { data: valuationData, isLoading } = useQuery<ValuationDataType>({
    queryKey: [`/api/valuation/${planId}`],
    staleTime: 30000 // 30 seconds
  });

  // Extract data from API response or use defaults
  const summaryMetrics: SummaryMetric[] = valuationData?.valuationSummary?.summaryMetrics
    ? valuationData.valuationSummary.summaryMetrics.map((metric: any) => ({
      ...metric,
      icon: getIconForMetric(metric.label)
    }))
    : [
    {
      label: "Valuation",
      value: "$4.7M",
      trend: 1,
      change: "+14.2%",
      description: "Estimated company valuation based on multiple methods",
      icon: <DollarSign className="h-5 w-5 text-green-500" />,
    },
    {
      label: "Revenue Multiple",
      value: "6.5x",
      trend: 1,
      change: "+0.8x",
      description: "Revenue multiple compared to industry average",
      icon: <BarChart className="h-5 w-5 text-blue-500" />,
    },
    {
      label: "Runway",
      value: "18 months",
      trend: -1,
      change: "-2 months",
      description: "Cash runway at current burn rate",
      icon: <Activity className="h-5 w-5 text-orange-500" />,
    },
    {
      label: "Burn Rate",
      value: "$85K/mo",
      trend: 1,
      change: "+5.2%",
      description: "Monthly cash burn rate",
      icon: <TrendingUp className="h-5 w-5 text-red-500" />,
    },
  ];

  // Financial metrics
  const financialMetrics: ValuationMetric[] = valuationData?.valuationSummary?.financialMetrics
    ? valuationData.valuationSummary.financialMetrics.map((metric: any) => ({
      ...metric,
      icon: getIconForMetric(metric.label)
    }))
    : [
    {
      label: "Revenue",
      value: "$720K",
      benchmark: "Benchmark: $650K",
      trend: 1,
      change: "+18.5%",
      description: "Annual recurring revenue",
      icon: <DollarSign className="h-5 w-5 text-green-500" />,
    },
    {
      label: "Growth Rate",
      value: "27.8%",
      benchmark: "Benchmark: 25%",
      trend: 1,
      change: "+3.2pts",
      description: "Year-over-year revenue growth",
      icon: <TrendingUp className="h-5 w-5 text-blue-500" />,
    },
    {
      label: "EBITDA Margin",
      value: "-15%",
      benchmark: "Benchmark: -20%",
      trend: 1,
      change: "+5pts",
      description: "Earnings before interest, taxes, depreciation, and amortization",
      icon: <ReceiptText className="h-5 w-5 text-purple-500" />,
    },
  ];

  // Non-financial metrics
  const nonFinancialMetrics: ValuationMetric[] = valuationData?.valuationSummary?.nonFinancialMetrics 
    ? valuationData.valuationSummary.nonFinancialMetrics.map((metric: any) => ({
      ...metric,
      icon: getIconForMetric(metric.label)
    }))
    : [
    {
      label: "Active Users",
      value: "5,820",
      benchmark: "Benchmark: 4,500",
      trend: 1,
      change: "+28.5%",
      description: "Monthly active users",
      icon: <Users className="h-5 w-5 text-blue-500" />,
    },
    {
      label: "Retention Rate",
      value: "78%",
      benchmark: "Benchmark: 70%",
      trend: 1,
      change: "+8pts",
      description: "Customer retention rate",
      icon: <LifeBuoy className="h-5 w-5 text-green-500" />,
    },
    {
      label: "Customer LTV",
      value: "$4,005",
      benchmark: "Benchmark: $3,500",
      trend: 1,
      change: "+14.4%",
      description: "Customer lifetime value",
      icon: <PieChart className="h-5 w-5 text-orange-500" />,
    },
    {
      label: "CAC",
      value: "$890",
      benchmark: "Benchmark: $950",
      trend: -1,
      change: "-6.3%",
      description: "Customer acquisition cost",
      icon: <Target className="h-5 w-5 text-purple-500" />,
    },
  ];

  // Market metrics
  const marketMetrics: ValuationMetric[] = valuationData?.valuationSummary?.marketMetrics
    ? valuationData.valuationSummary.marketMetrics.map((metric: any) => ({
      ...metric,
      icon: getIconForMetric(metric.label)
    }))
    : [
    {
      label: "Market Size",
      value: "$48B",
      benchmark: "CAGR: 14.2%",
      trend: 1,
      change: "+3.5B",
      description: "Total addressable market size",
      icon: <Network className="h-5 w-5 text-blue-500" />,
    },
    {
      label: "Market Share",
      value: "0.05%",
      benchmark: "Top 10%: 2.5%",
      trend: 1,
      change: "+0.02pts",
      description: "Current market share percentage",
      icon: <PieChart className="h-5 w-5 text-green-500" />,
    },
  ];

  // Team metrics
  const teamMetrics: TeamMember[] = valuationData?.valuationSummary?.teamMetrics
    ? valuationData.valuationSummary.teamMetrics
    : [
    {
      name: "Sarah Johnson",
      role: "CEO",
      experience: "15 years",
      prior_exits: "2",
      expertise: ["Strategy", "Leadership", "Fundraising"]
    },
    {
      name: "Michael Chen",
      role: "CTO",
      experience: "12 years",
      prior_exits: "1",
      expertise: ["Software Architecture", "AI", "DevOps"]
    },
    {
      name: "David Rodriguez",
      role: "CFO",
      experience: "18 years",
      prior_exits: "1",
      expertise: ["Finance", "Venture Capital", "M&A"]
    },
    {
      name: "Emma Williams",
      role: "CMO",
      experience: "10 years",
      prior_exits: "0",
      expertise: ["Digital Marketing", "Brand Strategy", "Growth"]
    }
  ];

  // Valuation methods
  const valuationMethods: ValuationMethod[] = valuationData?.valuationSummary?.valuationMethods
    ? valuationData.valuationSummary.valuationMethods
    : [
    {
      method: "Discounted Cash Flow (DCF)",
      applicability: "High",
      description: "Based on projected cash flows discounted to present value",
      result: "$5.2M",
    },
    {
      method: "Comparable Company Analysis",
      applicability: "High",
      description: "Based on valuation multiples of similar public companies",
      result: "$4.8M",
    },
    {
      method: "Venture Capital Method",
      applicability: "High",
      description: "Based on exit value and expected ROI for investors",
      result: "$4.5M",
    },
    {
      method: "First Chicago Method",
      applicability: "Medium",
      description: "Probability-weighted scenarios (success, sideways, failure)",
      result: "$4.3M",
    },
    {
      method: "Berkus Method",
      applicability: "Medium",
      description: "Assigns value to qualitative aspects of early-stage startups",
      result: "$4.6M",
    },
    {
      method: "Risk Factor Summation",
      applicability: "Medium",
      description: "Adjusts base value according to various risk factors",
      result: "$4.9M",
    }
  ];

  // Render metric card component
  const renderMetricCard = (metric: ValuationMetric) => (
    <Card key={metric.label} className="overflow-hidden">
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            {metric.icon}
            <CardTitle className="text-sm font-medium">{metric.label}</CardTitle>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Info className="h-4 w-4 text-gray-400 cursor-help" />
                </TooltipTrigger>
                <TooltipContent>
                  <p className="max-w-xs">{metric.description}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
          {metric.trend !== 0 && (
            <Badge variant={metric.trend > 0 ? "default" : "destructive"} className="text-xs">
              {metric.trend > 0 ? "‚Üë" : "‚Üì"} {metric.change}
            </Badge>
          )}
        </div>
      </CardHeader>
      <CardContent className="py-2">
        <div className="flex flex-col">
          <div className="flex items-center justify-between">
            <p className="text-2xl font-bold text-gray-800">{metric.value}</p>
            {metric.benchmark && (
              <p className="text-xs text-gray-500">{metric.benchmark}</p>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );

  // Render gauge component
  const renderGauge = (value: number, threshold1: number, threshold2: number) => {
    const getColor = () => {
      if (value >= threshold2) return "text-green-500";
      if (value >= threshold1) return "text-yellow-500";
      return "text-red-500";
    };

    return (
      <div className="relative w-28 h-28 mx-auto">
        <svg className="w-28 h-28 transform -rotate-90">
          <circle
            className="text-gray-200"
            strokeWidth="8"
            stroke="currentColor"
            fill="transparent"
            r="45"
            cx="56"
            cy="56"
          />
          <circle
            className={getColor()}
            strokeWidth="8"
            strokeDasharray={282.74}
            strokeDashoffset={282.74 - (value / 100) * 282.74}
            strokeLinecap="round"
            stroke="currentColor"
            fill="transparent"
            r="45"
            cx="56"
            cy="56"
          />
        </svg>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          <span className="text-lg font-semibold">{value}%</span>
        </div>
      </div>
    );
  };

  // Handle industry change
  const handleIndustryChange = (value: string) => {
    setIndustry(value);
    // Would update metrics based on industry
  };

  // Handle stage change
  const handleStageChange = (value: string) => {
    setStage(value);
    // Would update metrics based on stage
  };

  // Handle timeframe change
  const handleTimeframeChange = (value: string) => {
    setTimeframe(value);
    // Would update date range and metrics
    if (value === 'monthly') {
      setDateRange('Jan 2023 - Dec 2023');
    } else if (value === 'quarterly') {
      setDateRange('Q1 2023 - Q4 2023');
    } else {
      setDateRange('2021 - 2023');
    }
  };

  return (
    <div className="space-y-6">
      {/* Header with filters */}
      <div className="flex flex-col md:flex-row justify-between gap-4 items-start md:items-center">
        <div>
          <h1 className="text-2xl font-bold">Valuation Dashboard</h1>
          <p className="text-gray-500">Interactive tool to monitor key valuation metrics</p>
        </div>
        
        <div className="flex flex-wrap gap-3">
          <div className="flex items-center space-x-2">
            <Select value={industry} onValueChange={handleIndustryChange}>
              <SelectTrigger className="h-9 w-[130px]">
                <SelectValue placeholder="Industry" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="saas">SaaS</SelectItem>
                <SelectItem value="ecommerce">E-commerce</SelectItem>
                <SelectItem value="biotech">Biotech</SelectItem>
                <SelectItem value="fintech">Fintech</SelectItem>
                <SelectItem value="hardware">Hardware</SelectItem>
              </SelectContent>
            </Select>
            
            <Select value={stage} onValueChange={handleStageChange}>
              <SelectTrigger className="h-9 w-[130px]">
                <SelectValue placeholder="Stage" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="pre_seed">Pre-seed</SelectItem>
                <SelectItem value="seed">Seed</SelectItem>
                <SelectItem value="series_a">Series A</SelectItem>
                <SelectItem value="series_b">Series B</SelectItem>
                <SelectItem value="growth">Growth</SelectItem>
              </SelectContent>
            </Select>
            
            <Select value={timeframe} onValueChange={handleTimeframeChange}>
              <SelectTrigger className="h-9 w-[130px]">
                <SelectValue placeholder="Timeframe" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="monthly">Monthly</SelectItem>
                <SelectItem value="quarterly">Quarterly</SelectItem>
                <SelectItem value="yearly">Yearly</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div className="flex space-x-2">
            <Button variant="outline" size="sm" className="h-9">
              <Download className="h-4 w-4 mr-1" />
              Export
            </Button>
            <Button variant="outline" size="sm" className="h-9">
              <Share2 className="h-4 w-4 mr-1" />
              Share
            </Button>
          </div>
        </div>
      </div>
      
      <div className="text-sm text-gray-500">{dateRange}</div>
      
      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {summaryMetrics.map((metric) => (
          <Card key={metric.label} className="overflow-hidden">
            <CardHeader className="pb-2">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  {metric.icon}
                  <CardTitle className="text-sm font-medium">{metric.label}</CardTitle>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Info className="h-4 w-4 text-gray-400 cursor-help" />
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="max-w-xs">{metric.description}</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
                <Badge variant={metric.trend > 0 ? (metric.label === 'Burn Rate' ? "destructive" : "default") : (metric.label === 'Burn Rate' ? "default" : "destructive")} className="text-xs">
                  {metric.trend > 0 ? "‚Üë" : "‚Üì"} {metric.change}
                </Badge>
              </div>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-between">
                <p className="text-3xl font-bold text-gray-800">{metric.value}</p>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
      
      {/* Main Dashboard Tabs */}
      <Tabs defaultValue="financial" className="w-full">
        <TabsList className="grid w-full grid-cols-5 mb-6">
          <TabsTrigger value="financial">Financial Metrics</TabsTrigger>
          <TabsTrigger value="non-financial">User Metrics</TabsTrigger>
          <TabsTrigger value="market">Market Analysis</TabsTrigger>
          <TabsTrigger value="team">Team Assessment</TabsTrigger>
          <TabsTrigger value="valuation">Valuation Methods</TabsTrigger>
        </TabsList>
        
        {/* Financial Metrics Tab */}
        <TabsContent value="financial" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {financialMetrics.map(metric => renderMetricCard(metric))}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Gross Margin</CardTitle>
                <CardDescription>Current gross margin percentage vs. targets</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex flex-col items-center">
                  {renderGauge(72, 40, 60)}
                  <div className="w-full mt-4 flex justify-between text-xs text-gray-500">
                    <span>Poor (&lt;40%)</span>
                    <span>Average (40-60%)</span>
                    <span>Good (&gt;60%)</span>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>CAC vs. LTV</CardTitle>
                <CardDescription>Customer acquisition cost vs. lifetime value</CardDescription>
              </CardHeader>
              <CardContent className="flex items-center justify-center pt-4">
                <div className="w-full max-w-md">
                  <div className="flex justify-between mb-1">
                    <span className="text-xs font-medium">CAC</span>
                    <span className="text-xs font-medium">$890</span>
                  </div>
                  <Progress value={22.2} className="h-8 mb-4" />
                  
                  <div className="flex justify-between mb-1">
                    <span className="text-xs font-medium">LTV</span>
                    <span className="text-xs font-medium">$4,005</span>
                  </div>
                  <Progress value={100} className="h-8" />
                  
                  <div className="mt-6 text-center">
                    <Badge className="px-3 py-1 text-sm">LTV/CAC Ratio: 4.5x</Badge>
                    <p className="text-xs text-gray-500 mt-2">Goal: LTV/CAC ratio &gt; 3x</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        {/* Non-Financial Metrics Tab */}
        <TabsContent value="non-financial" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
            {nonFinancialMetrics.map(metric => renderMetricCard(metric))}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Churn Rate</CardTitle>
                <CardDescription>Monthly customer churn percentage</CardDescription>
              </CardHeader>
              <CardContent className="flex justify-center">
                <div className="w-48 h-48 relative">
                  <div className="absolute inset-0 flex items-center justify-center flex-col">
                    <span className="text-3xl font-bold">5%</span>
                    <span className="text-xs text-green-500">3pts below industry avg</span>
                  </div>
                  {/* This would be a donut chart in a real implementation */}
                  <div className="absolute inset-0 border-8 border-blue-500 rounded-full opacity-20"></div>
                  <div className="absolute inset-0 border-8 border-blue-500 rounded-full" style={{ clip: 'rect(0, 48px, 96px, 0)' }}></div>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>User Conversion Funnel</CardTitle>
                <CardDescription>User journey conversion rates</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4 pt-4">
                  <div>
                    <div className="flex justify-between text-xs mb-1">
                      <span>Visitors</span>
                      <span>100%</span>
                    </div>
                    <Progress value={100} className="h-6" />
                  </div>
                  
                  <div>
                    <div className="flex justify-between text-xs mb-1">
                      <span>Sign-ups</span>
                      <span>18%</span>
                    </div>
                    <Progress value={18} className="h-6" />
                  </div>
                  
                  <div>
                    <div className="flex justify-between text-xs mb-1">
                      <span>Trial Users</span>
                      <span>10.8%</span>
                    </div>
                    <Progress value={10.8} className="h-6" />
                  </div>
                  
                  <div>
                    <div className="flex justify-between text-xs mb-1">
                      <span>Paying Customers</span>
                      <span>2.8%</span>
                    </div>
                    <Progress value={2.8} className="h-6" />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        {/* Market Analysis Tab */}
        <TabsContent value="market" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
            {marketMetrics.map(metric => renderMetricCard(metric))}
          </div>
          
          <Card>
            <CardHeader>
              <CardTitle>Market Size Breakdown</CardTitle>
              <CardDescription>Total Addressable Market, Serviceable Addressable Market, and Serviceable Obtainable Market</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col md:flex-row items-center justify-center gap-4 md:gap-10">
                <div className="relative w-64 h-64">
                  {/* This would be a treemap visualization in a real implementation */}
                  <div className="absolute inset-0 bg-blue-100 rounded-lg flex items-center justify-center">
                    <div className="text-center">
                      <p className="text-xl font-bold text-blue-500">TAM</p>
                      <p className="text-3xl font-bold text-blue-700">$48B</p>
                    </div>
                  </div>
                  <div className="absolute top-1/4 left-1/4 w-3/4 h-3/4 bg-blue-200 rounded-lg flex items-center justify-center">
                    <div className="text-center">
                      <p className="text-lg font-bold text-blue-500">SAM</p>
                      <p className="text-2xl font-bold text-blue-700">$12B</p>
                    </div>
                  </div>
                  <div className="absolute top-1/2 left-1/2 w-1/2 h-1/2 bg-blue-300 rounded-lg flex items-center justify-center">
                    <div className="text-center">
                      <p className="text-base font-bold text-blue-500">SOM</p>
                      <p className="text-xl font-bold text-blue-700">$1.2B</p>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-4">
                  <div>
                    <div className="flex items-center">
                      <div className="w-4 h-4 bg-blue-100 mr-2"></div>
                      <span className="font-medium">TAM: Total Addressable Market</span>
                    </div>
                    <p className="text-sm text-gray-500 ml-6">Total market demand for your product or service</p>
                  </div>
                  
                  <div>
                    <div className="flex items-center">
                      <div className="w-4 h-4 bg-blue-200 mr-2"></div>
                      <span className="font-medium">SAM: Serviceable Addressable Market</span>
                    </div>
                    <p className="text-sm text-gray-500 ml-6">Segment of TAM targeted by your products and services</p>
                  </div>
                  
                  <div>
                    <div className="flex items-center">
                      <div className="w-4 h-4 bg-blue-300 mr-2"></div>
                      <span className="font-medium">SOM: Serviceable Obtainable Market</span>
                    </div>
                    <p className="text-sm text-gray-500 ml-6">Portion of SAM that you can realistically capture</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        {/* Team Assessment Tab */}
        <TabsContent value="team" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Founding Team Assessment</CardTitle>
              <CardDescription>Experience, expertise, and prior exit history of key team members</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left py-2 px-3">Name</th>
                      <th className="text-left py-2 px-3">Role</th>
                      <th className="text-left py-2 px-3">Experience</th>
                      <th className="text-left py-2 px-3">Prior Exits</th>
                      <th className="text-left py-2 px-3">Key Expertise</th>
                    </tr>
                  </thead>
                  <tbody>
                    {teamMetrics.map((member, index) => (
                      <tr key={index} className={index !== teamMetrics.length - 1 ? "border-b" : ""}>
                        <td className="py-3 px-3">{member.name}</td>
                        <td className="py-3 px-3">{member.role}</td>
                        <td className="py-3 px-3">{member.experience}</td>
                        <td className="py-3 px-3">{member.prior_exits}</td>
                        <td className="py-3 px-3">
                          <div className="flex flex-wrap gap-1">
                            {member.expertise.map((skill, i) => (
                              <Badge key={i} variant="outline" className="text-xs">
                                {skill}
                              </Badge>
                            ))}
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Team Experience</CardTitle>
                <CardDescription>Total years of industry experience</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-col items-center justify-center">
                <div className="text-5xl font-bold text-blue-600">45</div>
                <p className="text-gray-500 mt-2">Combined years</p>
                <div className="w-full mt-6">
                  <div className="flex justify-between text-sm mb-1">
                    <span>Executive Team</span>
                    <span>45 years</span>
                  </div>
                  <Progress value={100} className="h-3 mb-4" />
                  
                  <div className="flex justify-between text-sm mb-1">
                    <span>Technical Team</span>
                    <span>38 years</span>
                  </div>
                  <Progress value={84} className="h-3 mb-4" />
                  
                  <div className="flex justify-between text-sm mb-1">
                    <span>Business/Operations</span>
                    <span>27 years</span>
                  </div>
                  <Progress value={60} className="h-3" />
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Prior Exits</CardTitle>
                <CardDescription>Team's historical success with previous ventures</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-col items-center justify-center h-[240px]">
                <div className="flex items-center justify-center">
                  <div className="text-center">
                    <div className="text-5xl font-bold text-green-600">4</div>
                    <p className="text-gray-500">Prior successful exits</p>
                    
                    <div className="mt-6 grid grid-cols-2 gap-4 text-center">
                      <div>
                        <div className="text-2xl font-bold text-blue-600">2</div>
                        <p className="text-xs text-gray-500">Acquisitions</p>
                      </div>
                      
                      <div>
                        <div className="text-2xl font-bold text-purple-600">1</div>
                        <p className="text-xs text-gray-500">IPO</p>
                      </div>
                      
                      <div>
                        <div className="text-2xl font-bold text-orange-600">1</div>
                        <p className="text-xs text-gray-500">Merger</p>
                      </div>
                      
                      <div>
                        <div className="text-2xl font-bold text-green-600">$85M</div>
                        <p className="text-xs text-gray-500">Total Value</p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        {/* Valuation Methods Tab */}
        <TabsContent value="valuation" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Valuation Methods Comparison</CardTitle>
              <CardDescription>Analysis of different valuation approaches based on stage and industry</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left py-2 px-3">Method</th>
                      <th className="text-left py-2 px-3">Applicability</th>
                      <th className="text-left py-2 px-3">Description</th>
                      <th className="text-right py-2 px-3">Result</th>
                    </tr>
                  </thead>
                  <tbody>
                    {valuationMethods.map((method, index) => (
                      <tr key={index} className={index !== valuationMethods.length - 1 ? "border-b" : ""}>
                        <td className="py-3 px-3 font-medium">{method.method}</td>
                        <td className="py-3 px-3">
                          <Badge variant={method.applicability === "High" ? "default" : "outline"} className="text-xs">
                            {method.applicability}
                          </Badge>
                        </td>
                        <td className="py-3 px-3 text-sm text-gray-600">{method.description}</td>
                        <td className="py-3 px-3 text-right font-medium">{method.result}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Valuation Distribution</CardTitle>
                <CardDescription>Range of valuations across different methods</CardDescription>
              </CardHeader>
              <CardContent className="flex items-center justify-center pt-4">
                <div className="w-full max-w-md">
                  <div className="flex justify-between mb-1">
                    <span className="text-xs font-medium">Min: $4.3M</span>
                    <span className="text-xs font-medium">Avg: $4.7M</span>
                    <span className="text-xs font-medium">Max: $5.2M</span>
                  </div>
                  <div className="relative h-16 w-full mt-2">
                    {/* This would be a box plot in a real implementation */}
                    <div className="absolute w-full h-4 bg-blue-100 rounded-full top-6"></div>
                    <div className="absolute h-10 bg-blue-300 rounded-lg" style={{ left: '20%', width: '60%', top: '3px' }}></div>
                    <div className="absolute w-2 h-12 bg-blue-500 rounded-full" style={{ left: '45%', top: '0px' }}></div>
                    <div className="absolute w-1 h-14 bg-blue-700" style={{ left: '10%', top: '1px' }}></div>
                    <div className="absolute w-1 h-14 bg-blue-700" style={{ left: '90%', top: '1px' }}></div>
                  </div>
                  <div className="flex justify-between mt-6">
                    <div className="text-center">
                      <div className="text-sm font-semibold">$4.3M - $4.7M</div>
                      <div className="text-xs text-gray-500">Conservative</div>
                    </div>
                    <div className="text-center">
                      <div className="text-sm font-semibold">$4.7M - $5.2M</div>
                      <div className="text-xs text-gray-500">Optimistic</div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Recommendation</CardTitle>
                <CardDescription>Expert valuation guidance based on market conditions</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="text-center p-4 bg-blue-50 rounded-lg">
                    <p className="text-xl font-bold text-blue-700">$4.7 Million</p>
                    <p className="text-sm text-blue-600">Recommended valuation</p>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-start">
                      <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                      <p className="text-sm">Consistent with SaaS company averages at seed stage (5-7x ARR)</p>
                    </div>
                    <div className="flex items-start">
                      <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                      <p className="text-sm">Accounts for strong team experience and prior exits</p>
                    </div>
                    <div className="flex items-start">
                      <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 mr-2 flex-shrink-0" />
                      <p className="text-sm">Reflects above-average growth rate and customer metrics</p>
                    </div>
                    <div className="flex items-start">
                      <XCircle className="h-5 w-5 text-amber-500 mt-0.5 mr-2 flex-shrink-0" />
                      <p className="text-sm">Consider negotiation buffer for investor discussions (¬±10%)</p>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-end">
                <Button>
                  <ArrowDown className="mr-2 h-4 w-4" />
                  Download Valuation Report
                </Button>
              </CardFooter>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}

=== FILE: client/src/pages/education-product.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  Target, Play, Clock, Users, Award, CheckCircle, Star, ArrowRight,
  Zap, Building, DollarSign, TrendingUp, Globe, Shield, FileText, Presentation
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface ProductModule {
  id: string;
  title: string;
  description: string;
  duration: number;
  lessons: number;
  completed: boolean;
  progress: number;
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced';
  topics: string[];
  type: 'video' | 'workshop' | 'template' | 'case-study';
}

interface ProductFramework {
  id: string;
  name: string;
  description: string;
  steps: number;
  duration: string;
  icon: any;
  color: string;
  useCase: string;
}

function EducationProduct() {
  const { id } = useParams();
  const [activeTab, setActiveTab] = useState('overview');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for product modules
  const productModules: ProductModule[] = [
    {
      id: 'product-market-fit',
      title: 'Product-Market Fit',
      description: 'Discover how to identify, achieve, and measure product-market fit for sustainable growth.',
      duration: 85,
      lessons: 8,
      completed: false,
      progress: 40,
      difficulty: 'Intermediate',
      topics: ['Customer Discovery', 'Market Validation', 'Metrics', 'Iteration'],
      type: 'workshop'
    },
    {
      id: 'user-research',
      title: 'User Research & Discovery',
      description: 'Learn comprehensive user research methods to understand your customers deeply.',
      duration: 70,
      lessons: 9,
      completed: false,
      progress: 20,
      difficulty: 'Beginner',
      topics: ['User Interviews', 'Surveys', 'Personas', 'Journey Mapping'],
      type: 'video'
    },
    {
      id: 'mvp-development',
      title: 'MVP Development',
      description: 'Build your Minimum Viable Product using lean startup principles and rapid prototyping.',
      duration: 95,
      lessons: 10,
      completed: false,
      progress: 0,
      difficulty: 'Intermediate',
      topics: ['Prototyping', 'User Testing', 'Feature Prioritization', 'Technical Architecture'],
      type: 'workshop'
    },
    {
      id: 'product-strategy',
      title: 'Product Strategy & Roadmapping',
      description: 'Develop a comprehensive product strategy and create effective roadmaps.',
      duration: 60,
      lessons: 6,
      completed: false,
      progress: 0,
      difficulty: 'Advanced',
      topics: ['Strategic Planning', 'Roadmapping', 'Feature Planning', 'Stakeholder Alignment'],
      type: 'case-study'
    },
    {
      id: 'user-experience',
      title: 'User Experience Design',
      description: 'Master UX design principles to create intuitive and engaging user experiences.',
      duration: 80,
      lessons: 8,
      completed: false,
      progress: 0,
      difficulty: 'Intermediate',
      topics: ['Wireframing', 'Prototyping', 'Usability Testing', 'Design Systems'],
      type: 'template'
    },
    {
      id: 'analytics-metrics',
      title: 'Product Analytics & Metrics',
      description: 'Learn to measure and analyze product performance using key metrics and analytics.',
      duration: 55,
      lessons: 7,
      completed: false,
      progress: 0,
      difficulty: 'Intermediate',
      topics: ['KPI Definition', 'Analytics Tools', 'A/B Testing', 'Data Interpretation'],
      type: 'video'
    }
  ];

  const productFrameworks: ProductFramework[] = [
    {
      id: 'lean-startup',
      name: 'Lean Startup',
      description: 'Build-Measure-Learn cycle for rapid product iteration',
      steps: 3,
      duration: '2-4 weeks',
      icon: Zap,
      color: 'blue',
      useCase: 'Early-stage product development'
    },
    {
      id: 'design-thinking',
      name: 'Design Thinking',
      description: 'Human-centered approach to innovation and problem-solving',
      steps: 5,
      duration: '4-6 weeks',
      icon: Target,
      color: 'purple',
      useCase: 'Complex problem solving'
    },
    {
      id: 'agile-development',
      name: 'Agile Development',
      description: 'Iterative development methodology for software products',
      steps: 4,
      duration: '2-3 weeks per sprint',
      icon: Building,
      color: 'green',
      useCase: 'Software development'
    },
    {
      id: 'jobs-to-be-done',
      name: 'Jobs to be Done',
      description: 'Focus on customer jobs and outcomes rather than features',
      steps: 4,
      duration: '3-4 weeks',
      icon: Users,
      color: 'orange',
      useCase: 'Feature prioritization'
    }
  ];

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Beginner': return 'text-green-600 bg-green-50';
      case 'Intermediate': return 'text-yellow-600 bg-yellow-50';
      case 'Advanced': return 'text-red-600 bg-red-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'video': return Play;
      case 'workshop': return Users;
      case 'template': return FileText;
      case 'case-study': return Presentation;
      default: return Play;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'video': return 'blue';
      case 'workshop': return 'purple';
      case 'template': return 'green';
      case 'case-study': return 'orange';
      default: return 'gray';
    }
  };

  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0) {
      return `${hours}h ${mins}m`;
    }
    return `${mins}m`;
  };

  const completedModules = productModules.filter(module => module.completed).length;
  const totalProgress = Math.round(
    productModules.reduce((sum, module) => sum + module.progress, 0) / productModules.length
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-purple-100 rounded-lg">
              <Target className="h-6 w-6 text-purple-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Product Development
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Learn product-market fit and development strategies to build products that customers love.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Target className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">6</p>
                  <p className="text-sm text-gray-600">Product Modules</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <CheckCircle className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">{completedModules}</p>
                  <p className="text-sm text-gray-600">Completed</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Clock className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">7.5h</p>
                  <p className="text-sm text-gray-600">Total Duration</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <TrendingUp className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">{totalProgress}%</p>
                  <p className="text-sm text-gray-600">Progress</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="modules">Modules</TabsTrigger>
            <TabsTrigger value="frameworks">Frameworks</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5" />
                    Your Progress
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Overall Progress</span>
                      <span className="text-sm font-bold">{totalProgress}%</span>
                    </div>
                    <Progress value={totalProgress} className="h-3" />
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <p className="text-gray-600">Completed Modules</p>
                      <p className="font-bold">{completedModules} / {productModules.length}</p>
                    </div>
                    <div>
                      <p className="text-gray-600">Time Invested</p>
                      <p className="font-bold">2.0 hours</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Award className="h-5 w-5" />
                    Key Learning Outcomes
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center gap-3 p-3 bg-green-50 rounded-lg">
                      <CheckCircle className="h-5 w-5 text-green-600" />
                      <div>
                        <p className="font-medium">Achieve Product-Market Fit</p>
                        <p className="text-sm text-gray-600">Build products customers love</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
                      <Star className="h-5 w-5 text-blue-600" />
                      <div>
                        <p className="font-medium">Master User Research</p>
                        <p className="text-sm text-gray-600">Understand your customers deeply</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-purple-50 rounded-lg">
                      <Shield className="h-5 w-5 text-purple-600" />
                      <div>
                        <p className="font-medium">Build Better MVPs</p>
                        <p className="text-sm text-gray-600">Rapid prototyping and validation</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Modules Tab */}
          <TabsContent value="modules" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {productModules.map(module => {
                const TypeIcon = getTypeIcon(module.type);
                const typeColor = getTypeColor(module.type);
                return (
                  <Card key={module.id} className={module.completed ? 'ring-2 ring-green-500' : ''}>
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        <div>
                          <CardTitle className="text-lg">{module.title}</CardTitle>
                          <CardDescription>{module.description}</CardDescription>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge className={`bg-${typeColor}-100 text-${typeColor}-700`}>
                            <TypeIcon className="h-3 w-3 mr-1" />
                            {module.type}
                          </Badge>
                          {module.completed && (
                            <CheckCircle className="h-6 w-6 text-green-600" />
                          )}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex items-center gap-4 text-sm">
                        <div className="flex items-center gap-1">
                          <Clock className="h-4 w-4 text-gray-500" />
                          <span>{formatDuration(module.duration)}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <FileText className="h-4 w-4 text-gray-500" />
                          <span>{module.lessons} lessons</span>
                        </div>
                        <Badge className={getDifficultyColor(module.difficulty)}>
                          {module.difficulty}
                        </Badge>
                      </div>

                      <div className="space-y-2">
                        <div className="flex items-center justify-between text-sm">
                          <span>Progress</span>
                          <span className="font-medium">{module.progress}%</span>
                        </div>
                        <Progress value={module.progress} className="h-2" />
                      </div>

                      <div>
                        <p className="text-sm font-medium text-gray-700 mb-2">Topics Covered</p>
                        <div className="flex flex-wrap gap-1">
                          {module.topics.map((topic, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {topic}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button className="w-full" disabled={module.completed}>
                        {module.completed ? (
                          <>
                            <CheckCircle className="h-4 w-4 mr-2" />
                            Completed
                          </>
                        ) : module.progress > 0 ? (
                          <>
                            <Play className="h-4 w-4 mr-2" />
                            Continue
                          </>
                        ) : (
                          <>
                            <Play className="h-4 w-4 mr-2" />
                            Start Module
                          </>
                        )}
                      </Button>
                    </CardFooter>
                  </Card>
                );
              })}
            </div>
          </TabsContent>

          {/* Frameworks Tab */}
          <TabsContent value="frameworks" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {productFrameworks.map(framework => {
                const Icon = framework.icon;
                return (
                  <Card key={framework.id}>
                    <CardHeader>
                      <div className="flex items-center gap-3">
                        <div className={`p-2 bg-${framework.color}-100 rounded-lg`}>
                          <Icon className={`h-5 w-5 text-${framework.color}-600`} />
                        </div>
                        <div>
                          <CardTitle>{framework.name}</CardTitle>
                          <CardDescription>{framework.description}</CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>
                          <p className="text-gray-600">Steps</p>
                          <p className="font-bold">{framework.steps}</p>
                        </div>
                        <div>
                          <p className="text-gray-600">Duration</p>
                          <p className="font-bold">{framework.duration}</p>
                        </div>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700 mb-2">Best For</p>
                        <p className="text-sm text-gray-600">{framework.useCase}</p>
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button className="w-full">
                        <ArrowRight className="h-4 w-4 mr-2" />
                        Learn Framework
                      </Button>
                    </CardFooter>
                  </Card>
                );
              })}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

export default EducationProduct;


=== FILE: client/src/pages/ecosystem-hub.tsx ===

import EcosystemHubApp from '@/features/ecosystem-hub/EcosystemHubApp';

export default function EcosystemHub() {
  return <EcosystemHubApp />;
}


=== FILE: client/src/pages/debt-funding.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  ArrowRight, Search, Filter, DollarSign, Building2, Globe, PieChart, Clock, Shield,
  TrendingUp, Users, Award, CheckCircle, AlertCircle, CreditCard, History, Info,
  BarChart2, HelpCircle, Wallet, Target, Star, ExternalLink, Building, Zap, Banknote
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

interface Lender {
  id: number;
  name: string;
  type: 'bank' | 'credit-union' | 'online' | 'sba' | 'alternative';
  logo: string;
  minLoan: number;
  maxLoan: number;
  interestRate: number;
  term: number;
  requirements: {
    minCreditScore: number;
    minTimeInBusiness: number;
    minAnnualRevenue: number;
  };
  matchScore: number;
  description: string;
  website: string;
  features: string[];
  approvalTime: string;
}

function DebtFunding() {
  const { id } = useParams();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);
  const [loanRange, setLoanRange] = useState([10000, 1000000]);
  const [selectedTerm, setSelectedTerm] = useState<string>('all');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for lenders
  const lenders: Lender[] = [
    {
      id: 1,
      name: "Wells Fargo Business",
      type: "bank",
      logo: "https://via.placeholder.com/40",
      minLoan: 10000,
      maxLoan: 1000000,
      interestRate: 4.5,
      term: 60,
      requirements: {
        minCreditScore: 680,
        minTimeInBusiness: 2,
        minAnnualRevenue: 100000
      },
      matchScore: 92,
      description: "Traditional bank offering comprehensive business lending solutions with competitive rates.",
      website: "https://wellsfargo.com",
      features: ["Low interest rates", "Flexible terms", "Relationship banking"],
      approvalTime: "7-14 days"
    },
    {
      id: 2,
      name: "Kabbage (American Express)",
      type: "online",
      logo: "https://via.placeholder.com/40",
      minLoan: 2000,
      maxLoan: 250000,
      interestRate: 6.5,
      term: 24,
      requirements: {
        minCreditScore: 600,
        minTimeInBusiness: 1,
        minAnnualRevenue: 50000
      },
      matchScore: 88,
      description: "Online lender specializing in quick business loans with fast approval process.",
      website: "https://kabbage.com",
      features: ["Fast approval", "Online application", "Flexible repayment"],
      approvalTime: "24-48 hours"
    },
    {
      id: 3,
      name: "SBA Express",
      type: "sba",
      logo: "https://via.placeholder.com/40",
      minLoan: 5000,
      maxLoan: 500000,
      interestRate: 3.5,
      term: 84,
      requirements: {
        minCreditScore: 650,
        minTimeInBusiness: 2,
        minAnnualRevenue: 75000
      },
      matchScore: 85,
      description: "SBA-backed loans with government guarantee, offering lower rates and longer terms.",
      website: "https://sba.gov",
      features: ["Government backed", "Low rates", "Long terms"],
      approvalTime: "14-21 days"
    },
    {
      id: 4,
      name: "OnDeck",
      type: "alternative",
      logo: "https://via.placeholder.com/40",
      minLoan: 5000,
      maxLoan: 500000,
      interestRate: 7.5,
      term: 36,
      requirements: {
        minCreditScore: 550,
        minTimeInBusiness: 1,
        minAnnualRevenue: 100000
      },
      matchScore: 82,
      description: "Alternative lender focused on small business loans with quick funding.",
      website: "https://ondeck.com",
      features: ["Quick funding", "Flexible requirements", "Online platform"],
      approvalTime: "1-3 days"
    },
    {
      id: 5,
      name: "Chase Business Banking",
      type: "bank",
      logo: "https://via.placeholder.com/40",
      minLoan: 25000,
      maxLoan: 2000000,
      interestRate: 4.0,
      term: 84,
      requirements: {
        minCreditScore: 700,
        minTimeInBusiness: 3,
        minAnnualRevenue: 250000
      },
      matchScore: 90,
      description: "Full-service bank offering comprehensive business lending and banking solutions.",
      website: "https://chase.com",
      features: ["Full banking services", "Relationship management", "Competitive rates"],
      approvalTime: "10-21 days"
    },
    {
      id: 6,
      name: "Funding Circle",
      type: "alternative",
      logo: "https://via.placeholder.com/40",
      minLoan: 25000,
      maxLoan: 500000,
      interestRate: 5.5,
      term: 60,
      requirements: {
        minCreditScore: 620,
        minTimeInBusiness: 2,
        minAnnualRevenue: 150000
      },
      matchScore: 87,
      description: "Peer-to-peer lending platform connecting businesses with investors for competitive rates.",
      website: "https://fundingcircle.com",
      features: ["Peer-to-peer", "Competitive rates", "Transparent process"],
      approvalTime: "3-7 days"
    }
  ];

  const filteredLenders = lenders.filter(lender => {
    const matchesSearch = lender.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         lender.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesType = selectedTypes.length === 0 || selectedTypes.includes(lender.type);
    const matchesRange = lender.minLoan <= loanRange[1] && lender.maxLoan >= loanRange[0];
    const matchesTerm = selectedTerm === 'all' || 
                       (selectedTerm === 'short' && lender.term <= 24) ||
                       (selectedTerm === 'medium' && lender.term > 24 && lender.term <= 60) ||
                       (selectedTerm === 'long' && lender.term > 60);
    
    return matchesSearch && matchesType && matchesRange && matchesTerm;
  });

  const lenderTypes = [
    { value: 'bank', label: 'Traditional Banks', icon: Building },
    { value: 'online', label: 'Online Lenders', icon: Globe },
    { value: 'sba', label: 'SBA Loans', icon: Shield },
    { value: 'alternative', label: 'Alternative Lenders', icon: Zap },
    { value: 'credit-union', label: 'Credit Unions', icon: Users }
  ];

  const terms = [
    { value: 'all', label: 'All Terms' },
    { value: 'short', label: 'Short Term (‚â§24 months)' },
    { value: 'medium', label: 'Medium Term (25-60 months)' },
    { value: 'long', label: 'Long Term (>60 months)' }
  ];

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    }
    return `$${amount}`;
  };

  const getTypeIcon = (type: string) => {
    const typeConfig = lenderTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.icon : Building;
  };

  const getTypeLabel = (type: string) => {
    const typeConfig = lenderTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.label : type;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-emerald-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-green-100 rounded-lg">
              <CreditCard className="h-6 w-6 text-green-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Debt Funding
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Access business loans, lines of credit, and debt financing options to fuel your growth without giving up equity.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <DollarSign className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">$1.8B</p>
                  <p className="text-sm text-gray-600">Available Credit</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Building className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">89</p>
                  <p className="text-sm text-gray-600">Lending Partners</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Award className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">4.2%</p>
                  <p className="text-sm text-gray-600">Avg. Interest Rate</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <Clock className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">7</p>
                  <p className="text-sm text-gray-600">Days Avg. Approval</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Filter className="h-5 w-5" />
              Find Your Perfect Lender
            </CardTitle>
            <CardDescription>
              Use filters to find lenders that match your business needs and credit profile
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Search Lenders
                </label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search by name or description..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Loan Term
                </label>
                <select
                  value={selectedTerm}
                  onChange={(e) => setSelectedTerm(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  {terms.map(term => (
                    <option key={term.value} value={term.value}>
                      {term.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Loan Amount: {formatCurrency(loanRange[0])} - {formatCurrency(loanRange[1])}
              </label>
              <Slider
                value={loanRange}
                onValueChange={setLoanRange}
                min={1000}
                max={2000000}
                step={1000}
                className="w-full"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Lender Types
              </label>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
                {lenderTypes.map(type => {
                  const Icon = type.icon;
                  return (
                    <button
                      key={type.value}
                      onClick={() => {
                        setSelectedTypes(prev => 
                          prev.includes(type.value) 
                            ? prev.filter(t => t !== type.value)
                            : [...prev, type.value]
                        );
                      }}
                      className={`p-3 rounded-lg border-2 transition-all ${
                        selectedTypes.includes(type.value)
                          ? 'border-green-500 bg-green-50 text-green-700'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <Icon className="h-5 w-5 mx-auto mb-2" />
                      <p className="text-xs font-medium text-center">{type.label}</p>
                    </button>
                  );
                })}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Results */}
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-gray-900">
              {filteredLenders.length} Lenders Found
            </h2>
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <span>Sorted by Match Score</span>
              <TrendingUp className="h-4 w-4" />
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredLenders.map(lender => {
              const TypeIcon = getTypeIcon(lender.type);
              return (
                <Card key={lender.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-3">
                        <img
                          src={lender.logo}
                          alt={lender.name}
                          className="w-12 h-12 rounded-lg object-cover"
                        />
                        <div>
                          <CardTitle className="text-lg">{lender.name}</CardTitle>
                          <CardDescription className="flex items-center gap-1">
                            <TypeIcon className="h-4 w-4" />
                            {getTypeLabel(lender.type)}
                          </CardDescription>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center gap-1 mb-1">
                          <Star className="h-4 w-4 text-yellow-500 fill-current" />
                          <span className="text-sm font-medium">{lender.matchScore}% Match</span>
                        </div>
                        <Progress value={lender.matchScore} className="w-20 h-2" />
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-600 mb-4">{lender.description}</p>
                    
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div>
                        <p className="text-sm font-medium text-gray-700">Loan Range</p>
                        <p className="text-sm text-gray-600">
                          {formatCurrency(lender.minLoan)} - {formatCurrency(lender.maxLoan)}
                        </p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Interest Rate</p>
                        <p className="text-sm text-gray-600">{lender.interestRate}% APR</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Term Length</p>
                        <p className="text-sm text-gray-600">{lender.term} months</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Approval Time</p>
                        <p className="text-sm text-gray-600">{lender.approvalTime}</p>
                      </div>
                    </div>

                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-700 mb-2">Requirements</p>
                      <div className="grid grid-cols-3 gap-2 text-xs">
                        <div className="bg-gray-50 p-2 rounded">
                          <p className="font-medium">Credit Score</p>
                          <p className="text-gray-600">{lender.requirements.minCreditScore}+</p>
                        </div>
                        <div className="bg-gray-50 p-2 rounded">
                          <p className="font-medium">Time in Business</p>
                          <p className="text-gray-600">{lender.requirements.minTimeInBusiness}+ years</p>
                        </div>
                        <div className="bg-gray-50 p-2 rounded">
                          <p className="font-medium">Annual Revenue</p>
                          <p className="text-gray-600">{formatCurrency(lender.requirements.minAnnualRevenue)}+</p>
                        </div>
                      </div>
                    </div>

                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-700 mb-2">Key Features</p>
                      <div className="flex flex-wrap gap-1">
                        {lender.features.map(feature => (
                          <Badge key={feature} variant="secondary" className="text-xs">
                            {feature}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter className="flex gap-2">
                    <Button className="flex-1">
                      <ExternalLink className="h-4 w-4 mr-2" />
                      Apply Now
                    </Button>
                    <Button variant="outline" className="flex-1">
                      <Info className="h-4 w-4 mr-2" />
                      Learn More
                    </Button>
                  </CardFooter>
                </Card>
              );
            })}
          </div>
        </div>

        {/* CTA Section */}
        <Card className="mt-8 bg-gradient-to-r from-green-600 to-emerald-600 text-white">
          <CardContent className="p-8">
            <div className="text-center">
              <h3 className="text-2xl font-bold mb-4">Ready to Secure Debt Funding?</h3>
              <p className="text-green-100 mb-6 max-w-2xl mx-auto">
                Get matched with lenders who understand your business needs. Our platform 
                analyzes your credit profile and connects you with the best loan options 
                available in the market.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button size="lg" variant="secondary">
                  <Banknote className="h-5 w-5 mr-2" />
                  Find My Loan
                </Button>
                <Button size="lg" variant="outline" className="border-white text-white hover:bg-white hover:text-green-600">
                  <HelpCircle className="h-5 w-5 mr-2" />
                  Get Help
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default DebtFunding;


=== FILE: client/src/pages/financial-hub.tsx ===

import FinancialHubApp from '@/features/financial-hub/FinancialHubApp';

export default function FinancialHub() {
  return <FinancialHubApp />;
}


=== FILE: client/src/pages/education-lite.tsx ===

export default function EducationLite() {
  return (
    <div style={{ padding: 24 }}>
      <h1 style={{ fontSize: 24, marginBottom: 8 }}>Education</h1>
      <p>Lightweight placeholder for the Learning Hub.</p>
    </div>
  );
}


=== FILE: client/src/pages/startup-league.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  Trophy, Award, Star, Crown, Diamond, Target, TrendingUp, Users, 
  Building, DollarSign, Zap, Shield, Globe, BarChart3, PieChart,
  ArrowUp, ArrowDown, CheckCircle, XCircle, AlertCircle
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface StartupRanking {
  id: string;
  name: string;
  rank: number;
  score: number;
  category: string;
  metrics: {
    revenue: number;
    growth: number;
    funding: number;
    team: number;
    innovation: number;
  };
  badges: string[];
  description: string;
  logo: string;
}

interface LeagueCategory {
  id: string;
  name: string;
  description: string;
  icon: any;
  color: string;
  startups: number;
}

interface Benchmark {
  metric: string;
  yourValue: number;
  industryAverage: number;
  topPerformer: number;
  percentile: number;
}

function StartupLeague() {
  const { id } = useParams();
  const [activeTab, setActiveTab] = useState('rankings');
  const [selectedCategory, setSelectedCategory] = useState('all');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for startup rankings
  const startupRankings: StartupRanking[] = [
    {
      id: 'startup-1',
      name: 'TechFlow Solutions',
      rank: 1,
      score: 95,
      category: 'SaaS',
      metrics: {
        revenue: 2500000,
        growth: 45.2,
        funding: 15000000,
        team: 45,
        innovation: 92
      },
      badges: ['Series A', 'Fast Growing', 'Innovation Leader'],
      description: 'Leading SaaS platform for workflow automation',
      logo: 'https://via.placeholder.com/40'
    },
    {
      id: 'startup-2',
      name: 'DataVault Inc.',
      rank: 2,
      score: 88,
      category: 'Data Analytics',
      metrics: {
        revenue: 1800000,
        growth: 38.7,
        funding: 12000000,
        team: 32,
        innovation: 85
      },
      badges: ['Seed', 'Data Leader', 'AI Focus'],
      description: 'Advanced data analytics and AI solutions',
      logo: 'https://via.placeholder.com/40'
    },
    {
      id: 'startup-3',
      name: 'CloudScale Systems',
      rank: 3,
      score: 82,
      category: 'Cloud Infrastructure',
      metrics: {
        revenue: 3200000,
        growth: 28.4,
        funding: 25000000,
        team: 67,
        innovation: 78
      },
      badges: ['Series B', 'Enterprise', 'Scalable'],
      description: 'Enterprise cloud infrastructure solutions',
      logo: 'https://via.placeholder.com/40'
    },
    {
      id: 'your-startup',
      name: 'Your Startup',
      rank: 15,
      score: 72,
      category: 'Technology',
      metrics: {
        revenue: 850000,
        growth: 65.3,
        funding: 5000000,
        team: 18,
        innovation: 88
      },
      badges: ['Seed', 'High Growth', 'Innovation'],
      description: 'Your innovative technology solution',
      logo: 'https://via.placeholder.com/40'
    }
  ];

  const leagueCategories: LeagueCategory[] = [
    {
      id: 'all',
      name: 'All Startups',
      description: 'Complete ranking across all categories',
      icon: Trophy,
      color: 'gold',
      startups: 127
    },
    {
      id: 'saas',
      name: 'SaaS',
      description: 'Software as a Service companies',
      icon: Building,
      color: 'blue',
      startups: 45
    },
    {
      id: 'fintech',
      name: 'FinTech',
      description: 'Financial technology startups',
      icon: DollarSign,
      color: 'green',
      startups: 32
    },
    {
      id: 'healthtech',
      name: 'HealthTech',
      description: 'Healthcare technology companies',
      icon: Shield,
      color: 'red',
      startups: 28
    },
    {
      id: 'edtech',
      name: 'EdTech',
      description: 'Education technology startups',
      icon: Users,
      color: 'purple',
      startups: 22
    }
  ];

  const benchmarks: Benchmark[] = [
    {
      metric: 'Revenue Growth',
      yourValue: 65.3,
      industryAverage: 25.4,
      topPerformer: 85.7,
      percentile: 78
    },
    {
      metric: 'Team Size',
      yourValue: 18,
      industryAverage: 24,
      topPerformer: 45,
      percentile: 45
    },
    {
      metric: 'Funding Raised',
      yourValue: 5000000,
      industryAverage: 3200000,
      topPerformer: 15000000,
      percentile: 62
    },
    {
      metric: 'Innovation Score',
      yourValue: 88,
      industryAverage: 72,
      topPerformer: 95,
      percentile: 82
    }
  ];

  const getRankIcon = (rank: number) => {
    if (rank === 1) return <Crown className="h-5 w-5 text-yellow-500" />;
    if (rank <= 3) return <Trophy className="h-5 w-5 text-yellow-600" />;
    if (rank <= 10) return <Award className="h-5 w-5 text-blue-600" />;
    return <Star className="h-5 w-5 text-gray-400" />;
  };

  const getRankColor = (rank: number) => {
    if (rank === 1) return 'text-yellow-600 bg-yellow-50';
    if (rank <= 3) return 'text-yellow-600 bg-yellow-50';
    if (rank <= 10) return 'text-blue-600 bg-blue-50';
    return 'text-gray-600 bg-gray-50';
  };

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    }
    return `$${amount}`;
  };

  const getCategoryIcon = (categoryId: string) => {
    const category = leagueCategories.find(c => c.id === categoryId);
    return category ? category.icon : Trophy;
  };

  const getCategoryColor = (categoryId: string) => {
    const category = leagueCategories.find(c => c.id === categoryId);
    return category ? category.color : 'gray';
  };

  const filteredRankings = selectedCategory === 'all' 
    ? startupRankings 
    : startupRankings.filter(startup => startup.category.toLowerCase() === selectedCategory);

  return (
    <div className="min-h-screen bg-gradient-to-br from-yellow-50 via-white to-orange-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-yellow-100 rounded-lg">
              <Trophy className="h-6 w-6 text-yellow-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Startup League
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Compare your startup against industry benchmarks and see how you rank among your peers.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-yellow-100 rounded-lg">
                  <Trophy className="h-5 w-5 text-yellow-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">#15</p>
                  <p className="text-sm text-gray-600">Your Ranking</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <TrendingUp className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">72%</p>
                  <p className="text-sm text-gray-600">Overall Score</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Users className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">127</p>
                  <p className="text-sm text-gray-600">Total Startups</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Star className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">78%</p>
                  <p className="text-sm text-gray-600">Percentile</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="rankings">Rankings</TabsTrigger>
            <TabsTrigger value="benchmarks">Benchmarks</TabsTrigger>
            <TabsTrigger value="categories">Categories</TabsTrigger>
            <TabsTrigger value="achievements">Achievements</TabsTrigger>
          </TabsList>

          {/* Rankings Tab */}
          <TabsContent value="rankings" className="space-y-6">
            <div className="flex flex-wrap gap-2 mb-6">
              {leagueCategories.map(category => {
                const Icon = category.icon;
                return (
                  <Button
                    key={category.id}
                    variant={selectedCategory === category.id ? "default" : "outline"}
                    onClick={() => setSelectedCategory(category.id)}
                    className="flex items-center gap-2"
                  >
                    <Icon className="h-4 w-4" />
                    {category.name} ({category.startups})
                  </Button>
                );
              })}
            </div>

            <div className="space-y-4">
              {filteredRankings.map((startup, index) => (
                <Card key={startup.id} className={startup.id === 'your-startup' ? 'ring-2 ring-blue-500' : ''}>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="flex items-center gap-2">
                          {getRankIcon(startup.rank)}
                          <span className="text-2xl font-bold">#{startup.rank}</span>
                        </div>
                        <img
                          src={startup.logo}
                          alt={startup.name}
                          className="w-12 h-12 rounded-lg object-cover"
                        />
                        <div>
                          <h3 className="text-lg font-bold">{startup.name}</h3>
                          <p className="text-sm text-gray-600">{startup.description}</p>
                          <div className="flex gap-1 mt-1">
                            {startup.badges.map((badge, badgeIndex) => (
                              <Badge key={badgeIndex} variant="secondary" className="text-xs">
                                {badge}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center gap-2 mb-2">
                          <span className="text-2xl font-bold">{startup.score}%</span>
                          <Badge className={getRankColor(startup.rank)}>
                            Score
                          </Badge>
                        </div>
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <p className="text-gray-600">Revenue</p>
                            <p className="font-bold">{formatCurrency(startup.metrics.revenue)}</p>
                          </div>
                          <div>
                            <p className="text-gray-600">Growth</p>
                            <p className="font-bold text-green-600">+{startup.metrics.growth}%</p>
                          </div>
                          <div>
                            <p className="text-gray-600">Funding</p>
                            <p className="font-bold">{formatCurrency(startup.metrics.funding)}</p>
                          </div>
                          <div>
                            <p className="text-gray-600">Team</p>
                            <p className="font-bold">{startup.metrics.team}</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Benchmarks Tab */}
          <TabsContent value="benchmarks" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {benchmarks.map((benchmark, index) => (
                <Card key={index}>
                  <CardHeader>
                    <CardTitle>{benchmark.metric}</CardTitle>
                    <CardDescription>
                      Your performance vs industry benchmarks
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600">Your Value</span>
                        <span className="font-bold text-blue-600">
                          {benchmark.metric === 'Funding Raised' 
                            ? formatCurrency(benchmark.yourValue)
                            : benchmark.yourValue + (benchmark.metric === 'Revenue Growth' ? '%' : '')
                          }
                        </span>
                      </div>
                      <Progress value={(benchmark.yourValue / benchmark.topPerformer) * 100} className="h-2" />
                      
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600">Industry Average</span>
                        <span className="text-sm">
                          {benchmark.metric === 'Funding Raised' 
                            ? formatCurrency(benchmark.industryAverage)
                            : benchmark.industryAverage + (benchmark.metric === 'Revenue Growth' ? '%' : '')
                          }
                        </span>
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-600">Top Performer</span>
                        <span className="text-sm">
                          {benchmark.metric === 'Funding Raised' 
                            ? formatCurrency(benchmark.topPerformer)
                            : benchmark.topPerformer + (benchmark.metric === 'Revenue Growth' ? '%' : '')
                          }
                        </span>
                      </div>
                    </div>
                    
                    <div className="pt-4 border-t">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium">Percentile</span>
                        <Badge className="bg-green-100 text-green-700">
                          {benchmark.percentile}th percentile
                        </Badge>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Categories Tab */}
          <TabsContent value="categories" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {leagueCategories.slice(1).map(category => {
                const Icon = category.icon;
                return (
                  <Card key={category.id}>
                    <CardHeader>
                      <div className="flex items-center gap-3">
                        <div className={`p-2 bg-${category.color}-100 rounded-lg`}>
                          <Icon className={`h-5 w-5 text-${category.color}-600`} />
                        </div>
                        <div>
                          <CardTitle>{category.name}</CardTitle>
                          <CardDescription>{category.description}</CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="text-center">
                        <div className="text-3xl font-bold text-gray-900 mb-2">{category.startups}</div>
                        <p className="text-sm text-gray-600">Startups in this category</p>
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button 
                        variant="outline" 
                        className="w-full"
                        onClick={() => setSelectedCategory(category.id)}
                      >
                        View Rankings
                      </Button>
                    </CardFooter>
                  </Card>
                );
              })}
            </div>
          </TabsContent>

          {/* Achievements Tab */}
          <TabsContent value="achievements" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Trophy className="h-5 w-5 text-yellow-600" />
                    Your Achievements
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex items-center gap-3 p-3 bg-green-50 rounded-lg">
                      <CheckCircle className="h-5 w-5 text-green-600" />
                      <div>
                        <p className="font-medium">High Growth Rate</p>
                        <p className="text-sm text-gray-600">65.3% growth rate achieved</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
                      <CheckCircle className="h-5 w-5 text-blue-600" />
                      <div>
                        <p className="font-medium">Innovation Leader</p>
                        <p className="text-sm text-gray-600">88% innovation score</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-purple-50 rounded-lg">
                      <CheckCircle className="h-5 w-5 text-purple-600" />
                      <div>
                        <p className="font-medium">Seed Stage Success</p>
                        <p className="text-sm text-gray-600">Successfully raised seed funding</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5 text-orange-600" />
                    Next Goals
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex items-center gap-3 p-3 bg-yellow-50 rounded-lg">
                      <AlertCircle className="h-5 w-5 text-yellow-600" />
                      <div>
                        <p className="font-medium">Top 10 Ranking</p>
                        <p className="text-sm text-gray-600">Need 15+ points to reach top 10</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-orange-50 rounded-lg">
                      <AlertCircle className="h-5 w-5 text-orange-600" />
                      <div>
                        <p className="font-medium">Series A Funding</p>
                        <p className="text-sm text-gray-600">Target $10M+ funding round</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-red-50 rounded-lg">
                      <AlertCircle className="h-5 w-5 text-red-600" />
                      <div>
                        <p className="font-medium">Team Expansion</p>
                        <p className="text-sm text-gray-600">Grow team to 30+ members</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

export default StartupLeague;


=== FILE: client/src/pages/admin-dashboard.tsx ===


import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Users, 
  FileText, 
  Building2, 
  BarChart3,
  Crown,
  CheckCircle,
  XCircle
} from 'lucide-react';
import { UserType } from '@shared/schema';

interface User {
  id: number;
  email: string;
  firstName?: string;
  lastName?: string;
  userType: UserType;
  userSubtype?: string;
  verified: boolean;
  onboardingCompleted: boolean;
  createdAt: string;
}

interface Stats {
  totalUsers: number;
  totalBusinessPlans: number;
  totalOrganizations: number;
  usersByType: Record<UserType, number>;
  verifiedUsers: number;
  completedOnboarding: number;
}

export default function AdminDashboard() {
  const [superUsers, setSuperUsers] = useState<User[]>([]);
  const [allUsers, setAllUsers] = useState<User[]>([]);
  const [stats, setStats] = useState<Stats | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const [superUsersRes, usersRes, statsRes] = await Promise.all([
        fetch('/api/super-users'),
        fetch('/api/users'),
        fetch('/api/stats')
      ]);

      const superUsersData = await superUsersRes.json();
      const usersData = await usersRes.json();
      const statsData = await statsRes.json();

      setSuperUsers(superUsersData);
      setAllUsers(usersData);
      setStats(statsData);
    } catch (error) {
      console.error('Failed to fetch data:', error);
    } finally {
      setLoading(false);
    }
  };

  const getUserTypeColor = (userType: UserType) => {
    const colors = {
      [UserType.ENTREPRENEUR]: 'bg-purple-100 text-purple-800',
      [UserType.INVESTOR]: 'bg-teal-100 text-teal-800',
      [UserType.LENDER]: 'bg-green-100 text-green-800',
      [UserType.GRANTOR]: 'bg-red-100 text-red-800',
      [UserType.PARTNER]: 'bg-blue-100 text-blue-800',
      [UserType.TEAM_MEMBER]: 'bg-gray-100 text-gray-800',
      [UserType.ADMIN]: 'bg-yellow-100 text-yellow-800'
    };
    return colors[userType] || 'bg-gray-100 text-gray-800';
  };

  if (loading) {
    return <div className="flex justify-center items-center h-screen">Loading...</div>;
  }

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-8">
      <div className="flex items-center gap-4 mb-8">
        <Crown className="h-8 w-8 text-yellow-600" />
        <div>
          <h1 className="text-3xl font-bold">Admin Dashboard</h1>
          <p className="text-gray-600">Manage super users and platform data</p>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Users</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats?.totalUsers}</div>
            <p className="text-xs text-muted-foreground">
              {stats?.verifiedUsers} verified
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Business Plans</CardTitle>
            <FileText className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats?.totalBusinessPlans}</div>
            <p className="text-xs text-muted-foreground">
              Active plans in system
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Organizations</CardTitle>
            <Building2 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats?.totalOrganizations}</div>
            <p className="text-xs text-muted-foreground">
              Registered organizations
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Onboarding</CardTitle>
            <BarChart3 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats?.completedOnboarding}</div>
            <p className="text-xs text-muted-foreground">
              Completed onboarding
            </p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="super-users" className="space-y-6">
        <TabsList>
          <TabsTrigger value="super-users">Super Users</TabsTrigger>
          <TabsTrigger value="all-users">All Users</TabsTrigger>
          <TabsTrigger value="user-types">User Type Distribution</TabsTrigger>
        </TabsList>

        <TabsContent value="super-users" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Crown className="h-5 w-5 text-yellow-600" />
                Super Users
              </CardTitle>
              <CardDescription>
                Pre-configured super users for each user type with sample data
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {superUsers.map((user) => (
                  <Card key={user.id} className="relative">
                    <CardHeader className="pb-3">
                      <div className="flex items-center justify-between">
                        <Badge className={getUserTypeColor(user.userType)}>
                          {user.userType}
                        </Badge>
                        <div className="flex gap-1">
                          {user.verified && (
                            <CheckCircle className="h-4 w-4 text-green-600" />
                          )}
                          {user.onboardingCompleted && (
                            <CheckCircle className="h-4 w-4 text-blue-600" />
                          )}
                        </div>
                      </div>
                      <CardTitle className="text-lg">
                        {user.firstName} {user.lastName}
                      </CardTitle>
                      <CardDescription className="text-sm">
                        {user.email}
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="space-y-2">
                        <div className="text-sm">
                          <span className="font-medium">Subtype:</span> {user.userSubtype}
                        </div>
                        <div className="flex justify-between items-center text-xs text-gray-500">
                          <span>Created: {new Date(user.createdAt).toLocaleDateString()}</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="all-users" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>All Users</CardTitle>
              <CardDescription>
                Complete list of users in the system
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {allUsers.slice(0, 20).map((user) => (
                  <div key={user.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center gap-4">
                      <div>
                        <div className="font-medium">
                          {user.firstName} {user.lastName}
                        </div>
                        <div className="text-sm text-gray-500">{user.email}</div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getUserTypeColor(user.userType)}>
                        {user.userType}
                      </Badge>
                      {user.verified ? (
                        <CheckCircle className="h-4 w-4 text-green-600" />
                      ) : (
                        <XCircle className="h-4 w-4 text-red-600" />
                      )}
                    </div>
                  </div>
                ))}
                {allUsers.length > 20 && (
                  <div className="text-center py-4">
                    <Button variant="outline">Load More</Button>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="user-types" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>User Type Distribution</CardTitle>
              <CardDescription>
                Breakdown of users by type across the platform
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {stats && Object.entries(stats.usersByType).map(([type, count]) => (
                  <Card key={type}>
                    <CardContent className="p-4 text-center">
                      <Badge className={getUserTypeColor(type as UserType)}>
                        {type}
                      </Badge>
                      <div className="text-2xl font-bold mt-2">{count}</div>
                      <div className="text-sm text-gray-500">users</div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}


=== FILE: client/src/pages/ai-market-analysis.tsx ===


import React, { useState } from 'react';
import { useParams } from 'wouter';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Brain, TrendingUp, Target, AlertTriangle, CheckCircle, BarChart3, Globe, Users, DollarSign } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';

interface MarketTrend {
  id: string;
  trend: string;
  impact: 'high' | 'medium' | 'low';
  direction: 'growing' | 'declining' | 'stable';
  confidence: number;
  description: string;
}

interface Competitor {
  id: string;
  name: string;
  marketShare: number;
  revenue: string;
  strengths: string[];
  weaknesses: string[];
  threat: 'high' | 'medium' | 'low';
}

interface Opportunity {
  id: string;
  title: string;
  description: string;
  marketSize: string;
  difficulty: 'easy' | 'medium' | 'hard';
  timeframe: string;
  potential: number;
}

function AIMarketAnalysis() {
  const { id } = useParams();
  const { toast } = useToast();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisComplete, setAnalysisComplete] = useState(false);

  // Mock AI analysis data
  const marketTrends: MarketTrend[] = [
    {
      id: '1',
      trend: 'AI-Driven Business Intelligence',
      impact: 'high',
      direction: 'growing',
      confidence: 94,
      description: 'Increasing demand for AI-powered analytics tools is creating new market opportunities'
    },
    {
      id: '2',
      trend: 'Remote Collaboration Tools',
      impact: 'high',
      direction: 'growing',
      confidence: 87,
      description: 'Post-pandemic shift to hybrid work models drives demand for collaboration platforms'
    },
    {
      id: '3',
      trend: 'Legacy Software Migration',
      impact: 'medium',
      direction: 'declining',
      confidence: 72,
      description: 'Traditional desktop software losing market share to cloud-based solutions'
    }
  ];

  const competitors: Competitor[] = [
    {
      id: '1',
      name: 'Microsoft Business Central',
      marketShare: 32,
      revenue: '$8.2B',
      strengths: ['Enterprise integration', 'Brand recognition', 'Global presence'],
      weaknesses: ['Complex setup', 'High cost', 'Limited customization'],
      threat: 'high'
    },
    {
      id: '2',
      name: 'Salesforce Platform',
      marketShare: 18,
      revenue: '$4.9B',
      strengths: ['CRM integration', 'Extensive ecosystem', 'Cloud-native'],
      weaknesses: ['Expensive for SMBs', 'Steep learning curve', 'Over-engineering'],
      threat: 'medium'
    },
    {
      id: '3',
      name: 'Emerging Startups',
      marketShare: 15,
      revenue: '$2.1B',
      strengths: ['Innovation', 'Agility', 'Niche focus'],
      weaknesses: ['Limited resources', 'Brand awareness', 'Market reach'],
      threat: 'low'
    }
  ];

  const opportunities: Opportunity[] = [
    {
      id: '1',
      title: 'SMB Market Penetration',
      description: 'Underserved small-medium businesses seeking affordable business intelligence',
      marketSize: '$24B',
      difficulty: 'medium',
      timeframe: '6-12 months',
      potential: 85
    },
    {
      id: '2',
      title: 'Industry-Specific Solutions',
      description: 'Vertical specialization in healthcare, manufacturing, and retail sectors',
      marketSize: '$18B',
      difficulty: 'hard',
      timeframe: '12-18 months',
      potential: 78
    },
    {
      id: '3',
      title: 'International Expansion',
      description: 'European and Asian markets with growing demand for business tools',
      marketSize: '$42B',
      difficulty: 'hard',
      timeframe: '18-24 months',
      potential: 92
    }
  ];

  const handleRunAnalysis = () => {
    setIsAnalyzing(true);
    
    // Simulate AI analysis
    setTimeout(() => {
      setIsAnalyzing(false);
      setAnalysisComplete(true);
      toast({
        title: "Analysis Complete",
        description: "AI has generated comprehensive market insights for your business",
      });
    }, 3000);
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getThreatColor = (threat: string) => {
    switch (threat) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'bg-green-100 text-green-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'hard': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (!analysisComplete) {
    return (
      <div className="max-w-4xl mx-auto">
        <Card className="text-center p-12">
          <CardHeader>
            <div className="mx-auto w-16 h-16 bg-gradient-to-br from-purple-500 to-teal-500 rounded-full flex items-center justify-center mb-4">
              <Brain className="h-8 w-8 text-white" />
            </div>
            <CardTitle className="text-2xl">AI Market Analysis</CardTitle>
            <CardDescription>
              Get comprehensive market insights powered by artificial intelligence
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {isAnalyzing ? (
              <div className="space-y-4">
                <div className="text-lg font-medium">Analyzing Market Data...</div>
                <Progress value={66} className="w-full" />
                <div className="space-y-2 text-sm text-gray-600">
                  <div className="flex items-center justify-center space-x-2">
                    <CheckCircle className="h-4 w-4 text-green-500" />
                    <span>Market size analysis complete</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2">
                    <CheckCircle className="h-4 w-4 text-green-500" />
                    <span>Competitor intelligence gathered</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2">
                    <div className="animate-spin h-4 w-4 border-2 border-blue-500 rounded-full border-t-transparent" />
                    <span>Trend analysis in progress</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2">
                    <div className="h-4 w-4 border-2 border-gray-300 rounded-full" />
                    <span>Opportunity identification pending</span>
                  </div>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                <p className="text-gray-600">
                  Our AI will analyze market trends, competitive landscape, and identify 
                  opportunities specific to your business model and industry.
                </p>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div className="flex flex-col items-center p-3 bg-gray-50 rounded-lg">
                    <Globe className="h-6 w-6 text-blue-500 mb-2" />
                    <span>Market Trends</span>
                  </div>
                  <div className="flex flex-col items-center p-3 bg-gray-50 rounded-lg">
                    <Users className="h-6 w-6 text-green-500 mb-2" />
                    <span>Competitor Analysis</span>
                  </div>
                  <div className="flex flex-col items-center p-3 bg-gray-50 rounded-lg">
                    <Target className="h-6 w-6 text-purple-500 mb-2" />
                    <span>Opportunities</span>
                  </div>
                  <div className="flex flex-col items-center p-3 bg-gray-50 rounded-lg">
                    <BarChart3 className="h-6 w-6 text-orange-500 mb-2" />
                    <span>Market Sizing</span>
                  </div>
                </div>
                <Button 
                  size="lg" 
                  onClick={handleRunAnalysis}
                  className="bg-gradient-to-r from-purple-600 to-teal-600"
                >
                  <Brain className="h-5 w-5 mr-2" />
                  Start AI Analysis
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-bold text-gray-800">AI Market Analysis Results</h1>
            <p className="text-gray-600">Comprehensive market insights generated by AI</p>
          </div>
          <Button onClick={handleRunAnalysis} variant="outline">
            <Brain className="h-4 w-4 mr-2" />
            Refresh Analysis
          </Button>
        </div>
      </div>

      <Tabs defaultValue="trends" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="trends">Market Trends</TabsTrigger>
          <TabsTrigger value="competitors">Competitors</TabsTrigger>
          <TabsTrigger value="opportunities">Opportunities</TabsTrigger>
          <TabsTrigger value="recommendations">AI Recommendations</TabsTrigger>
        </TabsList>

        <TabsContent value="trends" className="space-y-6">
          <div className="grid gap-6">
            {marketTrends.map(trend => (
              <Card key={trend.id}>
                <CardContent className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="text-lg font-semibold mb-2">{trend.trend}</h3>
                      <p className="text-gray-600">{trend.description}</p>
                    </div>
                    <div className="flex space-x-2">
                      <Badge className={getImpactColor(trend.impact)}>
                        {trend.impact} impact
                      </Badge>
                      <Badge variant={trend.direction === 'growing' ? 'default' : 'secondary'}>
                        {trend.direction === 'growing' ? '‚Üó' : trend.direction === 'declining' ? '‚Üò' : '‚Üí'} {trend.direction}
                      </Badge>
                    </div>
                  </div>
                  <div className="flex items-center space-x-4">
                    <div className="flex-1">
                      <div className="flex justify-between text-sm mb-1">
                        <span>AI Confidence</span>
                        <span>{trend.confidence}%</span>
                      </div>
                      <Progress value={trend.confidence} className="h-2" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="competitors" className="space-y-6">
          <div className="grid gap-6">
            {competitors.map(competitor => (
              <Card key={competitor.id}>
                <CardContent className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="text-lg font-semibold mb-2">{competitor.name}</h3>
                      <div className="flex items-center space-x-4 text-sm text-gray-600">
                        <span>Market Share: {competitor.marketShare}%</span>
                        <span>Revenue: {competitor.revenue}</span>
                      </div>
                    </div>
                    <Badge className={getThreatColor(competitor.threat)}>
                      {competitor.threat} threat
                    </Badge>
                  </div>
                  
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-medium text-green-600 mb-2">Strengths</h4>
                      <ul className="space-y-1 text-sm">
                        {competitor.strengths.map((strength, index) => (
                          <li key={index} className="flex items-center space-x-2">
                            <CheckCircle className="h-4 w-4 text-green-500" />
                            <span>{strength}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-medium text-red-600 mb-2">Weaknesses</h4>
                      <ul className="space-y-1 text-sm">
                        {competitor.weaknesses.map((weakness, index) => (
                          <li key={index} className="flex items-center space-x-2">
                            <AlertTriangle className="h-4 w-4 text-red-500" />
                            <span>{weakness}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="opportunities" className="space-y-6">
          <div className="grid gap-6">
            {opportunities.map(opportunity => (
              <Card key={opportunity.id}>
                <CardContent className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="text-lg font-semibold mb-2">{opportunity.title}</h3>
                      <p className="text-gray-600 mb-2">{opportunity.description}</p>
                      <div className="flex items-center space-x-4 text-sm text-gray-600">
                        <span className="flex items-center space-x-1">
                          <DollarSign className="h-4 w-4" />
                          <span>Market Size: {opportunity.marketSize}</span>
                        </span>
                        <span>Timeline: {opportunity.timeframe}</span>
                      </div>
                    </div>
                    <Badge className={getDifficultyColor(opportunity.difficulty)}>
                      {opportunity.difficulty}
                    </Badge>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Opportunity Potential</span>
                      <span>{opportunity.potential}%</span>
                    </div>
                    <Progress value={opportunity.potential} className="h-2" />
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="recommendations" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Brain className="h-5 w-5 text-purple-600" />
                <span>AI Strategic Recommendations</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid gap-4">
                <div className="p-4 bg-blue-50 rounded-lg">
                  <h4 className="font-semibold text-blue-800 mb-2">Immediate Actions (0-3 months)</h4>
                  <ul className="space-y-1 text-sm text-blue-700">
                    <li>‚Ä¢ Focus on SMB market penetration with competitive pricing</li>
                    <li>‚Ä¢ Develop AI-powered features to differentiate from legacy competitors</li>
                    <li>‚Ä¢ Partner with industry consultants for faster market entry</li>
                  </ul>
                </div>
                
                <div className="p-4 bg-green-50 rounded-lg">
                  <h4 className="font-semibold text-green-800 mb-2">Medium-term Strategy (3-12 months)</h4>
                  <ul className="space-y-1 text-sm text-green-700">
                    <li>‚Ä¢ Build industry-specific vertical solutions</li>
                    <li>‚Ä¢ Establish strategic partnerships with complementary platforms</li>
                    <li>‚Ä¢ Invest in customer success to improve retention rates</li>
                  </ul>
                </div>
                
                <div className="p-4 bg-purple-50 rounded-lg">
                  <h4 className="font-semibold text-purple-800 mb-2">Long-term Vision (12+ months)</h4>
                  <ul className="space-y-1 text-sm text-purple-700">
                    <li>‚Ä¢ Expand internationally to European markets</li>
                    <li>‚Ä¢ Develop enterprise-grade features for larger clients</li>
                    <li>‚Ä¢ Consider strategic acquisitions of complementary technologies</li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

export default AIMarketAnalysis;


=== FILE: client/src/pages/programs.tsx ===

import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { apiRequest } from "@/lib/queryClient";
import { useCreateMutation } from "@/hooks/useFormMutation";
import { getStatusColorClass, getStatusBadgeVariant } from "@/utils/statusUtils";
import { formatDate, formatDateRange } from "@/utils/dateUtils";
import { CardLoadingSpinner } from "@/components/ui/loading-spinner";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { 
  Loader2, 
  Calendar,
  Users,
  Hourglass,
  CheckCircle2,
  Plus,
  ArrowRight,
  ListFilter,
  Search,
  BarChart
} from "lucide-react";

// Program schema
const programSchema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  description: z.string().optional(),
  type: z.string().min(1, { message: "Type is required" }),
  organizationId: z.number(),
  status: z.string().min(1, { message: "Status is required" }),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  capacity: z.string().transform(val => val ? parseInt(val) : null).optional(),
});

type Program = {
  id: number;
  name: string;
  description: string | null;
  type: string;
  organizationId: number;
  status: string;
  startDate: string | null;
  endDate: string | null;
  capacity: number | null;
  applicationProcess: any;
  metrics: any;
  createdAt: string;
};

// Cohort schema
const cohortSchema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  status: z.string().min(1, { message: "Status is required" }),
  programId: z.number(),
  startDate: z.string().min(1, { message: "Start date is required" }),
  endDate: z.string().min(1, { message: "End date is required" }),
});

function ProgramsList() {
  // State for selected organization (for demo we'll use a fixed value)
  const organizationId = 3; // Assuming ID 3 is for an accelerator/incubator organization
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);

  // Query programs
  const { data: programs, isLoading } = useQuery({
    queryKey: ['/api/programs/organization', organizationId],
    queryFn: () => apiRequest(`/api/programs/organization/${organizationId}`),
  });

  // Create program form
  const form = useForm<z.infer<typeof programSchema>>({
    resolver: zodResolver(programSchema),
    defaultValues: {
      name: "",
      description: "",
      type: "accelerator",
      organizationId: organizationId,
      status: "active",
    },
  });

  // Mutation to create program
  const createProgram = useCreateMutation<Program, z.infer<typeof programSchema>>(
    '/api/programs',
    'Program',
    [`/api/programs/organization/${organizationId}`]
  );

  // Handle form submission
  function onSubmit(values: z.infer<typeof programSchema>) {
    // Add default values for fields that might be empty
    const programData = {
      ...values,
      applicationProcess: { stages: [] },
      metrics: { 
        startups: 0,
        mentors: 0,
        investors: 0,
        events: 0,
        successRate: 0,
      }
    };
    createProgram.mutate(programData, {
      onSuccess: () => {
        setIsCreateDialogOpen(false);
        form.reset();
      }
    });
  }

  // Helper function to get program type badge color
  const getProgramTypeColor = (type: string) => {
    switch (type.toLowerCase()) {
      case "accelerator":
        return "bg-blue-500";
      case "incubator":
        return "bg-green-500";
      case "mentorship":
        return "bg-purple-500";
      case "workshop":
        return "bg-orange-500";
      default:
        return "bg-gray-500";
    }
  };

  // Helper functions moved to utils

  if (isLoading) {
    return <CardLoadingSpinner text="Loading programs..." />;
  }

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-4xl font-bold">Programs</h1>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Create New Program
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[550px]">
            <DialogHeader>
              <DialogTitle>Create New Program</DialogTitle>
              <DialogDescription>
                Create a new program for entrepreneurs and startups.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Program Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Summer Founders Program" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="A 12-week program to help early-stage founders..."
                          className="min-h-24"
                          {...field}
                          value={field.value || ""}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="type"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Program Type</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select program type" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="accelerator">Accelerator</SelectItem>
                            <SelectItem value="incubator">Incubator</SelectItem>
                            <SelectItem value="mentorship">Mentorship</SelectItem>
                            <SelectItem value="workshop">Workshop</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="status"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Status</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select status" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="active">Active</SelectItem>
                            <SelectItem value="upcoming">Upcoming</SelectItem>
                            <SelectItem value="completed">Completed</SelectItem>
                            <SelectItem value="cancelled">Cancelled</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="startDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Start Date</FormLabel>
                        <FormControl>
                          <Input type="date" {...field} value={field.value || ""} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="endDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>End Date</FormLabel>
                        <FormControl>
                          <Input type="date" {...field} value={field.value || ""} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <FormField
                  control={form.control}
                  name="capacity"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Capacity (max participants)</FormLabel>
                      <FormControl>
                        <Input type="number" placeholder="20" {...field} value={field.value || ""} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <DialogFooter>
                  <Button type="submit" disabled={createProgram.isPending}>
                    {createProgram.isPending && (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    Create Program
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {programs && programs.length > 0 ? (
          programs.map((program: Program) => (
            <Card key={program.id} className="overflow-hidden">
              <CardHeader className="pb-3">
                <div className="flex justify-between items-start">
                  <CardTitle className="text-xl">{program.name}</CardTitle>
                  <Badge className={getProgramTypeColor(program.type)}>
                    {program.type}
                  </Badge>
                </div>
                <CardDescription className="text-sm line-clamp-2">
                  {program.description || "No description provided."}
                </CardDescription>
              </CardHeader>
              <CardContent className="pb-3">
                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div className="flex items-center space-x-2">
                    <Calendar className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="text-sm text-gray-500">Start Date</p>
                      <p className="text-sm font-medium">{formatDate(program.startDate)}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Calendar className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="text-sm text-gray-500">End Date</p>
                      <p className="text-sm font-medium">{formatDate(program.endDate)}</p>
                    </div>
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="flex items-center space-x-2">
                    <Users className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="text-sm text-gray-500">Capacity</p>
                      <p className="text-sm font-medium">{program.capacity || "Unlimited"}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Badge variant={getStatusBadgeVariant(program.status as any)}>
                      {program.status}
                    </Badge>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between border-t p-3 pt-3">
                <Button variant="outline" size="sm">
                  View Cohorts
                </Button>
                <Button size="sm">
                  Manage
                  <ArrowRight className="ml-1 h-4 w-4" />
                </Button>
              </CardFooter>
            </Card>
          ))
        ) : (
          <div className="col-span-3 text-center py-10">
            <p className="text-lg text-gray-500 dark:text-gray-400">
              No programs found. Create your first program to get started.
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

function CohortManagement() {
  const programId = 1; // For demo purposes
  const { toast } = useToast();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  
  // Query cohorts for the selected program
  const { data: cohorts, isLoading } = useQuery({
    queryKey: ['/api/cohorts/program', programId],
    queryFn: () => apiRequest(`/api/cohorts/program/${programId}`),
  });
  
  // Create cohort form
  const form = useForm<z.infer<typeof cohortSchema>>({
    resolver: zodResolver(cohortSchema),
    defaultValues: {
      name: "",
      status: "upcoming",
      programId: programId,
      startDate: "",
      endDate: "",
    },
  });
  
  // Mutation to create cohort
  const createCohort = useMutation({
    mutationFn: (values: z.infer<typeof cohortSchema>) => {
      return apiRequest('/api/cohorts', {
        method: 'POST',
        body: JSON.stringify(values),
        headers: {
          'Content-Type': 'application/json',
        },
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/cohorts/program', programId] });
      toast({
        title: "Cohort created",
        description: "The cohort has been created successfully.",
      });
      setIsCreateDialogOpen(false);
      form.reset();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create cohort. Please try again.",
        variant: "destructive",
      });
    },
  });
  
  // Handle form submission
  function onSubmit(values: z.infer<typeof cohortSchema>) {
    // Add metrics data structure
    const cohortData = {
      ...values,
      metrics: {
        participants: 0,
        completionRate: 0,
        satisfactionScore: 0,
        outcomes: {
          raised_funding: 0,
          partnerships: 0,
          revenue_growth: 0
        }
      }
    };
    createCohort.mutate(cohortData);
  }
  
  // Format date for display
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };
  
  // Helper function to get status color
  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case "active":
        return "bg-green-500 text-white";
      case "upcoming":
        return "bg-blue-500 text-white";
      case "completed":
        return "bg-gray-500 text-white";
      default:
        return "bg-gray-500 text-white";
    }
  };
  
  // Helper function to calculate progress percentage based on dates
  const calculateProgress = (startDate: string, endDate: string) => {
    const start = new Date(startDate).getTime();
    const end = new Date(endDate).getTime();
    const now = new Date().getTime();
    
    if (now < start) return 0;
    if (now > end) return 100;
    
    return Math.round(((now - start) / (end - start)) * 100);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
      </div>
    );
  }
  
  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h2 className="text-3xl font-bold">Cohort Management</h2>
          <p className="text-gray-500">Manage program cohorts and participant tracking</p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Create New Cohort
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[550px]">
            <DialogHeader>
              <DialogTitle>Create New Cohort</DialogTitle>
              <DialogDescription>
                Create a new cohort for your program.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Cohort Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Summer 2023" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Status</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select status" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="upcoming">Upcoming</SelectItem>
                          <SelectItem value="active">Active</SelectItem>
                          <SelectItem value="completed">Completed</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="startDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Start Date</FormLabel>
                        <FormControl>
                          <Input type="date" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="endDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>End Date</FormLabel>
                        <FormControl>
                          <Input type="date" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <DialogFooter>
                  <Button type="submit" disabled={createCohort.isPending}>
                    {createCohort.isPending && (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    Create Cohort
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>
      
      <div className="mb-6 flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <ListFilter className="h-5 w-5 text-gray-500" />
          <Select defaultValue="all">
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Statuses</SelectItem>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="upcoming">Upcoming</SelectItem>
              <SelectItem value="completed">Completed</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div className="relative w-64">
          <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-500" />
          <Input placeholder="Search cohorts..." className="pl-8" />
        </div>
      </div>
      
      <div className="space-y-4">
        {cohorts && cohorts.length > 0 ? (
          cohorts.map((cohort: any) => {
            const progressPercent = calculateProgress(cohort.startDate, cohort.endDate);
            return (
              <Card key={cohort.id} className="overflow-hidden">
                <div className="flex flex-col md:flex-row">
                  <div className="flex-1 p-6">
                    <div className="flex justify-between items-start mb-4">
                      <div>
                        <h3 className="text-xl font-semibold">{cohort.name}</h3>
                        <p className="text-sm text-gray-500">
                          {formatDate(cohort.startDate)} - {formatDate(cohort.endDate)}
                        </p>
                      </div>
                      <Badge className={getStatusColor(cohort.status)}>
                        {cohort.status}
                      </Badge>
                    </div>
                    
                    <div className="mb-4">
                      <div className="flex justify-between mb-1">
                        <span className="text-sm font-medium">Progress</span>
                        <span className="text-sm font-medium">{progressPercent}%</span>
                      </div>
                      <Progress value={progressPercent} className="h-2" />
                    </div>
                    
                    <div className="grid grid-cols-3 gap-4 mb-4">
                      <div className="flex flex-col items-center p-2 bg-gray-50 rounded-md">
                        <Users className="h-5 w-5 text-blue-500 mb-1" />
                        <p className="text-sm font-medium">{cohort.metrics?.participants || 0}</p>
                        <p className="text-xs text-gray-500">Participants</p>
                      </div>
                      <div className="flex flex-col items-center p-2 bg-gray-50 rounded-md">
                        <CheckCircle2 className="h-5 w-5 text-green-500 mb-1" />
                        <p className="text-sm font-medium">{cohort.metrics?.completionRate || 0}%</p>
                        <p className="text-xs text-gray-500">Completion</p>
                      </div>
                      <div className="flex flex-col items-center p-2 bg-gray-50 rounded-md">
                        <Hourglass className="h-5 w-5 text-orange-500 mb-1" />
                        <p className="text-sm font-medium">
                          {Math.floor((new Date(cohort.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))} days
                        </p>
                        <p className="text-xs text-gray-500">Remaining</p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 dark:bg-gray-800 p-6 flex flex-col justify-between md:w-64">
                    <div>
                      <div className="flex items-center mb-4">
                        <BarChart className="h-5 w-5 text-gray-500 mr-2" />
                        <h4 className="font-medium">Key Outcomes</h4>
                      </div>
                      <ul className="space-y-2 text-sm">
                        <li className="flex justify-between">
                          <span>Raised Funding</span>
                          <span className="font-medium">{cohort.metrics?.outcomes?.raised_funding || 0}</span>
                        </li>
                        <li className="flex justify-between">
                          <span>Partnerships</span>
                          <span className="font-medium">{cohort.metrics?.outcomes?.partnerships || 0}</span>
                        </li>
                        <li className="flex justify-between">
                          <span>Revenue Growth</span>
                          <span className="font-medium">{cohort.metrics?.outcomes?.revenue_growth || 0}%</span>
                        </li>
                      </ul>
                    </div>
                    <div className="mt-6">
                      <Button className="w-full">Manage Participants</Button>
                    </div>
                  </div>
                </div>
              </Card>
            );
          })
        ) : (
          <div className="text-center py-10">
            <p className="text-lg text-gray-500 dark:text-gray-400">
              No cohorts found. Create your first cohort to get started.
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

export default function ProgramsPage() {
  const tabs = ["Programs", "Cohorts", "Participants", "Outcomes"];
  
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-6">Program Management</h1>
      <Tabs defaultValue="Programs" className="w-full">
        <TabsList className="grid w-[600px] grid-cols-4 mb-8">
          {tabs.map((tab) => (
            <TabsTrigger key={tab} value={tab}>
              {tab}
            </TabsTrigger>
          ))}
        </TabsList>
        <TabsContent value="Programs" className="space-y-4">
          <ProgramsList />
        </TabsContent>
        <TabsContent value="Cohorts" className="space-y-4">
          <CohortManagement />
        </TabsContent>
        <TabsContent value="Participants" className="space-y-4">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Participant Management</h3>
            <p className="text-gray-500 mb-4">This feature is coming soon.</p>
            <Button>Go to Programs</Button>
          </div>
        </TabsContent>
        <TabsContent value="Outcomes" className="space-y-4">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Outcomes Tracking</h3>
            <p className="text-gray-500 mb-4">This feature is coming soon.</p>
            <Button>Go to Programs</Button>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}

=== FILE: client/src/pages/venture-studio.tsx ===


import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { 
  Rocket, 
  Lightbulb, 
  Users, 
  Building2, 
  Target, 
  TrendingUp,
  Loader2,
  Plus,
  Code,
  Briefcase,
  DollarSign,
  Calendar,
  CheckCircle2
} from "lucide-react";

const ventureIdeaSchema = z.object({
  title: z.string().min(3, "Title must be at least 3 characters"),
  description: z.string().min(10, "Description must be at least 10 characters"),
  industry: z.string().min(1, "Industry is required"),
  targetMarket: z.string().min(1, "Target market is required"),
  estimatedBudget: z.string().transform(val => parseInt(val)),
  timeline: z.string().min(1, "Timeline is required"),
});

const studioCapabilities = [
  {
    icon: Lightbulb,
    title: "Idea Generation",
    description: "Market research and opportunity identification",
    status: "active"
  },
  {
    icon: Users,
    title: "Co-founder Matching",
    description: "Find the right team for your venture",
    status: "active"
  },
  {
    icon: Code,
    title: "Product Development",
    description: "Full-stack engineering and design",
    status: "active"
  },
  {
    icon: TrendingUp,
    title: "Growth Marketing",
    description: "Marketing strategy and execution",
    status: "active"
  },
  {
    icon: DollarSign,
    title: "Fundraising",
    description: "Investor connections and pitch preparation",
    status: "active"
  },
  {
    icon: Briefcase,
    title: "Operations",
    description: "Legal, finance, and business operations",
    status: "active"
  }
];

const currentVentures = [
  {
    id: 1,
    name: "EcoLogistics AI",
    industry: "Supply Chain",
    stage: "Development",
    progress: 65,
    team: ["Sarah Chen", "Mike Rodriguez", "Lisa Park"],
    investment: 850000,
    timeline: "Q2 2024 Launch",
    description: "AI-powered sustainable logistics optimization platform"
  },
  {
    id: 2,
    name: "HealthSync",
    industry: "Healthcare",
    stage: "Validation", 
    progress: 40,
    team: ["Dr. James Wilson", "Anna Kumar"],
    investment: 450000,
    timeline: "Q3 2024 Beta",
    description: "Unified patient data platform for healthcare providers"
  },
  {
    id: 3,
    name: "FinBridge",
    industry: "FinTech",
    stage: "Pre-launch",
    progress: 85,
    team: ["Tom Anderson", "Maya Patel", "Alex Kim", "Rachel Green"],
    investment: 1200000,
    timeline: "Q1 2024 Launch",
    description: "Cross-border payments for emerging markets"
  }
];

function VentureStudioDashboard() {
  const { toast } = useToast();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);

  const form = useForm<z.infer<typeof ventureIdeaSchema>>({
    resolver: zodResolver(ventureIdeaSchema),
    defaultValues: {
      title: "",
      description: "",
      industry: "",
      targetMarket: "",
      timeline: "",
    },
  });

  function onSubmit(values: z.infer<typeof ventureIdeaSchema>) {
    toast({
      title: "Venture Idea Submitted",
      description: "Your idea has been submitted for evaluation by our studio team.",
    });
    setIsCreateDialogOpen(false);
    form.reset();
  }

  const getStageColor = (stage: string) => {
    switch (stage.toLowerCase()) {
      case "development": return "bg-blue-500";
      case "validation": return "bg-yellow-500";
      case "pre-launch": return "bg-green-500";
      default: return "bg-gray-500";
    }
  };

  return (
    <div className="container mx-auto py-8">
      {/* Header */}
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent">
            Venture Studio
          </h1>
          <p className="text-xl text-gray-600">Building companies from scratch with full-service support</p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button className="bg-gradient-to-r from-purple-600 to-indigo-600">
              <Plus className="mr-2 h-4 w-4" />
              Submit Venture Idea
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>Submit New Venture Idea</DialogTitle>
              <DialogDescription>
                Share your venture idea with our studio team for evaluation and potential development.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Venture Title</FormLabel>
                      <FormControl>
                        <Input placeholder="AI-Powered Supply Chain Platform" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Describe the problem, solution, and market opportunity..."
                          className="min-h-32"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="industry"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Industry</FormLabel>
                        <FormControl>
                          <Input placeholder="FinTech, HealthTech, etc." {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="targetMarket"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Target Market</FormLabel>
                        <FormControl>
                          <Input placeholder="SMBs, Enterprises, Consumers" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="estimatedBudget"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Estimated Budget (USD)</FormLabel>
                        <FormControl>
                          <Input type="number" placeholder="500000" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="timeline"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Expected Timeline</FormLabel>
                        <FormControl>
                          <Input placeholder="12-18 months" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <DialogFooter>
                  <Button type="submit">Submit for Evaluation</Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      {/* Studio Capabilities */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Building2 className="h-6 w-6" />
            Studio Capabilities
          </CardTitle>
          <CardDescription>
            Full-service company building with integrated expertise across all functions
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-6">
            {studioCapabilities.map((capability, index) => {
              const IconComponent = capability.icon;
              return (
                <div key={index} className="flex items-start space-x-3 p-4 rounded-lg bg-gray-50">
                  <div className="bg-purple-100 p-2 rounded-lg">
                    <IconComponent className="h-5 w-5 text-purple-600" />
                  </div>
                  <div>
                    <h3 className="font-semibold mb-1">{capability.title}</h3>
                    <p className="text-sm text-gray-600">{capability.description}</p>
                    <Badge variant="secondary" className="mt-2 text-xs">
                      {capability.status}
                    </Badge>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Current Ventures */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold mb-6">Current Ventures in Development</h2>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {currentVentures.map((venture) => (
            <Card key={venture.id} className="overflow-hidden">
              <CardHeader className="pb-3">
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-lg">{venture.name}</CardTitle>
                    <CardDescription className="text-sm">{venture.industry}</CardDescription>
                  </div>
                  <Badge className={getStageColor(venture.stage)}>
                    {venture.stage}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <p className="text-sm text-gray-600">{venture.description}</p>
                
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span>Progress</span>
                    <span>{venture.progress}%</span>
                  </div>
                  <Progress value={venture.progress} className="h-2" />
                </div>

                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <p className="font-medium text-gray-500">Investment</p>
                    <p className="font-semibold">${(venture.investment / 1000).toFixed(0)}K</p>
                  </div>
                  <div>
                    <p className="font-medium text-gray-500">Timeline</p>
                    <p className="font-semibold">{venture.timeline}</p>
                  </div>
                </div>

                <div>
                  <p className="font-medium text-gray-500 text-sm mb-2">Team</p>
                  <div className="flex -space-x-2">
                    {venture.team.map((member, index) => (
                      <div
                        key={index}
                        className="w-8 h-8 bg-gradient-to-br from-purple-400 to-pink-400 rounded-full flex items-center justify-center text-white text-xs font-medium border-2 border-white"
                        title={member}
                      >
                        {member.split(' ').map(n => n[0]).join('')}
                      </div>
                    ))}
                  </div>
                </div>

                <Button variant="outline" size="sm" className="w-full">
                  View Details
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Studio Metrics */}
      <div className="grid md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Rocket className="h-8 w-8 text-purple-600" />
              <div>
                <p className="text-2xl font-bold">12</p>
                <p className="text-sm text-gray-600">Active Ventures</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <CheckCircle2 className="h-8 w-8 text-green-600" />
              <div>
                <p className="text-2xl font-bold">8</p>
                <p className="text-sm text-gray-600">Successful Exits</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <DollarSign className="h-8 w-8 text-green-600" />
              <div>
                <p className="text-2xl font-bold">$45M</p>
                <p className="text-sm text-gray-600">Total Invested</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Users className="h-8 w-8 text-blue-600" />
              <div>
                <p className="text-2xl font-bold">150+</p>
                <p className="text-sm text-gray-600">Team Members</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default function VentureStudio() {
  return (
    <Tabs defaultValue="dashboard" className="w-full">
      <div className="container mx-auto py-8">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="ventures">Ventures</TabsTrigger>
          <TabsTrigger value="resources">Resources</TabsTrigger>
          <TabsTrigger value="team">Team</TabsTrigger>
        </TabsList>
      </div>
      
      <TabsContent value="dashboard">
        <VentureStudioDashboard />
      </TabsContent>
      
      <TabsContent value="ventures">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Venture Portfolio</h3>
            <p className="text-gray-500 mb-4">Detailed venture tracking and management coming soon.</p>
            <Button>View All Ventures</Button>
          </div>
        </div>
      </TabsContent>
      
      <TabsContent value="resources">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Studio Resources</h3>
            <p className="text-gray-500 mb-4">Resource allocation and management tools coming soon.</p>
            <Button>Manage Resources</Button>
          </div>
        </div>
      </TabsContent>
      
      <TabsContent value="team">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Studio Team</h3>
            <p className="text-gray-500 mb-4">Team management and co-founder matching coming soon.</p>
            <Button>View Team</Button>
          </div>
        </div>
      </TabsContent>
    </Tabs>
  );
}


=== FILE: client/src/pages/accelerator.tsx ===

import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import {
  Target,
  Users,
  Calendar,
  Trophy,
  Clock,
  BookOpen,
  Presentation,
  Network,
  DollarSign,
  TrendingUp,
  Building2
} from "lucide-react";

const currentCohorts = [
  {
    id: 1,
    name: "Summer 2024 Cohort",
    status: "Active",
    startDate: "2024-06-01",
    demoDay: "2024-08-15",
    progress: 75,
    companies: 12,
    weeklyMeetings: "Tuesdays 2PM PST",
    focus: "AI & Deep Tech"
  },
  {
    id: 2,
    name: "Fall 2024 Cohort",
    status: "Applications Open",
    startDate: "2024-09-15",
    demoDay: "2024-12-10",
    progress: 0,
    companies: 0,
    applications: 89,
    focus: "Climate Tech & Sustainability"
  }
];

const acceleratorFeatures = [
  {
    icon: Users,
    title: "Cohort-Based Learning",
    description: "Learn alongside peer startups in structured cohorts",
    details: "12-15 startups per cohort with weekly group sessions"
  },
  {
    icon: BookOpen,
    title: "Structured Curriculum",
    description: "Proven framework covering all aspects of startup building",
    details: "12-week program with weekly modules and assignments"
  },
  {
    icon: Network,
    title: "Mentor Network",
    description: "Access to 200+ mentors across industries",
    details: "1:1 mentor matching and weekly mentor office hours"
  },
  {
    icon: Presentation,
    title: "Demo Day",
    description: "Present to 500+ investors and industry leaders",
    details: "Professional pitch coaching and investor matching"
  },
  {
    icon: DollarSign,
    title: "Initial Investment",
    description: "$150K for 8% equity upon acceptance",
    details: "Follow-on funding connections and investor introductions"
  },
  {
    icon: Trophy,
    title: "Alumni Network",
    description: "Join 1,200+ successful alumni companies",
    details: "Ongoing support and cross-portfolio collaboration"
  }
];

const programSchedule = [
  {
    week: "Week 1-2",
    title: "Foundation & Vision",
    topics: ["Product-Market Fit", "Customer Discovery", "Team Building"],
    deliverable: "Customer Interview Summary"
  },
  {
    week: "Week 3-4",
    title: "Product Development",
    topics: ["MVP Design", "Technical Architecture", "User Experience"],
    deliverable: "Product Roadmap"
  },
  {
    week: "Week 5-6",
    title: "Go-to-Market",
    topics: ["Marketing Strategy", "Sales Process", "Pricing Strategy"],
    deliverable: "GTM Plan"
  },
  {
    week: "Week 7-8",
    title: "Business Model",
    topics: ["Revenue Streams", "Unit Economics", "Financial Modeling"],
    deliverable: "Financial Projections"
  },
  {
    week: "Week 9-10",
    title: "Fundraising Prep",
    topics: ["Pitch Deck", "Due Diligence", "Term Sheets"],
    deliverable: "Investor Deck"
  },
  {
    week: "Week 11-12",
    title: "Demo Day Prep",
    topics: ["Pitch Practice", "Investor Meetings", "Next Steps"],
    deliverable: "Demo Day Presentation"
  }
];

const successMetrics = [
  { label: "Companies Accelerated", value: "450+", icon: Building2 },
  { label: "Total Funding Raised", value: "$2.8B", icon: DollarSign },
  { label: "Active Mentors", value: "200+", icon: Users },
  { label: "Demo Day Investors", value: "500+", icon: TrendingUp }
];

function AcceleratorDashboard() {
  return (
    <div className="container mx-auto py-8">
      {/* Header */}
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-teal-600 to-blue-600 bg-clip-text text-transparent">
          Startup Accelerator
        </h1>
        <p className="text-xl text-gray-600 max-w-3xl mx-auto">
          Intensive 12-week programs designed to accelerate your startup's growth through
          structured curriculum, mentorship, and investor connections.
        </p>
      </div>

      {/* Current Cohorts */}
      <div className="mb-12">
        <h2 className="text-2xl font-bold mb-6">Current Cohorts</h2>
        <div className="grid md:grid-cols-2 gap-6">
          {currentCohorts.map((cohort) => (
            <Card key={cohort.id} className="overflow-hidden">
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-xl">{cohort.name}</CardTitle>
                    <CardDescription>Focus: {cohort.focus}</CardDescription>
                  </div>
                  <Badge variant={cohort.status === 'Active' ? 'default' : 'outline'}>
                    {cohort.status}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                {cohort.status === 'Active' && (
                  <div>
                    <div className="flex justify-between text-sm mb-2">
                      <span>Program Progress</span>
                      <span>{cohort.progress}%</span>
                    </div>
                    <Progress value={cohort.progress} className="h-2" />
                  </div>
                )}

                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="font-medium">Start Date</p>
                      <p className="text-gray-600">{new Date(cohort.startDate).toLocaleDateString()}</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Presentation className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="font-medium">Demo Day</p>
                      <p className="text-gray-600">{new Date(cohort.demoDay).toLocaleDateString()}</p>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="font-medium">Companies</p>
                      <p className="text-gray-600">
                        {cohort.status === 'Active' ? cohort.companies : `${cohort.applications} applications`}
                      </p>
                    </div>
                  </div>
                  {cohort.status === 'Active' && (
                    <div className="flex items-center gap-2">
                      <Clock className="h-4 w-4 text-gray-500" />
                      <div>
                        <p className="font-medium">Meetings</p>
                        <p className="text-gray-600">{cohort.weeklyMeetings}</p>
                      </div>
                    </div>
                  )}
                </div>

                <Button variant="outline" className="w-full">
                  {cohort.status === 'Active' ? 'View Cohort' : 'Apply Now'}
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Program Features */}
      <Card className="mb-12">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-6 w-6" />
            Accelerator Program Features
          </CardTitle>
          <CardDescription>
            Comprehensive support system designed to accelerate startup growth
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-6">
            {acceleratorFeatures.map((feature, index) => {
              const IconComponent = feature.icon;
              return (
                <div key={index} className="p-4 rounded-lg border bg-gray-50">
                  <div className="flex items-start space-x-3">
                    <div className="bg-teal-100 p-2 rounded-lg">
                      <IconComponent className="h-5 w-5 text-teal-600" />
                    </div>
                    <div>
                      <h3 className="font-semibold mb-1">{feature.title}</h3>
                      <p className="text-sm text-gray-600 mb-2">{feature.description}</p>
                      <p className="text-xs text-gray-500">{feature.details}</p>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Success Metrics */}
      <div className="grid md:grid-cols-4 gap-6">
        {successMetrics.map((metric, index) => (
          <Card key={index}>
            <CardContent className="p-6 text-center">
              <div className="text-3xl font-bold text-teal-600 mb-2">{metric.value}</div>
              <div className="text-sm text-gray-600">{metric.label}</div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

function ProgramSchedule() {
  return (
    <div className="container mx-auto py-8">
      <div className="mb-8">
        <h2 className="text-3xl font-bold mb-4">12-Week Program Schedule</h2>
        <p className="text-gray-600">Structured curriculum designed to cover all critical aspects of startup development</p>
      </div>

      <div className="space-y-6">
        {programSchedule.map((week, index) => (
          <Card key={index}>
            <CardContent className="p-6">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between">
                <div className="mb-4 md:mb-0">
                  <div className="flex items-center gap-3 mb-2">
                    <Badge variant="outline">{week.week}</Badge>
                    <h3 className="text-xl font-semibold">{week.title}</h3>
                  </div>
                  <div className="flex flex-wrap gap-2 mb-2">
                    {week.topics.map((topic, topicIndex) => (
                      <Badge key={topicIndex} variant="secondary" className="text-xs">
                        {topic}
                      </Badge>
                    ))}
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-sm text-gray-500">Deliverable</p>
                  <p className="font-medium">{week.deliverable}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

export default function Accelerator() {
  return (
    <Tabs defaultValue="dashboard" className="w-full">
      <div className="container mx-auto py-8">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="schedule">Program</TabsTrigger>
          <TabsTrigger value="mentors">Mentors</TabsTrigger>
          <TabsTrigger value="alumni">Alumni</TabsTrigger>
        </TabsList>
      </div>

      <TabsContent value="dashboard">
        <AcceleratorDashboard />
      </TabsContent>

      <TabsContent value="schedule">
        <ProgramSchedule />
      </TabsContent>

      <TabsContent value="mentors">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Mentor Network</h3>
            <p className="text-gray-500 mb-4">Mentor directory and matching system coming soon.</p>
            <Button>Browse Mentors</Button>
          </div>
        </div>
      </TabsContent>

      <TabsContent value="alumni">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Alumni Network</h3>
            <p className="text-gray-500 mb-4">Alumni directory and success stories coming soon.</p>
            <Button>View Alumni</Button>
          </div>
        </div>
      </TabsContent>
    </Tabs>
  );
}

=== FILE: client/src/pages/organizations.tsx ===

import React, { useState } from 'react';
import { useAuth } from '@/hooks/use-auth';
import { useOrganizations } from '@/hooks/use-organizations';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Separator } from '@/components/ui/separator';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { UserType } from '../../../shared/schema';
import { 
  Building, 
  Plus, 
  Search, 
  Filter, 
  MoreVertical, 
  Edit, 
  Trash2, 
  Users, 
  Settings, 
  Globe, 
  MapPin, 
  Calendar, 
  Shield, 
  Crown,
  Eye,
  EyeOff,
  CheckCircle,
  Clock,
  XCircle,
  TrendingUp,
  DollarSign,
  Target,
  Award,
  Star,
  Link,
  Mail,
  Phone,
  Linkedin,
  Twitter,
  Github
} from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

interface Organization {
  id: string;
  name: string;
  description?: string;
  organizationType: UserType;
  ownerId: string;
  industry?: string;
  size?: string;
  location?: string;
  website?: string;
  logoUrl?: string;
  verified: boolean;
  createdAt: string;
  updatedAt: string;
  memberCount?: number;
  revenue?: number;
  fundingStage?: string;
  socialLinks?: {
    linkedin?: string;
    twitter?: string;
    github?: string;
  };
  contactInfo?: {
    email?: string;
    phone?: string;
    address?: string;
  };
}

interface OrganizationMember {
  id: string;
  name: string;
  email: string;
  role: 'owner' | 'admin' | 'member' | 'viewer';
  avatar?: string;
  status: 'active' | 'pending' | 'inactive';
  joinedAt: string;
  department?: string;
}

interface OrganizationStats {
  totalOrganizations: number;
  activeOrganizations: number;
  totalMembers: number;
  industries: { [key: string]: number };
  organizationTypes: { [key: string]: number };
  totalRevenue: number;
  averageRevenue: number;
}

export default function Organizations() {
  const { user } = useAuth();
  const { toast } = useToast();
  const { 
    organizations, 
    stats, 
    isLoading, 
    createOrganization, 
    updateOrganization, 
    deleteOrganization, 
    isCreating, 
    isUpdating, 
    isDeleting 
  } = useOrganizations();
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState<string>('all');
  const [filterIndustry, setFilterIndustry] = useState<string>('all');
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [selectedOrg, setSelectedOrg] = useState<Organization | null>(null);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    organizationType: UserType.ENTREPRENEUR,
    industry: '',
    size: '',
    location: '',
    website: '',
    email: '',
    phone: '',
    address: '',
    linkedin: '',
    twitter: '',
    github: ''
  });

  // Mock members data - in a real app, this would come from API
  const [members, setMembers] = useState<OrganizationMember[]>([
    {
      id: '1',
      name: 'John Doe',
      email: 'john@techstart.com',
      role: 'owner',
      status: 'active',
      joinedAt: '2024-01-15',
      department: 'Engineering'
    },
    {
      id: '2',
      name: 'Jane Smith',
      email: 'jane@techstart.com',
      role: 'admin',
      status: 'active',
      joinedAt: '2024-01-20',
      department: 'Marketing'
    },
    {
      id: '3',
      name: 'Mike Johnson',
      email: 'mike@techstart.com',
      role: 'member',
      status: 'pending',
      joinedAt: '2024-02-01',
      department: 'Sales'
    }
  ]);

  const getOrganizationTypeIcon = (type: UserType) => {
    switch (type) {
      case UserType.ENTREPRENEUR: return <Building className="h-4 w-4 text-blue-500" />;
      case UserType.INVESTOR: return <DollarSign className="h-4 w-4 text-green-500" />;
      case UserType.LENDER: return <Shield className="h-4 w-4 text-purple-500" />;
      case UserType.GRANTOR: return <Award className="h-4 w-4 text-orange-500" />;
      case UserType.PARTNER: return <Users className="h-4 w-4 text-teal-500" />;
      default: return <Building className="h-4 w-4" />;
    }
  };

  const getOrganizationTypeLabel = (type: UserType) => {
    switch (type) {
      case UserType.ENTREPRENEUR: return 'Startup';
      case UserType.INVESTOR: return 'Investment Firm';
      case UserType.LENDER: return 'Lending Institution';
      case UserType.GRANTOR: return 'Grant Organization';
      case UserType.PARTNER: return 'Partner Organization';
      default: return 'Organization';
    }
  };

  const getRoleIcon = (role: string) => {
    switch (role) {
      case 'owner': return <Crown className="h-4 w-4 text-yellow-500" />;
      case 'admin': return <Shield className="h-4 w-4 text-blue-500" />;
      case 'member': return <Users className="h-4 w-4 text-green-500" />;
      case 'viewer': return <Eye className="h-4 w-4 text-gray-500" />;
      default: return <Users className="h-4 w-4" />;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active': return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200"><CheckCircle className="h-3 w-3 mr-1" />Active</Badge>;
      case 'pending': return <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200"><Clock className="h-3 w-3 mr-1" />Pending</Badge>;
      case 'inactive': return <Badge variant="outline" className="bg-gray-50 text-gray-700 border-gray-200"><XCircle className="h-3 w-3 mr-1" />Inactive</Badge>;
      default: return <Badge variant="outline">Unknown</Badge>;
    }
  };

  const filteredOrganizations = organizations?.filter(org => {
    const matchesSearch = org.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         org.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         org.industry?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = filterType === 'all' || org.organizationType === filterType;
    const matchesIndustry = filterIndustry === 'all' || org.industry === filterIndustry;
    
    return matchesSearch && matchesType && matchesIndustry;
  }) || [];

  const handleCreateOrganization = () => {
    if (!formData.name || !formData.organizationType) {
      toast({
        title: "Error",
        description: "Please fill in all required fields.",
        variant: "destructive",
      });
      return;
    }

    createOrganization({
      name: formData.name,
      description: formData.description,
      organizationType: formData.organizationType,
      industry: formData.industry,
      size: formData.size,
      location: formData.location,
      website: formData.website,
      email: formData.email,
      phone: formData.phone,
      address: formData.address,
      linkedin: formData.linkedin,
      twitter: formData.twitter,
      github: formData.github
    });

    setFormData({
      name: '',
      description: '',
      organizationType: UserType.ENTREPRENEUR,
      industry: '',
      size: '',
      location: '',
      website: '',
      email: '',
      phone: '',
      address: '',
      linkedin: '',
      twitter: '',
      github: ''
    });
    setIsCreateDialogOpen(false);
  };

  const handleEditOrganization = (org: Organization) => {
    setSelectedOrg(org);
    setFormData({
      name: org.name,
      description: org.description || '',
      organizationType: org.organizationType,
      industry: org.industry || '',
      size: org.size || '',
      location: org.location || '',
      website: org.website || '',
      email: org.contactInfo?.email || '',
      phone: org.contactInfo?.phone || '',
      address: org.contactInfo?.address || '',
      linkedin: org.socialLinks?.linkedin || '',
      twitter: org.socialLinks?.twitter || '',
      github: org.socialLinks?.github || ''
    });
    setIsEditDialogOpen(true);
  };

  const handleUpdateOrganization = () => {
    if (!selectedOrg) return;

    updateOrganization({ orgId: selectedOrg.id, data: {
      name: formData.name,
      description: formData.description,
      organizationType: formData.organizationType,
      industry: formData.industry,
      size: formData.size,
      location: formData.location,
      website: formData.website,
      email: formData.email,
      phone: formData.phone,
      address: formData.address,
      linkedin: formData.linkedin,
      twitter: formData.twitter,
      github: formData.github
    }});

    setIsEditDialogOpen(false);
    setSelectedOrg(null);
  };

  const handleDeleteOrganization = (orgId: string) => {
    deleteOrganization(orgId);
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl">
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Organizations</h1>
            <p className="text-gray-600 mt-1">Manage your organizations and their settings</p>
          </div>
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="h-4 w-4 mr-2" />
                Create Organization
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-2xl">
              <DialogHeader>
                <DialogTitle>Create New Organization</DialogTitle>
                <DialogDescription>
                  Set up a new organization to manage your team and projects
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="name">Organization Name *</Label>
                    <Input
                      id="name"
                      value={formData.name}
                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                      placeholder="Enter organization name"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="organizationType">Organization Type *</Label>
                    <Select value={formData.organizationType} onValueChange={(value: UserType) => setFormData(prev => ({ ...prev, organizationType: value }))}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value={UserType.ENTREPRENEUR}>Startup/Company</SelectItem>
                        <SelectItem value={UserType.INVESTOR}>Investment Firm</SelectItem>
                        <SelectItem value={UserType.LENDER}>Lending Institution</SelectItem>
                        <SelectItem value={UserType.GRANTOR}>Grant Organization</SelectItem>
                        <SelectItem value={UserType.PARTNER}>Partner Organization</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Describe your organization..."
                    rows={3}
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="industry">Industry</Label>
                    <Input
                      id="industry"
                      value={formData.industry}
                      onChange={(e) => setFormData(prev => ({ ...prev, industry: e.target.value }))}
                      placeholder="e.g., Technology, Finance"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="size">Company Size</Label>
                    <Select value={formData.size} onValueChange={(value) => setFormData(prev => ({ ...prev, size: value }))}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select size" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="1-10">1-10 employees</SelectItem>
                        <SelectItem value="11-50">11-50 employees</SelectItem>
                        <SelectItem value="51-200">51-200 employees</SelectItem>
                        <SelectItem value="201-1000">201-1000 employees</SelectItem>
                        <SelectItem value="1000+">1000+ employees</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="location">Location</Label>
                    <Input
                      id="location"
                      value={formData.location}
                      onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
                      placeholder="City, State/Country"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="website">Website</Label>
                    <Input
                      id="website"
                      value={formData.website}
                      onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}
                      placeholder="https://example.com"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="email">Contact Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                      placeholder="contact@company.com"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="phone">Phone</Label>
                    <Input
                      id="phone"
                      value={formData.phone}
                      onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                      placeholder="+1 (555) 123-4567"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="address">Address</Label>
                    <Input
                      id="address"
                      value={formData.address}
                      onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}
                      placeholder="Street address"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="linkedin">LinkedIn</Label>
                    <Input
                      id="linkedin"
                      value={formData.linkedin}
                      onChange={(e) => setFormData(prev => ({ ...prev, linkedin: e.target.value }))}
                      placeholder="https://linkedin.com/company/..."
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="twitter">Twitter</Label>
                    <Input
                      id="twitter"
                      value={formData.twitter}
                      onChange={(e) => setFormData(prev => ({ ...prev, twitter: e.target.value }))}
                      placeholder="https://twitter.com/..."
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="github">GitHub</Label>
                    <Input
                      id="github"
                      value={formData.github}
                      onChange={(e) => setFormData(prev => ({ ...prev, github: e.target.value }))}
                      placeholder="https://github.com/..."
                    />
                  </div>
                </div>

                <div className="flex justify-end space-x-2">
                  <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                    Cancel
                  </Button>
                  <Button onClick={handleCreateOrganization} disabled={isCreating}>
                    {isCreating ? "Creating..." : "Create Organization"}
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <Building className="h-8 w-8 text-blue-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total Organizations</p>
                  <p className="text-2xl font-bold">{stats?.totalOrganizations || 0}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <CheckCircle className="h-8 w-8 text-green-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Active</p>
                  <p className="text-2xl font-bold">{stats?.activeOrganizations || 0}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <Users className="h-8 w-8 text-purple-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total Members</p>
                  <p className="text-2xl font-bold">{stats?.totalMembers || 0}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <DollarSign className="h-8 w-8 text-orange-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total Revenue</p>
                  <p className="text-2xl font-bold">${((stats?.totalRevenue || 0) / 1000000).toFixed(1)}M</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="organizations" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="organizations">Organizations</TabsTrigger>
            <TabsTrigger value="members">Members</TabsTrigger>
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
            <TabsTrigger value="settings">Settings</TabsTrigger>
          </TabsList>

          {/* Organizations Tab */}
          <TabsContent value="organizations" className="space-y-6">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Your Organizations</CardTitle>
                    <CardDescription>
                      Manage your organizations and their details
                    </CardDescription>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                      <Input
                        placeholder="Search organizations..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10 w-64"
                      />
                    </div>
                    <Select value={filterType} onValueChange={setFilterType}>
                      <SelectTrigger className="w-40">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Types</SelectItem>
                        <SelectItem value={UserType.ENTREPRENEUR}>Startups</SelectItem>
                        <SelectItem value={UserType.INVESTOR}>Investors</SelectItem>
                        <SelectItem value={UserType.PARTNER}>Partners</SelectItem>
                      </SelectContent>
                    </Select>
                    <Select value={filterIndustry} onValueChange={setFilterIndustry}>
                      <SelectTrigger className="w-40">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Industries</SelectItem>
                        <SelectItem value="Technology">Technology</SelectItem>
                        <SelectItem value="Finance">Finance</SelectItem>
                        <SelectItem value="Sustainability">Sustainability</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <div className="flex items-center justify-center py-8">
                    <div className="text-center">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                      <p className="mt-2 text-sm text-gray-600">Loading organizations...</p>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {filteredOrganizations.length === 0 ? (
                      <div className="text-center py-8">
                        <Building className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 mb-2">No organizations found</h3>
                        <p className="text-gray-600 mb-4">Get started by creating your first organization.</p>
                        <Button onClick={() => setIsCreateDialogOpen(true)}>
                          <Plus className="h-4 w-4 mr-2" />
                          Create Organization
                        </Button>
                      </div>
                    ) : (
                      filteredOrganizations.map((org) => (
                    <div key={org.id} className="flex items-center justify-between p-6 border rounded-lg hover:bg-gray-50">
                      <div className="flex items-center space-x-4">
                        <Avatar className="h-16 w-16">
                          <AvatarImage src={org.logoUrl} />
                          <AvatarFallback className="text-lg">
                            {org.name.split(' ').map(n => n[0]).join('')}
                          </AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2">
                            <h3 className="text-xl font-semibold">{org.name}</h3>
                            {getOrganizationTypeIcon(org.organizationType)}
                            {org.verified && (
                              <Badge variant="secondary" className="bg-green-100 text-green-800">
                                <CheckCircle className="h-3 w-3 mr-1" />
                                Verified
                              </Badge>
                            )}
                          </div>
                          <p className="text-gray-600 mt-1">{org.description}</p>
                          <div className="flex items-center space-x-4 text-sm text-gray-500 mt-2">
                            {org.industry && (
                              <span className="flex items-center">
                                <Building className="h-4 w-4 mr-1" />
                                {org.industry}
                              </span>
                            )}
                            {org.location && (
                              <span className="flex items-center">
                                <MapPin className="h-4 w-4 mr-1" />
                                {org.location}
                              </span>
                            )}
                            {org.memberCount && (
                              <span className="flex items-center">
                                <Users className="h-4 w-4 mr-1" />
                                {org.memberCount} members
                              </span>
                            )}
                            {org.revenue && (
                              <span className="flex items-center">
                                <DollarSign className="h-4 w-4 mr-1" />
                                ${(org.revenue / 1000000).toFixed(1)}M revenue
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="sm">
                              <MoreVertical className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuLabel>Actions</DropdownMenuLabel>
                            <DropdownMenuItem onClick={() => handleEditOrganization(org)}>
                              <Edit className="h-4 w-4 mr-2" />
                              Edit Organization
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Users className="h-4 w-4 mr-2" />
                              Manage Members
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Settings className="h-4 w-4 mr-2" />
                              Organization Settings
                            </DropdownMenuItem>
                            <DropdownMenuSeparator />
                            <DropdownMenuItem 
                              className="text-red-600"
                              onClick={() => handleDeleteOrganization(org.id)}
                            >
                              <Trash2 className="h-4 w-4 mr-2" />
                              Delete Organization
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                    </div>
                      ))
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Members Tab */}
          <TabsContent value="members" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Organization Members</CardTitle>
                <CardDescription>
                  Manage members across all your organizations
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {members.map((member) => (
                    <div key={member.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex items-center space-x-4">
                        <Avatar className="h-12 w-12">
                          <AvatarImage src={member.avatar} />
                          <AvatarFallback>
                            {member.name.split(' ').map(n => n[0]).join('')}
                          </AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2">
                            <h3 className="font-semibold">{member.name}</h3>
                            {getRoleIcon(member.role)}
                            {getStatusBadge(member.status)}
                          </div>
                          <p className="text-sm text-gray-600">{member.email}</p>
                          <div className="flex items-center space-x-4 text-sm text-gray-500">
                            {member.department && (
                              <span className="flex items-center">
                                <Building className="h-4 w-4 mr-1" />
                                {member.department}
                              </span>
                            )}
                            <span>Joined {new Date(member.joinedAt).toLocaleDateString()}</span>
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Button variant="outline" size="sm">
                          <Edit className="h-4 w-4 mr-2" />
                          Edit
                        </Button>
                        <Button variant="outline" size="sm">
                          <Users className="h-4 w-4 mr-2" />
                          View Profile
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Analytics Tab */}
          <TabsContent value="analytics" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Organizations by Type</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {Object.entries(stats?.organizationTypes || {}).map(([type, count]) => (
                      <div key={type} className="flex items-center justify-between">
                        <span className="text-sm font-medium">{getOrganizationTypeLabel(type as UserType)}</span>
                        <div className="flex items-center space-x-2">
                          <div className="w-32 bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-blue-600 h-2 rounded-full" 
                              style={{ width: `${(count / (stats?.totalOrganizations || 1)) * 100}%` }}
                            ></div>
                          </div>
                          <span className="text-sm text-gray-600">{count}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Organizations by Industry</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {Object.entries(stats?.industries || {}).map(([industry, count]) => (
                      <div key={industry} className="flex items-center justify-between">
                        <span className="text-sm font-medium">{industry}</span>
                        <div className="flex items-center space-x-2">
                          <div className="w-32 bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-green-600 h-2 rounded-full" 
                              style={{ width: `${(count / (stats?.totalOrganizations || 1)) * 100}%` }}
                            ></div>
                          </div>
                          <span className="text-sm text-gray-600">{count}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Settings Tab */}
          <TabsContent value="settings" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Organization Settings</CardTitle>
                <CardDescription>
                  Configure global settings for your organizations
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="default-org-type">Default Organization Type</Label>
                    <Select defaultValue={UserType.ENTREPRENEUR}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value={UserType.ENTREPRENEUR}>Startup/Company</SelectItem>
                        <SelectItem value={UserType.INVESTOR}>Investment Firm</SelectItem>
                        <SelectItem value={UserType.PARTNER}>Partner Organization</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="invite-expiry">Invitation Expiry (days)</Label>
                    <Input id="invite-expiry" type="number" defaultValue="7" />
                  </div>
                  <div>
                    <Label htmlFor="max-members">Maximum Members per Organization</Label>
                    <Input id="max-members" type="number" defaultValue="100" />
                  </div>
                </div>
                <div className="flex justify-end">
                  <Button>Save Settings</Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Edit Organization Dialog */}
        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
          <DialogContent className="sm:max-w-2xl">
            <DialogHeader>
              <DialogTitle>Edit Organization</DialogTitle>
              <DialogDescription>
                Update your organization details and settings
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="edit-name">Organization Name *</Label>
                  <Input
                    id="edit-name"
                    value={formData.name}
                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="Enter organization name"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-organizationType">Organization Type *</Label>
                  <Select value={formData.organizationType} onValueChange={(value: UserType) => setFormData(prev => ({ ...prev, organizationType: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value={UserType.ENTREPRENEUR}>Startup/Company</SelectItem>
                      <SelectItem value={UserType.INVESTOR}>Investment Firm</SelectItem>
                      <SelectItem value={UserType.LENDER}>Lending Institution</SelectItem>
                      <SelectItem value={UserType.GRANTOR}>Grant Organization</SelectItem>
                      <SelectItem value={UserType.PARTNER}>Partner Organization</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="edit-description">Description</Label>
                <Textarea
                  id="edit-description"
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="Describe your organization..."
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="edit-industry">Industry</Label>
                  <Input
                    id="edit-industry"
                    value={formData.industry}
                    onChange={(e) => setFormData(prev => ({ ...prev, industry: e.target.value }))}
                    placeholder="e.g., Technology, Finance"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="edit-size">Company Size</Label>
                  <Select value={formData.size} onValueChange={(value) => setFormData(prev => ({ ...prev, size: value }))}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select size" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1-10">1-10 employees</SelectItem>
                      <SelectItem value="11-50">11-50 employees</SelectItem>
                      <SelectItem value="51-200">51-200 employees</SelectItem>
                      <SelectItem value="201-1000">201-1000 employees</SelectItem>
                      <SelectItem value="1000+">1000+ employees</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="flex justify-end space-x-2">
                <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
                  Cancel
                </Button>
                <Button onClick={handleUpdateOrganization} disabled={isUpdating}>
                  {isUpdating ? "Updating..." : "Update Organization"}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}


=== FILE: client/src/pages/team-member-dashboard.tsx ===


import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Users, 
  FileText, 
  MessageSquare, 
  Calendar,
  CheckCircle,
  Clock,
  BarChart3,
  Settings
} from "lucide-react";

const taskMetrics = [
  { label: "Active Tasks", value: "12", icon: CheckCircle, color: "text-blue-600" },
  { label: "Documents", value: "8", icon: FileText, color: "text-purple-600" },
  { label: "Team Size", value: "15", icon: Users, color: "text-green-600" },
  { label: "This Week", value: "6", icon: Calendar, color: "text-orange-600" }
];

export default function TeamMemberDashboard() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-slate-50">
      <div className="container mx-auto py-8 px-4">
        <div className="mb-8">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-gray-600 to-slate-600 bg-clip-text text-transparent mb-2">
            Team Dashboard üë•
          </h1>
          <p className="text-gray-600">
            Collaborate with your team and stay updated on project progress
          </p>
        </div>

        {/* Task Overview */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          {taskMetrics.map((metric, index) => {
            const IconComponent = metric.icon;
            return (
              <Card key={index}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">{metric.label}</p>
                      <p className="text-2xl font-bold">{metric.value}</p>
                    </div>
                    <IconComponent className={`h-8 w-8 ${metric.color}`} />
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        <Tabs defaultValue="tasks" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="tasks">Tasks</TabsTrigger>
            <TabsTrigger value="documents">Documents</TabsTrigger>
            <TabsTrigger value="team">Team</TabsTrigger>
            <TabsTrigger value="communications">Communications</TabsTrigger>
          </TabsList>

          <TabsContent value="tasks">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CheckCircle className="h-5 w-5" />
                  My Tasks
                </CardTitle>
                <CardDescription>Track and manage your assigned tasks</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <Clock className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Task management coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="documents">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Shared Documents
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <FileText className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Document sharing coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="team">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Users className="h-5 w-5" />
                  Team Members
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <Users className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Team directory coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="communications">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <MessageSquare className="h-5 w-5" />
                  Team Communications
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <MessageSquare className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Team chat coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}


=== FILE: client/src/pages/analytics.tsx ===

export default function Analytics() {
  return (
    <div style={{ padding: 24 }}>
      <h1 style={{ fontSize: 24, marginBottom: 8 }}>Analytics</h1>
      <p>Placeholder page for analytics hub.</p>
    </div>
  );
}


=== FILE: client/src/pages/education-fundamentals.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  Book, Play, Clock, Users, Award, CheckCircle, Star, ArrowRight,
  Target, Zap, Building, DollarSign, TrendingUp, Globe, Shield
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface CourseModule {
  id: string;
  title: string;
  description: string;
  duration: number;
  lessons: number;
  completed: boolean;
  progress: number;
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced';
  topics: string[];
}

interface LearningPath {
  id: string;
  name: string;
  description: string;
  modules: number;
  duration: number;
  level: string;
  icon: any;
  color: string;
}

function EducationFundamentals() {
  const { id } = useParams();
  const [activeTab, setActiveTab] = useState('overview');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for course modules
  const courseModules: CourseModule[] = [
    {
      id: 'business-model',
      title: 'Business Model Canvas',
      description: 'Learn how to design and validate your business model using proven frameworks.',
      duration: 45,
      lessons: 6,
      completed: true,
      progress: 100,
      difficulty: 'Beginner',
      topics: ['Value Proposition', 'Customer Segments', 'Revenue Streams', 'Key Partnerships']
    },
    {
      id: 'market-research',
      title: 'Market Research & Validation',
      description: 'Master the art of market research and customer validation techniques.',
      duration: 60,
      lessons: 8,
      completed: false,
      progress: 75,
      difficulty: 'Beginner',
      topics: ['Customer Interviews', 'Market Sizing', 'Competitive Analysis', 'User Personas']
    },
    {
      id: 'mvp-development',
      title: 'MVP Development',
      description: 'Build your Minimum Viable Product and learn rapid prototyping techniques.',
      duration: 90,
      lessons: 10,
      completed: false,
      progress: 30,
      difficulty: 'Intermediate',
      topics: ['Prototyping', 'User Testing', 'Feature Prioritization', 'Technical Architecture']
    },
    {
      id: 'team-building',
      title: 'Team Building & Culture',
      description: 'Learn how to build and manage high-performing startup teams.',
      duration: 75,
      lessons: 7,
      completed: false,
      progress: 0,
      difficulty: 'Intermediate',
      topics: ['Hiring', 'Culture', 'Remote Teams', 'Performance Management']
    },
    {
      id: 'legal-basics',
      title: 'Legal & Compliance Basics',
      description: 'Understand essential legal requirements for startups and founders.',
      duration: 50,
      lessons: 5,
      completed: false,
      progress: 0,
      difficulty: 'Beginner',
      topics: ['Entity Formation', 'IP Protection', 'Contracts', 'Regulatory Compliance']
    },
    {
      id: 'financial-basics',
      title: 'Financial Planning',
      description: 'Learn startup financial fundamentals and key metrics.',
      duration: 65,
      lessons: 8,
      completed: false,
      progress: 0,
      difficulty: 'Intermediate',
      topics: ['Unit Economics', 'Cash Flow', 'Financial Modeling', 'Key Metrics']
    }
  ];

  const learningPaths: LearningPath[] = [
    {
      id: 'founder-track',
      name: 'Founder Track',
      description: 'Complete journey from idea to launch',
      modules: 12,
      duration: 480,
      level: 'Beginner',
      icon: Target,
      color: 'blue'
    },
    {
      id: 'product-track',
      name: 'Product Track',
      description: 'Focus on product development and user experience',
      modules: 8,
      duration: 320,
      level: 'Intermediate',
      icon: Zap,
      color: 'purple'
    },
    {
      id: 'business-track',
      name: 'Business Track',
      description: 'Business strategy and operations',
      modules: 10,
      duration: 400,
      level: 'Intermediate',
      icon: Building,
      color: 'green'
    }
  ];

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Beginner': return 'text-green-600 bg-green-50';
      case 'Intermediate': return 'text-yellow-600 bg-yellow-50';
      case 'Advanced': return 'text-red-600 bg-red-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getPathIcon = (pathId: string) => {
    const path = learningPaths.find(p => p.id === pathId);
    return path ? path.icon : Target;
  };

  const getPathColor = (pathId: string) => {
    const path = learningPaths.find(p => p.id === pathId);
    return path ? path.color : 'gray';
  };

  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0) {
      return `${hours}h ${mins}m`;
    }
    return `${mins}m`;
  };

  const completedModules = courseModules.filter(module => module.completed).length;
  const totalProgress = Math.round(
    courseModules.reduce((sum, module) => sum + module.progress, 0) / courseModules.length
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-blue-100 rounded-lg">
              <Book className="h-6 w-6 text-blue-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Startup Fundamentals
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Master the essential building blocks of launching a successful startup from idea to execution.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Book className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">6</p>
                  <p className="text-sm text-gray-600">Core Modules</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <CheckCircle className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">{completedModules}</p>
                  <p className="text-sm text-gray-600">Completed</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Clock className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">6.5h</p>
                  <p className="text-sm text-gray-600">Total Duration</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <TrendingUp className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">{totalProgress}%</p>
                  <p className="text-sm text-gray-600">Progress</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="modules">Modules</TabsTrigger>
            <TabsTrigger value="paths">Learning Paths</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5" />
                    Your Progress
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Overall Progress</span>
                      <span className="text-sm font-bold">{totalProgress}%</span>
                    </div>
                    <Progress value={totalProgress} className="h-3" />
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <p className="text-gray-600">Completed Modules</p>
                      <p className="font-bold">{completedModules} / {courseModules.length}</p>
                    </div>
                    <div>
                      <p className="text-gray-600">Time Invested</p>
                      <p className="font-bold">2.5 hours</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Award className="h-5 w-5" />
                    Recent Achievements
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center gap-3 p-3 bg-green-50 rounded-lg">
                      <CheckCircle className="h-5 w-5 text-green-600" />
                      <div>
                        <p className="font-medium">Business Model Canvas</p>
                        <p className="text-sm text-gray-600">Completed successfully</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
                      <Star className="h-5 w-5 text-blue-600" />
                      <div>
                        <p className="font-medium">Market Research</p>
                        <p className="text-sm text-gray-600">75% complete</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Modules Tab */}
          <TabsContent value="modules" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {courseModules.map(module => (
                <Card key={module.id} className={module.completed ? 'ring-2 ring-green-500' : ''}>
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div>
                        <CardTitle className="text-lg">{module.title}</CardTitle>
                        <CardDescription>{module.description}</CardDescription>
                      </div>
                      {module.completed && (
                        <CheckCircle className="h-6 w-6 text-green-600" />
                      )}
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center gap-4 text-sm">
                      <div className="flex items-center gap-1">
                        <Clock className="h-4 w-4 text-gray-500" />
                        <span>{formatDuration(module.duration)}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Book className="h-4 w-4 text-gray-500" />
                        <span>{module.lessons} lessons</span>
                      </div>
                      <Badge className={getDifficultyColor(module.difficulty)}>
                        {module.difficulty}
                      </Badge>
                    </div>

                    <div className="space-y-2">
                      <div className="flex items-center justify-between text-sm">
                        <span>Progress</span>
                        <span className="font-medium">{module.progress}%</span>
                      </div>
                      <Progress value={module.progress} className="h-2" />
                    </div>

                    <div>
                      <p className="text-sm font-medium text-gray-700 mb-2">Topics Covered</p>
                      <div className="flex flex-wrap gap-1">
                        {module.topics.map((topic, index) => (
                          <Badge key={index} variant="outline" className="text-xs">
                            {topic}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button className="w-full" disabled={module.completed}>
                      {module.completed ? (
                        <>
                          <CheckCircle className="h-4 w-4 mr-2" />
                          Completed
                        </>
                      ) : module.progress > 0 ? (
                        <>
                          <Play className="h-4 w-4 mr-2" />
                          Continue
                        </>
                      ) : (
                        <>
                          <Play className="h-4 w-4 mr-2" />
                          Start Module
                        </>
                      )}
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Learning Paths Tab */}
          <TabsContent value="paths" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {learningPaths.map(path => {
                const Icon = path.icon;
                return (
                  <Card key={path.id}>
                    <CardHeader>
                      <div className="flex items-center gap-3">
                        <div className={`p-2 bg-${path.color}-100 rounded-lg`}>
                          <Icon className={`h-5 w-5 text-${path.color}-600`} />
                        </div>
                        <div>
                          <CardTitle>{path.name}</CardTitle>
                          <CardDescription>{path.description}</CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>
                          <p className="text-gray-600">Modules</p>
                          <p className="font-bold">{path.modules}</p>
                        </div>
                        <div>
                          <p className="text-gray-600">Duration</p>
                          <p className="font-bold">{formatDuration(path.duration)}</p>
                        </div>
                        <div>
                          <p className="text-gray-600">Level</p>
                          <p className="font-bold">{path.level}</p>
                        </div>
                        <div>
                          <p className="text-gray-600">Progress</p>
                          <p className="font-bold">0%</p>
                        </div>
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button className="w-full">
                        <ArrowRight className="h-4 w-4 mr-2" />
                        Start Path
                      </Button>
                    </CardFooter>
                  </Card>
                );
              })}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

export default EducationFundamentals;


=== FILE: client/src/pages/ai-credit-scoring.tsx ===

import React from 'react';
import AICreditScoring from '@/components/ai/AICreditScoring';

export default function AICreditScoringPage() {
  return <AICreditScoring />;
}


=== FILE: client/src/pages/ecosystem.tsx ===

export default function Ecosystem() {
  return (
    <div style={{ padding: 24 }}>
      <h1 style={{ fontSize: 24, marginBottom: 8 }}>Ecosystem</h1>
      <p>Placeholder page for ecosystem hub.</p>
    </div>
  );
}


=== FILE: client/src/pages/profile.tsx ===

import React, { useState } from 'react';
import { useAuth } from '@/hooks/use-auth';
import { useProfile } from '@/hooks/use-profile';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Separator } from '@/components/ui/separator';
import { Switch } from '@/components/ui/switch';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { UserType } from '../../../shared/schema';
import { 
  User, 
  Mail, 
  Phone, 
  MapPin, 
  Calendar, 
  Shield, 
  Settings, 
  Bell, 
  Lock, 
  Eye,
  Edit,
  Save,
  X,
  Camera,
  Upload
} from 'lucide-react';

interface ProfileData {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  profileImageUrl?: string;
  userType: UserType;
  userSubtype?: string;
  role?: string;
  preferences?: any;
  metrics?: any;
  verified: boolean;
  onboardingCompleted: boolean;
  createdAt: string;
  updatedAt: string;
}

interface ProfileFormData {
  firstName: string;
  lastName: string;
  email: string;
  userSubtype?: string;
  role?: string;
  bio?: string;
  location?: string;
  website?: string;
  linkedin?: string;
  twitter?: string;
  phone?: string;
}

export default function Profile() {
  const { user, isLoading } = useAuth();
  const { profile, isLoading: isLoadingProfile, updateProfile, isUpdating, uploadImage, isUploading } = useProfile();
  const { toast } = useToast();
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState<ProfileFormData>({
    firstName: '',
    lastName: '',
    email: '',
    userSubtype: '',
    role: '',
    bio: '',
    location: '',
    website: '',
    linkedin: '',
    twitter: '',
    phone: ''
  });

  // Mock preferences for demonstration
  const [preferences, setPreferences] = useState({
    notifications: {
      email: true,
      push: true,
      sms: false,
      marketing: false
    },
    privacy: {
      profileVisibility: 'public',
      showEmail: false,
      showPhone: false,
      showLocation: true
    },
    display: {
      theme: 'light',
      language: 'en',
      timezone: 'UTC'
    }
  });

  // Load profile data
  React.useEffect(() => {
    if (profile) {
      setFormData({
        firstName: profile.firstName,
        lastName: profile.lastName,
        email: profile.email,
        userSubtype: profile.userSubtype,
        role: profile.role,
        bio: profile.bio || '',
        location: profile.location || '',
        website: profile.website || '',
        linkedin: profile.linkedin || '',
        twitter: profile.twitter || '',
        phone: profile.phone || ''
      });
    }
  }, [profile]);

  const handleSave = async () => {
    updateProfile({
      ...formData,
      preferences
    });
    setIsEditing(false);
  };

  const handleCancel = () => {
    if (profile) {
      setFormData({
        firstName: profile.firstName,
        lastName: profile.lastName,
        email: profile.email,
        userSubtype: profile.userSubtype,
        role: profile.role,
        bio: profile.bio || '',
        location: profile.location || '',
        website: profile.website || '',
        linkedin: profile.linkedin || '',
        twitter: profile.twitter || '',
        phone: profile.phone || ''
      });
    }
    setIsEditing(false);
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      uploadImage(file);
    }
  };

  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </div>
    );
  }

  if (!user || !profile) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900">Profile not found</h1>
          <p className="text-gray-600 mt-2">Please log in to view your profile.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Profile</h1>
            <p className="text-gray-600 mt-1">Manage your account settings and preferences</p>
          </div>
          <div className="flex items-center space-x-2">
            {isEditing ? (
              <>
                <Button
                  variant="outline"
                  onClick={handleCancel}
                  disabled={isUpdating}
                >
                  <X className="h-4 w-4 mr-2" />
                  Cancel
                </Button>
                <Button
                  onClick={handleSave}
                  disabled={isUpdating}
                >
                  <Save className="h-4 w-4 mr-2" />
                  {isUpdating ? 'Saving...' : 'Save Changes'}
                </Button>
              </>
            ) : (
              <Button onClick={() => setIsEditing(true)}>
                <Edit className="h-4 w-4 mr-2" />
                Edit Profile
              </Button>
            )}
          </div>
        </div>

        <Tabs defaultValue="overview" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="personal">Personal</TabsTrigger>
            <TabsTrigger value="preferences">Preferences</TabsTrigger>
            <TabsTrigger value="security">Security</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <User className="h-5 w-5" />
                  <span>Profile Overview</span>
                </CardTitle>
                <CardDescription>
                  Your basic profile information and account status
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Profile Image and Basic Info */}
                <div className="flex items-start space-x-6">
                  <div className="relative">
                    <Avatar className="h-24 w-24">
                      <AvatarImage src={profile.profileImageUrl} />
                      <AvatarFallback className="text-lg">
                        {profile.firstName?.[0]}{profile.lastName?.[0]}
                      </AvatarFallback>
                    </Avatar>
                    {isEditing && (
                      <label className="absolute bottom-0 right-0 bg-blue-600 text-white rounded-full p-2 cursor-pointer hover:bg-blue-700">
                        <Camera className="h-4 w-4" />
                        <input
                          type="file"
                          accept="image/*"
                          onChange={handleImageUpload}
                          className="hidden"
                        />
                      </label>
                    )}
                  </div>
                  <div className="flex-1 space-y-2">
                    <div className="flex items-center space-x-2">
                      <h2 className="text-2xl font-bold">
                        {profile.firstName} {profile.lastName}
                      </h2>
                      {profile.verified && (
                        <Badge variant="secondary" className="bg-green-100 text-green-800">
                          <Shield className="h-3 w-3 mr-1" />
                          Verified
                        </Badge>
                      )}
                    </div>
                    <p className="text-gray-600">{profile.role}</p>
                    <p className="text-sm text-gray-500">{profile.email}</p>
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <span className="flex items-center">
                        <Calendar className="h-4 w-4 mr-1" />
                        Joined {new Date(profile.createdAt).toLocaleDateString()}
                      </span>
                      <span className="flex items-center">
                        <User className="h-4 w-4 mr-1" />
                        {profile.userType.charAt(0).toUpperCase() + profile.userType.slice(1)}
                      </span>
                    </div>
                  </div>
                </div>

                <Separator />

                {/* Metrics */}
                {profile.metrics && (
                  <div>
                    <h3 className="text-lg font-semibold mb-4">Profile Metrics</h3>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      <div className="text-center p-4 bg-blue-50 rounded-lg">
                        <div className="text-2xl font-bold text-blue-600">
                          {profile.metrics.businessGrowth}%
                        </div>
                        <div className="text-sm text-gray-600">Business Growth</div>
                      </div>
                      <div className="text-center p-4 bg-green-50 rounded-lg">
                        <div className="text-2xl font-bold text-green-600">
                          {profile.metrics.revenueGrowth}%
                        </div>
                        <div className="text-sm text-gray-600">Revenue Growth</div>
                      </div>
                      <div className="text-center p-4 bg-purple-50 rounded-lg">
                        <div className="text-2xl font-bold text-purple-600">
                          {profile.metrics.teamSize}
                        </div>
                        <div className="text-sm text-gray-600">Team Size</div>
                      </div>
                      <div className="text-center p-4 bg-orange-50 rounded-lg">
                        <div className="text-2xl font-bold text-orange-600">
                          {profile.metrics.marketValidation}%
                        </div>
                        <div className="text-sm text-gray-600">Market Validation</div>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Personal Tab */}
          <TabsContent value="personal" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Personal Information</CardTitle>
                <CardDescription>
                  Update your personal details and contact information
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="firstName">First Name</Label>
                    <Input
                      id="firstName"
                      value={formData.firstName}
                      onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}
                      disabled={!isEditing}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="lastName">Last Name</Label>
                    <Input
                      id="lastName"
                      value={formData.lastName}
                      onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
                      disabled={!isEditing}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    value={formData.email}
                    onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                    disabled={!isEditing}
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="userSubtype">User Subtype</Label>
                    <Select
                      value={formData.userSubtype}
                      onValueChange={(value) => setFormData(prev => ({ ...prev, userSubtype: value }))}
                      disabled={!isEditing}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select subtype" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="first-time-founder">First-time Founder</SelectItem>
                        <SelectItem value="serial-entrepreneur">Serial Entrepreneur</SelectItem>
                        <SelectItem value="corporate-innovator">Corporate Innovator</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="role">Role</Label>
                    <Input
                      id="role"
                      value={formData.role}
                      onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}
                      disabled={!isEditing}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="bio">Bio</Label>
                  <Textarea
                    id="bio"
                    value={formData.bio}
                    onChange={(e) => setFormData(prev => ({ ...prev, bio: e.target.value }))}
                    disabled={!isEditing}
                    rows={3}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="location">Location</Label>
                  <Input
                    id="location"
                    value={formData.location}
                    onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
                    disabled={!isEditing}
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="website">Website</Label>
                    <Input
                      id="website"
                      value={formData.website}
                      onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}
                      disabled={!isEditing}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="phone">Phone</Label>
                    <Input
                      id="phone"
                      value={formData.phone}
                      onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                      disabled={!isEditing}
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="linkedin">LinkedIn</Label>
                    <Input
                      id="linkedin"
                      value={formData.linkedin}
                      onChange={(e) => setFormData(prev => ({ ...prev, linkedin: e.target.value }))}
                      disabled={!isEditing}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="twitter">Twitter</Label>
                    <Input
                      id="twitter"
                      value={formData.twitter}
                      onChange={(e) => setFormData(prev => ({ ...prev, twitter: e.target.value }))}
                      disabled={!isEditing}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Preferences Tab */}
          <TabsContent value="preferences" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Settings className="h-5 w-5" />
                  <span>Preferences</span>
                </CardTitle>
                <CardDescription>
                  Customize your experience and notification settings
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Notifications */}
                <div>
                  <h3 className="text-lg font-semibold mb-4 flex items-center">
                    <Bell className="h-5 w-5 mr-2" />
                    Notifications
                  </h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <Label htmlFor="email-notifications">Email Notifications</Label>
                        <p className="text-sm text-gray-500">Receive updates via email</p>
                      </div>
                      <Switch
                        id="email-notifications"
                        checked={preferences.notifications.email}
                        onCheckedChange={(checked) => 
                          setPreferences(prev => ({
                            ...prev,
                            notifications: { ...prev.notifications, email: checked }
                          }))
                        }
                      />
                    </div>
                    <div className="flex items-center justify-between">
                      <div>
                        <Label htmlFor="push-notifications">Push Notifications</Label>
                        <p className="text-sm text-gray-500">Receive push notifications</p>
                      </div>
                      <Switch
                        id="push-notifications"
                        checked={preferences.notifications.push}
                        onCheckedChange={(checked) => 
                          setPreferences(prev => ({
                            ...prev,
                            notifications: { ...prev.notifications, push: checked }
                          }))
                        }
                      />
                    </div>
                    <div className="flex items-center justify-between">
                      <div>
                        <Label htmlFor="sms-notifications">SMS Notifications</Label>
                        <p className="text-sm text-gray-500">Receive SMS updates</p>
                      </div>
                      <Switch
                        id="sms-notifications"
                        checked={preferences.notifications.sms}
                        onCheckedChange={(checked) => 
                          setPreferences(prev => ({
                            ...prev,
                            notifications: { ...prev.notifications, sms: checked }
                          }))
                        }
                      />
                    </div>
                    <div className="flex items-center justify-between">
                      <div>
                        <Label htmlFor="marketing-notifications">Marketing Communications</Label>
                        <p className="text-sm text-gray-500">Receive marketing emails and updates</p>
                      </div>
                      <Switch
                        id="marketing-notifications"
                        checked={preferences.notifications.marketing}
                        onCheckedChange={(checked) => 
                          setPreferences(prev => ({
                            ...prev,
                            notifications: { ...prev.notifications, marketing: checked }
                          }))
                        }
                      />
                    </div>
                  </div>
                </div>

                <Separator />

                {/* Privacy */}
                <div>
                  <h3 className="text-lg font-semibold mb-4 flex items-center">
                    <Eye className="h-5 w-5 mr-2" />
                    Privacy Settings
                  </h3>
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="profile-visibility">Profile Visibility</Label>
                      <Select
                        value={preferences.privacy.profileVisibility}
                        onValueChange={(value) => 
                          setPreferences(prev => ({
                            ...prev,
                            privacy: { ...prev.privacy, profileVisibility: value }
                          }))
                        }
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="public">Public</SelectItem>
                          <SelectItem value="private">Private</SelectItem>
                          <SelectItem value="connections">Connections Only</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="flex items-center justify-between">
                      <div>
                        <Label htmlFor="show-email">Show Email</Label>
                        <p className="text-sm text-gray-500">Display email on profile</p>
                      </div>
                      <Switch
                        id="show-email"
                        checked={preferences.privacy.showEmail}
                        onCheckedChange={(checked) => 
                          setPreferences(prev => ({
                            ...prev,
                            privacy: { ...prev.privacy, showEmail: checked }
                          }))
                        }
                      />
                    </div>
                    <div className="flex items-center justify-between">
                      <div>
                        <Label htmlFor="show-phone">Show Phone</Label>
                        <p className="text-sm text-gray-500">Display phone number on profile</p>
                      </div>
                      <Switch
                        id="show-phone"
                        checked={preferences.privacy.showPhone}
                        onCheckedChange={(checked) => 
                          setPreferences(prev => ({
                            ...prev,
                            privacy: { ...prev.privacy, showPhone: checked }
                          }))
                        }
                      />
                    </div>
                    <div className="flex items-center justify-between">
                      <div>
                        <Label htmlFor="show-location">Show Location</Label>
                        <p className="text-sm text-gray-500">Display location on profile</p>
                      </div>
                      <Switch
                        id="show-location"
                        checked={preferences.privacy.showLocation}
                        onCheckedChange={(checked) => 
                          setPreferences(prev => ({
                            ...prev,
                            privacy: { ...prev.privacy, showLocation: checked }
                          }))
                        }
                      />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Security Tab */}
          <TabsContent value="security" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Lock className="h-5 w-5" />
                  <span>Security</span>
                </CardTitle>
                <CardDescription>
                  Manage your account security and authentication
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-4 border rounded-lg">
                    <div>
                      <h3 className="font-semibold">Password</h3>
                      <p className="text-sm text-gray-500">Last updated 3 months ago</p>
                    </div>
                    <Button variant="outline">Change Password</Button>
                  </div>
                  
                  <div className="flex items-center justify-between p-4 border rounded-lg">
                    <div>
                      <h3 className="font-semibold">Two-Factor Authentication</h3>
                      <p className="text-sm text-gray-500">Add an extra layer of security</p>
                    </div>
                    <Button variant="outline">Enable 2FA</Button>
                  </div>
                  
                  <div className="flex items-center justify-between p-4 border rounded-lg">
                    <div>
                      <h3 className="font-semibold">Login Sessions</h3>
                      <p className="text-sm text-gray-500">Manage your active sessions</p>
                    </div>
                    <Button variant="outline">View Sessions</Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}


=== FILE: client/src/pages/documents.tsx ===

export default function Documents() {
  return (
    <div style={{ padding: 24 }}>
      <h1 style={{ fontSize: 24, marginBottom: 8 }}>Documents</h1>
      <p>Placeholder page for documents hub.</p>
    </div>
  );
}


=== FILE: client/src/pages/apple-dashboard.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  TrendingUp, 
  Users, 
  DollarSign, 
  Target, 
  Zap, 
  Shield,
  Heart,
  Star,
  ArrowRight,
  Play,
  CheckCircle,
  AlertCircle,
  Clock,
  BarChart3,
  PieChart,
  LineChart
} from 'lucide-react';

export default function AppleDashboard() {
  const [stats, setStats] = useState({
    revenue: 0,
    users: 0,
    growth: 0,
    satisfaction: 0
  });

  // Simulate real-time data updates
  useEffect(() => {
    const interval = setInterval(() => {
      setStats(prev => ({
        revenue: Math.min(100, prev.revenue + Math.random() * 2),
        users: Math.min(100, prev.users + Math.random() * 1.5),
        growth: Math.min(100, prev.growth + Math.random() * 3),
        satisfaction: Math.min(100, prev.satisfaction + Math.random() * 1)
      }));
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  const metrics = [
    {
      title: 'Revenue Growth',
      value: `$${(stats.revenue * 125000).toLocaleString()}`,
      change: '+12.5%',
      trend: 'up',
      icon: TrendingUp,
      color: 'text-green-500'
    },
    {
      title: 'Active Users',
      value: `${(stats.users * 1250).toLocaleString()}`,
      change: '+8.2%',
      trend: 'up',
      icon: Users,
      color: 'text-blue-500'
    },
    {
      title: 'Growth Rate',
      value: `${stats.growth.toFixed(1)}%`,
      change: '+5.3%',
      trend: 'up',
      icon: Target,
      color: 'text-purple-500'
    },
    {
      title: 'Satisfaction',
      value: `${stats.satisfaction.toFixed(1)}%`,
      change: '+2.1%',
      trend: 'up',
      icon: Heart,
      color: 'text-pink-500'
    }
  ];

  const recentActivities = [
    {
      id: 1,
      type: 'success',
      title: 'New user registration',
      description: 'Sarah Johnson joined the platform',
      time: '2 minutes ago',
      icon: CheckCircle
    },
    {
      id: 2,
      type: 'info',
      title: 'System update',
      description: 'Safari 26.0 features deployed',
      time: '15 minutes ago',
      icon: Zap
    },
    {
      id: 3,
      type: 'warning',
      title: 'Performance alert',
      description: 'High memory usage detected',
      time: '1 hour ago',
      icon: AlertCircle
    },
    {
      id: 4,
      type: 'success',
      title: 'Payment processed',
      description: 'Monthly subscription renewed',
      time: '2 hours ago',
      icon: DollarSign
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50 p-6">
      {/* Header Section - Emotional Connection */}
      <section className="mb-8">
        <div className="max-w-7xl mx-auto">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
            <div>
              <h1 className="text-4xl font-bold gradient-text mb-2">
                Welcome to Safari 26.0
              </h1>
              <p className="text-xl text-muted-foreground">
                Experience the future of web browsing with Apple design principles
              </p>
            </div>
            <div className="flex flex-col sm:flex-row gap-3 mt-6 lg:mt-0">
              <Button className="safari-button">
                <Play className="w-4 h-4 mr-2" />
                Start Tour
              </Button>
              <Button variant="glass">
                <Shield className="w-4 h-4 mr-2" />
                Security Report
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Key Metrics - Usability & Communication */}
      <section className="mb-8">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
            {metrics.map((metric, index) => (
              <Card key={index} className="glass-card hover:scale-105 transition-all duration-300">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between mb-4">
                    <div className={`p-3 rounded-xl bg-white/50 ${metric.color}`}>
                      <metric.icon className="w-6 h-6" />
                    </div>
                    <Badge variant="secondary" className="bg-green-100 text-green-800">
                      {metric.change}
                    </Badge>
                  </div>
                  <div className="space-y-1">
                    <p className="text-sm font-medium text-muted-foreground">
                      {metric.title}
                    </p>
                    <p className="text-2xl font-bold">
                      {metric.value}
                    </p>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Main Content Grid - Functionality */}
      <section className="mb-8">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Performance Overview */}
            <div className="lg:col-span-2">
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle className="text-2xl font-semibold flex items-center">
                    <BarChart3 className="w-6 h-6 mr-2 text-blue-500" />
                    Performance Overview
                  </CardTitle>
                  <CardDescription>
                    Real-time performance metrics and system health
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    <div className="space-y-3">
                      <div className="flex justify-between items-center">
                        <span className="text-sm font-medium">CPU Usage</span>
                        <span className="text-sm text-muted-foreground">45%</span>
                      </div>
                      <Progress value={45} className="h-2" />
                    </div>
                    <div className="space-y-3">
                      <div className="flex justify-between items-center">
                        <span className="text-sm font-medium">Memory</span>
                        <span className="text-sm text-muted-foreground">62%</span>
                      </div>
                      <Progress value={62} className="h-2" />
                    </div>
                    <div className="space-y-3">
                      <div className="flex justify-between items-center">
                        <span className="text-sm font-medium">Network</span>
                        <span className="text-sm text-muted-foreground">28%</span>
                      </div>
                      <Progress value={28} className="h-2" />
                    </div>
                    <div className="space-y-3">
                      <div className="flex justify-between items-center">
                        <span className="text-sm font-medium">Storage</span>
                        <span className="text-sm text-muted-foreground">78%</span>
                      </div>
                      <Progress value={78} className="h-2" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Recent Activity - Attention to Detail */}
            <div>
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle className="text-xl font-semibold flex items-center">
                    <Clock className="w-5 h-5 mr-2 text-purple-500" />
                    Recent Activity
                  </CardTitle>
                  <CardDescription>
                    Latest system events and user actions
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {recentActivities.map((activity) => (
                      <div key={activity.id} className="flex items-start space-x-3 p-3 rounded-lg bg-white/30 hover:bg-white/50 transition-colors">
                        <div className={`p-2 rounded-lg ${
                          activity.type === 'success' ? 'bg-green-100 text-green-600' :
                          activity.type === 'warning' ? 'bg-yellow-100 text-yellow-600' :
                          'bg-blue-100 text-blue-600'
                        }`}>
                          <activity.icon className="w-4 h-4" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium">{activity.title}</p>
                          <p className="text-xs text-muted-foreground">{activity.description}</p>
                          <p className="text-xs text-muted-foreground mt-1">{activity.time}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </section>

      {/* Feature Showcase - Aesthetics */}
      <section className="mb-8">
        <div className="max-w-7xl mx-auto">
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="text-2xl font-semibold text-center">
                Safari 26.0 Features
              </CardTitle>
              <CardDescription className="text-center">
                Experience the next generation of web browsing
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                <div className="text-center p-6 rounded-xl bg-gradient-to-br from-blue-50 to-cyan-50 border border-blue-200">
                  <div className="w-16 h-16 bg-blue-500 rounded-2xl flex items-center justify-center mx-auto mb-4">
                    <Zap className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="font-semibold text-lg mb-2">Enhanced Performance</h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    40% faster JavaScript execution with Nitro 2.0 engine
                  </p>
                  <Button variant="glass" size="sm">
                    Learn More
                  </Button>
                </div>

                <div className="text-center p-6 rounded-xl bg-gradient-to-br from-green-50 to-emerald-50 border border-green-200">
                  <div className="w-16 h-16 bg-green-500 rounded-2xl flex items-center justify-center mx-auto mb-4">
                    <Shield className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="font-semibold text-lg mb-2">Advanced Security</h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    Intelligent tracking prevention and privacy protection
                  </p>
                  <Button variant="glass" size="sm">
                    Learn More
                  </Button>
                </div>

                <div className="text-center p-6 rounded-xl bg-gradient-to-br from-purple-50 to-pink-50 border border-purple-200">
                  <div className="w-16 h-16 bg-purple-500 rounded-2xl flex items-center justify-center mx-auto mb-4">
                    <Star className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="font-semibold text-lg mb-2">Beautiful Design</h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    Apple design principles for intuitive user experience
                  </p>
                  <Button variant="glass" size="sm">
                    Learn More
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>

      {/* Call to Action - Emotional Connection */}
      <section>
        <div className="max-w-4xl mx-auto text-center">
          <Card className="glass-card">
            <CardContent className="py-12">
              <h2 className="text-3xl font-bold mb-4">Ready to Experience Safari 26.0?</h2>
              <p className="text-lg text-muted-foreground mb-8 max-w-2xl mx-auto">
                Discover the future of web browsing with enhanced performance, 
                security, and the beautiful design you expect from Apple.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button size="lg" className="safari-button">
                  <ArrowRight className="w-5 h-5 mr-2" />
                  Get Started
                </Button>
                <Button variant="glass" size="lg">
                  <Play className="w-5 h-5 mr-2" />
                  Watch Demo
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>
    </div>
  );
}


=== FILE: client/src/pages/upload.tsx ===

import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { useLocation } from 'wouter';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { Upload as UploadIcon, Edit3, Save } from 'lucide-react';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';

interface Section {
  id: string;
  title: string;
  subsections: {
    id: string;
    title: string;
    content: string;
  }[];
}

function Upload() {
  const [businessName, setBusinessName] = useState('');
  const [, setLocation] = useLocation();
  const queryClient = useQueryClient();
  const { toast } = useToast();

  interface SubsectionScore {
    score: number;
    status: 'pending' | 'scored';
  }

  interface SectionScore {
    score: number;
    status: 'pending' | 'scored';
    subsections: Record<string, SubsectionScore>;
  }

  const [sectionScores, setSectionScores] = useState<Record<string, SectionScore>>({});
  const [sections] = useState<Section[]>([
    {
      id: 'executive-summary',
      title: 'Executive Summary',
      subsections: [
        { id: 'mission', title: 'Our Mission', content: '' },
        { id: 'management', title: 'The Company & Management', content: '' },
        { id: 'products', title: 'Our Products/Services', content: '' },
        { id: 'opportunity', title: 'The Opportunity', content: '' },
        { id: 'financial', title: 'Financial Highlights', content: '' },
      ]
    },
    {
      id: 'business',
      title: 'The Business',
      subsections: [
        { id: 'description', title: 'Description', content: '' },
        { id: 'problem', title: 'Problem & Solution', content: '' },
        { id: 'mission-values', title: 'Our Mission & Values', content: '' },
        { id: 'structure', title: 'Structure & Ownership', content: '' },
      ]
    },
    {
      id: 'products',
      title: 'Products/Services',
      subsections: [
        { id: 'features', title: 'Descriptions & Features', content: '' },
        { id: 'pricing', title: 'Pricing & Margins', content: '' },
        { id: 'warranties', title: 'Guarantees & Warranties', content: '' },
        { id: 'development', title: 'Product Development', content: '' },
      ]
    },
    {
      id: 'market',
      title: 'Market Analysis',
      subsections: [
        { id: 'swot', title: 'SWOT Analysis', content: '' },
        { id: 'segments', title: 'Market Segments & Trends', content: '' },
        { id: 'personas', title: 'Buyer Personas', content: '' },
        { id: 'barriers', title: 'Barriers To Entry', content: '' },
        { id: 'competitors', title: 'Competitor Analysis', content: '' },
      ]
    },
    {
      id: 'strategy',
      title: 'Strategy Plan',
      subsections: [
        { id: 'objectives', title: 'Objectives', content: '' },
        { id: 'promotion', title: 'Promotional Strategy', content: '' },
        { id: 'pricing-strategy', title: 'Pricing Strategy', content: '' },
        { id: 'distribution', title: 'Distribution', content: '' },
        { id: 'branding', title: 'Branding', content: '' },
        { id: 'success', title: 'Success Factors', content: '' },
        { id: 'exit', title: 'Exit Strategy', content: '' },
      ]
    },
    {
      id: 'operations',
      title: 'Operation Plan',
      subsections: [
        { id: 'staffing', title: 'Staffing & Training', content: '' },
        { id: 'management-structure', title: 'Management Structure', content: '' },
        { id: 'advisors', title: 'Professional Advisors', content: '' },
        { id: 'premises', title: 'Premises', content: '' },
        { id: 'legal', title: 'Legal Considerations', content: '' },
      ]
    },
    {
      id: 'financial',
      title: 'Financial Plan',
      subsections: [
        { id: 'data', title: 'Financial Data', content: '' },
        { id: 'profit-loss', title: 'Profit & Loss', content: '' },
        { id: 'balance', title: 'Balance Sheet', content: '' },
        { id: 'cashflow', title: 'Cash Flow', content: '' },
      ]
    },
  ]);

  const createBusinessPlanMutation = useMutation({
    mutationFn: async (data: { name: string, userId: number }) => {
      const response = await apiRequest('POST', '/api/business-plans', data);
      return response.json();
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['/api/business-plans'] });
      toast({
        title: "Success",
        description: "Business plan created successfully",
      });
      setLocation(`/edit/${data.id}`);
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to create business plan",
        variant: "destructive",
      });
    }
  });

  const onDrop = async (acceptedFiles: File[]) => {
    try {
      if (acceptedFiles.length === 0) {
        toast({
          title: "Error",
          description: "No file was uploaded",
          variant: "destructive",
        });
        return;
      }

      const file = acceptedFiles[0];
      if (file.size > 10 * 1024 * 1024) { // 10MB limit
        toast({
          title: "Error",
          description: "File size must be less than 10MB",
          variant: "destructive",
        });
        return;
      }

      if (businessName.trim() === '') {
        setBusinessName(file.name.split('.')[0]);
      }

      // Show processing state for all sections
      const initialScores: Record<string, SectionScore> = {};
      sections.forEach(section => {
        initialScores[section.id] = {
          score: 0,
          status: 'pending',
          subsections: {}
        };
        section.subsections.forEach(subsection => {
          initialScores[section.id].subsections[subsection.id] = {
            score: 0,
            status: 'pending'
          };
        });
      });
      setSectionScores(initialScores);
      
      toast({
        title: "Analyzing plan",
        description: "Processing sections for scoring...",
      });

    // Simulate section scoring with random scores
    try {
      // Simulate file processing
      setTimeout(() => {
        const newScores: Record<string, SectionScore> = {};
        sections.forEach(section => {
          const subsectionScores: Record<string, SubsectionScore> = {};
          section.subsections.forEach(subsection => {
            subsectionScores[subsection.id] = {
              score: Math.floor(Math.random() * 30) + 70,
              status: 'scored'
            };
          });
          
          // Calculate section score as average of subsection scores
          const avgScore = Object.values(subsectionScores)
            .reduce((sum, sub) => sum + sub.score, 0) / section.subsections.length;
          
          newScores[section.id] = {
            score: Math.round(avgScore),
            status: 'scored',
            subsections: subsectionScores
          };
        });
        setSectionScores(newScores);
        
        toast({
          title: "Analysis complete",
          description: "Plan sections and subsections have been scored",
        });
      }, 2000);
    } catch (error) {
      console.error('Error processing file:', error);
      toast({
        title: "Error",
        description: "Failed to process the business plan",
        variant: "destructive",
      });
      // Reset scores on error
      setSectionScores({});
    }
  } catch (error) {
    console.error('Error handling file upload:', error);
    toast({
      title: "Error",
      description: "Failed to upload the business plan",
      variant: "destructive",
    });
  }
};

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'application/msword': ['.doc'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']
    },
    multiple: false
  });

  const handleSave = () => {
    if (businessName.trim() === '') {
      toast({
        title: "Error",
        description: "Please enter a business name",
        variant: "destructive",
      });
      return;
    }

    createBusinessPlanMutation.mutate({
      name: businessName,
      userId: 1 // For demo, using userId 1
    });
  };

  const handleEditSection = (sectionId: string, subsectionId: string) => {
    // Create a new plan first if needed
    if (!createBusinessPlanMutation.data) {
      handleSave();
    } else {
      setLocation(`/edit/${createBusinessPlanMutation.data.id}?section=${sectionId}&subsection=${subsectionId}`);
    }
  };

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Document Editor</h1>
        <div className="flex items-center space-x-4">
          <div className="relative">
            <input
              type="text"
              value={businessName}
              onChange={(e) => setBusinessName(e.target.value)}
              placeholder="Business Name"
              className="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <button
            onClick={handleSave}
            disabled={createBusinessPlanMutation.isPending}
            className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-blue-300"
          >
            {createBusinessPlanMutation.isPending ? (
              <div className="animate-spin h-5 w-5 mr-2 border-b-2 border-white rounded-full"></div>
            ) : (
              <Save className="h-5 w-5 mr-2" />
            )}
            Save Document
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        <div
          {...getRootProps()}
          className={`col-span-1 aspect-square border-2 border-dashed rounded-lg flex flex-col items-center justify-center cursor-pointer transition-colors
            ${isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-400'}`}
        >
          <input {...getInputProps()} />
          <UploadIcon className="h-16 w-16 text-gray-400 mb-4" />
          <p className="text-lg font-medium text-gray-600">Upload Document</p>
          <p className="mt-2 text-sm text-gray-500">
            Drop a business plan, proposal, or application file
          </p>
        </div>

        {sections.map((section) => (
          <div key={section.id} className="col-span-1 bg-white rounded-lg shadow-sm border">
            <div className="p-4 border-b bg-gray-50 flex justify-between items-center">
              <h2 className="text-lg font-medium text-gray-800">{section.title}</h2>
              {sectionScores[section.id] && (
                <div className={`flex items-center ${
                  sectionScores[section.id].status === 'pending' ? 'text-gray-400' : 
                  sectionScores[section.id].score >= 80 ? 'text-green-600' :
                  sectionScores[section.id].score >= 70 ? 'text-yellow-600' : 'text-red-600'
                }`}>
                  {sectionScores[section.id].status === 'pending' ? (
                    <div className="animate-spin h-4 w-4 border-2 border-current rounded-full border-t-transparent" />
                  ) : (
                    <span className="font-semibold">{sectionScores[section.id].score}</span>
                  )}
                </div>
              )}
            </div>
            <div className="p-4 space-y-3">
              {section.subsections.map((subsection) => (
                <div key={subsection.id} className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">{subsection.title}</span>
                  <div className="flex items-center gap-2">
                    {sectionScores[section.id]?.subsections[subsection.id] && (
                      <span className={`text-sm font-medium ${
                        sectionScores[section.id].subsections[subsection.id].status === 'pending' ? 'text-gray-400' :
                        sectionScores[section.id].subsections[subsection.id].score >= 80 ? 'text-green-600' :
                        sectionScores[section.id].subsections[subsection.id].score >= 70 ? 'text-yellow-600' : 'text-red-600'
                      }`}>
                        {sectionScores[section.id].subsections[subsection.id].status === 'pending' ? (
                          <div className="animate-spin h-3 w-3 border-2 border-current rounded-full border-t-transparent" />
                        ) : (
                          sectionScores[section.id].subsections[subsection.id].score
                        )}
                      </span>
                    )}
                    <button 
                      className="p-1 text-gray-400 hover:text-blue-600"
                      onClick={() => handleEditSection(section.id, subsection.id)}
                    >
                      <Edit3 className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Upload;

=== FILE: client/src/pages/education-funding.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  DollarSign, Play, Clock, Users, Award, CheckCircle, Star, ArrowRight,
  Target, Zap, Building, TrendingUp, Globe, Shield, FileText, Presentation
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface FundingModule {
  id: string;
  title: string;
  description: string;
  duration: number;
  lessons: number;
  completed: boolean;
  progress: number;
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced';
  topics: string[];
  type: 'video' | 'workshop' | 'template' | 'case-study';
}

interface FundingStage {
  id: string;
  name: string;
  description: string;
  amount: string;
  equity: string;
  duration: string;
  keyInvestors: string[];
  requirements: string[];
}

function EducationFunding() {
  const { id } = useParams();
  const [activeTab, setActiveTab] = useState('overview');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for funding modules
  const fundingModules: FundingModule[] = [
    {
      id: 'pitch-deck',
      title: 'Pitch Deck Mastery',
      description: 'Create compelling pitch decks that win over investors and secure funding.',
      duration: 90,
      lessons: 12,
      completed: false,
      progress: 25,
      difficulty: 'Intermediate',
      topics: ['Storytelling', 'Financial Projections', 'Market Analysis', 'Team Slide'],
      type: 'workshop'
    },
    {
      id: 'valuation',
      title: 'Startup Valuation',
      description: 'Learn how to value your startup and negotiate fair terms with investors.',
      duration: 75,
      lessons: 8,
      completed: false,
      progress: 0,
      difficulty: 'Advanced',
      topics: ['DCF Analysis', 'Comparable Companies', 'Market Multiples', 'Risk Assessment'],
      type: 'video'
    },
    {
      id: 'term-sheets',
      title: 'Term Sheet Negotiation',
      description: 'Understand and negotiate term sheets to protect your interests.',
      duration: 60,
      lessons: 6,
      completed: false,
      progress: 0,
      difficulty: 'Advanced',
      topics: ['Liquidation Preferences', 'Anti-dilution', 'Board Rights', 'Vesting'],
      type: 'case-study'
    },
    {
      id: 'due-diligence',
      title: 'Due Diligence Process',
      description: 'Prepare for and navigate the investor due diligence process.',
      duration: 45,
      lessons: 5,
      completed: false,
      progress: 0,
      difficulty: 'Intermediate',
      topics: ['Documentation', 'Financial Records', 'Legal Structure', 'IP Protection'],
      type: 'template'
    },
    {
      id: 'investor-relations',
      title: 'Investor Relations',
      description: 'Build and maintain strong relationships with investors and stakeholders.',
      duration: 50,
      lessons: 7,
      completed: false,
      progress: 0,
      difficulty: 'Beginner',
      topics: ['Communication', 'Reporting', 'Board Meetings', 'Updates'],
      type: 'workshop'
    },
    {
      id: 'alternative-funding',
      title: 'Alternative Funding Sources',
      description: 'Explore grants, crowdfunding, and other non-equity funding options.',
      duration: 40,
      lessons: 5,
      completed: false,
      progress: 0,
      difficulty: 'Beginner',
      topics: ['Grants', 'Crowdfunding', 'Revenue-based Financing', 'SBIR'],
      type: 'video'
    }
  ];

  const fundingStages: FundingStage[] = [
    {
      id: 'pre-seed',
      name: 'Pre-Seed',
      description: 'Initial funding to validate your idea and build MVP',
      amount: '$50K - $500K',
      equity: '5-15%',
      duration: '6-12 months',
      keyInvestors: ['Friends & Family', 'Angel Investors', 'Accelerators'],
      requirements: ['Idea validation', 'Basic prototype', 'Founding team']
    },
    {
      id: 'seed',
      name: 'Seed Round',
      description: 'Funding to build product and achieve product-market fit',
      amount: '$500K - $2M',
      equity: '10-25%',
      duration: '12-18 months',
      keyInvestors: ['Angel Investors', 'Seed VCs', 'Micro VCs'],
      requirements: ['Working product', 'Early customers', 'Revenue traction']
    },
    {
      id: 'series-a',
      name: 'Series A',
      description: 'Scaling funding to grow team and expand market reach',
      amount: '$2M - $15M',
      equity: '15-30%',
      duration: '18-24 months',
      keyInvestors: ['VCs', 'Growth Investors', 'Strategic Investors'],
      requirements: ['Product-market fit', 'Strong metrics', 'Scalable business model']
    }
  ];

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Beginner': return 'text-green-600 bg-green-50';
      case 'Intermediate': return 'text-yellow-600 bg-yellow-50';
      case 'Advanced': return 'text-red-600 bg-red-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'video': return Play;
      case 'workshop': return Users;
      case 'template': return FileText;
      case 'case-study': return Presentation;
      default: return Play;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'video': return 'blue';
      case 'workshop': return 'purple';
      case 'template': return 'green';
      case 'case-study': return 'orange';
      default: return 'gray';
    }
  };

  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0) {
      return `${hours}h ${mins}m`;
    }
    return `${mins}m`;
  };

  const completedModules = fundingModules.filter(module => module.completed).length;
  const totalProgress = Math.round(
    fundingModules.reduce((sum, module) => sum + module.progress, 0) / fundingModules.length
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-emerald-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-green-100 rounded-lg">
              <DollarSign className="h-6 w-6 text-green-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Fundraising Masterclass
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Complete guide to raising capital - from seed rounds to Series A and beyond.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <DollarSign className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">6</p>
                  <p className="text-sm text-gray-600">Funding Modules</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <CheckCircle className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">{completedModules}</p>
                  <p className="text-sm text-gray-600">Completed</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Clock className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">6.5h</p>
                  <p className="text-sm text-gray-600">Total Duration</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <TrendingUp className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">{totalProgress}%</p>
                  <p className="text-sm text-gray-600">Progress</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="modules">Modules</TabsTrigger>
            <TabsTrigger value="stages">Funding Stages</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5" />
                    Your Progress
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Overall Progress</span>
                      <span className="text-sm font-bold">{totalProgress}%</span>
                    </div>
                    <Progress value={totalProgress} className="h-3" />
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <p className="text-gray-600">Completed Modules</p>
                      <p className="font-bold">{completedModules} / {fundingModules.length}</p>
                    </div>
                    <div>
                      <p className="text-gray-600">Time Invested</p>
                      <p className="font-bold">1.5 hours</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Award className="h-5 w-5" />
                    Key Learning Outcomes
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center gap-3 p-3 bg-green-50 rounded-lg">
                      <CheckCircle className="h-5 w-5 text-green-600" />
                      <div>
                        <p className="font-medium">Create Winning Pitch Decks</p>
                        <p className="text-sm text-gray-600">Master the art of storytelling</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
                      <Star className="h-5 w-5 text-blue-600" />
                      <div>
                        <p className="font-medium">Understand Valuation Methods</p>
                        <p className="text-sm text-gray-600">Learn startup valuation techniques</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-purple-50 rounded-lg">
                      <Shield className="h-5 w-5 text-purple-600" />
                      <div>
                        <p className="font-medium">Negotiate Term Sheets</p>
                        <p className="text-sm text-gray-600">Protect your interests</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Modules Tab */}
          <TabsContent value="modules" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {fundingModules.map(module => {
                const TypeIcon = getTypeIcon(module.type);
                const typeColor = getTypeColor(module.type);
                return (
                  <Card key={module.id} className={module.completed ? 'ring-2 ring-green-500' : ''}>
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        <div>
                          <CardTitle className="text-lg">{module.title}</CardTitle>
                          <CardDescription>{module.description}</CardDescription>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge className={`bg-${typeColor}-100 text-${typeColor}-700`}>
                            <TypeIcon className="h-3 w-3 mr-1" />
                            {module.type}
                          </Badge>
                          {module.completed && (
                            <CheckCircle className="h-6 w-6 text-green-600" />
                          )}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex items-center gap-4 text-sm">
                        <div className="flex items-center gap-1">
                          <Clock className="h-4 w-4 text-gray-500" />
                          <span>{formatDuration(module.duration)}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <FileText className="h-4 w-4 text-gray-500" />
                          <span>{module.lessons} lessons</span>
                        </div>
                        <Badge className={getDifficultyColor(module.difficulty)}>
                          {module.difficulty}
                        </Badge>
                      </div>

                      <div className="space-y-2">
                        <div className="flex items-center justify-between text-sm">
                          <span>Progress</span>
                          <span className="font-medium">{module.progress}%</span>
                        </div>
                        <Progress value={module.progress} className="h-2" />
                      </div>

                      <div>
                        <p className="text-sm font-medium text-gray-700 mb-2">Topics Covered</p>
                        <div className="flex flex-wrap gap-1">
                          {module.topics.map((topic, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {topic}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button className="w-full" disabled={module.completed}>
                        {module.completed ? (
                          <>
                            <CheckCircle className="h-4 w-4 mr-2" />
                            Completed
                          </>
                        ) : module.progress > 0 ? (
                          <>
                            <Play className="h-4 w-4 mr-2" />
                            Continue
                          </>
                        ) : (
                          <>
                            <Play className="h-4 w-4 mr-2" />
                            Start Module
                          </>
                        )}
                      </Button>
                    </CardFooter>
                  </Card>
                );
              })}
            </div>
          </TabsContent>

          {/* Funding Stages Tab */}
          <TabsContent value="stages" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {fundingStages.map(stage => (
                <Card key={stage.id}>
                  <CardHeader>
                    <CardTitle className="text-lg">{stage.name}</CardTitle>
                    <CardDescription>{stage.description}</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-3">
                      <div>
                        <p className="text-sm font-medium text-gray-700">Funding Amount</p>
                        <p className="text-lg font-bold text-green-600">{stage.amount}</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Equity Given</p>
                        <p className="text-lg font-bold">{stage.equity}</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Duration</p>
                        <p className="text-sm">{stage.duration}</p>
                      </div>
                    </div>

                    <div>
                      <p className="text-sm font-medium text-gray-700 mb-2">Key Investors</p>
                      <div className="flex flex-wrap gap-1">
                        {stage.keyInvestors.map((investor, index) => (
                          <Badge key={index} variant="secondary" className="text-xs">
                            {investor}
                          </Badge>
                        ))}
                      </div>
                    </div>

                    <div>
                      <p className="text-sm font-medium text-gray-700 mb-2">Requirements</p>
                      <ul className="space-y-1 text-sm">
                        {stage.requirements.map((requirement, index) => (
                          <li key={index} className="flex items-center gap-2">
                            <CheckCircle className="h-3 w-3 text-green-600" />
                            <span>{requirement}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button className="w-full">
                      <ArrowRight className="h-4 w-4 mr-2" />
                      Learn More
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

export default EducationFunding;


=== FILE: client/src/pages/partner-dashboard.tsx ===


import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Handshake, 
  Users, 
  Target, 
  TrendingUp,
  Award,
  Building2,
  Rocket,
  Lightbulb,
  BarChart3
} from "lucide-react";

const partnerMetrics = [
  { label: "Active Partnerships", value: "28", icon: Handshake, color: "text-blue-600" },
  { label: "Startups Supported", value: "156", icon: Rocket, color: "text-purple-600" },
  { label: "Success Rate", value: "73%", icon: Target, color: "text-green-600" },
  { label: "Resource Utilization", value: "89%", icon: TrendingUp, color: "text-orange-600" }
];

export default function PartnerDashboard() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-cyan-50">
      <div className="container mx-auto py-8 px-4">
        <div className="mb-8">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent mb-2">
            Partner Dashboard ü§ù
          </h1>
          <p className="text-gray-600">
            Manage partnerships and support startup ecosystem growth
          </p>
        </div>

        {/* Partnership Overview */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          {partnerMetrics.map((metric, index) => {
            const IconComponent = metric.icon;
            return (
              <Card key={index}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">{metric.label}</p>
                      <p className="text-2xl font-bold">{metric.value}</p>
                    </div>
                    <IconComponent className={`h-8 w-8 ${metric.color}`} />
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        <Tabs defaultValue="startups" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="startups">Startups</TabsTrigger>
            <TabsTrigger value="programs">Programs</TabsTrigger>
            <TabsTrigger value="resources">Resources</TabsTrigger>
            <TabsTrigger value="success">Success Metrics</TabsTrigger>
          </TabsList>

          <TabsContent value="startups">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Rocket className="h-5 w-5" />
                  Partner Startups
                </CardTitle>
                <CardDescription>Manage and support your portfolio of partner startups</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <Building2 className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Startup management tools coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="programs">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Lightbulb className="h-5 w-5" />
                  Partnership Programs
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <Award className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Program management coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="resources">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Users className="h-5 w-5" />
                  Resource Sharing
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <Users className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Resource sharing platform coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="success">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5" />
                  Success Metrics
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <TrendingUp className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Success tracking analytics coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}


=== FILE: client/src/pages/competitive-advantage.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  Target, Shield, Zap, TrendingUp, Award, Users, Building, Globe,
  BarChart3, PieChart, ArrowUp, ArrowDown, CheckCircle, XCircle,
  AlertCircle, Info, Star, Trophy, Crown, Diamond
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface CompetitiveFactor {
  id: string;
  name: string;
  category: 'technology' | 'market' | 'operational' | 'financial';
  score: number;
  weight: number;
  description: string;
  strengths: string[];
  weaknesses: string[];
  opportunities: string[];
  threats: string[];
}

interface Competitor {
  id: string;
  name: string;
  marketShare: number;
  strengths: string[];
  weaknesses: string[];
  threatLevel: 'low' | 'medium' | 'high';
  recentMoves: string[];
}

function CompetitiveAdvantage() {
  const { id } = useParams();
  const [activeTab, setActiveTab] = useState('overview');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for competitive factors
  const competitiveFactors: CompetitiveFactor[] = [
    {
      id: 'tech-innovation',
      name: 'Technology Innovation',
      category: 'technology',
      score: 85,
      weight: 25,
      description: 'Your technological capabilities and innovation pipeline',
      strengths: ['AI/ML expertise', 'Cloud-native architecture', 'API-first design'],
      weaknesses: ['Limited R&D budget', 'Small tech team'],
      opportunities: ['Open source adoption', 'Partnership with tech giants'],
      threats: ['Rapid tech changes', 'Big tech competition']
    },
    {
      id: 'market-position',
      name: 'Market Position',
      category: 'market',
      score: 72,
      weight: 30,
      description: 'Your position in the target market',
      strengths: ['First-mover advantage', 'Strong brand recognition', 'Customer loyalty'],
      weaknesses: ['Limited market share', 'High customer acquisition cost'],
      opportunities: ['Market expansion', 'International growth'],
      threats: ['New entrants', 'Market saturation']
    },
    {
      id: 'operational-efficiency',
      name: 'Operational Efficiency',
      category: 'operational',
      score: 68,
      weight: 20,
      description: 'Your operational processes and efficiency',
      strengths: ['Lean operations', 'Automated processes', 'Remote-first culture'],
      weaknesses: ['Limited scale', 'Manual processes in some areas'],
      opportunities: ['Process automation', 'Outsourcing partnerships'],
      threats: ['Rising operational costs', 'Talent shortage']
    },
    {
      id: 'financial-strength',
      name: 'Financial Strength',
      category: 'financial',
      score: 78,
      weight: 25,
      description: 'Your financial position and resources',
      strengths: ['Strong cash flow', 'Low debt', 'High margins'],
      weaknesses: ['Limited funding', 'High burn rate'],
      opportunities: ['Additional funding', 'Revenue diversification'],
      threats: ['Economic downturn', 'Increased competition']
    }
  ];

  const competitors: Competitor[] = [
    {
      id: 'competitor-1',
      name: 'TechCorp Inc.',
      marketShare: 35,
      strengths: ['Large R&D budget', 'Global presence', 'Strong partnerships'],
      weaknesses: ['Slow innovation', 'High costs', 'Complex bureaucracy'],
      threatLevel: 'high',
      recentMoves: ['Launched new AI product', 'Acquired smaller competitor', 'Expanded to Europe']
    },
    {
      id: 'competitor-2',
      name: 'StartupXYZ',
      marketShare: 15,
      strengths: ['Agile development', 'Innovative features', 'Strong community'],
      weaknesses: ['Limited resources', 'Small team', 'Unproven business model'],
      threatLevel: 'medium',
      recentMoves: ['Raised Series A funding', 'Hired key executives', 'Launched mobile app']
    },
    {
      id: 'competitor-3',
      name: 'Enterprise Solutions',
      marketShare: 25,
      strengths: ['Enterprise focus', 'Established relationships', 'Compliance expertise'],
      weaknesses: ['Legacy systems', 'Slow to adapt', 'High prices'],
      threatLevel: 'low',
      recentMoves: ['Updated pricing model', 'Partnership with cloud provider', 'New compliance features']
    }
  ];

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'technology': return Zap;
      case 'market': return Globe;
      case 'operational': return Building;
      case 'financial': return TrendingUp;
      default: return Target;
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'technology': return 'blue';
      case 'market': return 'green';
      case 'operational': return 'purple';
      case 'financial': return 'orange';
      default: return 'gray';
    }
  };

  const getThreatColor = (level: string) => {
    switch (level) {
      case 'low': return 'text-green-600 bg-green-50';
      case 'medium': return 'text-yellow-600 bg-yellow-50';
      case 'high': return 'text-red-600 bg-red-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const overallScore = Math.round(
    competitiveFactors.reduce((sum, factor) => sum + (factor.score * factor.weight / 100), 0)
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-blue-100 rounded-lg">
              <Target className="h-6 w-6 text-blue-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Competitive Analysis
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Analyze your competitive positioning and identify key advantages in the market.
          </p>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <Trophy className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">{overallScore}%</p>
                  <p className="text-sm text-gray-600">Overall Score</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Shield className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">4</p>
                  <p className="text-sm text-gray-600">Key Advantages</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Users className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">3</p>
                  <p className="text-sm text-gray-600">Main Competitors</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <TrendingUp className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">+12%</p>
                  <p className="text-sm text-gray-600">Market Position</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="factors">Competitive Factors</TabsTrigger>
            <TabsTrigger value="competitors">Competitors</TabsTrigger>
            <TabsTrigger value="swot">SWOT Analysis</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <BarChart3 className="h-5 w-5" />
                    Competitive Score Breakdown
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {competitiveFactors.map(factor => {
                    const Icon = getCategoryIcon(factor.category);
                    const color = getCategoryColor(factor.category);
                    return (
                      <div key={factor.id} className="space-y-2">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <Icon className={`h-4 w-4 text-${color}-600`} />
                            <span className="font-medium">{factor.name}</span>
                          </div>
                          <span className={`font-bold ${getScoreColor(factor.score)}`}>
                            {factor.score}%
                          </span>
                        </div>
                        <Progress value={factor.score} className="h-2" />
                        <p className="text-sm text-gray-600">{factor.description}</p>
                      </div>
                    );
                  })}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <PieChart className="h-5 w-5" />
                    Market Position
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="text-center">
                      <div className="text-3xl font-bold text-gray-900 mb-2">25%</div>
                      <p className="text-sm text-gray-600">Your Market Share</p>
                    </div>
                    <div className="space-y-2">
                      {competitors.map(competitor => (
                        <div key={competitor.id} className="flex items-center justify-between">
                          <span className="text-sm font-medium">{competitor.name}</span>
                          <div className="flex items-center gap-2">
                            <div className="w-20 bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-blue-600 h-2 rounded-full" 
                                style={{ width: `${competitor.marketShare}%` }}
                              />
                            </div>
                            <span className="text-sm text-gray-600">{competitor.marketShare}%</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Competitive Factors Tab */}
          <TabsContent value="factors" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {competitiveFactors.map(factor => {
                const Icon = getCategoryIcon(factor.category);
                const color = getCategoryColor(factor.category);
                return (
                  <Card key={factor.id}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <Icon className={`h-5 w-5 text-${color}-600`} />
                          <CardTitle>{factor.name}</CardTitle>
                        </div>
                        <Badge className={`bg-${color}-100 text-${color}-700`}>
                          {factor.score}%
                        </Badge>
                      </div>
                      <CardDescription>{factor.description}</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <h4 className="font-medium text-green-700 mb-2">Strengths</h4>
                        <div className="space-y-1">
                          {factor.strengths.map((strength, index) => (
                            <div key={index} className="flex items-center gap-2 text-sm">
                              <CheckCircle className="h-4 w-4 text-green-600" />
                              <span>{strength}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                      <div>
                        <h4 className="font-medium text-red-700 mb-2">Weaknesses</h4>
                        <div className="space-y-1">
                          {factor.weaknesses.map((weakness, index) => (
                            <div key={index} className="flex items-center gap-2 text-sm">
                              <XCircle className="h-4 w-4 text-red-600" />
                              <span>{weakness}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </TabsContent>

          {/* Competitors Tab */}
          <TabsContent value="competitors" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {competitors.map(competitor => (
                <Card key={competitor.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle>{competitor.name}</CardTitle>
                      <Badge className={getThreatColor(competitor.threatLevel)}>
                        {competitor.threatLevel} threat
                      </Badge>
                    </div>
                    <CardDescription>{competitor.marketShare}% market share</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <h4 className="font-medium text-green-700 mb-2">Strengths</h4>
                      <ul className="space-y-1 text-sm">
                        {competitor.strengths.map((strength, index) => (
                          <li key={index} className="flex items-center gap-2">
                            <CheckCircle className="h-3 w-3 text-green-600" />
                            <span>{strength}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-medium text-red-700 mb-2">Weaknesses</h4>
                      <ul className="space-y-1 text-sm">
                        {competitor.weaknesses.map((weakness, index) => (
                          <li key={index} className="flex items-center gap-2">
                            <XCircle className="h-3 w-3 text-red-600" />
                            <span>{weakness}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-medium text-blue-700 mb-2">Recent Moves</h4>
                      <ul className="space-y-1 text-sm">
                        {competitor.recentMoves.map((move, index) => (
                          <li key={index} className="flex items-center gap-2">
                            <ArrowUp className="h-3 w-3 text-blue-600" />
                            <span>{move}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* SWOT Analysis Tab */}
          <TabsContent value="swot" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <CheckCircle className="h-5 w-5 text-green-600" />
                    Strengths
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    <li className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span>Strong technology foundation</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span>Experienced founding team</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span>First-mover advantage</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span>Strong customer relationships</span>
                    </li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <XCircle className="h-5 w-5 text-red-600" />
                    Weaknesses
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    <li className="flex items-center gap-2">
                      <XCircle className="h-4 w-4 text-red-600" />
                      <span>Limited financial resources</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <XCircle className="h-4 w-4 text-red-600" />
                      <span>Small team size</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <XCircle className="h-4 w-4 text-red-600" />
                      <span>Limited market presence</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <XCircle className="h-4 w-4 text-red-600" />
                      <span>Dependency on key customers</span>
                    </li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="h-5 w-5 text-blue-600" />
                    Opportunities
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    <li className="flex items-center gap-2">
                      <TrendingUp className="h-4 w-4 text-blue-600" />
                      <span>Market expansion</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <TrendingUp className="h-4 w-4 text-blue-600" />
                      <span>Technology partnerships</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <TrendingUp className="h-4 w-4 text-blue-600" />
                      <span>New product development</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <TrendingUp className="h-4 w-4 text-blue-600" />
                      <span>International markets</span>
                    </li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <AlertCircle className="h-5 w-5 text-orange-600" />
                    Threats
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    <li className="flex items-center gap-2">
                      <AlertCircle className="h-4 w-4 text-orange-600" />
                      <span>Increased competition</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <AlertCircle className="h-4 w-4 text-orange-600" />
                      <span>Economic downturn</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <AlertCircle className="h-4 w-4 text-orange-600" />
                      <span>Technology disruption</span>
                    </li>
                    <li className="flex items-center gap-2">
                      <AlertCircle className="h-4 w-4 text-orange-600" />
                      <span>Regulatory changes</span>
                    </li>
                  </ul>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

export default CompetitiveAdvantage;


=== FILE: client/src/pages/grant-funding.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  ArrowRight, Search, Filter, DollarSign, Building2, Globe, PieChart, Clock, Shield,
  TrendingUp, Users, Award, CheckCircle, AlertCircle, CreditCard, History, Info,
  BarChart2, HelpCircle, Wallet, Target, Star, ExternalLink, Building, Zap, Gift, Calendar
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

interface Grant {
  id: number;
  name: string;
  provider: string;
  type: 'government' | 'foundation' | 'corporate' | 'research';
  amount: number;
  deadline: string;
  eligibility: string[];
  sectors: string[];
  matchScore: number;
  description: string;
  website: string;
  requirements: string[];
  applicationProcess: string[];
  successRate: number;
  avgProcessingTime: string;
}

function GrantFunding() {
  const { id } = useParams();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedSectors, setSelectedSectors] = useState<string[]>([]);
  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);
  const [amountRange, setAmountRange] = useState([1000, 1000000]);
  const [deadlineFilter, setDeadlineFilter] = useState<string>('all');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for grants
  const grants: Grant[] = [
    {
      id: 1,
      name: "SBIR Phase I",
      provider: "National Science Foundation",
      type: "government",
      amount: 150000,
      deadline: "2024-06-15",
      eligibility: ["Small business", "US-based", "Technology focus"],
      sectors: ["Technology", "Research", "Innovation"],
      matchScore: 95,
      description: "Small Business Innovation Research program for early-stage technology development.",
      website: "https://nsf.gov/sbir",
      requirements: ["Research proposal", "Technical feasibility", "Commercial potential"],
      applicationProcess: ["Pre-application", "Full proposal", "Review process"],
      successRate: 0.15,
      avgProcessingTime: "6-8 months"
    },
    {
      id: 2,
      name: "Gates Foundation Global Health",
      provider: "Bill & Melinda Gates Foundation",
      type: "foundation",
      amount: 500000,
      deadline: "2024-08-30",
      eligibility: ["Non-profit", "Global health focus", "Innovation"],
      sectors: ["Healthcare", "Global Health", "Technology"],
      matchScore: 88,
      description: "Funding for innovative solutions to global health challenges.",
      website: "https://gatesfoundation.org",
      requirements: ["Health impact", "Innovation", "Scalability"],
      applicationProcess: ["Letter of inquiry", "Full proposal", "Review"],
      successRate: 0.08,
      avgProcessingTime: "4-6 months"
    },
    {
      id: 3,
      name: "Google for Startups",
      provider: "Google",
      type: "corporate",
      amount: 100000,
      deadline: "2024-07-20",
      eligibility: ["Tech startup", "Early stage", "Global"],
      sectors: ["Technology", "AI", "Cloud Computing"],
      matchScore: 92,
      description: "Google's startup accelerator program with funding and mentorship.",
      website: "https://startup.google.com",
      requirements: ["Tech focus", "Scalable business", "Innovation"],
      applicationProcess: ["Application", "Interview", "Selection"],
      successRate: 0.12,
      avgProcessingTime: "2-3 months"
    },
    {
      id: 4,
      name: "NIH Small Business Grant",
      provider: "National Institutes of Health",
      type: "government",
      amount: 300000,
      deadline: "2024-09-15",
      eligibility: ["Healthcare", "Biotech", "US-based"],
      sectors: ["Healthcare", "Biotechnology", "Research"],
      matchScore: 85,
      description: "NIH funding for small businesses developing healthcare technologies.",
      website: "https://grants.nih.gov",
      requirements: ["Health focus", "Scientific merit", "Commercial potential"],
      applicationProcess: ["Pre-application", "Full proposal", "Peer review"],
      successRate: 0.20,
      avgProcessingTime: "8-10 months"
    },
    {
      id: 5,
      name: "Microsoft for Startups",
      provider: "Microsoft",
      type: "corporate",
      amount: 120000,
      deadline: "2024-08-10",
      eligibility: ["B2B startup", "Cloud technology", "Global"],
      sectors: ["Technology", "Cloud", "Enterprise"],
      matchScore: 90,
      description: "Microsoft's startup program offering funding and Azure credits.",
      website: "https://startups.microsoft.com",
      requirements: ["B2B focus", "Cloud integration", "Innovation"],
      applicationProcess: ["Application", "Demo day", "Selection"],
      successRate: 0.15,
      avgProcessingTime: "3-4 months"
    },
    {
      id: 6,
      name: "Ford Foundation Innovation",
      provider: "Ford Foundation",
      type: "foundation",
      amount: 200000,
      deadline: "2024-10-01",
      eligibility: ["Social impact", "Non-profit", "Global"],
      sectors: ["Social Impact", "Education", "Sustainability"],
      matchScore: 82,
      description: "Funding for organizations creating social impact and positive change.",
      website: "https://fordfoundation.org",
      requirements: ["Social mission", "Impact measurement", "Sustainability"],
      applicationProcess: ["Concept note", "Full proposal", "Site visit"],
      successRate: 0.10,
      avgProcessingTime: "6-8 months"
    }
  ];

  const filteredGrants = grants.filter(grant => {
    const matchesSearch = grant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         grant.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         grant.provider.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesSector = selectedSectors.length === 0 || 
                          selectedSectors.some(sector => grant.sectors.includes(sector));
    const matchesType = selectedTypes.length === 0 || selectedTypes.includes(grant.type);
    const matchesAmount = grant.amount >= amountRange[0] && grant.amount <= amountRange[1];
    const matchesDeadline = deadlineFilter === 'all' || 
                           (deadlineFilter === 'soon' && new Date(grant.deadline) <= new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)) ||
                           (deadlineFilter === 'later' && new Date(grant.deadline) > new Date(Date.now() + 30 * 24 * 60 * 60 * 1000));
    
    return matchesSearch && matchesSector && matchesType && matchesAmount && matchesDeadline;
  });

  const sectors = ["Technology", "Healthcare", "Research", "Innovation", "Global Health", "AI", "Cloud Computing", "Biotechnology", "Social Impact", "Education", "Sustainability", "Enterprise"];

  const grantTypes = [
    { value: 'government', label: 'Government', icon: Building, color: 'blue' },
    { value: 'foundation', label: 'Foundation', icon: Gift, color: 'purple' },
    { value: 'corporate', label: 'Corporate', icon: Building2, color: 'green' },
    { value: 'research', label: 'Research', icon: Award, color: 'orange' }
  ];

  const deadlineFilters = [
    { value: 'all', label: 'All Deadlines' },
    { value: 'soon', label: 'Within 30 Days' },
    { value: 'later', label: 'More than 30 Days' }
  ];

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    }
    return `$${amount}`;
  };

  const getTypeIcon = (type: string) => {
    const typeConfig = grantTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.icon : Gift;
  };

  const getTypeLabel = (type: string) => {
    const typeConfig = grantTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.label : type;
  };

  const getTypeColor = (type: string) => {
    const typeConfig = grantTypes.find(t => t.value === type);
    return typeConfig ? typeConfig.color : 'gray';
  };

  const formatDeadline = (deadline: string) => {
    const date = new Date(deadline);
    const now = new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return 'Expired';
    if (diffDays === 0) return 'Today';
    if (diffDays === 1) return 'Tomorrow';
    if (diffDays <= 7) return `${diffDays} days left`;
    if (diffDays <= 30) return `${Math.ceil(diffDays / 7)} weeks left`;
    return `${Math.ceil(diffDays / 30)} months left`;
  };

  const getDeadlineColor = (deadline: string) => {
    const date = new Date(deadline);
    const now = new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return 'text-red-600 bg-red-50';
    if (diffDays <= 7) return 'text-orange-600 bg-orange-50';
    if (diffDays <= 30) return 'text-yellow-600 bg-yellow-50';
    return 'text-green-600 bg-green-50';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-purple-100 rounded-lg">
              <Gift className="h-6 w-6 text-purple-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Grant Funding
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Discover non-dilutive funding opportunities from government agencies, foundations, and corporations to support your mission.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <DollarSign className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">$3.2B</p>
                  <p className="text-sm text-gray-600">Available Grants</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Gift className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">156</p>
                  <p className="text-sm text-gray-600">Active Programs</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <Award className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">14%</p>
                  <p className="text-sm text-gray-600">Success Rate</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <Calendar className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">23</p>
                  <p className="text-sm text-gray-600">Deadlines This Month</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Filter className="h-5 w-5" />
              Find Your Perfect Grant
            </CardTitle>
            <CardDescription>
              Use filters to find grants that align with your organization's mission and capabilities
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Search Grants
                </label>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search by name, provider, or description..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Deadline Filter
                </label>
                <select
                  value={deadlineFilter}
                  onChange={(e) => setDeadlineFilter(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                >
                  {deadlineFilters.map(filter => (
                    <option key={filter.value} value={filter.value}>
                      {filter.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Grant Amount: {formatCurrency(amountRange[0])} - {formatCurrency(amountRange[1])}
              </label>
              <Slider
                value={amountRange}
                onValueChange={setAmountRange}
                min={1000}
                max={2000000}
                step={1000}
                className="w-full"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Grant Types
              </label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                {grantTypes.map(type => {
                  const Icon = type.icon;
                  return (
                    <button
                      key={type.value}
                      onClick={() => {
                        setSelectedTypes(prev => 
                          prev.includes(type.value) 
                            ? prev.filter(t => t !== type.value)
                            : [...prev, type.value]
                        );
                      }}
                      className={`p-3 rounded-lg border-2 transition-all ${
                        selectedTypes.includes(type.value)
                          ? `border-${type.color}-500 bg-${type.color}-50 text-${type.color}-700`
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <Icon className="h-5 w-5 mx-auto mb-2" />
                      <p className="text-xs font-medium text-center">{type.label}</p>
                    </button>
                  );
                })}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Sectors
              </label>
              <div className="flex flex-wrap gap-2">
                {sectors.map(sector => (
                  <Badge
                    key={sector}
                    variant={selectedSectors.includes(sector) ? "default" : "outline"}
                    className="cursor-pointer"
                    onClick={() => {
                      setSelectedSectors(prev => 
                        prev.includes(sector) 
                          ? prev.filter(s => s !== sector)
                          : [...prev, sector]
                      );
                    }}
                  >
                    {sector}
                  </Badge>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Results */}
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-gray-900">
              {filteredGrants.length} Grants Found
            </h2>
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <span>Sorted by Match Score</span>
              <TrendingUp className="h-4 w-4" />
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredGrants.map(grant => {
              const TypeIcon = getTypeIcon(grant.type);
              const typeColor = getTypeColor(grant.type);
              return (
                <Card key={grant.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-3">
                        <div className={`p-2 bg-${typeColor}-100 rounded-lg`}>
                          <TypeIcon className={`h-6 w-6 text-${typeColor}-600`} />
                        </div>
                        <div>
                          <CardTitle className="text-lg">{grant.name}</CardTitle>
                          <CardDescription>{grant.provider}</CardDescription>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center gap-1 mb-1">
                          <Star className="h-4 w-4 text-yellow-500 fill-current" />
                          <span className="text-sm font-medium">{grant.matchScore}% Match</span>
                        </div>
                        <Progress value={grant.matchScore} className="w-20 h-2" />
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-600 mb-4">{grant.description}</p>
                    
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div>
                        <p className="text-sm font-medium text-gray-700">Grant Amount</p>
                        <p className="text-lg font-bold text-gray-900">{formatCurrency(grant.amount)}</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Success Rate</p>
                        <p className="text-sm text-gray-600">{(grant.successRate * 100).toFixed(0)}%</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Processing Time</p>
                        <p className="text-sm text-gray-600">{grant.avgProcessingTime}</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-700">Deadline</p>
                        <Badge className={`text-xs ${getDeadlineColor(grant.deadline)}`}>
                          {formatDeadline(grant.deadline)}
                        </Badge>
                      </div>
                    </div>

                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-700 mb-2">Sectors</p>
                      <div className="flex flex-wrap gap-1">
                        {grant.sectors.map(sector => (
                          <Badge key={sector} variant="secondary" className="text-xs">
                            {sector}
                          </Badge>
                        ))}
                      </div>
                    </div>

                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-700 mb-2">Eligibility</p>
                      <div className="flex flex-wrap gap-1">
                        {grant.eligibility.slice(0, 3).map(requirement => (
                          <Badge key={requirement} variant="outline" className="text-xs">
                            {requirement}
                          </Badge>
                        ))}
                        {grant.eligibility.length > 3 && (
                          <Badge variant="outline" className="text-xs">
                            +{grant.eligibility.length - 3} more
                          </Badge>
                        )}
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter className="flex gap-2">
                    <Button className="flex-1">
                      <ExternalLink className="h-4 w-4 mr-2" />
                      Apply Now
                    </Button>
                    <Button variant="outline" className="flex-1">
                      <Info className="h-4 w-4 mr-2" />
                      Learn More
                    </Button>
                  </CardFooter>
                </Card>
              );
            })}
          </div>
        </div>

        {/* CTA Section */}
        <Card className="mt-8 bg-gradient-to-r from-purple-600 to-pink-600 text-white">
          <CardContent className="p-8">
            <div className="text-center">
              <h3 className="text-2xl font-bold mb-4">Ready to Secure Grant Funding?</h3>
              <p className="text-purple-100 mb-6 max-w-2xl mx-auto">
                Get matched with grants that align with your mission. Our platform analyzes 
                your organization and connects you with funding opportunities that are 
                perfect for your goals.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button size="lg" variant="secondary">
                  <Gift className="h-5 w-5 mr-2" />
                  Find My Grants
                </Button>
                <Button size="lg" variant="outline" className="border-white text-white hover:bg-white hover:text-purple-600">
                  <HelpCircle className="h-5 w-5 mr-2" />
                  Get Help
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default GrantFunding;


=== FILE: client/src/pages/design-thinking.tsx ===

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  Users, 
  Lightbulb, 
  Target, 
  Wrench, 
  TestTube,
  Plus,
  ArrowRight,
  CheckCircle,
  Clock,
  TrendingUp
} from 'lucide-react';
import { DTReadinessWidget } from '@/components/dashboard/DTReadinessWidget';
import { useEmpathyMaps } from '@/hooks/use-empathy-maps';

interface DTProject {
  id: string;
  name: string;
  currentPhase: 'empathize' | 'define' | 'ideate' | 'prototype' | 'test';
  progress: number;
  createdAt: Date;
  updatedAt: Date;
}

interface DTStats {
  totalProjects: number;
  activeProjects: number;
  completedProjects: number;
  empathyMapsCreated: number;
  prototypesBuilt: number;
  testSessionsCompleted: number;
}

export function DesignThinkingPage() {
  const [projects, setProjects] = useState<DTProject[]>([]);
  const [stats, setStats] = useState<DTStats>({
    totalProjects: 0,
    activeProjects: 0,
    completedProjects: 0,
    empathyMapsCreated: 0,
    prototypesBuilt: 0,
    testSessionsCompleted: 0
  });
  const [loading, setLoading] = useState(true);

  // Mock DT scores for demonstration
  const dtScores = {
    empathy: 75,
    problemFraming: 60,
    iterationComfort: 80,
    prototypingMindset: 70,
    userCentricity: 85
  };

  const dtRecommendations = [
    {
      category: 'Empathy',
      score: 75,
      level: 'advanced' as const,
      strengths: ['Strong user research skills', 'Good at understanding user needs'],
      gaps: ['Could improve emotional insight depth'],
      recommendations: ['Conduct more in-depth user interviews', 'Use empathy mapping techniques']
    },
    {
      category: 'Problem Framing',
      score: 60,
      level: 'intermediate' as const,
      strengths: ['Basic problem analysis skills'],
      gaps: ['Limited experience with problem reframing', 'Tends to jump to solutions'],
      recommendations: ['Practice the "5 Whys" method', 'Learn problem reframing techniques']
    }
  ];

  useEffect(() => {
    // Mock data loading
    setTimeout(() => {
      setProjects([
        {
          id: '1',
          name: 'E-commerce App Redesign',
          currentPhase: 'prototype',
          progress: 75,
          createdAt: new Date('2024-01-15'),
          updatedAt: new Date('2024-01-20')
        },
        {
          id: '2',
          name: 'Healthcare Platform',
          currentPhase: 'test',
          progress: 90,
          createdAt: new Date('2024-01-10'),
          updatedAt: new Date('2024-01-22')
        }
      ]);
      
      setStats({
        totalProjects: 5,
        activeProjects: 3,
        completedProjects: 2,
        empathyMapsCreated: 12,
        prototypesBuilt: 8,
        testSessionsCompleted: 15
      });
      
      setLoading(false);
    }, 1000);
  }, []);

  const phases = [
    {
      name: 'Empathize',
      icon: Users,
      description: 'Understand your users deeply',
      color: 'bg-blue-50 border-blue-200',
      progress: 80,
      tools: ['Empathy Maps', 'User Journey Maps', 'Interview Guide']
    },
    {
      name: 'Define',
      icon: Target,
      description: 'Frame the right problem',
      color: 'bg-green-50 border-green-200',
      progress: 60,
      tools: ['POV Statements', 'HMW Questions', 'Problem Framing']
    },
    {
      name: 'Ideate',
      icon: Lightbulb,
      description: 'Generate creative solutions',
      color: 'bg-yellow-50 border-yellow-200',
      progress: 40,
      tools: ['Brainstorming', 'Idea Management', 'Solution Sketching']
    },
    {
      name: 'Prototype',
      icon: Wrench,
      description: 'Build to learn',
      color: 'bg-purple-50 border-purple-200',
      progress: 30,
      tools: ['Prototype Planner', 'Storyboard Builder', 'Rapid Prototyping']
    },
    {
      name: 'Test',
      icon: TestTube,
      description: 'Validate with users',
      color: 'bg-red-50 border-red-200',
      progress: 20,
      tools: ['Test Sessions', 'Validation Dashboard', 'User Testing']
    }
  ];

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Design Thinking</h1>
          <p className="text-gray-600 mt-1">
            Human-centered innovation for better products and services
          </p>
        </div>
        <Button className="flex items-center gap-2">
          <Plus className="w-4 h-4" />
          New Project
        </Button>
      </div>

      {/* DT Readiness Widget */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-1">
          <DTReadinessWidget 
            scores={dtScores}
            recommendations={dtRecommendations}
            onRetakeAssessment={() => console.log('Retake assessment')}
            onViewDetails={() => console.log('View details')}
          />
        </div>
        
        {/* Quick Stats */}
        <div className="lg:col-span-2 grid grid-cols-2 gap-4">
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Active Projects</p>
                  <p className="text-2xl font-bold">{stats.activeProjects}</p>
                </div>
                <TrendingUp className="w-8 h-8 text-blue-600" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Empathy Maps</p>
                  <p className="text-2xl font-bold">{stats.empathyMapsCreated}</p>
                </div>
                <Users className="w-8 h-8 text-green-600" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Prototypes</p>
                  <p className="text-2xl font-bold">{stats.prototypesBuilt}</p>
                </div>
                <Wrench className="w-8 h-8 text-purple-600" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Test Sessions</p>
                  <p className="text-2xl font-bold">{stats.testSessionsCompleted}</p>
                </div>
                <TestTube className="w-8 h-8 text-red-600" />
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* DT Process Overview */}
      <Card>
        <CardHeader>
          <CardTitle>Design Thinking Process</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            {phases.map((phase, index) => {
              const Icon = phase.icon;
              return (
                <div key={phase.name} className="relative">
                  <Card className={`${phase.color} border-2`}>
                    <CardContent className="pt-6">
                      <div className="text-center">
                        <Icon className="w-8 h-8 mx-auto mb-2" />
                        <h3 className="font-semibold text-sm mb-1">{phase.name}</h3>
                        <p className="text-xs text-gray-600 mb-3">{phase.description}</p>
                        
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span>Progress</span>
                            <span>{phase.progress}%</span>
                          </div>
                          <Progress value={phase.progress} className="h-2" />
                        </div>
                        
                        <div className="mt-3">
                          <p className="text-xs font-medium text-gray-700 mb-1">Tools:</p>
                          <div className="space-y-1">
                            {phase.tools.map((tool, toolIndex) => (
                              <Badge key={toolIndex} variant="outline" className="text-xs">
                                {tool}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                  
                  {/* Arrow between phases */}
                  {index < phases.length - 1 && (
                    <div className="hidden md:block absolute top-1/2 -right-2 transform -translate-y-1/2">
                      <ArrowRight className="w-4 h-4 text-gray-400" />
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Recent Projects */}
      <Card>
        <CardHeader>
          <CardTitle>Recent Projects</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {projects.map((project) => (
              <div key={project.id} className="flex items-center justify-between p-4 border rounded-lg">
                <div className="flex items-center gap-4">
                  <div>
                    <h3 className="font-semibold">{project.name}</h3>
                    <p className="text-sm text-gray-600">
                      Phase: <Badge variant="outline">{project.currentPhase}</Badge>
                    </p>
                  </div>
                </div>
                
                <div className="flex items-center gap-4">
                  <div className="text-right">
                    <p className="text-sm font-medium">{project.progress}% Complete</p>
                    <Progress value={project.progress} className="w-24 h-2" />
                  </div>
                  
                  <Button variant="outline" size="sm">
                    Continue
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle>Quick Actions</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Button variant="outline" className="h-20 flex flex-col items-center justify-center gap-2">
              <Users className="w-6 h-6" />
              <span>Create Empathy Map</span>
            </Button>
            
            <Button variant="outline" className="h-20 flex flex-col items-center justify-center gap-2">
              <Target className="w-6 h-6" />
              <span>Define POV Statement</span>
            </Button>
            
            <Button variant="outline" className="h-20 flex flex-col items-center justify-center gap-2">
              <TestTube className="w-6 h-6" />
              <span>Start Design Sprint</span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


=== FILE: client/src/pages/funding-matcher.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  ArrowRight, Search, Filter, DollarSign, Building2, Globe, PieChart, Clock, Shield, 
  Gift, CheckCircle, Users, Award, TrendingUp, Star, ExternalLink, Zap, Target,
  Building, CreditCard, Gift as GiftIcon, HelpCircle, BarChart3
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';

interface Investor {
  id: number;
  name: string;
  type: 'angel' | 'vc' | 'pe';
  logo: string;
  minInvestment: number;
  maxInvestment: number;
  industries: string[];
  stages: string[];
  regions: string[];
  portfolio: number;
  successRate: number;
  matchScore: number;
}

interface Lender {
  id: number;
  name: string;
  type: 'bank' | 'credit-union' | 'online';
  logo: string;
  minLoan: number;
  maxLoan: number;
  interestRate: number;
  term: number;
  requirements: {
    minCreditScore: number;
    minTimeInBusiness: number;
    minAnnualRevenue: number;
  };
  matchScore: number;
}

interface Grant {
  id: number;
  name: string;
  provider: string;
  type: 'government' | 'foundation' | 'corporate';
  amount: number;
  deadline: string;
  eligibility: string[];
  sectors: string[];
  matchScore: number;
  description: string;
}

function FundingMatcher() {
  const { id } = useParams();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);
  const [fundingRange, setFundingRange] = useState([50000, 500000]);
  const [activeTab, setActiveTab] = useState('all');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Simulated investors and lenders data
  const investors: Investor[] = [
    {
      id: 1,
      name: "Sequoia Capital",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 500000,
      maxInvestment: 10000000,
      industries: ["Software", "FinTech", "Healthcare"],
      stages: ["Seed", "Series A", "Series B"],
      regions: ["North America", "Europe", "Asia"],
      portfolio: 156,
      successRate: 0.78,
      matchScore: 92
    },
    {
      id: 2,
      name: "Andreessen Horowitz",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 1000000,
      maxInvestment: 20000000,
      industries: ["AI", "Blockchain", "Enterprise"],
      stages: ["Series A", "Series B", "Series C"],
      regions: ["North America", "Europe"],
      portfolio: 208,
      successRate: 0.82,
      matchScore: 88
    },
    {
      id: 3,
      name: "Angel Ventures",
      type: "angel",
      logo: "https://via.placeholder.com/40",
      minInvestment: 100000,
      maxInvestment: 1000000,
      industries: ["E-commerce", "SaaS", "FinTech"],
      stages: ["Pre-seed", "Seed"],
      regions: ["North America", "Latin America"],
      portfolio: 32,
      successRate: 0.62,
      matchScore: 95
    },
    {
      id: 4,
      name: "Early Bird VC",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 250000,
      maxInvestment: 5000000,
      industries: ["Healthcare", "CleanTech", "Education"],
      stages: ["Seed", "Series A"],
      regions: ["Europe", "Middle East"],
      portfolio: 87,
      successRate: 0.71,
      matchScore: 79
    },
    {
      id: 5,
      name: "Growth Partners",
      type: "pe",
      logo: "https://via.placeholder.com/40",
      minInvestment: 5000000,
      maxInvestment: 50000000,
      industries: ["Manufacturing", "Retail", "Healthcare"],
      stages: ["Series C", "Series D", "Growth"],
      regions: ["North America", "Europe", "Asia"],
      portfolio: 42,
      successRate: 0.89,
      matchScore: 71
    }
  ];

  const lenders: Lender[] = [
    {
      id: 1,
      name: "First National Bank",
      type: "bank",
      logo: "https://via.placeholder.com/40",
      minLoan: 100000,
      maxLoan: 5000000,
      interestRate: 0.065,
      term: 60,
      requirements: {
        minCreditScore: 680,
        minTimeInBusiness: 2,
        minAnnualRevenue: 250000
      },
      matchScore: 88
    },
    {
      id: 2,
      name: "Business Growth Loans",
      type: "online",
      logo: "https://via.placeholder.com/40",
      minLoan: 50000,
      maxLoan: 2000000,
      interestRate: 0.082,
      term: 36,
      requirements: {
        minCreditScore: 650,
        minTimeInBusiness: 1,
        minAnnualRevenue: 100000
      },
      matchScore: 94
    },
    {
      id: 3,
      name: "Community Credit Union",
      type: "credit-union",
      logo: "https://via.placeholder.com/40",
      minLoan: 25000,
      maxLoan: 1000000,
      interestRate: 0.068,
      term: 48,
      requirements: {
        minCreditScore: 660,
        minTimeInBusiness: 1.5,
        minAnnualRevenue: 150000
      },
      matchScore: 91
    },
    {
      id: 4,
      name: "Capital Express",
      type: "online",
      logo: "https://via.placeholder.com/40",
      minLoan: 75000,
      maxLoan: 3000000,
      interestRate: 0.095,
      term: 24,
      requirements: {
        minCreditScore: 620,
        minTimeInBusiness: 0.5,
        minAnnualRevenue: 75000
      },
      matchScore: 82
    },
    {
      id: 5,
      name: "Enterprise Bank",
      type: "bank",
      logo: "https://via.placeholder.com/40",
      minLoan: 250000,
      maxLoan: 10000000,
      interestRate: 0.059,
      term: 84,
      requirements: {
        minCreditScore: 720,
        minTimeInBusiness: 3,
        minAnnualRevenue: 500000
      },
      matchScore: 76
    }
  ];

  const grants: Grant[] = [
    {
      id: 1,
      name: "NYDA Grant Programme",
      provider: "National Youth Development Agency",
      type: "government",
      amount: 100000,
      deadline: "2024-03-31",
      eligibility: ["Youth entrepreneurs (18-35)", "South African citizens", "Viable business plan"],
      sectors: ["Technology", "Agriculture", "Manufacturing"],
      matchScore: 95,
      description: "Supports youth entrepreneurs with non-repayable grants for business development and job creation."
    },
    {
      id: 2,
      name: "Small Business Innovation Research (SBIR)",
      provider: "National Science Foundation",
      type: "government",
      amount: 250000,
      deadline: "2024-06-15",
      eligibility: ["Small businesses", "Research-focused", "Technology innovation"],
      sectors: ["Technology", "Healthcare", "Energy"],
      matchScore: 78,
      description: "Federal funding for small businesses engaged in research and development with commercialization potential."
    },
    {
      id: 3,
      name: "Gates Foundation Innovation Grant",
      provider: "Bill & Melinda Gates Foundation",
      type: "foundation",
      amount: 500000,
      deadline: "2024-08-30",
      eligibility: ["Global health focus", "Poverty alleviation", "Educational impact"],
      sectors: ["Healthcare", "Education", "Agriculture"],
      matchScore: 65,
      description: "Supports innovative solutions addressing global challenges in health, education, and poverty reduction."
    },
    {
      id: 4,
      name: "Tech Startup Grant",
      provider: "Innovation Foundation",
      type: "foundation",
      amount: 150000,
      deadline: "2024-05-20",
      eligibility: ["Tech startups", "Under 2 years old", "Innovation focus"],
      sectors: ["Technology", "AI", "Blockchain"],
      matchScore: 88,
      description: "Supporting early-stage technology companies with innovative solutions and growth potential."
    },
    {
      id: 5,
      name: "Green Business Initiative",
      provider: "Environmental Protection Agency",
      type: "government",
      amount: 300000,
      deadline: "2024-07-10",
      eligibility: ["Environmental focus", "Sustainability goals", "Clean technology"],
      sectors: ["CleanTech", "Renewable Energy", "Sustainability"],
      matchScore: 72,
      description: "Funding for businesses developing environmentally sustainable solutions and clean technologies."
    }
  ];

  const industries = [
    "Software", "FinTech", "Healthcare", "E-commerce", "SaaS", 
    "AI", "Blockchain", "Enterprise", "CleanTech", "Education", 
    "Manufacturing", "Retail"
  ];

  // Apply filter to investors
  const filteredInvestors = investors
    .filter(investor => 
      (searchQuery === '' || 
       investor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
       investor.industries.some(industry => 
         industry.toLowerCase().includes(searchQuery.toLowerCase())))
    )
    .filter(investor => 
      (selectedIndustries.length === 0 || 
       investor.industries.some(industry => 
         selectedIndustries.includes(industry)))
    )
    .filter(investor => 
      (investor.minInvestment <= fundingRange[1] && 
       investor.maxInvestment >= fundingRange[0])
    )
    .sort((a, b) => b.matchScore - a.matchScore);

  // Apply filter to lenders
  const filteredLenders = lenders
    .filter(lender => 
      (searchQuery === '' || 
       lender.name.toLowerCase().includes(searchQuery.toLowerCase()))
    )
    .filter(lender => 
      (lender.minLoan <= fundingRange[1] && 
       lender.maxLoan >= fundingRange[0])
    )
    .sort((a, b) => b.matchScore - a.matchScore);

  // Apply filter to grants
  const filteredGrants = grants
    .filter(grant => 
      (searchQuery === '' || 
       grant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
       grant.provider.toLowerCase().includes(searchQuery.toLowerCase()) ||
       grant.sectors.some(sector => sector.toLowerCase().includes(searchQuery.toLowerCase())))
    )
    .filter(grant => 
      (grant.amount <= fundingRange[1] && 
       grant.amount >= fundingRange[0])
    )
    .sort((a, b) => b.matchScore - a.matchScore);

  if (isLoadingPlan) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    } else {
      return `$${amount}`;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-indigo-100 rounded-lg">
              <Target className="h-6 w-6 text-indigo-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Funding Matcher
              {businessPlan && typeof businessPlan === 'object' && 'name' in businessPlan ? 
                ` for ${businessPlan.name}` : ''}
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Get matched with the perfect funding opportunities for your business. Our AI-powered platform 
            analyzes your profile and connects you with investors, lenders, and grant providers.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Users className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">2,847</p>
                  <p className="text-sm text-gray-600">Active Funders</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <DollarSign className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">$8.2B</p>
                  <p className="text-sm text-gray-600">Available Funding</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Award className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">89%</p>
                  <p className="text-sm text-gray-600">Match Accuracy</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <TrendingUp className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">1,234</p>
                  <p className="text-sm text-gray-600">Successful Matches</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="flex flex-col md:flex-row gap-4 mb-6">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search by name or industry..."
                className="pl-10"
                value={searchQuery}
                onChange={e => setSearchQuery(e.target.value)}
              />
            </div>
          </div>
          <div className="flex-1">
            <div className="flex items-center gap-2">
              <DollarSign className="h-4 w-4 text-gray-400" />
              <span className="text-sm text-gray-600">Funding Range:</span>
              <span className="text-sm font-medium">{formatCurrency(fundingRange[0])} - {formatCurrency(fundingRange[1])}</span>
            </div>
            <Slider
              defaultValue={fundingRange}
              min={10000}
              max={10000000}
              step={10000}
              onValueChange={(value) => setFundingRange(value as number[])}
              className="mt-2"
            />
          </div>
        </div>

        <div className="mb-6">
          <div className="flex items-center gap-2 mb-2">
            <Filter className="h-4 w-4 text-gray-400" />
            <span className="text-sm text-gray-600">Filter by industry:</span>
          </div>
          <div className="flex flex-wrap gap-2">
            {industries.map(industry => (
              <Badge
                key={industry}
                variant={selectedIndustries.includes(industry) ? "default" : "outline"}
                className="cursor-pointer"
                onClick={() => {
                  if (selectedIndustries.includes(industry)) {
                    setSelectedIndustries(selectedIndustries.filter(i => i !== industry));
                  } else {
                    setSelectedIndustries([...selectedIndustries, industry]);
                  }
                }}
              >
                {industry}
              </Badge>
            ))}
          </div>
        </div>

        <Tabs defaultValue="investors" onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="investors">Equity Funding</TabsTrigger>
            <TabsTrigger value="lenders">Debt Funding</TabsTrigger>
            <TabsTrigger value="grants">Grant Funding</TabsTrigger>
          </TabsList>
          <TabsContent value="investors" className="mt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredInvestors.map(investor => (
                <Card key={investor.id} className={`border-l-4 ${investor.matchScore >= 90 ? 'border-l-green-500' : investor.matchScore >= 80 ? 'border-l-blue-500' : 'border-l-gray-300'}`}>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <div className="flex items-center space-x-4">
                      <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                        <Building2 className="h-6 w-6 text-gray-600" />
                      </div>
                      <div>
                        <CardTitle className="text-lg">{investor.name}</CardTitle>
                        <CardDescription>
                          {investor.type === 'vc' ? 'Venture Capital' : 
                           investor.type === 'angel' ? 'Angel Investor' : 'Private Equity'}
                        </CardDescription>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-blue-600">{investor.matchScore}%</div>
                      <div className="text-xs text-gray-500">Match Score</div>
                    </div>
                  </CardHeader>
                  <CardContent className="py-2">
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="flex items-center gap-2">
                        <DollarSign className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Investment:</span>
                        <span className="font-medium">{formatCurrency(investor.minInvestment)} - {formatCurrency(investor.maxInvestment)}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Globe className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Regions:</span>
                        <span className="font-medium">{investor.regions.slice(0, 2).join(', ')}{investor.regions.length > 2 ? '...' : ''}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <PieChart className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Portfolio:</span>
                        <span className="font-medium">{investor.portfolio} companies</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Shield className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Success Rate:</span>
                        <span className="font-medium">{Math.round(investor.successRate * 100)}%</span>
                      </div>
                    </div>
                    <div className="mt-3">
                      <div className="flex flex-wrap gap-1">
                        {investor.industries.map(industry => (
                          <Badge key={industry} variant="secondary" className="text-xs">{industry}</Badge>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button className="w-full">Connect <ArrowRight className="ml-2 h-4 w-4" /></Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>
          <TabsContent value="lenders" className="mt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredLenders.map(lender => (
                <Card key={lender.id} className={`border-l-4 ${lender.matchScore >= 90 ? 'border-l-green-500' : lender.matchScore >= 80 ? 'border-l-blue-500' : 'border-l-gray-300'}`}>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <div className="flex items-center space-x-4">
                      <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                        <Building2 className="h-6 w-6 text-gray-600" />
                      </div>
                      <div>
                        <CardTitle className="text-lg">{lender.name}</CardTitle>
                        <CardDescription>
                          {lender.type === 'bank' ? 'Bank' : 
                           lender.type === 'credit-union' ? 'Credit Union' : 'Online Lender'}
                        </CardDescription>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-blue-600">{lender.matchScore}%</div>
                      <div className="text-xs text-gray-500">Match Score</div>
                    </div>
                  </CardHeader>
                  <CardContent className="py-2">
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="flex items-center gap-2">
                        <DollarSign className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Loan Range:</span>
                        <span className="font-medium">{formatCurrency(lender.minLoan)} - {formatCurrency(lender.maxLoan)}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <PieChart className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Interest Rate:</span>
                        <span className="font-medium">{(lender.interestRate * 100).toFixed(2)}%</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Term:</span>
                        <span className="font-medium">{lender.term} months</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Shield className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Credit Score:</span>
                        <span className="font-medium">Min {lender.requirements.minCreditScore}</span>
                      </div>
                    </div>
                    <div className="mt-3 text-xs text-gray-600">
                      <div>Requires {lender.requirements.minTimeInBusiness} {lender.requirements.minTimeInBusiness === 1 ? 'year' : 'years'} in business</div>
                      <div>Min Annual Revenue: {formatCurrency(lender.requirements.minAnnualRevenue)}</div>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button className="w-full">Apply Now <ArrowRight className="ml-2 h-4 w-4" /></Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>
          <TabsContent value="grants" className="mt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredGrants.map(grant => (
                <Card key={grant.id} className={`border-l-4 ${grant.matchScore >= 90 ? 'border-l-green-500' : grant.matchScore >= 80 ? 'border-l-blue-500' : 'border-l-gray-300'}`}>
                  <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <div className="flex items-center space-x-4">
                      <div className="h-10 w-10 rounded-full bg-purple-100 flex items-center justify-center">
                        <Gift className="h-6 w-6 text-purple-600" />
                      </div>
                      <div>
                        <CardTitle className="text-lg">{grant.name}</CardTitle>
                        <CardDescription>{grant.provider}</CardDescription>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-purple-600">{grant.matchScore}%</div>
                      <div className="text-xs text-gray-500">Match Score</div>
                    </div>
                  </CardHeader>
                  <CardContent className="py-2">
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="flex items-center gap-2">
                        <DollarSign className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Amount:</span>
                        <span className="font-medium">{formatCurrency(grant.amount)}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Deadline:</span>
                        <span className="font-medium">{new Date(grant.deadline).toLocaleDateString()}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Building2 className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Type:</span>
                        <span className="font-medium capitalize">{grant.type}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Globe className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-600">Sectors:</span>
                        <span className="font-medium">{grant.sectors.slice(0, 2).join(', ')}{grant.sectors.length > 2 ? '...' : ''}</span>
                      </div>
                    </div>
                    <div className="mt-3">
                      <p className="text-sm text-gray-600 mb-2">{grant.description}</p>
                      <div className="flex flex-wrap gap-1">
                        {grant.sectors.map(sector => (
                          <Badge key={sector} variant="secondary" className="text-xs">{sector}</Badge>
                        ))}
                      </div>
                    </div>
                    <div className="mt-3">
                      <div className="text-xs text-gray-500 mb-1">Eligibility Requirements:</div>
                      <ul className="text-xs text-gray-600 space-y-1">
                        {grant.eligibility.slice(0, 3).map((req, index) => (
                          <li key={index} className="flex items-center gap-1">
                            <CheckCircle className="h-3 w-3 text-green-500 flex-shrink-0" />
                            {req}
                          </li>
                        ))}
                        {grant.eligibility.length > 3 && (
                          <li className="text-gray-400">+{grant.eligibility.length - 3} more requirements</li>
                        )}
                      </ul>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button className="w-full">Apply Now <ArrowRight className="ml-2 h-4 w-4" /></Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
      </div>
    </div>
  );
}

export default FundingMatcher;

=== FILE: client/src/pages/incubator.tsx ===


import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { 
  Lightbulb, 
  Building2, 
  Users, 
  Calendar, 
  MapPin,
  Coffee,
  BookOpen,
  Handshake,
  DollarSign,
  Clock,
  Target,
  Network
} from "lucide-react";

const incubatorSpaces = [
  {
    id: 1,
    name: "Main Campus",
    location: "Downtown Tech District",
    capacity: 50,
    currentOccupancy: 38,
    amenities: ["High-speed WiFi", "Meeting Rooms", "Coffee Bar", "Event Space"],
    type: "Co-working Hub"
  },
  {
    id: 2,
    name: "University Lab",
    location: "University Research Park",
    capacity: 25,
    currentOccupancy: 18,
    amenities: ["Research Lab Access", "University Library", "Student Interns", "Academic Mentors"],
    type: "Academic Incubator"
  },
  {
    id: 3,
    name: "Corporate Innovation Center",
    location: "Business District",
    capacity: 30,
    currentOccupancy: 22,
    amenities: ["Corporate Mentors", "Pilot Program Access", "B2B Connections", "Industry Expertise"],
    type: "Corporate Incubator"
  }
];

const incubatorPrograms = [
  {
    id: 1,
    name: "Early Stage Program",
    duration: "6-12 months",
    stage: "Idea to Prototype",
    participants: 15,
    equity: "0-5%",
    investment: "Up to $50K",
    focus: "Product development and market validation"
  },
  {
    id: 2,
    name: "Growth Track",
    duration: "12-24 months", 
    stage: "Prototype to Market",
    participants: 12,
    equity: "5-10%",
    investment: "$50K-200K",
    focus: "Scaling and business development"
  },
  {
    id: 3,
    name: "University Spin-off",
    duration: "18+ months",
    stage: "Research to Commercialization",
    participants: 8,
    equity: "Varies",
    investment: "Grant-based",
    focus: "Technology transfer and IP commercialization"
  }
];

const supportServices = [
  {
    icon: Building2,
    title: "Flexible Workspace",
    description: "Dedicated desks, meeting rooms, and collaborative spaces",
    included: true
  },
  {
    icon: Users,
    title: "Mentorship Program",
    description: "Industry experts and successful entrepreneurs",
    included: true
  },
  {
    icon: BookOpen,
    title: "Educational Workshops",
    description: "Regular workshops on business fundamentals",
    included: true
  },
  {
    icon: Network,
    title: "Networking Events",
    description: "Monthly pitch nights and investor meetups",
    included: true
  },
  {
    icon: Handshake,
    title: "Legal & Accounting",
    description: "Basic legal setup and accounting guidance",
    included: true
  },
  {
    icon: DollarSign,
    title: "Funding Connections",
    description: "Access to angel investors and VC networks",
    included: false
  }
];

const currentStartups = [
  {
    id: 1,
    name: "GreenTech Solutions",
    founder: "Sarah Kim",
    industry: "CleanTech",
    stage: "Product Development",
    joinDate: "2023-08-15",
    program: "Growth Track",
    progress: 60,
    description: "Renewable energy storage solutions for residential use"
  },
  {
    id: 2,
    name: "MedAI Diagnostics", 
    founder: "Dr. James Wilson",
    industry: "HealthTech",
    stage: "Market Validation",
    joinDate: "2024-01-20",
    program: "University Spin-off",
    progress: 35,
    description: "AI-powered diagnostic tool for early disease detection"
  },
  {
    id: 3,
    name: "EduPlatform",
    founder: "Maria Rodriguez",
    industry: "EdTech",
    stage: "Early Development",
    joinDate: "2024-03-10",
    program: "Early Stage Program",
    progress: 25,
    description: "Personalized learning platform for K-12 students"
  }
];

function IncubatorDashboard() {
  return (
    <div className="container mx-auto py-8">
      {/* Header */}
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent">
          Startup Incubator
        </h1>
        <p className="text-xl text-gray-600 max-w-3xl mx-auto">
          Nurturing early-stage startups with flexible, long-term support, workspace, 
          and guidance to help founders build sustainable businesses.
        </p>
      </div>

      {/* Incubator Spaces */}
      <div className="mb-12">
        <h2 className="text-2xl font-bold mb-6">Incubator Locations</h2>
        <div className="grid md:grid-cols-3 gap-6">
          {incubatorSpaces.map((space) => (
            <Card key={space.id}>
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-lg">{space.name}</CardTitle>
                    <CardDescription className="flex items-center gap-1">
                      <MapPin className="h-4 w-4" />
                      {space.location}
                    </CardDescription>
                  </div>
                  <Badge variant="outline">{space.type}</Badge>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <div className="flex justify-between text-sm mb-2">
                    <span>Occupancy</span>
                    <span>{space.currentOccupancy}/{space.capacity}</span>
                  </div>
                  <Progress value={(space.currentOccupancy / space.capacity) * 100} className="h-2" />
                </div>
                
                <div>
                  <p className="font-medium text-sm mb-2">Amenities</p>
                  <div className="flex flex-wrap gap-1">
                    {space.amenities.map((amenity, index) => (
                      <Badge key={index} variant="secondary" className="text-xs">
                        {amenity}
                      </Badge>
                    ))}
                  </div>
                </div>
                
                <Button variant="outline" size="sm" className="w-full">
                  Request Tour
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Programs */}
      <Card className="mb-12">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-6 w-6" />
            Incubator Programs
          </CardTitle>
          <CardDescription>
            Flexible programs tailored to different startup stages and needs
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-6">
            {incubatorPrograms.map((program) => (
              <div key={program.id} className="p-4 rounded-lg border bg-gray-50">
                <h3 className="font-semibold text-lg mb-2">{program.name}</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-500">Duration:</span>
                    <span className="font-medium">{program.duration}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-500">Stage:</span>
                    <span className="font-medium">{program.stage}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-500">Participants:</span>
                    <span className="font-medium">{program.participants}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-500">Equity:</span>
                    <span className="font-medium">{program.equity}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-500">Investment:</span>
                    <span className="font-medium">{program.investment}</span>
                  </div>
                </div>
                <p className="text-sm text-gray-600 mt-3">{program.focus}</p>
                <Button variant="outline" size="sm" className="w-full mt-4">
                  Learn More
                </Button>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Support Services */}
      <Card className="mb-12">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Handshake className="h-6 w-6" />
            Support Services
          </CardTitle>
          <CardDescription>
            Comprehensive support ecosystem for startup development
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-6">
            {supportServices.map((service, index) => {
              const IconComponent = service.icon;
              return (
                <div key={index} className="flex items-start space-x-3">
                  <div className={`p-2 rounded-lg ${service.included ? 'bg-orange-100' : 'bg-gray-100'}`}>
                    <IconComponent className={`h-5 w-5 ${service.included ? 'text-orange-600' : 'text-gray-500'}`} />
                  </div>
                  <div>
                    <h3 className="font-semibold mb-1">{service.title}</h3>
                    <p className="text-sm text-gray-600">{service.description}</p>
                    <Badge 
                      variant={service.included ? "default" : "secondary"} 
                      className="mt-2 text-xs"
                    >
                      {service.included ? "Included" : "Optional"}
                    </Badge>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Current Startups */}
      <div className="mb-8">
        <h2 className="text-2xl font-bold mb-6">Current Startups</h2>
        <div className="space-y-4">
          {currentStartups.map((startup) => (
            <Card key={startup.id}>
              <CardContent className="p-6">
                <div className="flex flex-col md:flex-row md:items-center justify-between">
                  <div className="mb-4 md:mb-0">
                    <div className="flex items-center gap-3 mb-2">
                      <h3 className="text-xl font-semibold">{startup.name}</h3>
                      <Badge variant="outline">{startup.industry}</Badge>
                      <Badge className="bg-orange-100 text-orange-800">{startup.program}</Badge>
                    </div>
                    <p className="text-gray-600 mb-2">{startup.description}</p>
                    <div className="flex items-center gap-4 text-sm text-gray-500">
                      <span>Founder: {startup.founder}</span>
                      <span>Joined: {new Date(startup.joinDate).toLocaleDateString()}</span>
                      <span>Stage: {startup.stage}</span>
                    </div>
                  </div>
                  <div className="text-right min-w-[120px]">
                    <div className="mb-2">
                      <span className="text-sm text-gray-500">Progress</span>
                      <div className="text-2xl font-bold text-orange-600">{startup.progress}%</div>
                    </div>
                    <Progress value={startup.progress} className="h-2 w-24 ml-auto" />
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6 text-center">
            <Building2 className="h-8 w-8 text-orange-600 mx-auto mb-2" />
            <div className="text-2xl font-bold">3</div>
            <div className="text-sm text-gray-600">Locations</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6 text-center">
            <Users className="h-8 w-8 text-orange-600 mx-auto mb-2" />
            <div className="text-2xl font-bold">78</div>
            <div className="text-sm text-gray-600">Active Startups</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6 text-center">
            <Clock className="h-8 w-8 text-orange-600 mx-auto mb-2" />
            <div className="text-2xl font-bold">18</div>
            <div className="text-sm text-gray-600">Avg. Months</div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6 text-center">
            <Target className="h-8 w-8 text-orange-600 mx-auto mb-2" />
            <div className="text-2xl font-bold">85%</div>
            <div className="text-sm text-gray-600">Success Rate</div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default function Incubator() {
  return (
    <Tabs defaultValue="dashboard" className="w-full">
      <div className="container mx-auto py-8">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="workspace">Workspace</TabsTrigger>
          <TabsTrigger value="community">Community</TabsTrigger>
          <TabsTrigger value="resources">Resources</TabsTrigger>
        </TabsList>
      </div>
      
      <TabsContent value="dashboard">
        <IncubatorDashboard />
      </TabsContent>
      
      <TabsContent value="workspace">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Workspace Management</h3>
            <p className="text-gray-500 mb-4">Desk booking and facility management coming soon.</p>
            <Button>Book Workspace</Button>
          </div>
        </div>
      </TabsContent>
      
      <TabsContent value="community">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Community Hub</h3>
            <p className="text-gray-500 mb-4">Community events and networking tools coming soon.</p>
            <Button>Join Community</Button>
          </div>
        </div>
      </TabsContent>
      
      <TabsContent value="resources">
        <div className="container mx-auto py-8">
          <div className="text-center py-20">
            <h3 className="text-xl font-medium mb-2">Resource Library</h3>
            <p className="text-gray-500 mb-4">Educational resources and tools coming soon.</p>
            <Button>Browse Resources</Button>
          </div>
        </div>
      </TabsContent>
    </Tabs>
  );
}


=== FILE: client/src/pages/design-thinking-workflow.tsx ===

// ============================================================================
// DESIGN THINKING WORKFLOW PAGE
// Main page for DT workflow management
// ============================================================================

import React, { useState } from 'react';
import { useRoute } from 'wouter';
import { DTWorkflowDashboard } from '../components/design-thinking/DTWorkflowDashboard';
import { EmpathyMapBuilder } from '../components/design-thinking/EmpathyMapBuilder';
import { POVStatementBuilder } from '../components/design-thinking/POVStatementBuilder';
import { HMWQuestionGenerator } from '../components/design-thinking/HMWQuestionGenerator';
import { IdeaEvaluationMatrix } from '../components/design-thinking/IdeaEvaluationMatrix';

export function DesignThinkingWorkflowPage() {
  const [, params] = useRoute('/design-thinking/:workflowId/:view?');
  const workflowId = params?.workflowId || '';
  const view = params?.view || 'dashboard';

  const renderView = () => {
    switch (view) {
      case 'empathy':
        return <EmpathyMapBuilder workflowId={workflowId} />;
      case 'pov':
        return <POVStatementBuilder workflowId={workflowId} />;
      case 'hmw':
        return <HMWQuestionGenerator workflowId={workflowId} />;
      case 'ideate':
        return <IdeaEvaluationMatrix workflowId={workflowId} />;
      case 'dashboard':
      default:
        return <DTWorkflowDashboard workflowId={workflowId} />;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navigation Tabs */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-6">
          <nav className="flex gap-6">
            <NavTab 
              label="Dashboard" 
              href={`/design-thinking/${workflowId}/dashboard`}
              active={view === 'dashboard'}
            />
            <NavTab 
              label="Empathy" 
              href={`/design-thinking/${workflowId}/empathy`}
              active={view === 'empathy'}
            />
            <NavTab 
              label="POV Statements" 
              href={`/design-thinking/${workflowId}/pov`}
              active={view === 'pov'}
            />
            <NavTab 
              label="HMW Questions" 
              href={`/design-thinking/${workflowId}/hmw`}
              active={view === 'hmw'}
            />
            <NavTab 
              label="Ideas" 
              href={`/design-thinking/${workflowId}/ideate`}
              active={view === 'ideate'}
            />
          </nav>
        </div>
      </div>

      {/* Content */}
      {renderView()}
    </div>
  );
}

function NavTab({ label, href, active }: { label: string; href: string; active: boolean }) {
  return (
    <a
      href={href}
      className={`py-4 px-2 border-b-2 font-medium text-sm transition-colors ${
        active
          ? 'border-blue-500 text-blue-600'
          : 'border-transparent text-gray-600 hover:text-gray-900 hover:border-gray-300'
      }`}
    >
      {label}
    </a>
  );
}


=== FILE: client/src/pages/education-leadership.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  Users, Play, Clock, Award, CheckCircle, Star, ArrowRight,
  Target, Zap, Building, DollarSign, TrendingUp, Globe, Shield, FileText, Presentation
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface LeadershipModule {
  id: string;
  title: string;
  description: string;
  duration: number;
  lessons: number;
  completed: boolean;
  progress: number;
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced';
  topics: string[];
  type: 'video' | 'workshop' | 'template' | 'case-study';
}

interface LeadershipSkill {
  id: string;
  name: string;
  description: string;
  level: 'Beginner' | 'Intermediate' | 'Advanced';
  importance: 'High' | 'Medium' | 'Low';
  icon: any;
  color: string;
}

function EducationLeadership() {
  const { id } = useParams();
  const [activeTab, setActiveTab] = useState('overview');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for leadership modules
  const leadershipModules: LeadershipModule[] = [
    {
      id: 'team-building',
      title: 'Building High-Performing Teams',
      description: 'Learn how to recruit, hire, and build teams that drive startup success.',
      duration: 75,
      lessons: 7,
      completed: false,
      progress: 30,
      difficulty: 'Intermediate',
      topics: ['Hiring', 'Team Culture', 'Remote Teams', 'Performance Management'],
      type: 'workshop'
    },
    {
      id: 'leadership-styles',
      title: 'Leadership Styles & Approaches',
      description: 'Discover different leadership styles and when to apply them effectively.',
      duration: 60,
      lessons: 6,
      completed: false,
      progress: 15,
      difficulty: 'Beginner',
      topics: ['Leadership Styles', 'Situational Leadership', 'Emotional Intelligence', 'Decision Making'],
      type: 'video'
    },
    {
      id: 'communication',
      title: 'Effective Communication',
      description: 'Master communication skills for leading teams and managing stakeholders.',
      duration: 50,
      lessons: 5,
      completed: false,
      progress: 0,
      difficulty: 'Beginner',
      topics: ['Active Listening', 'Feedback', 'Presentations', 'Conflict Resolution'],
      type: 'workshop'
    },
    {
      id: 'culture-building',
      title: 'Building Company Culture',
      description: 'Create and maintain a strong company culture that attracts and retains talent.',
      duration: 65,
      lessons: 6,
      completed: false,
      progress: 0,
      difficulty: 'Intermediate',
      topics: ['Values Definition', 'Culture Implementation', 'Employee Engagement', 'Remote Culture'],
      type: 'case-study'
    },
    {
      id: 'performance-management',
      title: 'Performance Management',
      description: 'Learn to set goals, provide feedback, and manage team performance effectively.',
      duration: 55,
      lessons: 5,
      completed: false,
      progress: 0,
      difficulty: 'Intermediate',
      topics: ['Goal Setting', 'Performance Reviews', 'Coaching', 'Career Development'],
      type: 'template'
    },
    {
      id: 'change-management',
      title: 'Leading Change & Transformation',
      description: 'Guide your organization through change and transformation initiatives.',
      duration: 70,
      lessons: 7,
      completed: false,
      progress: 0,
      difficulty: 'Advanced',
      topics: ['Change Strategy', 'Stakeholder Management', 'Resistance Handling', 'Transformation'],
      type: 'video'
    }
  ];

  const leadershipSkills: LeadershipSkill[] = [
    {
      id: 'emotional-intelligence',
      name: 'Emotional Intelligence',
      description: 'Understanding and managing emotions in yourself and others',
      level: 'Intermediate',
      importance: 'High',
      icon: Shield,
      color: 'blue'
    },
    {
      id: 'decision-making',
      name: 'Decision Making',
      description: 'Making effective decisions under pressure and uncertainty',
      level: 'Advanced',
      importance: 'High',
      icon: Target,
      color: 'green'
    },
    {
      id: 'communication',
      name: 'Communication',
      description: 'Clear and effective communication with teams and stakeholders',
      level: 'Beginner',
      importance: 'High',
      icon: Users,
      color: 'purple'
    },
    {
      id: 'strategic-thinking',
      name: 'Strategic Thinking',
      description: 'Long-term planning and strategic vision for the organization',
      level: 'Advanced',
      importance: 'High',
      icon: Globe,
      color: 'orange'
    },
    {
      id: 'delegation',
      name: 'Delegation',
      description: 'Effectively delegating tasks and responsibilities to team members',
      level: 'Intermediate',
      importance: 'Medium',
      icon: Building,
      color: 'red'
    },
    {
      id: 'coaching',
      name: 'Coaching & Mentoring',
      description: 'Developing and mentoring team members for growth',
      level: 'Intermediate',
      importance: 'Medium',
      icon: Award,
      color: 'yellow'
    }
  ];

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Beginner': return 'text-green-600 bg-green-50';
      case 'Intermediate': return 'text-yellow-600 bg-yellow-50';
      case 'Advanced': return 'text-red-600 bg-red-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getImportanceColor = (importance: string) => {
    switch (importance) {
      case 'High': return 'text-red-600 bg-red-50';
      case 'Medium': return 'text-yellow-600 bg-yellow-50';
      case 'Low': return 'text-green-600 bg-green-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'video': return Play;
      case 'workshop': return Users;
      case 'template': return FileText;
      case 'case-study': return Presentation;
      default: return Play;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'video': return 'blue';
      case 'workshop': return 'purple';
      case 'template': return 'green';
      case 'case-study': return 'orange';
      default: return 'gray';
    }
  };

  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0) {
      return `${hours}h ${mins}m`;
    }
    return `${mins}m`;
  };

  const completedModules = leadershipModules.filter(module => module.completed).length;
  const totalProgress = Math.round(
    leadershipModules.reduce((sum, module) => sum + module.progress, 0) / leadershipModules.length
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-white to-red-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-orange-100 rounded-lg">
              <Users className="h-6 w-6 text-orange-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Leadership & Team
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Develop leadership skills and build high-performing teams that drive startup success.
          </p>
        </div>

        {/* Key Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <Users className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">6</p>
                  <p className="text-sm text-gray-600">Leadership Modules</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <CheckCircle className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">{completedModules}</p>
                  <p className="text-sm text-gray-600">Completed</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <Clock className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">6.5h</p>
                  <p className="text-sm text-gray-600">Total Duration</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <TrendingUp className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">{totalProgress}%</p>
                  <p className="text-sm text-gray-600">Progress</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="modules">Modules</TabsTrigger>
            <TabsTrigger value="skills">Leadership Skills</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5" />
                    Your Progress
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">Overall Progress</span>
                      <span className="text-sm font-bold">{totalProgress}%</span>
                    </div>
                    <Progress value={totalProgress} className="h-3" />
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <p className="text-gray-600">Completed Modules</p>
                      <p className="font-bold">{completedModules} / {leadershipModules.length}</p>
                    </div>
                    <div>
                      <p className="text-gray-600">Time Invested</p>
                      <p className="font-bold">1.5 hours</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Award className="h-5 w-5" />
                    Key Learning Outcomes
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center gap-3 p-3 bg-green-50 rounded-lg">
                      <CheckCircle className="h-5 w-5 text-green-600" />
                      <div>
                        <p className="font-medium">Build High-Performing Teams</p>
                        <p className="text-sm text-gray-600">Recruit and manage top talent</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
                      <Star className="h-5 w-5 text-blue-600" />
                      <div>
                        <p className="font-medium">Develop Leadership Skills</p>
                        <p className="text-sm text-gray-600">Master essential leadership competencies</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-purple-50 rounded-lg">
                      <Shield className="h-5 w-5 text-purple-600" />
                      <div>
                        <p className="font-medium">Create Strong Culture</p>
                        <p className="text-sm text-gray-600">Build culture that attracts talent</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Modules Tab */}
          <TabsContent value="modules" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {leadershipModules.map(module => {
                const TypeIcon = getTypeIcon(module.type);
                const typeColor = getTypeColor(module.type);
                return (
                  <Card key={module.id} className={module.completed ? 'ring-2 ring-green-500' : ''}>
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        <div>
                          <CardTitle className="text-lg">{module.title}</CardTitle>
                          <CardDescription>{module.description}</CardDescription>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge className={`bg-${typeColor}-100 text-${typeColor}-700`}>
                            <TypeIcon className="h-3 w-3 mr-1" />
                            {module.type}
                          </Badge>
                          {module.completed && (
                            <CheckCircle className="h-6 w-6 text-green-600" />
                          )}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex items-center gap-4 text-sm">
                        <div className="flex items-center gap-1">
                          <Clock className="h-4 w-4 text-gray-500" />
                          <span>{formatDuration(module.duration)}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <FileText className="h-4 w-4 text-gray-500" />
                          <span>{module.lessons} lessons</span>
                        </div>
                        <Badge className={getDifficultyColor(module.difficulty)}>
                          {module.difficulty}
                        </Badge>
                      </div>

                      <div className="space-y-2">
                        <div className="flex items-center justify-between text-sm">
                          <span>Progress</span>
                          <span className="font-medium">{module.progress}%</span>
                        </div>
                        <Progress value={module.progress} className="h-2" />
                      </div>

                      <div>
                        <p className="text-sm font-medium text-gray-700 mb-2">Topics Covered</p>
                        <div className="flex flex-wrap gap-1">
                          {module.topics.map((topic, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {topic}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button className="w-full" disabled={module.completed}>
                        {module.completed ? (
                          <>
                            <CheckCircle className="h-4 w-4 mr-2" />
                            Completed
                          </>
                        ) : module.progress > 0 ? (
                          <>
                            <Play className="h-4 w-4 mr-2" />
                            Continue
                          </>
                        ) : (
                          <>
                            <Play className="h-4 w-4 mr-2" />
                            Start Module
                          </>
                        )}
                      </Button>
                    </CardFooter>
                  </Card>
                );
              })}
            </div>
          </TabsContent>

          {/* Leadership Skills Tab */}
          <TabsContent value="skills" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {leadershipSkills.map(skill => {
                const Icon = skill.icon;
                return (
                  <Card key={skill.id}>
                    <CardHeader>
                      <div className="flex items-center gap-3">
                        <div className={`p-2 bg-${skill.color}-100 rounded-lg`}>
                          <Icon className={`h-5 w-5 text-${skill.color}-600`} />
                        </div>
                        <div>
                          <CardTitle className="text-lg">{skill.name}</CardTitle>
                          <CardDescription>{skill.description}</CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex items-center justify-between">
                        <Badge className={getDifficultyColor(skill.level)}>
                          {skill.level}
                        </Badge>
                        <Badge className={getImportanceColor(skill.importance)}>
                          {skill.importance} Priority
                        </Badge>
                      </div>
                      <div className="space-y-2">
                        <div className="flex items-center justify-between text-sm">
                          <span>Your Level</span>
                          <span className="font-medium">Beginner</span>
                        </div>
                        <Progress value={25} className="h-2" />
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button className="w-full">
                        <ArrowRight className="h-4 w-4 mr-2" />
                        Develop Skill
                      </Button>
                    </CardFooter>
                  </Card>
                );
              })}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

export default EducationLeadership;


=== FILE: client/src/pages/assessment-demo.tsx ===

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { CheckCircle, Brain, Target, Users, Lightbulb, Settings, BarChart } from 'lucide-react';

// Demo data from our RIASEC assessment
const sampleQuestions = [
  {
    id: 'R1',
    category: 'R' as const,
    question: 'I enjoy working with tools, machinery, or building physical products',
    scenario: 'Prototyping hardware, setting up physical infrastructure'
  },
  {
    id: 'E1',
    category: 'E' as const,
    question: 'I enjoy taking charge and leading teams toward ambitious goals',
    scenario: 'Leading projects, pitching investors, driving growth'
  },
  {
    id: 'I1',
    category: 'I' as const,
    question: 'I love analyzing data and discovering patterns to solve complex problems',
    scenario: 'Running experiments, analyzing market data, technical research'
  },
  {
    id: 'A1',
    category: 'A' as const,
    question: 'I thrive when creating something new and innovative',
    scenario: 'Product design, branding, creative problem-solving'
  },
  {
    id: 'S1',
    category: 'S' as const,
    question: 'I gain energy from collaborating with others and building relationships',
    scenario: 'Team building, networking, mentoring'
  },
  {
    id: 'C1',
    category: 'C' as const,
    question: 'I excel at creating systems, processes, and maintaining organization',
    scenario: 'Operations, financial management, compliance'
  }
];

const riasecCategories = {
  R: { name: 'Realistic', icon: Settings, color: 'bg-blue-500', description: 'Hands-on, practical, technical' },
  I: { name: 'Investigative', icon: Brain, color: 'bg-purple-500', description: 'Analytical, research-oriented' },
  A: { name: 'Artistic', icon: Lightbulb, color: 'bg-yellow-500', description: 'Creative, innovative, visionary' },
  S: { name: 'Social', icon: Users, color: 'bg-green-500', description: 'People-oriented, collaborative' },
  E: { name: 'Enterprising', icon: Target, color: 'bg-red-500', description: 'Leadership, persuasion, opportunity-seeking' },
  C: { name: 'Conventional', icon: BarChart, color: 'bg-gray-500', description: 'Organized, systematic, detail-oriented' }
};

const startupRoles = {
  'EIA': {
    role: 'Visionary Founder',
    description: 'Bold, creative leader who sees possibilities others miss',
    examples: ['Steve Jobs', 'Elon Musk']
  },
  'CES': {
    role: 'Execution Machine', 
    description: 'Disciplined leader who builds scalable, efficient operations',
    examples: ['Sheryl Sandberg', 'Tim Cook']
  },
  'ISA': {
    role: 'Thoughtful Builder',
    description: 'Deep thinker who builds meaningful products with strong user empathy',
    examples: ['DHH (Basecamp)', 'Mitchell Hashimoto']
  }
};

export default function AssessmentDemo() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [responses, setResponses] = useState<Record<string, number>>({});
  const [showResults, setShowResults] = useState(false);

  const handleResponse = (questionId: string, value: number) => {
    setResponses(prev => ({
      ...prev,
      [questionId]: value
    }));
  };

  const nextQuestion = () => {
    if (currentQuestion < sampleQuestions.length - 1) {
      setCurrentQuestion(prev => prev + 1);
    } else {
      setShowResults(true);
    }
  };

  const calculateResults = () => {
    const scores: Record<string, number> = { R: 0, I: 0, A: 0, S: 0, E: 0, C: 0 };
    
    Object.entries(responses).forEach(([questionId, response]) => {
      const question = sampleQuestions.find(q => q.id === questionId);
      if (question) {
        scores[question.category] += response;
      }
    });

    // Normalize to percentages
    const maxScore = Math.max(...Object.values(scores));
    const normalizedScores = Object.entries(scores).map(([category, score]) => ({
      category,
      score: maxScore > 0 ? Math.round((score / maxScore) * 100) : 0,
      ...riasecCategories[category as keyof typeof riasecCategories]
    }));

    // Get top 3 for primary code
    const topThree = normalizedScores
      .sort((a, b) => b.score - a.score)
      .slice(0, 3);
    
    const primaryCode = topThree.map(t => t.category).join('');
    
    return { normalizedScores, primaryCode, topThree };
  };

  if (showResults) {
    const { normalizedScores, primaryCode, topThree } = calculateResults();
    const matchedRole = startupRoles[primaryCode as keyof typeof startupRoles] || {
      role: 'Unique Profile',
      description: 'Your combination represents a unique founder profile',
      examples: ['Your own path to create!']
    };

    return (
      <div className="max-w-4xl mx-auto p-6 space-y-6">
        <Card>
          <CardHeader className="text-center">
            <div className="flex items-center justify-center gap-2 mb-2">
              <CheckCircle className="h-8 w-8 text-green-500" />
              <CardTitle className="text-2xl">Assessment Complete!</CardTitle>
            </div>
            <CardDescription>
              Here's your entrepreneur profile based on the RIASEC assessment
            </CardDescription>
          </CardHeader>
        </Card>

        <div className="grid md:grid-cols-2 gap-6">
          {/* RIASEC Scores */}
          <Card>
            <CardHeader>
              <CardTitle>Your RIASEC Profile</CardTitle>
              <CardDescription>Primary Code: <Badge variant="outline" className="font-mono">{primaryCode}</Badge></CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {normalizedScores.map(({ category, name, score, color, icon: Icon }) => (
                <div key={category} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Icon className="h-4 w-4" />
                      <span className="font-medium">{name}</span>
                    </div>
                    <span className="text-sm text-gray-600">{score}%</span>
                  </div>
                  <Progress value={score} className="h-2" />
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Startup Role Match */}
          <Card>
            <CardHeader>
              <CardTitle>Your Startup Role</CardTitle>
              <CardDescription>Based on your top traits</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-semibold text-blue-600">{matchedRole.role}</h3>
                  <p className="text-gray-600 mt-1">{matchedRole.description}</p>
                </div>
                
                <div>
                  <h4 className="font-medium mb-2">Similar Successful Founders:</h4>
                  <div className="flex flex-wrap gap-2">
                    {matchedRole.examples.map((example, index) => (
                      <Badge key={index} variant="secondary">{example}</Badge>
                    ))}
                  </div>
                </div>

                <div>
                  <h4 className="font-medium mb-2">Your Dominant Traits:</h4>
                  <div className="space-y-2">
                    {topThree.map(({ category, name, description, icon: Icon }, index) => (
                      <div key={category} className="flex items-start gap-2">
                        <Badge className="min-w-fit">{index + 1}</Badge>
                        <div>
                          <div className="flex items-center gap-1">
                            <Icon className="h-4 w-4" />
                            <span className="font-medium">{name}</span>
                          </div>
                          <p className="text-sm text-gray-600">{description}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Next Steps */}
        <Card>
          <CardHeader>
            <CardTitle>What's Next?</CardTitle>
            <CardDescription>This is just a demo of the RIASEC assessment - one part of our comprehensive system</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-3 gap-4">
              <div className="text-center p-4 border rounded-lg">
                <Brain className="h-8 w-8 mx-auto mb-2 text-purple-500" />
                <h4 className="font-medium">Big Five Assessment</h4>
                <p className="text-sm text-gray-600">Personality traits analysis</p>
              </div>
              <div className="text-center p-4 border rounded-lg">
                <Settings className="h-8 w-8 mx-auto mb-2 text-blue-500" />
                <h4 className="font-medium">AI Readiness</h4>
                <p className="text-sm text-gray-600">Digital competence evaluation</p>
              </div>
              <div className="text-center p-4 border rounded-lg">
                <Target className="h-8 w-8 mx-auto mb-2 text-red-500" />
                <h4 className="font-medium">Composite Analysis</h4>
                <p className="text-sm text-gray-600">Complete founder profile</p>
              </div>
            </div>
            <div className="mt-4 text-center">
              <Button onClick={() => {
                setCurrentQuestion(0);
                setResponses({});
                setShowResults(false);
              }}>
                Try Assessment Again
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  const progress = ((currentQuestion + 1) / sampleQuestions.length) * 100;
  const question = sampleQuestions[currentQuestion];
  const category = riasecCategories[question.category];
  const Icon = category.icon;

  return (
    <div className="max-w-2xl mx-auto p-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Icon className="h-6 w-6" />
              <CardTitle>RIASEC Assessment Demo</CardTitle>
            </div>
            <Badge variant="outline">
              {currentQuestion + 1} of {sampleQuestions.length}
            </Badge>
          </div>
          <Progress value={progress} className="mt-2" />
        </CardHeader>
        
        <CardContent className="space-y-6">
          <div>
            <div className="flex items-center gap-2 mb-2">
              <div className={`w-3 h-3 rounded-full ${category.color}`} />
              <span className="text-sm font-medium text-gray-600">
                {category.name} - {category.description}
              </span>
            </div>
            <h3 className="text-lg font-semibold mb-2">{question.question}</h3>
            <p className="text-sm text-gray-600 italic">
              Startup context: {question.scenario}
            </p>
          </div>

          <div>
            <Label className="text-base font-medium">How much do you agree?</Label>
            <RadioGroup
              value={responses[question.id]?.toString() || ''}
              onValueChange={(value) => handleResponse(question.id, parseInt(value))}
              className="mt-3"
            >
              {[
                { value: 1, label: 'Strongly Disagree' },
                { value: 2, label: 'Disagree' },
                { value: 3, label: 'Neutral' },
                { value: 4, label: 'Agree' },
                { value: 5, label: 'Strongly Agree' }
              ].map(({ value, label }) => (
                <div key={value} className="flex items-center space-x-2">
                  <RadioGroupItem value={value.toString()} id={`q${question.id}-${value}`} />
                  <Label htmlFor={`q${question.id}-${value}`} className="flex-1 cursor-pointer">
                    {label}
                  </Label>
                </div>
              ))}
            </RadioGroup>
          </div>

          <div className="flex justify-between pt-4">
            <Button 
              variant="outline" 
              disabled={currentQuestion === 0}
              onClick={() => setCurrentQuestion(prev => prev - 1)}
            >
              Previous
            </Button>
            <Button 
              onClick={nextQuestion}
              disabled={!responses[question.id]}
            >
              {currentQuestion === sampleQuestions.length - 1 ? 'See Results' : 'Next'}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



=== FILE: client/src/pages/funding-lite.tsx ===

export default function FundingLite() {
  return (
    <div style={{ padding: 24 }}>
      <h1 style={{ fontSize: 24, marginBottom: 8 }}>Funding</h1>
      <p>Lightweight placeholder for the Funding Hub.</p>
    </div>
  );
}


=== FILE: client/src/pages/proposals.tsx ===


import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { useLocation } from 'wouter';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { Upload as UploadIcon, Edit3, Save, FileText, DollarSign, Handshake, Building } from 'lucide-react';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';

interface ProposalSection {
  id: string;
  title: string;
  subsections: {
    id: string;
    title: string;
    content: string;
  }[];
}

function Proposals() {
  const [proposalName, setProposalName] = useState('');
  const [proposalType, setProposalType] = useState('grant');
  const [, setLocation] = useLocation();
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const [sectionScores, setSectionScores] = useState<Record<string, any>>({});
  
  const proposalTypes = [
    { id: 'grant', title: 'Grant Proposal', icon: DollarSign, color: 'bg-green-100 text-green-700' },
    { id: 'partnership', title: 'Partnership Proposal', icon: Handshake, color: 'bg-blue-100 text-blue-700' },
    { id: 'service', title: 'Service Proposal', icon: Building, color: 'bg-purple-100 text-purple-700' },
    { id: 'rfp', title: 'RFP Response', icon: FileText, color: 'bg-orange-100 text-orange-700' }
  ];

  const sections: Record<string, ProposalSection[]> = {
    grant: [
      {
        id: 'executive-summary',
        title: 'Executive Summary',
        subsections: [
          { id: 'overview', title: 'Project Overview', content: '' },
          { id: 'objectives', title: 'Goals & Objectives', content: '' },
          { id: 'impact', title: 'Expected Impact', content: '' },
          { id: 'funding-request', title: 'Funding Request', content: '' }
        ]
      },
      {
        id: 'project-description',
        title: 'Project Description',
        subsections: [
          { id: 'problem-statement', title: 'Problem Statement', content: '' },
          { id: 'solution-approach', title: 'Solution Approach', content: '' },
          { id: 'methodology', title: 'Methodology', content: '' },
          { id: 'timeline', title: 'Project Timeline', content: '' }
        ]
      },
      {
        id: 'budget',
        title: 'Budget & Financials',
        subsections: [
          { id: 'budget-breakdown', title: 'Budget Breakdown', content: '' },
          { id: 'cost-justification', title: 'Cost Justification', content: '' },
          { id: 'sustainability', title: 'Financial Sustainability', content: '' }
        ]
      }
    ],
    partnership: [
      {
        id: 'partnership-overview',
        title: 'Partnership Overview',
        subsections: [
          { id: 'opportunity', title: 'Partnership Opportunity', content: '' },
          { id: 'mutual-benefits', title: 'Mutual Benefits', content: '' },
          { id: 'strategic-alignment', title: 'Strategic Alignment', content: '' }
        ]
      },
      {
        id: 'collaboration-framework',
        title: 'Collaboration Framework',
        subsections: [
          { id: 'roles-responsibilities', title: 'Roles & Responsibilities', content: '' },
          { id: 'governance', title: 'Governance Structure', content: '' },
          { id: 'success-metrics', title: 'Success Metrics', content: '' }
        ]
      }
    ]
  };

  const currentSections = sections[proposalType] || sections.grant;

  const onDrop = async (acceptedFiles: File[]) => {
    try {
      if (acceptedFiles.length === 0) {
        toast({
          title: "Error",
          description: "No file was uploaded",
          variant: "destructive",
        });
        return;
      }

      const file = acceptedFiles[0];
      if (proposalName.trim() === '') {
        setProposalName(file.name.split('.')[0]);
      }

      toast({
        title: "Analyzing proposal",
        description: "Processing sections for evaluation...",
      });

      // Simulate analysis
      setTimeout(() => {
        const newScores: Record<string, any> = {};
        currentSections.forEach(section => {
          const subsectionScores: Record<string, any> = {};
          section.subsections.forEach(subsection => {
            subsectionScores[subsection.id] = {
              score: Math.floor(Math.random() * 30) + 70,
              status: 'scored'
            };
          });
          
          const avgScore = Object.values(subsectionScores)
            .reduce((sum: number, sub: any) => sum + sub.score, 0) / section.subsections.length;
          
          newScores[section.id] = {
            score: Math.round(avgScore),
            status: 'scored',
            subsections: subsectionScores
          };
        });
        setSectionScores(newScores);
        
        toast({
          title: "Analysis complete",
          description: "Proposal sections have been evaluated",
        });
      }, 2000);
    } catch (error) {
      console.error('Error handling file upload:', error);
      toast({
        title: "Error",
        description: "Failed to upload the proposal",
        variant: "destructive",
      });
    }
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'application/msword': ['.doc'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']
    },
    multiple: false
  });

  const handleSave = () => {
    if (proposalName.trim() === '') {
      toast({
        title: "Error",
        description: "Please enter a proposal name",
        variant: "destructive",
      });
      return;
    }

    toast({
      title: "Success",
      description: "Proposal saved successfully",
    });
  };

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-800">Proposals & RFPs</h1>
        <div className="flex items-center space-x-4">
          <select
            value={proposalType}
            onChange={(e) => setProposalType(e.target.value)}
            className="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            {proposalTypes.map(type => (
              <option key={type.id} value={type.id}>{type.title}</option>
            ))}
          </select>
          <input
            type="text"
            value={proposalName}
            onChange={(e) => setProposalName(e.target.value)}
            placeholder="Proposal Name"
            className="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />
          <button
            onClick={handleSave}
            className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            <Save className="h-5 w-5 mr-2" />
            Save Proposal
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        <div
          {...getRootProps()}
          className={`col-span-1 aspect-square border-2 border-dashed rounded-lg flex flex-col items-center justify-center cursor-pointer transition-colors
            ${isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-400'}`}
        >
          <input {...getInputProps()} />
          <UploadIcon className="h-16 w-16 text-gray-400 mb-4" />
          <p className="text-lg font-medium text-gray-600">Upload Proposal</p>
          <p className="mt-2 text-sm text-gray-500 text-center">
            Drop a proposal file or click to select
          </p>
        </div>

        {currentSections.map((section) => (
          <div key={section.id} className="col-span-1 bg-white rounded-lg shadow-sm border">
            <div className="p-4 border-b bg-gray-50 flex justify-between items-center">
              <h2 className="text-lg font-medium text-gray-800">{section.title}</h2>
              {sectionScores[section.id] && (
                <div className={`flex items-center ${
                  sectionScores[section.id].status === 'pending' ? 'text-gray-400' : 
                  sectionScores[section.id].score >= 80 ? 'text-green-600' :
                  sectionScores[section.id].score >= 70 ? 'text-yellow-600' : 'text-red-600'
                }`}>
                  {sectionScores[section.id].status === 'pending' ? (
                    <div className="animate-spin h-4 w-4 border-2 border-current rounded-full border-t-transparent" />
                  ) : (
                    <span className="font-semibold">{sectionScores[section.id].score}</span>
                  )}
                </div>
              )}
            </div>
            <div className="p-4 space-y-3">
              {section.subsections.map((subsection) => (
                <div key={subsection.id} className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">{subsection.title}</span>
                  <div className="flex items-center gap-2">
                    {sectionScores[section.id]?.subsections[subsection.id] && (
                      <span className={`text-sm font-medium ${
                        sectionScores[section.id].subsections[subsection.id].status === 'pending' ? 'text-gray-400' :
                        sectionScores[section.id].subsections[subsection.id].score >= 80 ? 'text-green-600' :
                        sectionScores[section.id].subsections[subsection.id].score >= 70 ? 'text-yellow-600' : 'text-red-600'
                      }`}>
                        {sectionScores[section.id].subsections[subsection.id].status === 'pending' ? (
                          <div className="animate-spin h-3 w-3 border-2 border-current rounded-full border-t-transparent" />
                        ) : (
                          sectionScores[section.id].subsections[subsection.id].score
                        )}
                      </span>
                    )}
                    <button className="p-1 text-gray-400 hover:text-blue-600">
                      <Edit3 className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Proposals;


=== FILE: client/src/pages/education.tsx ===

import { useQuery, useMutation } from "@tanstack/react-query";
import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Switch } from "@/components/ui/switch";
import { 
  Loader2, 
  Book, 
  Clock, 
  Target, 
  Award, 
  ChevronRight, 
  Moon, 
  Sun, 
  Play, 
  Users, 
  TrendingUp, 
  DollarSign,
  Lightbulb,
  Rocket,
  Building2,
  GraduationCap,
  Star,
  ExternalLink,
  CheckCircle,
  BarChart3,
  PieChart,
  FileText,
  Video,
  Headphones,
  Download
} from "lucide-react";

// Educational Module schema
const moduleSchema = z.object({
  title: z.string().min(3, { message: "Title must be at least 3 characters" }),
  description: z.string().optional(),
  creatorId: z.number(),
  content: z.any().optional(), // JSON content for the module
  resources: z.any().optional(), // JSON resources for the module
  prerequisites: z.any().optional(), // JSON prerequisites for the module
});

type EducationalModule = {
  id: number;
  title: string;
  description: string | null;
  creatorId: number;
  content: any;
  resources: any;
  prerequisites: any;
  createdAt: string;
  updatedAt: string;
};

function EducationalModulesList() {
  const { toast } = useToast();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState("All");

  // Create educational module form
  const form = useForm<z.infer<typeof moduleSchema>>({
    resolver: zodResolver(moduleSchema),
    defaultValues: {
      title: "",
      description: "",
      creatorId: 5,
    },
  });

  // Curated educational content
  const educationalModules = [
    {
      id: 1,
      title: "Startup Fundamentals",
      description: "Master the essential building blocks of launching a successful startup from idea to execution.",
      category: "Foundation",
      level: "Beginner",
      duration: 45,
      sections: 6,
      rating: 4.8,
      completions: 2847,
      instructor: "Y Combinator",
      type: "video",
      thumbnail: "üöÄ",
      topics: ["Business Model", "Market Research", "MVP Development", "Team Building"]
    },
    {
      id: 2,
      title: "Fundraising Masterclass",
      description: "Complete guide to raising capital - from seed rounds to Series A and beyond.",
      category: "Funding",
      level: "Intermediate",
      duration: 120,
      sections: 12,
      rating: 4.9,
      completions: 1892,
      instructor: "Sequoia Capital",
      type: "course",
      thumbnail: "üí∞",
      topics: ["Pitch Decks", "Due Diligence", "Valuation", "Term Sheets"]
    },
    {
      id: 3,
      title: "Product-Market Fit",
      description: "Discover how to identify, achieve, and measure product-market fit for sustainable growth.",
      category: "Product",
      level: "Intermediate",
      duration: 85,
      sections: 8,
      rating: 4.7,
      completions: 1634,
      instructor: "Andreessen Horowitz",
      type: "workshop",
      thumbnail: "üéØ",
      topics: ["Customer Discovery", "Metrics", "Iteration", "Scaling"]
    },
    {
      id: 4,
      title: "Growth Marketing Strategies",
      description: "Learn proven tactics to acquire, activate, and retain customers cost-effectively.",
      category: "Marketing",
      level: "Advanced",
      duration: 95,
      sections: 10,
      rating: 4.6,
      completions: 1456,
      instructor: "First Round Capital",
      type: "masterclass",
      thumbnail: "üìà",
      topics: ["Customer Acquisition", "Viral Growth", "Retention", "Analytics"]
    },
    {
      id: 5,
      title: "Financial Planning & Analysis",
      description: "Build robust financial models and understand key metrics that drive startup success.",
      category: "Finance",
      level: "Intermediate",
      duration: 110,
      sections: 9,
      rating: 4.5,
      completions: 1203,
      instructor: "Bessemer Venture Partners",
      type: "course",
      thumbnail: "üìä",
      topics: ["Financial Modeling", "Unit Economics", "Cash Flow", "KPIs"]
    },
    {
      id: 6,
      title: "Leadership & Team Building",
      description: "Develop the leadership skills needed to build and manage high-performing teams.",
      category: "Leadership",
      level: "Advanced",
      duration: 75,
      sections: 7,
      rating: 4.7,
      completions: 987,
      instructor: "Greylock Partners",
      type: "workshop",
      thumbnail: "üë•",
      topics: ["Hiring", "Culture", "Performance Management", "Communication"]
    },
    {
      id: 7,
      title: "Legal Essentials for Startups",
      description: "Navigate the legal landscape with confidence - from incorporation to contracts.",
      category: "Legal",
      level: "Beginner",
      duration: 60,
      sections: 5,
      rating: 4.4,
      completions: 876,
      instructor: "Wilson Sonsini",
      type: "guide",
      thumbnail: "‚öñÔ∏è",
      topics: ["Incorporation", "Equity", "IP Protection", "Compliance"]
    },
    {
      id: 8,
      title: "Go-to-Market Strategy",
      description: "Create and execute winning go-to-market strategies for B2B and B2C products.",
      category: "Strategy",
      level: "Advanced",
      duration: 105,
      sections: 11,
      rating: 4.8,
      completions: 743,
      instructor: "Lightspeed Venture Partners",
      type: "masterclass",
      thumbnail: "üéØ",
      topics: ["Market Positioning", "Sales Strategy", "Distribution", "Pricing"]
    }
  ];

  const categories = ["All", "Foundation", "Funding", "Product", "Marketing", "Finance", "Leadership", "Legal", "Strategy"];

  const filteredModules = selectedCategory === "All" 
    ? educationalModules 
    : educationalModules.filter(module => module.category === selectedCategory);

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "video": return <Video className="h-4 w-4" />;
      case "course": return <Book className="h-4 w-4" />;
      case "workshop": return <Users className="h-4 w-4" />;
      case "masterclass": return <Star className="h-4 w-4" />;
      case "guide": return <FileText className="h-4 w-4" />;
      default: return <Book className="h-4 w-4" />;
    }
  };

  const getLevelColor = (level: string) => {
    switch (level) {
      case "Beginner": return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
      case "Intermediate": return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300";
      case "Advanced": return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300";
      default: return "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300";
    }
  };

  return (
    <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 gap-4">
        <div>
          <h1 className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-purple-600 to-teal-500 bg-clip-text text-transparent">
            Educational Modules
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2">
            Curated content from top VCs and industry experts
          </p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button className="bg-gradient-to-r from-purple-600 to-teal-500 hover:from-purple-700 hover:to-teal-600">
              <GraduationCap className="mr-2 h-4 w-4" />
              Create Module
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[550px]">
            <DialogHeader>
              <DialogTitle>Create New Educational Module</DialogTitle>
              <DialogDescription>
                Create a new educational module for startups and entrepreneurs.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form className="space-y-4">
                <FormField
                  control={form.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Module Title</FormLabel>
                      <FormControl>
                        <Input placeholder="Fundraising Fundamentals" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Learn the fundamentals of raising capital for your startup..."
                          className="min-h-32"
                          {...field}
                          value={field.value || ""}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <DialogFooter>
                  <Button type="submit">
                    Create Module
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </div>

      {/* Category Filter */}
      <div className="mb-8">
        <div className="flex flex-wrap gap-2">
          {categories.map((category) => (
            <Button
              key={category}
              variant={selectedCategory === category ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedCategory(category)}
              className="transition-all duration-200"
            >
              {category}
            </Button>
          ))}
        </div>
      </div>

      {/* Modules Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {filteredModules.map((module) => (
          <Card key={module.id} className="group overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border-0 shadow-lg bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm">
            <CardHeader className="pb-4">
              <div className="flex items-start justify-between">
                <div className="flex items-center space-x-3">
                  <div className="text-3xl">{module.thumbnail}</div>
                  <div>
                    <CardTitle className="text-lg line-clamp-2 group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors">
                      {module.title}
                    </CardTitle>
                    <div className="flex items-center space-x-2 mt-1">
                      {getTypeIcon(module.type)}
                      <span className="text-sm text-gray-500 dark:text-gray-400 capitalize">{module.type}</span>
                    </div>
                  </div>
                </div>
                <Badge className={`${getLevelColor(module.level)} border-0`}>
                  {module.level}
                </Badge>
              </div>
              <CardDescription className="text-sm line-clamp-3 mt-2">
                {module.description}
              </CardDescription>
            </CardHeader>

            <CardContent className="pb-4">
              {/* Stats */}
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div className="flex items-center space-x-2">
                  <Clock className="h-4 w-4 text-purple-500" />
                  <span className="text-sm font-medium">{module.duration} min</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Book className="h-4 w-4 text-teal-500" />
                  <span className="text-sm font-medium">{module.sections} sections</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Star className="h-4 w-4 text-yellow-500" />
                  <span className="text-sm font-medium">{module.rating}/5.0</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Users className="h-4 w-4 text-green-500" />
                  <span className="text-sm font-medium">{module.completions.toLocaleString()}</span>
                </div>
              </div>

              {/* Instructor */}
              <div className="mb-4">
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  By <span className="font-semibold text-purple-600 dark:text-purple-400">{module.instructor}</span>
                </p>
              </div>

              {/* Topics */}
              <div className="flex flex-wrap gap-1">
                {module.topics.slice(0, 3).map((topic, index) => (
                  <Badge key={index} variant="secondary" className="text-xs">
                    {topic}
                  </Badge>
                ))}
                {module.topics.length > 3 && (
                  <Badge variant="secondary" className="text-xs">
                    +{module.topics.length - 3}
                  </Badge>
                )}
              </div>
            </CardContent>

            <CardFooter className="flex justify-between border-t bg-gray-50/50 dark:bg-gray-800/50 p-4">
              <Button variant="outline" size="sm" className="flex-1 mr-2">
                <Play className="mr-2 h-4 w-4" />
                Preview
              </Button>
              <Button size="sm" className="flex-1 bg-gradient-to-r from-purple-600 to-teal-500 hover:from-purple-700 hover:to-teal-600">
                Start Learning
                <ChevronRight className="ml-1 h-4 w-4" />
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>

      {filteredModules.length === 0 && (
        <div className="text-center py-20">
          <div className="text-6xl mb-4">üìö</div>
          <h3 className="text-xl font-medium mb-2">No modules found</h3>
          <p className="text-gray-500 dark:text-gray-400 mb-4">
            Try selecting a different category or create your own module.
          </p>
          <Button onClick={() => setSelectedCategory("All")}>
            View All Modules
          </Button>
        </div>
      )}
    </div>
  );
}

function MentorshipsList() {
  const mentors = [
    {
      id: 1,
      name: "Sarah Chen",
      title: "Former VP Product at Stripe",
      expertise: ["Product Strategy", "Growth", "B2B SaaS"],
      bio: "Led product development for Stripe's fastest growing segments. 10+ years in product leadership.",
      rating: 4.9,
      sessions: 156,
      price: "$200/hour",
      available: true,
      image: "üë©‚Äçüíº"
    },
    {
      id: 2,
      name: "Marcus Rodriguez",
      title: "3x Founder & Angel Investor",
      expertise: ["Fundraising", "Sales", "Operations"],
      bio: "Built and sold 2 companies. Now investing in early-stage startups. 15+ years experience.",
      rating: 4.8,
      sessions: 203,
      price: "$300/hour",
      available: true,
      image: "üë®‚Äçüíº"
    },
    {
      id: 3,
      name: "Dr. Emily Foster",
      title: "Former McKinsey Partner",
      expertise: ["Strategy", "Market Entry", "Operations"],
      bio: "Specialized in scaling tech companies. Worked with 50+ startups in transformation.",
      rating: 4.9,
      sessions: 127,
      price: "$250/hour",
      available: false,
      image: "üë©‚Äçüéì"
    }
  ];

  return (
    <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8">
      <div className="mb-8">
        <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-teal-500 bg-clip-text text-transparent mb-2">
          Expert Mentorship
        </h2>
        <p className="text-gray-600 dark:text-gray-400">
          Get 1-on-1 guidance from experienced entrepreneurs and industry leaders
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {mentors.map((mentor) => (
          <Card key={mentor.id} className="group hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border-0 shadow-lg bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm">
            <CardHeader className="pb-4">
              <div className="flex items-start space-x-4">
                <div className="text-4xl">{mentor.image}</div>
                <div className="flex-1">
                  <CardTitle className="text-lg">{mentor.name}</CardTitle>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{mentor.title}</p>
                  <div className="flex items-center space-x-2 mt-2">
                    <div className="flex items-center">
                      <Star className="h-4 w-4 text-yellow-500 fill-current" />
                      <span className="text-sm font-medium ml-1">{mentor.rating}</span>
                    </div>
                    <span className="text-gray-300">‚Ä¢</span>
                    <span className="text-sm text-gray-600 dark:text-gray-400">{mentor.sessions} sessions</span>
                  </div>
                </div>
              </div>
            </CardHeader>

            <CardContent className="pb-4">
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-4 line-clamp-3">
                {mentor.bio}
              </p>

              <div className="flex flex-wrap gap-2 mb-4">
                {mentor.expertise.map((skill, index) => (
                  <Badge key={index} variant="secondary" className="text-xs">
                    {skill}
                  </Badge>
                ))}
              </div>

              <div className="flex items-center justify-between">
                <span className="text-lg font-bold text-purple-600 dark:text-purple-400">
                  {mentor.price}
                </span>
                <div className={`flex items-center space-x-1 ${mentor.available ? 'text-green-600' : 'text-gray-500'}`}>
                  <div className={`w-2 h-2 rounded-full ${mentor.available ? 'bg-green-500' : 'bg-gray-400'}`} />
                  <span className="text-sm">{mentor.available ? 'Available' : 'Busy'}</span>
                </div>
              </div>
            </CardContent>

            <CardFooter className="border-t bg-gray-50/50 dark:bg-gray-800/50 p-4">
              <Button 
                className="w-full bg-gradient-to-r from-purple-600 to-teal-500 hover:from-purple-700 hover:to-teal-600"
                disabled={!mentor.available}
              >
                {mentor.available ? 'Book Session' : 'Join Waitlist'}
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>

      <div className="mt-12 text-center">
        <Card className="max-w-2xl mx-auto bg-gradient-to-r from-purple-50 to-teal-50 dark:from-purple-900/20 dark:to-teal-900/20 border-0">
          <CardContent className="p-8">
            <h3 className="text-xl font-bold mb-4">Become a Mentor</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              Share your expertise and help the next generation of entrepreneurs succeed.
            </p>
            <Button variant="outline" className="mr-4">
              Learn More
            </Button>
            <Button className="bg-gradient-to-r from-purple-600 to-teal-500 hover:from-purple-700 hover:to-teal-600">
              Apply to Mentor
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

function LearningPathsList() {
  const learningPaths = [
    {
      id: 1,
      title: "Entrepreneur Essentials",
      description: "Complete journey from idea to launch for first-time founders",
      modules: 8,
      duration: "6-8 weeks",
      level: "Beginner",
      students: 1247,
      progress: 0,
      topics: ["Business Fundamentals", "Market Research", "MVP", "Launch Strategy"],
      color: "from-blue-500 to-cyan-500"
    },
    {
      id: 2,
      title: "Scale-Up Success",
      description: "Advanced strategies for growing from startup to scale-up",
      modules: 12,
      duration: "8-10 weeks",
      level: "Advanced",
      students: 892,
      progress: 0,
      topics: ["Operations", "Team Building", "Growth Hacking", "Fundraising"],
      color: "from-purple-500 to-pink-500"
    },
    {
      id: 3,
      title: "Tech Startup Blueprint",
      description: "Specialized path for technology-focused startups",
      modules: 10,
      duration: "7-9 weeks",
      level: "Intermediate",
      students: 634,
      progress: 0,
      topics: ["Product Development", "Technical Leadership", "DevOps", "Security"],
      color: "from-green-500 to-teal-500"
    }
  ];

  return (
    <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8">
      <div className="mb-8">
        <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-teal-500 bg-clip-text text-transparent mb-2">
          Learning Paths
        </h2>
        <p className="text-gray-600 dark:text-gray-400">
          Structured curriculum designed to take you from beginner to expert
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
        {learningPaths.map((path) => (
          <Card key={path.id} className="group hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border-0 shadow-lg bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm overflow-hidden">
            <div className={`h-2 bg-gradient-to-r ${path.color}`} />

            <CardHeader className="pb-4">
              <div className="flex items-start justify-between">
                <CardTitle className="text-xl group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors">
                  {path.title}
                </CardTitle>
                <Badge className={`${path.level === 'Beginner' ? 'bg-green-100 text-green-800' : path.level === 'Intermediate' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'} border-0`}>
                  {path.level}
                </Badge>
              </div>
              <CardDescription className="line-clamp-2">
                {path.description}
              </CardDescription>
            </CardHeader>

            <CardContent className="pb-4">
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div className="flex items-center space-x-2">
                  <Book className="h-4 w-4 text-purple-500" />
                  <span className="text-sm font-medium">{path.modules} modules</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Clock className="h-4 w-4 text-teal-500" />
                  <span className="text-sm font-medium">{path.duration}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Users className="h-4 w-4 text-green-500" />
                  <span className="text-sm font-medium">{path.students.toLocaleString()} students</span>
                </div>
                <div className="flex items-center space-x-2">
                  <BarChart3 className="h-4 w-4 text-orange-500" />
                  <span className="text-sm font-medium">{path.progress}% complete</span>
                </div>
              </div>

              <div className="flex flex-wrap gap-1 mb-4">
                {path.topics.map((topic, index) => (
                  <Badge key={index} variant="outline" className="text-xs">
                    {topic}
                  </Badge>
                ))}
              </div>

              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                <div 
                  className={`h-2 rounded-full bg-gradient-to-r ${path.color} transition-all duration-300`}
                  style={{ width: `${path.progress}%` }}
                />
              </div>
            </CardContent>

            <CardFooter className="border-t bg-gray-50/50 dark:bg-gray-800/50 p-4">
              <Button className="w-full bg-gradient-to-r from-purple-600 to-teal-500 hover:from-purple-700 hover:to-teal-600">
                {path.progress > 0 ? 'Continue Learning' : 'Start Path'}
                <ChevronRight className="ml-1 h-4 w-4" />
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  );
}

export default function EducationPage() {
  const [darkMode, setDarkMode] = useState(false);
  const tabs = ["Modules", "Mentorships", "Learning Paths"];

  useEffect(() => {
    // Check if dark mode is already set
    if (localStorage.getItem('darkMode') === 'true' || 
        (!localStorage.getItem('darkMode') && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      setDarkMode(true);
      document.documentElement.classList.add('dark');
    }
  }, []);

  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
    if (!darkMode) {
      document.documentElement.classList.add('dark');
      localStorage.setItem('darkMode', 'true');
    } else {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('darkMode', 'false');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-teal-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 transition-colors duration-300">
      {/* Dark mode toggle */}
      <div className="fixed top-24 right-4 z-50">
        <Card className="p-2 shadow-lg border-0 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm">
          <div className="flex items-center space-x-2">
            <Sun className="h-4 w-4 text-yellow-500" />
            <Switch checked={darkMode} onCheckedChange={toggleDarkMode} />
            <Moon className="h-4 w-4 text-purple-500" />
          </div>
        </Card>
      </div>

      <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <GraduationCap className="h-10 w-10 text-purple-600" />
            <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-600 to-teal-500 bg-clip-text text-transparent">
              Learning Hub
            </h1>
          </div>
          <p className="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
            Learn from the best, grow with experts, and build the skills you need to succeed
          </p>
        </div>

        <Tabs defaultValue="Modules" className="w-full">
          <div className="flex justify-center mb-8">
            <TabsList className="grid w-full max-w-md grid-cols-3 bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm border-0">
              {tabs.map((tab) => (
                <TabsTrigger 
                  key={tab} 
                  value={tab}
                  className="data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-600 data-[state=active]:to-teal-500 data-[state=active]:text-white"
                >
                  {tab}
                </TabsTrigger>
              ))}
            </TabsList>
          </div>

          <TabsContent value="Modules" className="space-y-4">
            <EducationalModulesList />
          </TabsContent>
          <TabsContent value="Mentorships" className="space-y-4">
            <MentorshipsList />
          </TabsContent>
          <TabsContent value="Learning Paths" className="space-y-4">
            <LearningPathsList />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

=== FILE: client/src/pages/applications.tsx ===


import React, { useState, useEffect } from 'react';
import { useDropzone } from 'react-dropzone';
import { 
  Upload as UploadIcon, 
  Edit3, 
  Save, 
  Rocket, 
  Award, 
  Trophy, 
  Building2, 
  Search, 
  Filter, 
  Calendar, 
  MapPin, 
  DollarSign, 
  Users, 
  Clock, 
  CheckCircle, 
  AlertCircle, 
  Star,
  ExternalLink,
  Bookmark,
  Share2
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ApplicationSection {
  id: string;
  title: string;
  subsections: {
    id: string;
    title: string;
    content: string;
    required: boolean;
  }[];
}

interface OpenApplication {
  id: string;
  title: string;
  organization: string;
  type: 'accelerator' | 'grant' | 'competition' | 'investment';
  category: string;
  description: string;
  requirements: string[];
  benefits: string[];
  funding: {
    amount?: number;
    equity?: number;
    type: 'grant' | 'equity' | 'loan' | 'prize';
  };
  eligibility: {
    stage: string[];
    industry: string[];
    location: string[];
    teamSize: { min: number; max: number };
    revenue: { min: number; max: number };
  };
  timeline: {
    openDate: string;
    deadline: string;
    duration: string;
    startDate?: string;
  };
  status: 'open' | 'closing-soon' | 'closed' | 'upcoming';
  difficulty: 'easy' | 'medium' | 'hard';
  popularity: number;
  successRate: number;
  tags: string[];
  website: string;
  contact: {
    email: string;
    phone?: string;
  };
  featured: boolean;
  deadline: string;
  location: string;
}

function Applications() {
  const [applicationName, setApplicationName] = useState('');
  const [applicationType, setApplicationType] = useState('accelerator');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterDifficulty, setFilterDifficulty] = useState('all');
  const [showMyApplications, setShowMyApplications] = useState(false);
  const [selectedApplications, setSelectedApplications] = useState<string[]>([]);
  const { toast } = useToast();

  const [sectionScores, setSectionScores] = useState<Record<string, any>>({});
  
  const applicationTypes = [
    { id: 'accelerator', title: 'Accelerator Application', icon: Rocket, color: 'bg-purple-100 text-purple-700' },
    { id: 'grant', title: 'Grant Application', icon: Award, color: 'bg-green-100 text-green-700' },
    { id: 'competition', title: 'Competition Entry', icon: Trophy, color: 'bg-yellow-100 text-yellow-700' },
    { id: 'investment', title: 'Investment Application', icon: Building2, color: 'bg-blue-100 text-blue-700' }
  ];

  // Comprehensive list of open applications
  const openApplications: OpenApplication[] = [
    {
      id: 'ycombinator-w24',
      title: 'Y Combinator Winter 2024',
      organization: 'Y Combinator',
      type: 'accelerator',
      category: 'Tech Startup Accelerator',
      description: 'The world\'s most prestigious startup accelerator. Get $500K in funding, world-class mentorship, and access to the YC network.',
      requirements: ['Working product', 'Traction', 'Strong team', 'Clear vision'],
      benefits: ['$500K funding', 'Mentorship', 'Network access', 'Demo Day exposure'],
      funding: { amount: 500000, type: 'equity', equity: 7 },
      eligibility: {
        stage: ['pre-seed', 'seed'],
        industry: ['technology', 'software', 'hardware', 'biotech'],
        location: ['global'],
        teamSize: { min: 1, max: 10 },
        revenue: { min: 0, max: 1000000 }
      },
      timeline: {
        openDate: '2024-01-15',
        deadline: '2024-10-15',
        duration: '3 months',
        startDate: '2025-01-15'
      },
      status: 'open',
      difficulty: 'hard',
      popularity: 95,
      successRate: 2.5,
      tags: ['prestigious', 'tech', 'funding', 'mentorship'],
      website: 'https://ycombinator.com',
      contact: { email: 'apply@ycombinator.com' },
      featured: true,
      deadline: '2024-10-15',
      location: 'San Francisco, CA'
    },
    {
      id: 'techstars-nyc',
      title: 'Techstars NYC',
      organization: 'Techstars',
      type: 'accelerator',
      category: 'Tech Startup Accelerator',
      description: 'Join the Techstars network with $120K funding, mentorship, and access to investors.',
      requirements: ['MVP', 'Team', 'Market validation'],
      benefits: ['$120K funding', 'Mentorship', 'Investor network', 'Office space'],
      funding: { amount: 120000, type: 'equity', equity: 6 },
      eligibility: {
        stage: ['pre-seed', 'seed'],
        industry: ['technology', 'fintech', 'healthtech'],
        location: ['north-america'],
        teamSize: { min: 2, max: 8 },
        revenue: { min: 0, max: 500000 }
      },
      timeline: {
        openDate: '2024-02-01',
        deadline: '2024-11-30',
        duration: '3 months',
        startDate: '2025-02-01'
      },
      status: 'open',
      difficulty: 'hard',
      popularity: 88,
      successRate: 8,
      tags: ['tech', 'mentorship', 'network'],
      website: 'https://techstars.com',
      contact: { email: 'nyc@techstars.com' },
      featured: true,
      deadline: '2024-11-30',
      location: 'New York, NY'
    },
    {
      id: 'nsf-sbir-phase1',
      title: 'NSF SBIR Phase I',
      organization: 'National Science Foundation',
      type: 'grant',
      category: 'Research & Development Grant',
      description: 'Up to $275K for early-stage R&D with commercial potential. No equity required.',
      requirements: ['Innovative technology', 'Commercial potential', 'Technical merit'],
      benefits: ['$275K funding', 'No equity', 'Technical support', 'Commercialization assistance'],
      funding: { amount: 275000, type: 'grant' },
      eligibility: {
        stage: ['pre-seed', 'seed'],
        industry: ['technology', 'science', 'engineering'],
        location: ['united-states'],
        teamSize: { min: 1, max: 50 },
        revenue: { min: 0, max: 1000000 }
      },
      timeline: {
        openDate: '2024-01-01',
        deadline: '2024-12-15',
        duration: '6-12 months',
        startDate: '2025-01-01'
      },
      status: 'open',
      difficulty: 'medium',
      popularity: 75,
      successRate: 15,
      tags: ['research', 'no-equity', 'government'],
      website: 'https://nsf.gov/sbir',
      contact: { email: 'sbir@nsf.gov' },
      featured: false,
      deadline: '2024-12-15',
      location: 'United States'
    },
    {
      id: 'startup-grind-global',
      title: 'Startup Grind Global Conference',
      organization: 'Startup Grind',
      type: 'competition',
      category: 'Pitch Competition',
      description: 'Pitch your startup to global investors and win $50K in prizes.',
      requirements: ['Working product', 'Pitch deck', 'Team presentation'],
      benefits: ['$50K prize', 'Investor exposure', 'Media coverage', 'Networking'],
      funding: { amount: 50000, type: 'prize' },
      eligibility: {
        stage: ['pre-seed', 'seed', 'series-a'],
        industry: ['all'],
        location: ['global'],
        teamSize: { min: 1, max: 20 },
        revenue: { min: 0, max: 5000000 }
      },
      timeline: {
        openDate: '2024-03-01',
        deadline: '2024-09-30',
        duration: '1 day',
        startDate: '2024-10-15'
      },
      status: 'open',
      difficulty: 'medium',
      popularity: 70,
      successRate: 5,
      tags: ['pitch', 'competition', 'networking'],
      website: 'https://startupgrind.com',
      contact: { email: 'global@startupgrind.com' },
      featured: false,
      deadline: '2024-09-30',
      location: 'Redwood City, CA'
    },
    {
      id: 'google-startup-accelerator',
      title: 'Google for Startups Accelerator',
      organization: 'Google',
      type: 'accelerator',
      category: 'Tech Startup Accelerator',
      description: '3-month program with Google mentorship, cloud credits, and investor connections.',
      requirements: ['Tech startup', 'Growth potential', 'Team commitment'],
      benefits: ['$100K cloud credits', 'Google mentorship', 'Investor network', 'Technical support'],
      funding: { amount: 100000, type: 'grant' },
      eligibility: {
        stage: ['seed', 'series-a'],
        industry: ['technology', 'ai', 'cloud', 'mobile'],
        location: ['global'],
        teamSize: { min: 2, max: 15 },
        revenue: { min: 10000, max: 10000000 }
      },
      timeline: {
        openDate: '2024-02-15',
        deadline: '2024-10-31',
        duration: '3 months',
        startDate: '2025-01-15'
      },
      status: 'open',
      difficulty: 'hard',
      popularity: 90,
      successRate: 12,
      tags: ['google', 'tech', 'cloud', 'ai'],
      website: 'https://startup.google.com',
      contact: { email: 'accelerator@google.com' },
      featured: true,
      deadline: '2024-10-31',
      location: 'Global'
    },
    {
      id: 'sba-small-business-grant',
      title: 'SBA Small Business Innovation Research',
      organization: 'Small Business Administration',
      type: 'grant',
      category: 'Small Business Grant',
      description: 'Up to $150K for small business innovation and research projects.',
      requirements: ['Small business', 'Innovation project', 'Research component'],
      benefits: ['$150K funding', 'No equity', 'Business support', 'Research resources'],
      funding: { amount: 150000, type: 'grant' },
      eligibility: {
        stage: ['pre-seed', 'seed'],
        industry: ['all'],
        location: ['united-states'],
        teamSize: { min: 1, max: 500 },
        revenue: { min: 0, max: 10000000 }
      },
      timeline: {
        openDate: '2024-01-01',
        deadline: '2024-11-30',
        duration: '6-18 months',
        startDate: '2025-01-01'
      },
      status: 'open',
      difficulty: 'easy',
      popularity: 60,
      successRate: 25,
      tags: ['government', 'small-business', 'innovation'],
      website: 'https://sba.gov',
      contact: { email: 'sbir@sba.gov' },
      featured: false,
      deadline: '2024-11-30',
      location: 'United States'
    },
    {
      id: 'techcrunch-disrupt',
      title: 'TechCrunch Disrupt Startup Battlefield',
      organization: 'TechCrunch',
      type: 'competition',
      category: 'Pitch Competition',
      description: 'Pitch at the world\'s premier startup conference. Win $100K and global exposure.',
      requirements: ['Early-stage startup', 'Pitch presentation', 'Demo ready'],
      benefits: ['$100K prize', 'Global exposure', 'Media coverage', 'Investor access'],
      funding: { amount: 100000, type: 'prize' },
      eligibility: {
        stage: ['pre-seed', 'seed'],
        industry: ['technology'],
        location: ['global'],
        teamSize: { min: 1, max: 10 },
        revenue: { min: 0, max: 1000000 }
      },
      timeline: {
        openDate: '2024-04-01',
        deadline: '2024-08-31',
        duration: '3 days',
        startDate: '2024-09-15'
      },
      status: 'closing-soon',
      difficulty: 'hard',
      popularity: 95,
      successRate: 1,
      tags: ['prestigious', 'media', 'global', 'tech'],
      website: 'https://techcrunch.com',
      contact: { email: 'battlefield@techcrunch.com' },
      featured: true,
      deadline: '2024-08-31',
      location: 'San Francisco, CA'
    },
    {
      id: '500-startups-batch',
      title: '500 Startups Batch Program',
      organization: '500 Global',
      type: 'accelerator',
      category: 'Global Startup Accelerator',
      description: '4-month program with $250K funding, global network, and growth support.',
      requirements: ['Traction', 'Growth potential', 'Global mindset'],
      benefits: ['$250K funding', 'Global network', 'Growth support', 'Mentorship'],
      funding: { amount: 250000, type: 'equity', equity: 5 },
      eligibility: {
        stage: ['seed', 'series-a'],
        industry: ['all'],
        location: ['global'],
        teamSize: { min: 2, max: 20 },
        revenue: { min: 10000, max: 5000000 }
      },
      timeline: {
        openDate: '2024-03-01',
        deadline: '2024-12-15',
        duration: '4 months',
        startDate: '2025-03-01'
      },
      status: 'open',
      difficulty: 'hard',
      popularity: 85,
      successRate: 10,
      tags: ['global', 'growth', 'network', 'funding'],
      website: 'https://500.co',
      contact: { email: 'batch@500.co' },
      featured: true,
      deadline: '2024-12-15',
      location: 'Global'
    }
  ];

  const sections: Record<string, ApplicationSection[]> = {
    accelerator: [
      {
        id: 'company-overview',
        title: 'Company Overview',
        subsections: [
          { id: 'company-description', title: 'Company Description', content: '', required: true },
          { id: 'problem-solution', title: 'Problem & Solution', content: '', required: true },
          { id: 'target-market', title: 'Target Market', content: '', required: true },
          { id: 'business-model', title: 'Business Model', content: '', required: true }
        ]
      },
      {
        id: 'team',
        title: 'Team & Founders',
        subsections: [
          { id: 'founder-bios', title: 'Founder Biographies', content: '', required: true },
          { id: 'team-experience', title: 'Relevant Experience', content: '', required: true },
          { id: 'advisory-board', title: 'Advisory Board', content: '', required: false },
          { id: 'equity-distribution', title: 'Equity Distribution', content: '', required: true }
        ]
      },
      {
        id: 'traction',
        title: 'Traction & Metrics',
        subsections: [
          { id: 'current-status', title: 'Current Status', content: '', required: true },
          { id: 'key-metrics', title: 'Key Metrics', content: '', required: true },
          { id: 'revenue', title: 'Revenue & Growth', content: '', required: false },
          { id: 'user-base', title: 'User Base', content: '', required: false }
        ]
      },
      {
        id: 'financials',
        title: 'Financial Information',
        subsections: [
          { id: 'funding-history', title: 'Funding History', content: '', required: true },
          { id: 'current-runway', title: 'Current Runway', content: '', required: true },
          { id: 'financial-projections', title: 'Financial Projections', content: '', required: true },
          { id: 'use-of-funds', title: 'Use of Funds', content: '', required: true }
        ]
      }
    ],
    grant: [
      {
        id: 'project-summary',
        title: 'Project Summary',
        subsections: [
          { id: 'project-title', title: 'Project Title', content: '', required: true },
          { id: 'abstract', title: 'Project Abstract', content: '', required: true },
          { id: 'objectives', title: 'Project Objectives', content: '', required: true },
          { id: 'innovation', title: 'Innovation Statement', content: '', required: true }
        ]
      },
      {
        id: 'technical-approach',
        title: 'Technical Approach',
        subsections: [
          { id: 'methodology', title: 'Methodology', content: '', required: true },
          { id: 'work-plan', title: 'Work Plan', content: '', required: true },
          { id: 'deliverables', title: 'Deliverables', content: '', required: true },
          { id: 'timeline', title: 'Timeline', content: '', required: true }
        ]
      }
    ]
  };

  const currentSections = sections[applicationType] || sections.accelerator;

  // Filter applications based on search and filters
  const filteredApplications = openApplications.filter(app => {
    const matchesSearch = app.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         app.organization.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         app.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = filterType === 'all' || app.type === filterType;
    const matchesStatus = filterStatus === 'all' || app.status === filterStatus;
    const matchesDifficulty = filterDifficulty === 'all' || app.difficulty === filterDifficulty;
    
    return matchesSearch && matchesType && matchesStatus && matchesDifficulty;
  });

  const featuredApplications = filteredApplications.filter(app => app.featured);
  const regularApplications = filteredApplications.filter(app => !app.featured);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'bg-green-100 text-green-800';
      case 'closing-soon': return 'bg-yellow-100 text-yellow-800';
      case 'closed': return 'bg-red-100 text-red-800';
      case 'upcoming': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'bg-green-100 text-green-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'hard': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    }
    return `$${amount}`;
  };

  const getDaysUntilDeadline = (deadline: string) => {
    const deadlineDate = new Date(deadline);
    const today = new Date();
    const diffTime = deadlineDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  const onDrop = async (acceptedFiles: File[]) => {
    try {
      if (acceptedFiles.length === 0) {
        toast({
          title: "Error",
          description: "No file was uploaded",
          variant: "destructive",
        });
        return;
      }

      const file = acceptedFiles[0];
      if (applicationName.trim() === '') {
        setApplicationName(file.name.split('.')[0]);
      }

      toast({
        title: "Analyzing application",
        description: "Checking completeness and readiness...",
      });

      // Simulate analysis with focus on completeness
      setTimeout(() => {
        const newScores: Record<string, any> = {};
        currentSections.forEach(section => {
          const subsectionScores: Record<string, any> = {};
          section.subsections.forEach(subsection => {
            // Required sections get higher baseline scores
            const baseScore = subsection.required ? 60 : 70;
            subsectionScores[subsection.id] = {
              score: Math.floor(Math.random() * 30) + baseScore,
              status: 'scored',
              required: subsection.required
            };
          });
          
          const avgScore = Object.values(subsectionScores)
            .reduce((sum: number, sub: any) => sum + sub.score, 0) / section.subsections.length;
          
          newScores[section.id] = {
            score: Math.round(avgScore),
            status: 'scored',
            subsections: subsectionScores
          };
        });
        setSectionScores(newScores);
        
        toast({
          title: "Analysis complete",
          description: "Application readiness assessment completed",
        });
      }, 2000);
    } catch (error) {
      console.error('Error handling file upload:', error);
      toast({
        title: "Error",
        description: "Failed to upload the application",
        variant: "destructive",
      });
    }
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'application/msword': ['.doc'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']
    },
    multiple: false
  });

  const handleSave = () => {
    if (applicationName.trim() === '') {
      toast({
        title: "Error",
        description: "Please enter an application name",
        variant: "destructive",
      });
      return;
    }

    toast({
      title: "Success",
      description: "Application saved successfully",
    });
  };

  const calculateCompleteness = () => {
    if (Object.keys(sectionScores).length === 0) return 0;
    
    let totalRequired = 0;
    let completedRequired = 0;
    
    currentSections.forEach(section => {
      section.subsections.forEach(subsection => {
        if (subsection.required) {
          totalRequired++;
          const score = sectionScores[section.id]?.subsections[subsection.id]?.score || 0;
          if (score >= 70) completedRequired++;
        }
      });
    });
    
    return totalRequired > 0 ? Math.round((completedRequired / totalRequired) * 100) : 0;
  };

  const completeness = calculateCompleteness();

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex flex-col lg:flex-row lg:justify-between lg:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Open Applications</h1>
          <p className="text-gray-600 mt-1">Discover and apply to startup programs, grants, and competitions</p>
        </div>
        <div className="flex items-center space-x-4">
          <button
            onClick={() => setShowMyApplications(!showMyApplications)}
            className={`px-4 py-2 rounded-lg border transition-colors ${
              showMyApplications 
                ? 'bg-blue-600 text-white border-blue-600' 
                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
            }`}
          >
            My Applications
          </button>
          <button className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
            <UploadIcon className="h-5 w-5 mr-2" />
            Upload Application
          </button>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="text"
              placeholder="Search applications..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value)}
            className="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Types</option>
            <option value="accelerator">Accelerators</option>
            <option value="grant">Grants</option>
            <option value="competition">Competitions</option>
            <option value="investment">Investment</option>
          </select>

          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Status</option>
            <option value="open">Open</option>
            <option value="closing-soon">Closing Soon</option>
            <option value="upcoming">Upcoming</option>
          </select>

          <select
            value={filterDifficulty}
            onChange={(e) => setFilterDifficulty(e.target.value)}
            className="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Difficulty</option>
            <option value="easy">Easy</option>
            <option value="medium">Medium</option>
            <option value="hard">Hard</option>
          </select>
        </div>
      </div>

      {/* Featured Applications */}
      {featuredApplications.length > 0 && (
        <div>
          <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
            <Star className="h-5 w-5 mr-2 text-yellow-500" />
            Featured Applications
          </h2>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {featuredApplications.map((app) => (
              <div key={app.id} className="bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow">
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <h3 className="text-lg font-semibold text-gray-900">{app.title}</h3>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(app.status)}`}>
                          {app.status.replace('-', ' ')}
                        </span>
                      </div>
                      <p className="text-sm text-gray-600 mb-2">{app.organization}</p>
                      <p className="text-gray-700 text-sm line-clamp-2">{app.description}</p>
                    </div>
                    <div className="flex items-center gap-2 ml-4">
                      <button className="p-2 text-gray-400 hover:text-blue-600">
                        <Bookmark className="h-4 w-4" />
                      </button>
                      <button className="p-2 text-gray-400 hover:text-blue-600">
                        <Share2 className="h-4 w-4" />
                      </button>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div className="flex items-center text-sm text-gray-600">
                      <DollarSign className="h-4 w-4 mr-2" />
                      {app.funding.amount ? formatCurrency(app.funding.amount) : 'Varies'}
                      {app.funding.equity && ` (${app.funding.equity}% equity)`}
                    </div>
                    <div className="flex items-center text-sm text-gray-600">
                      <MapPin className="h-4 w-4 mr-2" />
                      {app.location}
                    </div>
                    <div className="flex items-center text-sm text-gray-600">
                      <Clock className="h-4 w-4 mr-2" />
                      {getDaysUntilDeadline(app.deadline)} days left
                    </div>
                    <div className="flex items-center text-sm text-gray-600">
                      <Users className="h-4 w-4 mr-2" />
                      {app.eligibility.teamSize.min}-{app.eligibility.teamSize.max} team
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(app.difficulty)}`}>
                        {app.difficulty}
                      </span>
                      <span className="text-xs text-gray-500">
                        {app.successRate}% success rate
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <button className="px-4 py-2 text-blue-600 border border-blue-600 rounded-lg hover:bg-blue-50">
                        View Details
                      </button>
                      <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        Apply Now
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Regular Applications */}
      <div>
        <h2 className="text-xl font-semibold text-gray-900 mb-4">All Applications ({filteredApplications.length})</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {regularApplications.map((app) => (
            <div key={app.id} className="bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow">
              <div className="p-6">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <h3 className="text-lg font-semibold text-gray-900">{app.title}</h3>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(app.status)}`}>
                        {app.status.replace('-', ' ')}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 mb-2">{app.organization}</p>
                    <p className="text-gray-700 text-sm line-clamp-2">{app.description}</p>
                  </div>
                </div>

                <div className="space-y-2 mb-4">
                  <div className="flex items-center text-sm text-gray-600">
                    <DollarSign className="h-4 w-4 mr-2" />
                    {app.funding.amount ? formatCurrency(app.funding.amount) : 'Varies'}
                    {app.funding.equity && ` (${app.funding.equity}% equity)`}
                  </div>
                  <div className="flex items-center text-sm text-gray-600">
                    <MapPin className="h-4 w-4 mr-2" />
                    {app.location}
                  </div>
                  <div className="flex items-center text-sm text-gray-600">
                    <Clock className="h-4 w-4 mr-2" />
                    {getDaysUntilDeadline(app.deadline)} days left
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(app.difficulty)}`}>
                      {app.difficulty}
                    </span>
                    <span className="text-xs text-gray-500">
                      {app.successRate}% success rate
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <button className="px-3 py-1 text-blue-600 border border-blue-600 rounded hover:bg-blue-50 text-sm">
                      View
                    </button>
                    <button className="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm">
                      Apply
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Upload Section */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">Upload Your Application</h2>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div
            {...getRootProps()}
            className={`border-2 border-dashed rounded-lg flex flex-col items-center justify-center cursor-pointer transition-colors p-8
              ${isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-400'}`}
          >
            <input {...getInputProps()} />
            <UploadIcon className="h-16 w-16 text-gray-400 mb-4" />
            <p className="text-lg font-medium text-gray-600 mb-2">Upload Application</p>
            <p className="text-sm text-gray-500 text-center">
              Drop an application file or click to select
            </p>
          </div>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Application Name</label>
              <input
                type="text"
                value={applicationName}
                onChange={(e) => setApplicationName(e.target.value)}
                placeholder="Enter application name"
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Application Type</label>
              <select
                value={applicationType}
                onChange={(e) => setApplicationType(e.target.value)}
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                {applicationTypes.map(type => (
                  <option key={type.id} value={type.id}>{type.title}</option>
                ))}
              </select>
            </div>
            <button
              onClick={handleSave}
              className="w-full flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <Save className="h-5 w-5 mr-2" />
              Save Application
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Applications;


=== FILE: client/src/pages/industry-analysis.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  TrendingUp, BarChart3, PieChart, Globe, Building, Users, DollarSign,
  ArrowUp, ArrowDown, Target, Zap, Shield, Award, Clock, Star, AlertCircle
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface MarketTrend {
  id: string;
  name: string;
  impact: 'high' | 'medium' | 'low';
  direction: 'up' | 'down' | 'stable';
  description: string;
  timeframe: string;
  confidence: number;
}

interface IndustryMetric {
  id: string;
  name: string;
  value: number;
  unit: string;
  change: number;
  trend: 'up' | 'down' | 'stable';
  benchmark: number;
}

interface CompetitorAnalysis {
  id: string;
  name: string;
  marketShare: number;
  revenue: number;
  growth: number;
  strengths: string[];
  recentMoves: string[];
}

function IndustryAnalysis() {
  const { id } = useParams();
  const [activeTab, setActiveTab] = useState('overview');

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Mock data for market trends
  const marketTrends: MarketTrend[] = [
    {
      id: 'ai-adoption',
      name: 'AI & Machine Learning Adoption',
      impact: 'high',
      direction: 'up',
      description: 'Rapid adoption of AI technologies across industries',
      timeframe: '2024-2026',
      confidence: 85
    },
    {
      id: 'remote-work',
      name: 'Remote Work Revolution',
      impact: 'medium',
      direction: 'up',
      description: 'Permanent shift to hybrid and remote work models',
      timeframe: '2024-2025',
      confidence: 92
    },
    {
      id: 'sustainability',
      name: 'Sustainability Focus',
      impact: 'high',
      direction: 'up',
      description: 'Increased emphasis on ESG and sustainable practices',
      timeframe: '2024-2027',
      confidence: 78
    },
    {
      id: 'cybersecurity',
      name: 'Cybersecurity Concerns',
      impact: 'high',
      direction: 'up',
      description: 'Growing cybersecurity threats and regulations',
      timeframe: '2024-2026',
      confidence: 88
    }
  ];

  const industryMetrics: IndustryMetric[] = [
    {
      id: 'market-size',
      name: 'Total Addressable Market',
      value: 45.2,
      unit: 'Billion USD',
      change: 12.5,
      trend: 'up',
      benchmark: 50.0
    },
    {
      id: 'growth-rate',
      name: 'Annual Growth Rate',
      value: 8.7,
      unit: '%',
      change: 2.1,
      trend: 'up',
      benchmark: 6.5
    },
    {
      id: 'competition',
      name: 'Competition Level',
      value: 7.2,
      unit: '/10',
      change: -0.5,
      trend: 'down',
      benchmark: 6.0
    },
    {
      id: 'barriers',
      name: 'Entry Barriers',
      value: 6.8,
      unit: '/10',
      change: 1.2,
      trend: 'up',
      benchmark: 5.5
    }
  ];

  const competitors: CompetitorAnalysis[] = [
    {
      id: 'competitor-1',
      name: 'Industry Leader A',
      marketShare: 25,
      revenue: 1200000000,
      growth: 15.2,
      strengths: ['Brand recognition', 'Global presence', 'R&D investment'],
      recentMoves: ['Acquired 3 companies', 'Launched AI platform', 'Expanded to Asia']
    },
    {
      id: 'competitor-2',
      name: 'Fast Growing B',
      marketShare: 18,
      revenue: 850000000,
      growth: 28.7,
      strengths: ['Innovation', 'Agile development', 'Customer focus'],
      recentMoves: ['Raised $200M Series C', 'Hired 200 engineers', 'New product launch']
    },
    {
      id: 'competitor-3',
      name: 'Established C',
      marketShare: 22,
      revenue: 950000000,
      growth: 8.3,
      strengths: ['Market experience', 'Customer relationships', 'Stable operations'],
      recentMoves: ['Partnership with Microsoft', 'Digital transformation', 'Sustainability initiative']
    }
  ];

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high': return 'text-red-600 bg-red-50';
      case 'medium': return 'text-yellow-600 bg-yellow-50';
      case 'low': return 'text-green-600 bg-green-50';
      default: return 'text-gray-600 bg-gray-50';
    }
  };

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'up': return <ArrowUp className="h-4 w-4 text-green-600" />;
      case 'down': return <ArrowDown className="h-4 w-4 text-red-600" />;
      default: return <div className="h-4 w-4 bg-gray-400 rounded-full" />;
    }
  };

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000000) {
      return `$${(amount / 1000000000).toFixed(1)}B`;
    } else if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(0)}M`;
    }
    return `$${amount}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <div className="p-2 bg-purple-100 rounded-lg">
              <TrendingUp className="h-6 w-6 text-purple-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900">
              Industry Analysis
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl">
            Deep dive into industry trends, market dynamics, and competitive landscape to inform strategic decisions.
          </p>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <DollarSign className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">$45.2B</p>
                  <p className="text-sm text-gray-600">Market Size</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 rounded-lg">
                  <TrendingUp className="h-5 w-5 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">8.7%</p>
                  <p className="text-sm text-gray-600">Growth Rate</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Users className="h-5 w-5 text-purple-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">127</p>
                  <p className="text-sm text-gray-600">Key Players</p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <Target className="h-5 w-5 text-orange-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900">7.2/10</p>
                  <p className="text-sm text-gray-600">Competition Level</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="trends">Market Trends</TabsTrigger>
            <TabsTrigger value="competitors">Competitors</TabsTrigger>
            <TabsTrigger value="opportunities">Opportunities</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <BarChart3 className="h-5 w-5" />
                    Industry Metrics
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {industryMetrics.map(metric => (
                    <div key={metric.id} className="space-y-2">
                      <div className="flex items-center justify-between">
                        <span className="font-medium">{metric.name}</span>
                        <div className="flex items-center gap-2">
                          {getTrendIcon(metric.trend)}
                          <span className="font-bold">{metric.value} {metric.unit}</span>
                        </div>
                      </div>
                      <div className="flex items-center justify-between text-sm text-gray-600">
                        <span>Benchmark: {metric.benchmark} {metric.unit}</span>
                        <span className={metric.change > 0 ? 'text-green-600' : 'text-red-600'}>
                          {metric.change > 0 ? '+' : ''}{metric.change}%
                        </span>
                      </div>
                      <Progress 
                        value={(metric.value / metric.benchmark) * 100} 
                        className="h-2" 
                      />
                    </div>
                  ))}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <PieChart className="h-5 w-5" />
                    Market Share Distribution
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {competitors.map(competitor => (
                      <div key={competitor.id} className="space-y-2">
                        <div className="flex items-center justify-between">
                          <span className="font-medium">{competitor.name}</span>
                          <span className="font-bold">{competitor.marketShare}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div 
                            className="bg-blue-600 h-2 rounded-full" 
                            style={{ width: `${competitor.marketShare}%` }}
                          />
                        </div>
                        <div className="flex justify-between text-sm text-gray-600">
                          <span>Revenue: {formatCurrency(competitor.revenue)}</span>
                          <span className="text-green-600">+{competitor.growth}% growth</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Market Trends Tab */}
          <TabsContent value="trends" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {marketTrends.map(trend => (
                <Card key={trend.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg">{trend.name}</CardTitle>
                      <Badge className={getImpactColor(trend.impact)}>
                        {trend.impact} impact
                      </Badge>
                    </div>
                    <CardDescription>{trend.description}</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">Timeframe:</span>
                      <span className="font-medium">{trend.timeframe}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">Confidence:</span>
                      <div className="flex items-center gap-2">
                        <Progress value={trend.confidence} className="w-20 h-2" />
                        <span className="font-medium">{trend.confidence}%</span>
                      </div>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">Direction:</span>
                      <div className="flex items-center gap-1">
                        {getTrendIcon(trend.direction)}
                        <span className="font-medium capitalize">{trend.direction}</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Competitors Tab */}
          <TabsContent value="competitors" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {competitors.map(competitor => (
                <Card key={competitor.id}>
                  <CardHeader>
                    <CardTitle>{competitor.name}</CardTitle>
                    <CardDescription>{competitor.marketShare}% market share</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <p className="text-gray-600">Revenue</p>
                        <p className="font-bold">{formatCurrency(competitor.revenue)}</p>
                      </div>
                      <div>
                        <p className="text-gray-600">Growth</p>
                        <p className="font-bold text-green-600">+{competitor.growth}%</p>
                      </div>
                    </div>
                    <div>
                      <h4 className="font-medium text-gray-700 mb-2">Key Strengths</h4>
                      <ul className="space-y-1 text-sm">
                        {competitor.strengths.map((strength, index) => (
                          <li key={index} className="flex items-center gap-2">
                            <Star className="h-3 w-3 text-yellow-500" />
                            <span>{strength}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-medium text-gray-700 mb-2">Recent Moves</h4>
                      <ul className="space-y-1 text-sm">
                        {competitor.recentMoves.map((move, index) => (
                          <li key={index} className="flex items-center gap-2">
                            <Zap className="h-3 w-3 text-blue-500" />
                            <span>{move}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Opportunities Tab */}
          <TabsContent value="opportunities" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5 text-green-600" />
                    Market Opportunities
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3">
                    <li className="flex items-start gap-3">
                      <div className="p-1 bg-green-100 rounded-full mt-0.5">
                        <ArrowUp className="h-3 w-3 text-green-600" />
                      </div>
                      <div>
                        <p className="font-medium">Emerging Markets</p>
                        <p className="text-sm text-gray-600">Untapped markets in developing regions</p>
                      </div>
                    </li>
                    <li className="flex items-start gap-3">
                      <div className="p-1 bg-blue-100 rounded-full mt-0.5">
                        <Zap className="h-3 w-3 text-blue-600" />
                      </div>
                      <div>
                        <p className="font-medium">Technology Integration</p>
                        <p className="text-sm text-gray-600">AI and automation opportunities</p>
                      </div>
                    </li>
                    <li className="flex items-start gap-3">
                      <div className="p-1 bg-purple-100 rounded-full mt-0.5">
                        <Users className="h-3 w-3 text-purple-600" />
                      </div>
                      <div>
                        <p className="font-medium">Customer Segments</p>
                        <p className="text-sm text-gray-600">New customer segments to target</p>
                      </div>
                    </li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Shield className="h-5 w-5 text-orange-600" />
                    Risk Factors
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3">
                    <li className="flex items-start gap-3">
                      <div className="p-1 bg-red-100 rounded-full mt-0.5">
                        <ArrowDown className="h-3 w-3 text-red-600" />
                      </div>
                      <div>
                        <p className="font-medium">Economic Downturn</p>
                        <p className="text-sm text-gray-600">Potential recession impact</p>
                      </div>
                    </li>
                    <li className="flex items-start gap-3">
                      <div className="p-1 bg-yellow-100 rounded-full mt-0.5">
                        <AlertCircle className="h-3 w-3 text-yellow-600" />
                      </div>
                      <div>
                        <p className="font-medium">Regulatory Changes</p>
                        <p className="text-sm text-gray-600">New compliance requirements</p>
                      </div>
                    </li>
                    <li className="flex items-start gap-3">
                      <div className="p-1 bg-orange-100 rounded-full mt-0.5">
                        <Building className="h-3 w-3 text-orange-600" />
                      </div>
                      <div>
                        <p className="font-medium">Competition</p>
                        <p className="text-sm text-gray-600">Increased competitive pressure</p>
                      </div>
                    </li>
                  </ul>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

export default IndustryAnalysis;


=== FILE: client/src/pages/analysis.tsx ===

import React, { useState } from 'react';
import { useParams } from 'wouter';
import { useQuery } from '@tanstack/react-query';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  AlertCircle, ArrowDown, ArrowUp, Building2, DollarSign, 
  TrendingUp, Users, AlertTriangle, Check, ChevronUp,
  Award, LineChart, Target, BarChart2, Clock
} from 'lucide-react';

function Analysis() {
  const { id } = useParams();
  
  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
  });

  // Fetch analysis for this plan
  const { data: analysis, isLoading: isLoadingAnalysis } = useQuery({
    queryKey: [`/api/business-plans/${id}/analysis`],
    enabled: !!id
  });
  
  if (isLoadingPlan || isLoadingAnalysis) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Default data if API doesn't return anything yet
  const analysisData = {
    totalScore: 92.22,
    ranking: 13,
    companyValue: "$2.5M",
    planScores: {
      spelling: 94.38,
      structure: 79.50,
      deckLength: 92.80,
      clarity: 74.49
    },
    businessScores: {
      foundingTeam: 100,
      market: 100,
      product: 75,
      traction: 80
    },
    financialMetrics: {
      grossProfitMargin: 40.83,
      operatingExpenseRatio: 25.01,
      netProfitMargin: 15.82,
      revenueGrowth: 127.4,
      customerAcquisitionCost: 218,
      lifeTimeValue: 1450,
      burnRate: 132000,
      runway: 18.5
    },
    investmentMetrics: {
      roi: 87.5,
      breakEvenTime: 2.3,
      fundingRounds: 1,
      equityDilution: 15,
      discountedCashFlow: 4.8,
      capTable: {
        founders: 85,
        investors: 15,
        esop: 0
      }
    },
    riskProfile: {
      marketRisk: 35,
      executionRisk: 22,
      financialRisk: 28,
      teamRisk: 14,
      competitiveRisk: 42,
      regulatoryRisk: 19
    },
    industryComparison: {
      valuationMultiple: 3.8,
      avgGrowthRate: 62.4,
      marketSharePotential: 1.8,
      innovationScore: 72.1
    },
    founderTeam: {
      roles: ["CEO", "CFO", "CIO", "CTO"],
      experience: "10 years",
      connections: 1700,
      previousExits: 1,
      domainExpertise: 78,
      teamCompleteness: 92
    }
  };

  // Additional metrics for different user perspectives
  const investorPerspective = {
    dealAttractiveness: 87,
    potentialMultiple: "4.2x",
    timeToExit: "5-7 years",
    investmentReadiness: 92,
    competitiveAnalysis: [
      { competitor: "Market Leader", valuation: "$65M", growth: 48, marketShare: 32 },
      { competitor: "This Business", valuation: "$2.5M", growth: 127, marketShare: 1.8 },
      { competitor: "Emerging Player", valuation: "$12M", growth: 89, marketShare: 7.2 }
    ],
    swotAnalysis: {
      strengths: ["Strong founding team", "Innovative product", "Growing market"],
      weaknesses: ["Limited track record", "Cash burn rate", "Customer acquisition cost"],
      opportunities: ["International expansion", "New product lines", "Strategic partnerships"],
      threats: ["Increasing competition", "Regulatory changes", "Economic downturn"]
    }
  };

  const lenderPerspective = {
    creditworthiness: 83,
    debtServiceCoverageRatio: 2.4,
    collateralValue: "$1.2M",
    debtEquityRatio: 0.35,
    cashflowStability: 78,
    repaymentCapacity: 91,
    riskRating: "B+",
    recommendedLoanTerms: {
      maxAmount: "$800K",
      interestRate: "8.5-9.5%",
      term: "60 months",
      type: "Term loan with monthly payments"
    }
  };

  const partnerPerspective = {
    strategicFit: 92,
    revenueOpportunity: "$350K annually",
    resourceRequirements: "Moderate",
    collaborationModel: "Co-marketing and integration",
    timeToValue: "3-4 months",
    partnershipReadiness: 87,
    recommendedNextSteps: [
      "Technical integration planning",
      "Joint marketing strategy",
      "Contract negotiation",
      "Partner enablement program"
    ]
  };
  
  const renderScoreBar = (score: number, color: string = "bg-blue-600") => (
    <div className="flex items-center">
      <div className="w-48 h-2 bg-gray-200 rounded-full mr-3">
        <div className={`h-2 ${color} rounded-full`} style={{ width: `${score}%` }}></div>
      </div>
      <span className="text-gray-800 font-medium">{score.toFixed(2)}</span>
    </div>
  );
  
  const renderGauge = (value: number, color: string = "text-blue-600") => (
    <div className="relative w-24 h-24">
      <svg className="w-24 h-24 transform -rotate-90">
        <circle
          className="text-gray-200"
          strokeWidth="8"
          stroke="currentColor"
          fill="transparent"
          r="40"
          cx="48"
          cy="48"
        />
        <circle
          className={color}
          strokeWidth="8"
          strokeDasharray={251.2}
          strokeDashoffset={251.2 - (value / 100) * 251.2}
          strokeLinecap="round"
          stroke="currentColor"
          fill="transparent"
          r="40"
          cx="48"
          cy="48"
        />
      </svg>
      <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
        <span className="text-xl font-bold">{value}%</span>
      </div>
    </div>
  );

  const renderRiskIndicator = (risk: number) => {
    let color = "text-green-500";
    if (risk > 60) color = "text-red-500";
    else if (risk > 30) color = "text-amber-500";
    
    return (
      <div className="flex items-center">
        <Progress value={risk} className="w-24 h-2 mr-2" />
        <span className={`text-sm font-medium ${color}`}>{risk}%</span>
      </div>
    );
  };

  const getComparativeIndicator = (value: number, benchmark: number) => {
    const diff = value - benchmark;
    if (diff > 0) {
      return <ChevronUp className="h-4 w-4 text-green-500" />;
    } else if (diff < 0) {
      return <ArrowDown className="h-4 w-4 text-red-500" />;
    }
    return null;
  };

  return (
    <div className="space-y-8">
      {/* Header Section */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-6">
          Scoring & Ranking{businessPlan && typeof businessPlan === 'object' && 'name' in businessPlan ? ` for ${businessPlan.name}` : ''}
        </h1>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-gray-50 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <span className="text-gray-600">Total Score</span>
              <span className="text-3xl font-bold text-blue-600">{analysisData.totalScore}</span>
            </div>
          </div>
          <div className="bg-gray-50 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <span className="text-gray-600">Your Ranking</span>
              <div className="text-right">
                <span className="text-3xl font-bold text-blue-600">#{analysisData.ranking}</span>
                <p className="text-sm text-gray-500">(top 5% of startups)</p>
              </div>
            </div>
          </div>
          <div className="bg-gray-50 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <span className="text-gray-600">Company Value</span>
              <span className="text-3xl font-bold text-blue-600">{analysisData.companyValue}</span>
            </div>
          </div>
        </div>
      </div>

      {/* Role-Based Analysis Tabs */}
      <Tabs defaultValue="entrepreneur" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="entrepreneur">Entrepreneur</TabsTrigger>
          <TabsTrigger value="investor">Investor</TabsTrigger>
          <TabsTrigger value="lender">Lender</TabsTrigger>
          <TabsTrigger value="partner">Partner</TabsTrigger>
        </TabsList>

        {/* Entrepreneur Perspective */}
        <TabsContent value="entrepreneur" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4">Business Plan Analysis</h2>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-gray-600">Spelling</span>
                  {renderScoreBar(analysisData.planScores.spelling)}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-600">Structure</span>
                  {renderScoreBar(analysisData.planScores.structure)}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-600">Deck Length</span>
                  {renderScoreBar(analysisData.planScores.deckLength)}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-600">Clarity</span>
                  {renderScoreBar(analysisData.planScores.clarity)}
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4">Business Profile</h2>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-gray-600">Founding Team</span>
                  {renderScoreBar(analysisData.businessScores.foundingTeam, "bg-green-600")}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-600">Market</span>
                  {renderScoreBar(analysisData.businessScores.market, "bg-green-600")}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-600">Product</span>
                  {renderScoreBar(analysisData.businessScores.product, "bg-green-600")}
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-gray-600">Traction</span>
                  {renderScoreBar(analysisData.businessScores.traction, "bg-green-600")}
                </div>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4">Founding Team</h2>
              <div className="space-y-4">
                <div className="flex flex-wrap gap-2">
                  {analysisData.founderTeam.roles.map((role, index) => (
                    <span key={index} className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">{role}</span>
                  ))}
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-gray-50 p-3 rounded">
                    <p className="text-sm text-gray-600">Experience</p>
                    <p className="font-medium">{analysisData.founderTeam.experience}</p>
                  </div>
                  <div className="bg-gray-50 p-3 rounded">
                    <p className="text-sm text-gray-600">Network</p>
                    <p className="font-medium">{analysisData.founderTeam.connections} connections</p>
                  </div>
                  <div className="bg-gray-50 p-3 rounded">
                    <p className="text-sm text-gray-600">Domain Expertise</p>
                    <p className="font-medium">{analysisData.founderTeam.domainExpertise}%</p>
                  </div>
                  <div className="bg-gray-50 p-3 rounded">
                    <p className="text-sm text-gray-600">Previous Exits</p>
                    <p className="font-medium">{analysisData.founderTeam.previousExits}</p>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4">Financial Metrics</h2>
              <div className="grid grid-cols-3 gap-4">
                <div className="flex flex-col items-center">
                  {renderGauge(analysisData.financialMetrics.grossProfitMargin)}
                  <span className="mt-2 text-sm text-gray-600">Gross Profit Margin</span>
                </div>
                <div className="flex flex-col items-center">
                  {renderGauge(analysisData.financialMetrics.operatingExpenseRatio)}
                  <span className="mt-2 text-sm text-gray-600">Operating Expense Ratio</span>
                </div>
                <div className="flex flex-col items-center">
                  {renderGauge(analysisData.financialMetrics.netProfitMargin)}
                  <span className="mt-2 text-sm text-gray-600">Net Profit Margin</span>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4">Extended Financial Metrics</h2>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="text-sm font-medium text-gray-600 mb-1">Revenue Growth</h3>
                <div className="flex items-center">
                  <span className="text-2xl font-bold text-green-600 mr-2">{analysisData.financialMetrics.revenueGrowth}%</span>
                  <TrendingUp className="h-5 w-5 text-green-500" />
                </div>
                <p className="text-xs text-gray-500 mt-1">Year-over-Year</p>
              </div>
              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="text-sm font-medium text-gray-600 mb-1">Customer Acquisition Cost</h3>
                <div className="flex items-center">
                  <span className="text-2xl font-bold text-gray-800 mr-2">${analysisData.financialMetrics.customerAcquisitionCost}</span>
                </div>
                <p className="text-xs text-gray-500 mt-1">Per customer</p>
              </div>
              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="text-sm font-medium text-gray-600 mb-1">Customer Lifetime Value</h3>
                <div className="flex items-center">
                  <span className="text-2xl font-bold text-gray-800 mr-2">${analysisData.financialMetrics.lifeTimeValue}</span>
                </div>
                <p className="text-xs text-green-600 mt-1">LTV:CAC Ratio: 6.7x</p>
              </div>
              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="text-sm font-medium text-gray-600 mb-1">Runway</h3>
                <div className="flex items-center">
                  <span className="text-2xl font-bold text-gray-800 mr-2">{analysisData.financialMetrics.runway}</span>
                  <span className="text-lg font-medium text-gray-600">months</span>
                </div>
                <p className="text-xs text-gray-500 mt-1">At current burn rate: ${analysisData.financialMetrics.burnRate}/mo</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4">Risk Analysis</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="col-span-1">
                <h3 className="text-lg font-medium text-gray-700 mb-3">Risk Profile</h3>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Market Risk</span>
                    {renderRiskIndicator(analysisData.riskProfile.marketRisk)}
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Execution Risk</span>
                    {renderRiskIndicator(analysisData.riskProfile.executionRisk)}
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Financial Risk</span>
                    {renderRiskIndicator(analysisData.riskProfile.financialRisk)}
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Team Risk</span>
                    {renderRiskIndicator(analysisData.riskProfile.teamRisk)}
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Competitive Risk</span>
                    {renderRiskIndicator(analysisData.riskProfile.competitiveRisk)}
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Regulatory Risk</span>
                    {renderRiskIndicator(analysisData.riskProfile.regulatoryRisk)}
                  </div>
                </div>
              </div>
              
              <div className="col-span-2">
                <h3 className="text-lg font-medium text-gray-700 mb-3">Areas for Improvement</h3>
                <div className="space-y-3">
                  <div className="flex items-start space-x-3 p-3 bg-amber-50 rounded-lg">
                    <AlertTriangle className="h-5 w-5 text-amber-500 flex-shrink-0 mt-0.5" />
                    <div>
                      <p className="text-sm font-medium text-amber-800">Competitive Positioning</p>
                      <p className="text-sm text-amber-700">Your product differentiation score is below industry average. Consider refining your unique value proposition.</p>
                    </div>
                  </div>
                  <div className="flex items-start space-x-3 p-3 bg-amber-50 rounded-lg">
                    <AlertTriangle className="h-5 w-5 text-amber-500 flex-shrink-0 mt-0.5" />
                    <div>
                      <p className="text-sm font-medium text-amber-800">Cash Burn Rate</p>
                      <p className="text-sm text-amber-700">Your burn rate is 28% above the benchmark for similar stage companies. Review your cost structure.</p>
                    </div>
                  </div>
                  <div className="flex items-start space-x-3 p-3 bg-green-50 rounded-lg">
                    <Check className="h-5 w-5 text-green-500 flex-shrink-0 mt-0.5" />
                    <div>
                      <p className="text-sm font-medium text-green-800">Team Composition</p>
                      <p className="text-sm text-green-700">Your founding team skill coverage is excellent, with complementary expertise across key areas.</p>
                    </div>
                  </div>
                  <div className="flex items-start space-x-3 p-3 bg-green-50 rounded-lg">
                    <Check className="h-5 w-5 text-green-500 flex-shrink-0 mt-0.5" />
                    <div>
                      <p className="text-sm font-medium text-green-800">Market Opportunity</p>
                      <p className="text-sm text-green-700">Your target market is growing at 23% annually, presenting significant expansion opportunities.</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </TabsContent>

        {/* Investor Perspective */}
        <TabsContent value="investor" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="col-span-1">
              <Card className="h-full">
                <CardHeader className="pb-2">
                  <CardTitle className="text-xl">Investment Metrics</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <div className="flex items-center">
                        <Target className="h-5 w-5 text-blue-600 mr-2" />
                        <span className="text-sm text-gray-600">Deal Attractiveness</span>
                      </div>
                      <div className="font-medium">{investorPerspective.dealAttractiveness}%</div>
                    </div>
                    <div className="flex justify-between items-center">
                      <div className="flex items-center">
                        <TrendingUp className="h-5 w-5 text-green-600 mr-2" />
                        <span className="text-sm text-gray-600">Potential Multiple</span>
                      </div>
                      <div className="font-medium">{investorPerspective.potentialMultiple}</div>
                    </div>
                    <div className="flex justify-between items-center">
                      <div className="flex items-center">
                        <Clock className="h-5 w-5 text-amber-600 mr-2" />
                        <span className="text-sm text-gray-600">Time to Exit</span>
                      </div>
                      <div className="font-medium">{investorPerspective.timeToExit}</div>
                    </div>
                    <div className="flex justify-between items-center">
                      <div className="flex items-center">
                        <Award className="h-5 w-5 text-indigo-600 mr-2" />
                        <span className="text-sm text-gray-600">Investment Readiness</span>
                      </div>
                      <div className="font-medium">{investorPerspective.investmentReadiness}%</div>
                    </div>
                  </div>

                  <div className="pt-4 border-t">
                    <h3 className="text-lg font-medium text-gray-700 mb-3">Cap Table</h3>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-600">Founders</span>
                        <div className="flex items-center">
                          <Progress value={analysisData.investmentMetrics.capTable.founders} className="w-24 h-2 mr-2" />
                          <span className="text-sm">{analysisData.investmentMetrics.capTable.founders}%</span>
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-600">Investors</span>
                        <div className="flex items-center">
                          <Progress value={analysisData.investmentMetrics.capTable.investors} className="w-24 h-2 mr-2" />
                          <span className="text-sm">{analysisData.investmentMetrics.capTable.investors}%</span>
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-600">ESOP</span>
                        <div className="flex items-center">
                          <Progress value={analysisData.investmentMetrics.capTable.esop} className="w-24 h-2 mr-2" />
                          <span className="text-sm">{analysisData.investmentMetrics.capTable.esop}%</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="col-span-2">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-xl">SWOT Analysis</CardTitle>
                  <CardDescription>Key strengths, weaknesses, opportunities, and threats</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-green-50 p-4 rounded-lg">
                      <h3 className="text-base font-medium text-green-800 mb-2">Strengths</h3>
                      <ul className="space-y-1">
                        {investorPerspective.swotAnalysis.strengths.map((item, index) => (
                          <li key={index} className="text-sm text-green-700 flex items-start">
                            <Check className="h-4 w-4 text-green-600 mr-1 mt-0.5 flex-shrink-0" />
                            {item}
                          </li>
                        ))}
                      </ul>
                    </div>
                    <div className="bg-red-50 p-4 rounded-lg">
                      <h3 className="text-base font-medium text-red-800 mb-2">Weaknesses</h3>
                      <ul className="space-y-1">
                        {investorPerspective.swotAnalysis.weaknesses.map((item, index) => (
                          <li key={index} className="text-sm text-red-700 flex items-start">
                            <AlertCircle className="h-4 w-4 text-red-600 mr-1 mt-0.5 flex-shrink-0" />
                            {item}
                          </li>
                        ))}
                      </ul>
                    </div>
                    <div className="bg-blue-50 p-4 rounded-lg">
                      <h3 className="text-base font-medium text-blue-800 mb-2">Opportunities</h3>
                      <ul className="space-y-1">
                        {investorPerspective.swotAnalysis.opportunities.map((item, index) => (
                          <li key={index} className="text-sm text-blue-700 flex items-start">
                            <TrendingUp className="h-4 w-4 text-blue-600 mr-1 mt-0.5 flex-shrink-0" />
                            {item}
                          </li>
                        ))}
                      </ul>
                    </div>
                    <div className="bg-amber-50 p-4 rounded-lg">
                      <h3 className="text-base font-medium text-amber-800 mb-2">Threats</h3>
                      <ul className="space-y-1">
                        {investorPerspective.swotAnalysis.threats.map((item, index) => (
                          <li key={index} className="text-sm text-amber-700 flex items-start">
                            <AlertTriangle className="h-4 w-4 text-amber-600 mr-1 mt-0.5 flex-shrink-0" />
                            {item}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>

          <div className="grid grid-cols-1 gap-6">
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4">Competitive Analysis</h2>
              <div className="overflow-x-auto">
                <table className="min-w-full">
                  <thead>
                    <tr className="bg-gray-50 border-b">
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">Company</th>
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">Valuation</th>
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">Growth (%)</th>
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">Market Share (%)</th>
                      <th className="text-left py-3 px-4 text-sm font-medium text-gray-500">Competitive Position</th>
                    </tr>
                  </thead>
                  <tbody>
                    {investorPerspective.competitiveAnalysis.map((competitor, index) => (
                      <tr key={index} className={`border-b ${competitor.competitor === "This Business" ? "bg-blue-50" : ""}`}>
                        <td className="py-3 px-4 text-sm font-medium">
                          {competitor.competitor}
                          {competitor.competitor === "This Business" && (
                            <Badge className="ml-2 bg-blue-100 text-blue-800">You</Badge>
                          )}
                        </td>
                        <td className="py-3 px-4 text-sm">{competitor.valuation}</td>
                        <td className="py-3 px-4 text-sm">
                          <span className={competitor.growth > 100 ? "text-green-600 font-medium" : ""}>{competitor.growth}%</span>
                        </td>
                        <td className="py-3 px-4 text-sm">{competitor.marketShare}%</td>
                        <td className="py-3 px-4 text-sm">
                          {competitor.competitor === "Market Leader" && (
                            <Badge className="bg-amber-100 text-amber-800">Incumbent</Badge>
                          )}
                          {competitor.competitor === "This Business" && (
                            <Badge className="bg-green-100 text-green-800">Disruptor</Badge>
                          )}
                          {competitor.competitor === "Emerging Player" && (
                            <Badge className="bg-purple-100 text-purple-800">Challenger</Badge>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>ROI Potential</CardTitle>
                    <DollarSign className="h-5 w-5 text-green-600" />
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-4xl font-bold text-green-600 mb-2">{analysisData.investmentMetrics.roi}%</div>
                  <p className="text-sm text-gray-600">Projected 5-year ROI based on market growth and execution metrics</p>
                  <div className="mt-4 pt-4 border-t">
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">Break-even time:</span>
                      <span className="font-medium">{analysisData.investmentMetrics.breakEvenTime} years</span>
                    </div>
                    <div className="flex justify-between text-sm mt-2">
                      <span className="text-gray-600">DCF multiple:</span>
                      <span className="font-medium">{analysisData.investmentMetrics.discountedCashFlow}x</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>Market Metrics</CardTitle>
                    <LineChart className="h-5 w-5 text-blue-600" />
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <div className="text-sm text-gray-600 mb-1">Valuation Multiple</div>
                      <div className="flex items-center">
                        <span className="text-2xl font-bold text-gray-800 mr-2">{analysisData.industryComparison.valuationMultiple}x</span>
                        <span className="text-xs text-amber-600">(Industry avg: 3.2x)</span>
                      </div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-1">Average Growth Rate</div>
                      <div className="flex items-center">
                        <span className="text-2xl font-bold text-gray-800 mr-2">{analysisData.industryComparison.avgGrowthRate}%</span>
                        <span className="text-xs text-green-600">(Industry avg: 38.5%)</span>
                      </div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-1">Market Share Potential</div>
                      <div className="flex items-center">
                        <span className="text-2xl font-bold text-gray-800 mr-2">{analysisData.industryComparison.marketSharePotential}%</span>
                        <span className="text-xs text-gray-600">(5-year projection)</span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>Team Assessment</CardTitle>
                    <Users className="h-5 w-5 text-purple-600" />
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <div className="text-sm text-gray-600 mb-1">Team Completeness</div>
                      <div className="flex items-center">
                        <Progress value={analysisData.founderTeam.teamCompleteness} className="w-full h-2 mr-2" />
                        <span className="text-sm font-medium">{analysisData.founderTeam.teamCompleteness}%</span>
                      </div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-1">Domain Expertise</div>
                      <div className="flex items-center">
                        <Progress value={analysisData.founderTeam.domainExpertise} className="w-full h-2 mr-2" />
                        <span className="text-sm font-medium">{analysisData.founderTeam.domainExpertise}%</span>
                      </div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-1">Previous Exits</div>
                      <div className="flex items-center">
                        <span className="text-xl font-bold text-gray-800">{analysisData.founderTeam.previousExits}</span>
                      </div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-1">Network Strength</div>
                      <div className="flex items-center">
                        <span className="text-xl font-bold text-gray-800">{analysisData.founderTeam.connections}</span>
                        <span className="text-sm text-gray-600 ml-1">connections</span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>

        {/* Lender Perspective */}
        <TabsContent value="lender" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="col-span-2">
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl">Credit Analysis</CardTitle>
                  <CardDescription>Detailed credit assessment for lending decisions</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <h3 className="text-sm font-medium text-gray-600 mb-2">Creditworthiness Score</h3>
                      <div className="flex items-center justify-between">
                        <span className="text-3xl font-bold text-blue-600">{lenderPerspective.creditworthiness}</span>
                        <Badge className={`
                          ${lenderPerspective.creditworthiness >= 80 ? 'bg-green-100 text-green-800' : 
                          lenderPerspective.creditworthiness >= 70 ? 'bg-blue-100 text-blue-800' :
                          lenderPerspective.creditworthiness >= 60 ? 'bg-amber-100 text-amber-800' : 
                          'bg-red-100 text-red-800'}
                        `}>
                          {lenderPerspective.creditworthiness >= 80 ? 'Excellent' : 
                          lenderPerspective.creditworthiness >= 70 ? 'Good' :
                          lenderPerspective.creditworthiness >= 60 ? 'Fair' : 
                          'Poor'}
                        </Badge>
                      </div>
                      <p className="text-xs text-gray-500 mt-1">Based on financial history and projections</p>
                    </div>
                    
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <h3 className="text-sm font-medium text-gray-600 mb-2">Risk Rating</h3>
                      <div className="flex items-center justify-between">
                        <span className="text-3xl font-bold text-blue-600">{lenderPerspective.riskRating}</span>
                        <Badge className="bg-amber-100 text-amber-800">Medium Risk</Badge>
                      </div>
                      <p className="text-xs text-gray-500 mt-1">Internal risk classification</p>
                    </div>
                    
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <h3 className="text-sm font-medium text-gray-600 mb-2">Debt Service Coverage Ratio</h3>
                      <div className="flex items-center">
                        <span className="text-2xl font-bold text-gray-800 mr-2">{lenderPerspective.debtServiceCoverageRatio}</span>
                        {lenderPerspective.debtServiceCoverageRatio >= 1.5 ? (
                          <Check className="h-5 w-5 text-green-500" />
                        ) : (
                          <AlertCircle className="h-5 w-5 text-amber-500" />
                        )}
                      </div>
                      <p className="text-xs text-gray-500 mt-1">Minimum threshold: 1.5</p>
                    </div>
                    
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <h3 className="text-sm font-medium text-gray-600 mb-2">Debt-to-Equity Ratio</h3>
                      <div className="flex items-center">
                        <span className="text-2xl font-bold text-gray-800 mr-2">{lenderPerspective.debtEquityRatio}</span>
                        {lenderPerspective.debtEquityRatio <= 0.5 ? (
                          <Check className="h-5 w-5 text-green-500" />
                        ) : (
                          <AlertCircle className="h-5 w-5 text-amber-500" />
                        )}
                      </div>
                      <p className="text-xs text-gray-500 mt-1">Target threshold: less than 0.5</p>
                    </div>
                  </div>
                  
                  <div className="pt-4 border-t grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <h3 className="text-base font-medium text-gray-700 mb-3">Cash Flow Stability</h3>
                      <div className="flex items-center mb-3">
                        <Progress 
                          value={lenderPerspective.cashflowStability} 
                          className="w-full h-2 mr-2" 
                        />
                        <span className="text-sm font-medium">{lenderPerspective.cashflowStability}%</span>
                      </div>
                      <p className="text-sm text-gray-600">Based on 24-month revenue history and volatility analysis</p>
                    </div>
                    
                    <div>
                      <h3 className="text-base font-medium text-gray-700 mb-3">Repayment Capacity</h3>
                      <div className="flex items-center mb-3">
                        <Progress 
                          value={lenderPerspective.repaymentCapacity} 
                          className="w-full h-2 mr-2"
                        />
                        <span className="text-sm font-medium">{lenderPerspective.repaymentCapacity}%</span>
                      </div>
                      <p className="text-sm text-gray-600">Based on financial projections and stress testing</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
            
            <div className="col-span-1">
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl">Recommended Terms</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <h3 className="text-sm font-medium text-gray-600 mb-2">Maximum Loan Amount</h3>
                    <div className="text-2xl font-bold text-blue-600">{lenderPerspective.recommendedLoanTerms.maxAmount}</div>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-600 mb-2">Interest Rate Range</h3>
                    <div className="text-2xl font-bold text-gray-800">{lenderPerspective.recommendedLoanTerms.interestRate}</div>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-600 mb-2">Term Length</h3>
                    <div className="text-2xl font-bold text-gray-800">{lenderPerspective.recommendedLoanTerms.term}</div>
                  </div>
                  
                  <div className="border-t pt-4 mt-4">
                    <h3 className="text-sm font-medium text-gray-600 mb-2">Loan Type</h3>
                    <div className="text-base text-gray-800">{lenderPerspective.recommendedLoanTerms.type}</div>
                  </div>
                  
                  <div className="border-t pt-4 mt-4">
                    <h3 className="text-sm font-medium text-gray-600 mb-2">Collateral Value</h3>
                    <div className="text-xl font-bold text-gray-800">{lenderPerspective.collateralValue}</div>
                    <p className="text-xs text-gray-500 mt-1">Based on asset valuation</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4">Financial Health Indicators</h2>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div>
                <h3 className="text-base font-medium text-gray-700 mb-3">Revenue Trend</h3>
                <div className="flex items-center">
                  <BarChart2 className="h-8 w-8 text-blue-500 mr-3" />
                  <div>
                    <div className="text-2xl font-bold text-green-600">+{analysisData.financialMetrics.revenueGrowth}%</div>
                    <div className="text-sm text-gray-600">Year-over-Year</div>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 className="text-base font-medium text-gray-700 mb-3">Gross Margin</h3>
                <div className="flex items-center">
                  <TrendingUp className="h-8 w-8 text-green-500 mr-3" />
                  <div>
                    <div className="text-2xl font-bold text-gray-800">{analysisData.financialMetrics.grossProfitMargin}%</div>
                    <div className="text-sm text-gray-600">Industry Avg: 34.5%</div>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 className="text-base font-medium text-gray-700 mb-3">Operating Expense</h3>
                <div className="flex items-center">
                  <DollarSign className="h-8 w-8 text-amber-500 mr-3" />
                  <div>
                    <div className="text-2xl font-bold text-gray-800">{analysisData.financialMetrics.operatingExpenseRatio}%</div>
                    <div className="text-sm text-gray-600">Industry Avg: 27.8%</div>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 className="text-base font-medium text-gray-700 mb-3">Cash Runway</h3>
                <div className="flex items-center">
                  <AlertCircle className="h-8 w-8 text-blue-500 mr-3" />
                  <div>
                    <div className="text-2xl font-bold text-gray-800">{analysisData.financialMetrics.runway} mo</div>
                    <div className="text-sm text-gray-600">Based on current burn</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </TabsContent>

        {/* Partner Perspective */}
        <TabsContent value="partner" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="col-span-1">
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl">Partnership Metrics</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <h3 className="text-sm font-medium text-gray-600 mb-2">Strategic Fit</h3>
                    <div className="flex items-center">
                      <Progress 
                        value={partnerPerspective.strategicFit} 
                        className="w-full h-2 mr-2"
                      />
                      <span className="text-sm font-medium">{partnerPerspective.strategicFit}%</span>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-600 mb-2">Revenue Opportunity</h3>
                    <div className="text-xl font-bold text-blue-600">{partnerPerspective.revenueOpportunity}</div>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-600 mb-2">Resource Requirements</h3>
                    <Badge className="bg-amber-100 text-amber-800">{partnerPerspective.resourceRequirements}</Badge>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-600 mb-2">Time to Value</h3>
                    <div className="text-xl font-bold text-gray-800">{partnerPerspective.timeToValue}</div>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-600 mb-2">Partnership Readiness</h3>
                    <div className="flex items-center">
                      <Progress 
                        value={partnerPerspective.partnershipReadiness} 
                        className="w-full h-2 mr-2"
                      />
                      <span className="text-sm font-medium">{partnerPerspective.partnershipReadiness}%</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
            
            <div className="col-span-2">
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl">Collaboration Model</CardTitle>
                  <CardDescription>Recommended approach for partnership</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="p-4 bg-blue-50 rounded-lg mb-6">
                    <h3 className="text-lg font-medium text-blue-800 mb-2">Recommended Model</h3>
                    <p className="text-base text-blue-700">{partnerPerspective.collaborationModel}</p>
                  </div>
                  
                  <h3 className="text-lg font-medium text-gray-700 mb-3">Next Steps</h3>
                  <div className="space-y-2">
                    {partnerPerspective.recommendedNextSteps.map((step, index) => (
                      <div key={index} className="flex items-start space-x-3">
                        <div className="flex-shrink-0 w-6 h-6 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center">
                          {index + 1}
                        </div>
                        <div className="text-gray-700">{step}</div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4">Market Opportunity Assessment</h2>
              <div className="space-y-4">
                <div>
                  <h3 className="text-base font-medium text-gray-700 mb-2">Target Market Growth</h3>
                  <div className="flex items-center">
                    <div className="flex-1">
                      <Progress value={82} className="h-2" />
                    </div>
                    <span className="ml-2 font-medium text-green-600">+23% CAGR</span>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">Market growing faster than industry average (15%)</p>
                </div>
                
                <div>
                  <h3 className="text-base font-medium text-gray-700 mb-2">Customer Alignment</h3>
                  <div className="flex items-center">
                    <div className="flex-1">
                      <Progress value={78} className="h-2" />
                    </div>
                    <span className="ml-2 font-medium">78%</span>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">Shared customer profile with high cross-selling potential</p>
                </div>
                
                <div>
                  <h3 className="text-base font-medium text-gray-700 mb-2">Competitive Differentiation</h3>
                  <div className="flex items-center">
                    <div className="flex-1">
                      <Progress value={65} className="h-2" />
                    </div>
                    <span className="ml-2 font-medium">65%</span>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">Products offer complementary features with limited overlap</p>
                </div>
                
                <div>
                  <h3 className="text-base font-medium text-gray-700 mb-2">International Expansion Potential</h3>
                  <div className="flex items-center">
                    <div className="flex-1">
                      <Progress value={72} className="h-2" />
                    </div>
                    <span className="ml-2 font-medium">72%</span>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">Good alignment with global expansion strategy</p>
                </div>
              </div>
            </div>
            
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4">Technology Assessment</h2>
              <div className="space-y-4">
                <div className="flex justify-between">
                  <div>
                    <h3 className="text-base font-medium text-gray-700">Product Maturity</h3>
                    <p className="text-sm text-gray-600">MVP with core features implemented</p>
                  </div>
                  <Badge className="bg-amber-100 text-amber-800">Beta</Badge>
                </div>
                
                <div className="flex justify-between">
                  <div>
                    <h3 className="text-base font-medium text-gray-700">Technical Stack</h3>
                    <p className="text-sm text-gray-600">React, Node.js, PostgreSQL</p>
                  </div>
                  <Badge className="bg-green-100 text-green-800">Compatible</Badge>
                </div>
                
                <div className="flex justify-between">
                  <div>
                    <h3 className="text-base font-medium text-gray-700">API Readiness</h3>
                    <p className="text-sm text-gray-600">RESTful APIs with documentation</p>
                  </div>
                  <Badge className="bg-green-100 text-green-800">Ready</Badge>
                </div>
                
                <div className="flex justify-between">
                  <div>
                    <h3 className="text-base font-medium text-gray-700">Security & Compliance</h3>
                    <p className="text-sm text-gray-600">Basic security measures in place</p>
                  </div>
                  <Badge className="bg-amber-100 text-amber-800">In Progress</Badge>
                </div>
                
                <div className="flex justify-between">
                  <div>
                    <h3 className="text-base font-medium text-gray-700">Scalability</h3>
                    <p className="text-sm text-gray-600">Architecture can support moderate growth</p>
                  </div>
                  <Badge className="bg-blue-100 text-blue-800">Scalable</Badge>
                </div>
              </div>
            </div>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}

export default Analysis;

=== FILE: client/src/pages/funding.tsx ===

import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'wouter';
import { 
  ArrowRight, Search, Filter, DollarSign, Building2, Globe, PieChart, Clock, Shield,
  TrendingUp, Users, Award, CheckCircle, AlertCircle, CreditCard, History, Info,
  BarChart2, HelpCircle, Wallet, Target, Gift, FileText, ExternalLink, BarChart, 
  TrendingDown, AlertTriangle, Star, Bell, Settings, Download, RefreshCw, Plus,
  Eye, Lock, Zap, ShieldCheck
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Slider } from '@/components/ui/slider';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

// Helper functions for the enhanced credit score meter
const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {
  const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;
  return {
    x: centerX + radius * Math.cos(angleInRadians),
    y: centerY + radius * Math.sin(angleInRadians),
  };
};

const describeArc = (x: number, y: number, radius: number, startAngle: number, endAngle: number): string => {
  const start = polarToCartesian(x, y, radius, endAngle);
  const end = polarToCartesian(x, y, radius, startAngle);
  const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';
  const d = ['M', start.x, start.y, 'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(' ');
  return d;
};

// Helper to generate a lighter shade of a color
const shadeColor = (color: string, percent: number) => {
  let R = parseInt(color.substring(1, 3), 16);
  let G = parseInt(color.substring(3, 5), 16);
  let B = parseInt(color.substring(5, 7), 16);

  R = Math.round(R * (100 + percent) / 100);
  G = Math.round(G * (100 + percent) / 100);
  B = Math.round(B * (100 + percent) / 100);

  R = (R < 255) ? R : 255;
  G = (G < 255) ? G : 255;
  B = (B < 255) ? B : 255;

  const RR = ((R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16));
  const GG = ((G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16));
  const BB = ((B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16));

  return "#" + RR + GG + BB;
};

interface Investor {
  id: number;
  name: string;
  type: 'angel' | 'vc' | 'pe';
  logo: string;
  minInvestment: number;
  maxInvestment: number;
  industries: string[];
  stages: string[];
  regions: string[];
  portfolio: number;
  successRate: number;
  matchScore: number;
}

interface Lender {
  id: number;
  name: string;
  type: 'bank' | 'credit-union' | 'online';
  logo: string;
  minLoan: number;
  maxLoan: number;
  interestRate: number;
  term: number;
  requirements: {
    minCreditScore: number;
    minTimeInBusiness: number;
    minAnnualRevenue: number;
  };
  matchScore: number;
}

interface Grant {
  id: number;
  name: string;
  provider: string;
  type: 'government' | 'foundation' | 'corporate';
  amount: number;
  deadline: string;
  eligibility: string[];
  sectors: string[];
  matchScore: number;
  description: string;
}

function Funding() {
  const { id } = useParams();
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIndustries, setSelectedIndustries] = useState<string[]>([]);
  const [fundingRange, setFundingRange] = useState([50000, 500000]);
  const [selectedBureau, setSelectedBureau] = useState("transunion");

  // Fetch business plan
  const { data: businessPlan, isLoading: isLoadingPlan } = useQuery({
    queryKey: [`/api/business-plans/${id}`],
    enabled: !!id
  });

  // Fetch user data for credit monitoring
  interface UserData {
    username: string;
    id: number;
    role: string;
  }
  
  const { data: userData } = useQuery<UserData>({
    queryKey: ['/api/user'],
  });

  const userName = userData?.username || "User";

  // Mock data for demonstrations
  const investors: Investor[] = [
    {
      id: 1,
      name: "Sequoia Capital",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 500000,
      maxInvestment: 10000000,
      industries: ["Software", "FinTech", "Healthcare"],
      stages: ["Seed", "Series A", "Series B"],
      regions: ["North America", "Europe", "Asia"],
      portfolio: 156,
      successRate: 0.78,
      matchScore: 92
    },
    {
      id: 2,
      name: "Andreessen Horowitz",
      type: "vc",
      logo: "https://via.placeholder.com/40",
      minInvestment: 1000000,
      maxInvestment: 20000000,
      industries: ["AI", "Blockchain", "Enterprise"],
      stages: ["Series A", "Series B", "Series C"],
      regions: ["North America"],
      portfolio: 289,
      successRate: 0.82,
      matchScore: 87
    },
    {
      id: 3,
      name: "Angel Investor Network",
      type: "angel",
      logo: "https://via.placeholder.com/40",
      minInvestment: 25000,
      maxInvestment: 250000,
      industries: ["Software", "E-commerce", "Mobile"],
      stages: ["Pre-seed", "Seed"],
      regions: ["North America", "Europe"],
      portfolio: 45,
      successRate: 0.65,
      matchScore: 94
    }
  ];

  const lenders: Lender[] = [
    {
      id: 1,
      name: "Business Capital Corp",
      type: "online",
      logo: "https://via.placeholder.com/40",
      minLoan: 10000,
      maxLoan: 500000,
      interestRate: 8.5,
      term: 36,
      requirements: {
        minCreditScore: 650,
        minTimeInBusiness: 12,
        minAnnualRevenue: 100000
      },
      matchScore: 89
    },
    {
      id: 2,
      name: "FirstBank Business Lending",
      type: "bank",
      logo: "https://via.placeholder.com/40",
      minLoan: 25000,
      maxLoan: 1000000,
      interestRate: 6.2,
      term: 60,
      requirements: {
        minCreditScore: 700,
        minTimeInBusiness: 24,
        minAnnualRevenue: 250000
      },
      matchScore: 76
    },
    {
      id: 3,
      name: "Community Credit Union",
      type: "credit-union",
      logo: "https://via.placeholder.com/40",
      minLoan: 5000,
      maxLoan: 150000,
      interestRate: 7.8,
      term: 48,
      requirements: {
        minCreditScore: 600,
        minTimeInBusiness: 6,
        minAnnualRevenue: 50000
      },
      matchScore: 82
    }
  ];

  const grants: Grant[] = [
    {
      id: 1,
      name: "NYDA Grant Programme",
      provider: "National Youth Development Agency",
      type: "government",
      amount: 100000,
      deadline: "2024-03-31",
      eligibility: ["Youth entrepreneurs (18-35)", "South African citizens", "Viable business plan"],
      sectors: ["Technology", "Agriculture", "Manufacturing"],
      matchScore: 95,
      description: "Supports youth entrepreneurs with non-repayable grants for business development and job creation."
    },
    {
      id: 2,
      name: "Small Business Innovation Research (SBIR)",
      provider: "National Science Foundation",
      type: "government",
      amount: 250000,
      deadline: "2024-06-15",
      eligibility: ["Small businesses", "Research-focused", "Technology innovation"],
      sectors: ["Technology", "Healthcare", "Energy"],
      matchScore: 78,
      description: "Federal funding for small businesses engaged in research and development with commercialization potential."
    },
    {
      id: 3,
      name: "Gates Foundation Innovation Grant",
      provider: "Bill & Melinda Gates Foundation",
      type: "foundation",
      amount: 500000,
      deadline: "2024-08-30",
      eligibility: ["Global health focus", "Poverty alleviation", "Educational impact"],
      sectors: ["Healthcare", "Education", "Agriculture"],
      matchScore: 65,
      description: "Supports innovative solutions addressing global challenges in health, education, and poverty reduction."
    }
  ];

  // Enhanced credit monitoring data
  const creditScore = 803;
  const creditMaxScore = 850;
  const scoreChange = +12; // Points changed this month
  const previousScore = creditScore - scoreChange;
  const scorePercentage = (creditScore / creditMaxScore) * 100;
  const needleRotation = -90 + (scorePercentage * 180 / 100);
  
  // Enhanced credit factors
  const creditFactors = [
    {
      name: "Payment History",
    percentage: 100,
    status: "excellent",
      impact: "Most Impact",
      description: "You've made 100% of payments on time",
      trend: "stable",
      weight: 35
    },
    {
      name: "Credit Utilization",
    percentage: 2,
    status: "excellent",
      impact: "High Impact",
      description: "$1,508 of $84,301 total credit used",
      trend: "improving",
      weight: 30
    },
    {
      name: "Credit Age",
      years: 7,
      months: 3,
      status: "good",
      impact: "Medium Impact", 
      description: "Average age of your credit accounts",
      trend: "improving",
      weight: 15
    },
    {
      name: "Credit Mix",
      accounts: 5,
      types: 3,
      status: "good",
      impact: "Low Impact",
      description: "Good variety of credit types",
      trend: "stable",
      weight: 10
    },
    {
      name: "New Credit",
      inquiries: 1,
      status: "excellent",
      impact: "Low Impact", 
      description: "1 hard inquiry in the last 2 years",
      trend: "stable",
      weight: 10
    }
  ];

  // Credit goals and achievements
  const creditGoals = [
    {
      title: "Reach 820 Credit Score",
      current: 803,
      target: 820,
      progress: 94,
      timeframe: "3 months",
      status: "in_progress"
    },
    {
      title: "Reduce Utilization to 1%",
      current: 2,
      target: 1,
      progress: 50,
      timeframe: "1 month", 
      status: "in_progress"
    },
    {
      title: "Maintain Perfect Payment History",
      current: 100,
      target: 100,
      progress: 100,
      timeframe: "Ongoing",
      status: "achieved"
    }
  ];

  // Credit monitoring alerts
  const creditAlerts = [
    {
      type: "positive",
      title: "Credit Score Increased",
      description: "Your TransUnion score increased by 12 points",
      date: "2 days ago",
      icon: TrendingUp,
      action: "View Details"
    },
    {
      type: "info", 
      title: "Monthly Report Available",
      description: "Your December credit report is ready to view",
      date: "1 week ago",
      icon: Bell,
      action: "Download"
    }
  ];

  // Account data with enhanced details
  const creditAccounts = [
    {
      name: "Capital One Venture",
      type: "Credit Card",
      balance: 2500,
      limit: 10000,
      utilization: 25,
      payment: 125,
      status: "Current",
      opened: "Jan 2019",
      lastPayment: "Dec 15, 2023",
      paymentHistory: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
      name: "Chase Freedom Unlimited", 
      type: "Credit Card",
      balance: 0,
      limit: 15000,
      utilization: 0,
      payment: 0,
      status: "Current",
      opened: "Mar 2020",
      lastPayment: "Dec 10, 2023",
      paymentHistory: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
      name: "Auto Loan - Honda",
      type: "Installment Loan", 
      balance: 12000,
      originalAmount: 25000,
      payment: 450,
      status: "Current",
      opened: "Jun 2021",
      lastPayment: "Dec 20, 2023",
      paymentHistory: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    }
  ];

  // Credit score tiers
  const creditTiers = [
    { name: "Poor", min: 300, max: 579, color: "bg-red-500" },
    { name: "Fair", min: 580, max: 669, color: "bg-yellow-500" }, 
    { name: "Good", min: 670, max: 739, color: "bg-blue-500" },
    { name: "Very Good", min: 740, max: 799, color: "bg-green-500" },
    { name: "Exceptional", min: 800, max: 850, color: "bg-purple-500" }
  ];

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const getScoreColorClass = (score: number) => {
    if (score >= 800) return "text-purple-600";
    if (score >= 740) return "text-green-600";
    if (score >= 670) return "text-blue-600";
    if (score >= 580) return "text-yellow-600";
    return "text-red-600";
  };

  const getStatusColorClass = (status: string) => {
    switch (status.toLowerCase()) {
      case "excellent": return "text-green-600";
      case "good": return "text-blue-600";
      case "fair": return "text-yellow-600";
      case "poor": return "text-red-600";
      default: return "text-gray-600";
    }
  };

  // Get trend icon
  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case "improving": return <TrendingUp className="h-4 w-4 text-green-600" />;
      case "declining": return <TrendingDown className="h-4 w-4 text-red-600" />;
      default: return <div className="h-4 w-4" />;
    }
  };

  const filteredInvestors = investors.filter(investor =>
    investor.name.toLowerCase().includes(searchQuery.toLowerCase()) &&
    (selectedIndustries.length === 0 || investor.industries.some(industry => 
      selectedIndustries.includes(industry)
    )) &&
    investor.maxInvestment >= fundingRange[0] &&
    investor.minInvestment <= fundingRange[1]
  );

  const filteredLenders = lenders.filter(lender =>
    lender.name.toLowerCase().includes(searchQuery.toLowerCase()) &&
    lender.maxLoan >= fundingRange[0] &&
    lender.minLoan <= fundingRange[1]
  );

  const filteredGrants = grants.filter(grant =>
    grant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    grant.provider.toLowerCase().includes(searchQuery.toLowerCase()) ||
    grant.sectors.some(sector => sector.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <DollarSign className="h-10 w-10 text-indigo-600" />
            <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
              Funding Hub
            </h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Explore comprehensive funding options for your business across equity, debt, and grant opportunities
          </p>
        </div>

        <Tabs defaultValue="equity" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3 lg:w-fit">
            <TabsTrigger value="equity" className="flex items-center gap-2">
              <PieChart className="h-4 w-4" />
              Equity Funding
            </TabsTrigger>
            <TabsTrigger value="debt" className="flex items-center gap-2">
              <CreditCard className="h-4 w-4" />
              Debt Funding
            </TabsTrigger>
            <TabsTrigger value="grants" className="flex items-center gap-2">
              <Gift className="h-4 w-4" />
              Grant Funding
            </TabsTrigger>
          </TabsList>

          {/* Equity Funding Tab */}
          <TabsContent value="equity" className="space-y-6">
            <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <PieChart className="h-5 w-5 text-blue-600" />
                  Equity Funding Overview
                </CardTitle>
                <CardDescription>
                  Selling a portion of your company's ownership in exchange for capital.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-semibold text-green-600 mb-2">Pros</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>‚Ä¢ No obligation to repay the funds</li>
                      <li>‚Ä¢ No additional financial burden</li>
                      <li>‚Ä¢ Access to investor expertise and networks</li>
                      <li>‚Ä¢ Shared risk with investors</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold text-red-600 mb-2">Cons</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>‚Ä¢ Give up ownership and control</li>
                      <li>‚Ä¢ Dilution of founder equity</li>
                      <li>‚Ä¢ Investor involvement in decisions</li>
                      <li>‚Ä¢ Complex legal agreements</li>
                    </ul>
                  </div>
                </div>
                <div className="bg-blue-50 p-4 rounded-lg">
                  <p className="text-sm text-blue-800">
                    <strong>Best for:</strong> Startups and high-growth businesses that need significant capital 
                    but may not qualify for large loans, or companies seeking strategic partnerships.
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Search and Filters */}
            <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
              <CardHeader>
                <CardTitle>Find Investors</CardTitle>
                <CardDescription>
                  Discover investors that match your business profile and funding needs.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex gap-4">
                    <div className="flex-1">
                      <Input
                        placeholder="Search investors..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className="w-full"
                      />
                    </div>
                    <Button variant="outline">
                      <Filter className="h-4 w-4 mr-2" />
                      Filters
                    </Button>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium mb-2 block">
                      Investment Range: {formatCurrency(fundingRange[0])} - {formatCurrency(fundingRange[1])}
                    </label>
                    <Slider
                      value={fundingRange}
                      onValueChange={setFundingRange}
                      max={10000000}
                      min={10000}
                      step={10000}
                      className="w-full"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Investor Results */}
            <div className="grid gap-6">
              {filteredInvestors.map((investor) => (
                <Card key={investor.id} className="backdrop-blur-sm bg-white/70 border-0 shadow-lg hover:shadow-xl transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-4">
                        <img
                          src={investor.logo}
                          alt={investor.name}
                          className="w-12 h-12 rounded-lg object-cover"
                        />
                        <div>
                          <h3 className="font-semibold text-lg">{investor.name}</h3>
                          <Badge variant="outline" className="mt-1">
                            {investor.type.toUpperCase()}
                          </Badge>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-2xl font-bold text-green-600">{investor.matchScore}%</div>
                        <div className="text-sm text-gray-500">Match Score</div>
                      </div>
                    </div>
                    
                    <div className="grid md:grid-cols-3 gap-4 mt-6">
                      <div>
                        <div className="text-sm text-gray-500">Investment Range</div>
                        <div className="font-semibold">
                          {formatCurrency(investor.minInvestment)} - {formatCurrency(investor.maxInvestment)}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-gray-500">Portfolio Size</div>
                        <div className="font-semibold">{investor.portfolio} companies</div>
                      </div>
                      <div>
                        <div className="text-sm text-gray-500">Success Rate</div>
                        <div className="font-semibold">{(investor.successRate * 100).toFixed(0)}%</div>
                      </div>
                    </div>
                    
                    <div className="mt-4">
                      <div className="text-sm text-gray-500 mb-2">Focus Areas</div>
                      <div className="flex flex-wrap gap-2">
                        {investor.industries.map((industry) => (
                          <Badge key={industry} variant="secondary" className="text-xs">
                            {industry}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    
                    <div className="flex justify-between items-center mt-6">
                      <div className="flex gap-2">
                        {investor.stages.map((stage) => (
                          <Badge key={stage} variant="outline" className="text-xs">
                            {stage}
                          </Badge>
                        ))}
                      </div>
                      <Button className="ml-auto">
                        Connect
                        <ArrowRight className="h-4 w-4 ml-2" />
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Debt Funding Tab */}
          <TabsContent value="debt" className="space-y-6">
            <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CreditCard className="h-5 w-5 text-green-600" />
                  Debt Funding Overview
                </CardTitle>
                <CardDescription>
                  Borrowing money that must be paid back, usually with interest, over a set period.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-semibold text-green-600 mb-2">Pros</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>‚Ä¢ Owners retain full control of the business</li>
                      <li>‚Ä¢ No dilution of ownership</li>
                      <li>‚Ä¢ Interest payments are tax deductible</li>
                      <li>‚Ä¢ Predictable payment schedule</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold text-red-600 mb-2">Cons</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>‚Ä¢ Creates financial obligation and burden</li>
                      <li>‚Ä¢ Regular payments required regardless of performance</li>
                      <li>‚Ä¢ Personal guarantees often required</li>
                      <li>‚Ä¢ Strict qualification requirements</li>
                    </ul>
                  </div>
                </div>
                <div className="bg-green-50 p-4 rounded-lg">
                  <p className="text-sm text-green-800">
                    <strong>Best for:</strong> Established businesses with steady cash flow, 
                    good credit history, and predictable revenue streams.
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Credit Bureau Tabs */}
            <Tabs value={selectedBureau} onValueChange={setSelectedBureau} className="mb-6">
              <TabsList className="grid grid-cols-3 bg-white/70 backdrop-blur-sm">
                <TabsTrigger value="transunion" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
                  TransUnion
                </TabsTrigger>
                <TabsTrigger value="equifax" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
                  Equifax
                </TabsTrigger>
                <TabsTrigger value="experian" className="data-[state=active]:bg-purple-600 data-[state=active]:text-white">
                  Experian
                </TabsTrigger>
              </TabsList>
            </Tabs>

            {/* Quick Stats */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Credit Score</p>
                      <p className={`text-2xl font-bold ${getScoreColorClass(creditScore)}`}>
                        {creditScore}
                      </p>
                      <div className="flex items-center mt-1">
                        <TrendingUp className="h-3 w-3 text-green-600 mr-1" />
                        <span className="text-xs text-green-600">+{scoreChange} points</span>
                      </div>
                    </div>
                    <div className="p-2 bg-purple-100 rounded-lg">
                      <Award className="h-6 w-6 text-purple-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Utilization</p>
                      <p className="text-2xl font-bold text-green-600">2%</p>
                      <p className="text-xs text-gray-500">$1,508 / $84,301</p>
                    </div>
                    <div className="p-2 bg-green-100 rounded-lg">
                      <CreditCard className="h-6 w-6 text-green-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Payment History</p>
                      <p className="text-2xl font-bold text-green-600">100%</p>
                      <p className="text-xs text-gray-500">Always on time</p>
                    </div>
                    <div className="p-2 bg-blue-100 rounded-lg">
                      <CheckCircle className="h-6 w-6 text-blue-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Total Accounts</p>
                      <p className="text-2xl font-bold text-blue-600">28</p>
                      <p className="text-xs text-gray-500">Open & closed</p>
                    </div>
                    <div className="p-2 bg-teal-100 rounded-lg">
                      <Wallet className="h-6 w-6 text-teal-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Left Column - Credit Score & Factors */}
              <div className="lg:col-span-2 space-y-6">
                {/* Enhanced Credit Score Overview */}
                <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg overflow-hidden relative">
                  <div className="absolute inset-0 bg-gradient-to-br from-purple-50/50 via-blue-50/30 to-green-50/50 pointer-events-none" />
                  
                  <CardHeader className="relative z-10">
                    <div className="flex items-center justify-between">
                      <CardTitle className="flex items-center gap-2">
                        <div className="p-2 rounded-lg bg-gradient-to-r from-purple-500 to-blue-500 text-white">
                          <Award className="h-5 w-5" />
                        </div>
                        <span className="bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                        Credit Score Overview
                        </span>
                      </CardTitle>
                      <Badge className="bg-gradient-to-r from-purple-100 to-blue-100 text-purple-700 border-purple-200 shadow-sm">
                        <Star className="h-3 w-3 mr-1" />
                        Exceptional
                      </Badge>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="relative z-10">
                    <div className="flex flex-col lg:flex-row items-center gap-6 lg:gap-8">
                      {/* Enhanced Credit Score Meter */}
                      <div className="flex-shrink-0 w-full lg:w-auto">
                        <div className="relative w-full max-w-sm mx-auto lg:mx-0 lg:w-80 h-44 group">
                          <svg className="w-full h-full drop-shadow-lg" viewBox="0 0 400 220" role="img" aria-label="Credit score meter gauge">
                            <defs>
                              {creditTiers.map((tier, index) => {
                                const tierAngle = 180 / creditTiers.length;
                                const startAngle = -90 + index * tierAngle;
                                const endAngle = startAngle + tierAngle;
                                const textPath = describeArc(200, 200, 150, startAngle, endAngle);
                            return (
                              <path
                                    key={`text-path-${index}`}
                                    id={`text-path-${index}`}
                                    d={textPath}
                                fill="none"
                              />
                            );
                          })}
                            
                              <filter id="drop-shadow" x="-50%" y="-50%" width="200%" height="200%">
                                <feDropShadow dx="0" dy="2" stdDeviation="2" floodColor="rgba(0,0,0,0.15)" />
                              </filter>
                            </defs>

                            {creditTiers.map((tier, index) => {
                              const tierAngle = 180 / creditTiers.length;
                              const startAngle = -90 + index * tierAngle;
                              const endAngle = startAngle + tierAngle;
                              const angleGap = 2;
                              const arcPath = describeArc(200, 200, 150, startAngle + angleGap, endAngle - angleGap);

                              const colors = {
                                "Poor": "#f85959",
                                "Fair": "#ff934c", 
                                "Good": "#f9d14b",
                                "Very Good": "#93d25b",
                                "Exceptional": "#4acb6d"
                              };

                              const tierColor = colors[tier.name as keyof typeof colors] || "#f85959";

                              return (
                                <g key={tier.name}>
                                  <path d={arcPath} fill="none" stroke={tierColor} strokeWidth="48" strokeLinecap="butt"/>
                                  <path d={arcPath} fill="none" stroke={shadeColor(tierColor, 10)} strokeWidth="38" strokeLinecap="butt"/>
                                  <path d={arcPath} fill="none" stroke={shadeColor(tierColor, 20)} strokeWidth="28" strokeLinecap="butt"/>
                                </g>
                              );
                            })}

                            {creditTiers.map((tier, index) => {
                              return (
                                <text key={`label-${tier.name}`} fill="#0d233a" fontSize="17" fontWeight="bold" dominantBaseline="middle">
                                  <textPath href={`#text-path-${index}`} startOffset="15%" textAnchor="start">
                                    {tier.name.toUpperCase()}
                                  </textPath>
                            </text>
                              );
                            })}

                            <g transform={`rotate(${needleRotation} 200 200)`} style={{ transition: 'transform 0.7s cubic-bezier(0.23, 1, 0.32, 1)' }}>
                              <path 
                                d={`M 196 200 C 196 140, 200 85, 200 65 C 200 85, 204 140, 204 200 Z`} 
                                fill="#0d233a" 
                              />
                            </g>
                            
                            <g filter="url(#drop-shadow)">
                              <circle cx="200" cy="200" r="16" fill="#0d233a" />
                              <circle cx="200" cy="200" r="13" fill="none" stroke="white" strokeWidth="2" />
                            </g>
                        </svg>

                        <div className="absolute top-[185px] left-1/2 -translate-x-1/2 w-full">
                          <div className="w-20 h-0.5 mx-auto" style={{backgroundColor: '#0d233a'}} />
                          <p className="text-xl font-medium tracking-[0.2em] mt-2" style={{color: '#0d233a'}}>CREDIT SCORE</p>
                        </div>
                      </div>
                    </div>
                    </div>

                    <div className="flex-1 space-y-6">
                      <div className="text-center lg:text-left">
                        <div className="flex items-center justify-center lg:justify-start gap-3 mb-3">
                          <span className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                            Exceptional Credit
                          </span>
                          <div className="flex items-center gap-1 px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">
                            <TrendingUp className="h-4 w-4" />
                            +{scoreChange}
                          </div>
                        </div>
                        <p className="text-gray-600 text-lg">
                          Your score increased by <span className="font-semibold text-green-600">{scoreChange} points</span> this month
                        </p>
                        <p className="text-sm text-gray-500 mt-2">
                          You're in the top 20% of credit scores nationwide
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Credit Factors */}
              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                      <BarChart className="h-5 w-5 text-blue-600" />
                      Credit Score Factors
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      {creditFactors.map((factor, index) => (
                        <div key={index} className="space-y-3">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <div className="flex items-center gap-2">
                                <span className="font-medium">{factor.name}</span>
                                {getTrendIcon(factor.trend)}
                              </div>
                              <Badge variant="outline" className="text-xs">
                                {factor.impact}
                              </Badge>
                            </div>
                            <div className="text-right">
                              <span className={`font-semibold text-lg ${getStatusColorClass(factor.status)}`}>
                                {factor.percentage !== undefined ? `${factor.percentage}%` : 
                                 factor.years !== undefined ? `${factor.years}y ${factor.months}m` :
                                 factor.accounts !== undefined ? `${factor.accounts} accounts` :
                                 factor.inquiries !== undefined ? `${factor.inquiries} inquiry` : ''}
                              </span>
                            </div>
                          </div>
                          
                          <div className="space-y-2">
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">{factor.description}</span>
                              <span className="text-gray-500">{factor.weight}% of score</span>
                            </div>
                            
                            <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
                              <div 
                                className={`h-full rounded-full ${
                                  factor.status === "excellent" ? "bg-green-500" :
                                  factor.status === "good" ? "bg-blue-500" :
                                  factor.status === "fair" ? "bg-yellow-500" : "bg-red-500"
                                }`}
                                style={{ width: `${factor.percentage || 80}%` }}
                              />
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Right Column - AI Scoring, Goals, Alerts */}
              <div className="space-y-6">
                {/* AI Credit Scoring */}
                <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <div className="p-2 rounded-lg bg-gradient-to-r from-purple-500 to-blue-500 text-white">
                        <Zap className="h-5 w-5" />
                      </div>
                      <span className="bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                        AI Credit Scoring
                      </span>
                  </CardTitle>
                  <CardDescription>
                      Advanced AI analysis of your credit profile
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="text-center">
                      <div className="relative w-24 h-24 mx-auto mb-4">
                        <svg viewBox="0 0 100 100" className="w-full h-full">
                          <circle
                            cx="50"
                            cy="50"
                            r="40"
                            stroke="#f3f4f6"
                            strokeWidth="8"
                            fill="none"
                          />
                          <circle
                            cx="50"
                            cy="50"
                            r="40"
                            stroke="url(#aiScoreGradient)"
                            strokeWidth="8"
                            fill="none"
                            strokeDasharray={`${2 * Math.PI * 40}`}
                            strokeDashoffset={`${2 * Math.PI * 40 * (1 - 0.95)}`}
                            className="transition-all duration-2000 ease-out"
                            style={{
                              strokeDasharray: `${2 * Math.PI * 40}`,
                              strokeDashoffset: `${2 * Math.PI * 40 * (1 - 0.95)}`
                            }}
                          />
                          <defs>
                            <linearGradient id="aiScoreGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                              <stop offset="0%" stopColor="#8b5cf6" />
                              <stop offset="100%" stopColor="#3b82f6" />
                            </linearGradient>
                          </defs>
                        </svg>
                        <div className="absolute inset-0 flex items-center justify-center">
                          <span className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                            95
                          </span>
                        </div>
                      </div>
                      <h3 className="text-lg font-semibold text-gray-800 mb-1">AI Credit Score</h3>
                      <p className="text-sm text-gray-600">Exceptional AI Analysis</p>
                  </div>

                  <div className="space-y-4">
                      <div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg border border-green-200">
                        <div className="flex items-start gap-3">
                          <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0">
                            <CheckCircle className="h-4 w-4 text-green-600" />
                          </div>
                      <div>
                            <h4 className="font-semibold text-green-800 text-sm mb-1">Payment Pattern Analysis</h4>
                            <p className="text-xs text-green-700">AI detected consistent on-time payments across all accounts</p>
                      </div>
                      </div>
                    </div>

                      <div className="p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-200">
                        <div className="flex items-start gap-3">
                          <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                            <TrendingUp className="h-4 w-4 text-blue-600" />
                          </div>
                      <div>
                            <h4 className="font-semibold text-blue-800 text-sm mb-1">Credit Utilization Optimization</h4>
                            <p className="text-xs text-blue-700">AI recommends maintaining current low utilization for maximum score</p>
                      </div>
                        </div>
                        </div>
                      </div>
                  </CardContent>
                </Card>

                {/* Credit Goals */}
                <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Target className="h-5 w-5 text-orange-600" />
                      Credit Goals
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {creditGoals.map((goal, index) => (
                        <div key={index} className="space-y-2">
                          <div className="flex items-center justify-between">
                            <h4 className="font-medium text-sm">{goal.title}</h4>
                            <Badge variant={goal.status === "achieved" ? "default" : "outline"}>
                              {goal.status === "achieved" ? "‚úì" : `${goal.progress}%`}
                            </Badge>
                    </div>
                          <Progress value={goal.progress} className="h-2" />
                          <div className="flex justify-between text-xs text-gray-600">
                            <span>{goal.current} / {goal.target}</span>
                            <span>{goal.timeframe}</span>
                  </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* Credit Alerts */}
                <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Bell className="h-5 w-5 text-blue-600" />
                      Recent Alerts
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {creditAlerts.map((alert, index) => {
                        const IconComponent = alert.icon;
                        return (
                          <div key={index} className="flex items-start gap-3 p-3 rounded-lg bg-gray-50">
                            <div className={`p-1 rounded-full ${
                              alert.type === "positive" ? "bg-green-100" : "bg-blue-100"
                            }`}>
                              <IconComponent className={`h-4 w-4 ${
                                alert.type === "positive" ? "text-green-600" : "text-blue-600"
                              }`} />
                            </div>
                            <div className="flex-1 min-w-0">
                              <h4 className="font-medium text-sm">{alert.title}</h4>
                              <p className="text-xs text-gray-600 mt-1">{alert.description}</p>
                              <p className="text-xs text-gray-500 mt-1">{alert.date}</p>
                            </div>
                            <Button size="sm" variant="ghost" className="text-xs">
                              {alert.action}
                  </Button>
                          </div>
                        );
                      })}
                    </div>
                </CardContent>
              </Card>
              </div>
              
              {/* Right Column - Lender Matching */}
              <div className="lg:col-span-1">
              {/* Lender Matching */}
              <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
                <CardHeader>
                  <CardTitle>Find Lenders</CardTitle>
                  <CardDescription>
                    Discover lending options that match your credit profile
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm font-medium mb-2 block">
                        Loan Amount: {formatCurrency(fundingRange[0])} - {formatCurrency(fundingRange[1])}
                      </label>
                      <Slider
                        value={fundingRange}
                        onValueChange={setFundingRange}
                        max={2000000}
                        min={5000}
                        step={5000}
                        className="w-full"
                      />
                    </div>
                    
                    <div className="space-y-3">
                      {filteredLenders.slice(0, 2).map((lender) => (
                        <div key={lender.id} className="p-4 border rounded-lg bg-white/50">
                          <div className="flex justify-between items-start mb-2">
                            <div>
                              <h4 className="font-semibold">{lender.name}</h4>
                              <Badge variant="outline" className="text-xs">
                                {lender.type}
                              </Badge>
                            </div>
                            <div className="text-right">
                              <div className="text-lg font-bold text-green-600">{lender.matchScore}%</div>
                              <div className="text-xs text-gray-500">Match</div>
                            </div>
                          </div>
                          <div className="grid grid-cols-2 gap-2 text-sm">
                            <div>
                              <span className="text-gray-500">Rate:</span> {lender.interestRate}%
                            </div>
                            <div>
                              <span className="text-gray-500">Term:</span> {lender.term} months
                            </div>
                            <div>
                              <span className="text-gray-500">Min Credit:</span> {lender.requirements.minCreditScore}
                            </div>
                            <div>
                              <span className="text-gray-500">Max Loan:</span> {formatCurrency(lender.maxLoan)}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    <Button className="w-full">
                      View All Lenders
                      <ArrowRight className="h-4 w-4 ml-2" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
              </div>
            </div>
          </TabsContent>

          {/* Grant Funding Tab */}
          <TabsContent value="grants" className="space-y-6">
            <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Gift className="h-5 w-5 text-purple-600" />
                  Grant Funding Overview
                </CardTitle>
                <CardDescription>
                  Non-repayable funds provided for projects with social or economic benefits.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-semibold text-green-600 mb-2">Pros</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>‚Ä¢ No repayment required</li>
                      <li>‚Ä¢ No loss of ownership or control</li>
                      <li>‚Ä¢ Ideal for non-profits and social impact projects</li>
                      <li>‚Ä¢ Often includes additional support and resources</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold text-red-600 mb-2">Cons</h4>
                    <ul className="space-y-1 text-sm text-gray-600">
                      <li>‚Ä¢ Highly competitive application process</li>
                      <li>‚Ä¢ Specific project or demographic requirements</li>
                      <li>‚Ä¢ Extensive reporting and compliance obligations</li>
                      <li>‚Ä¢ Limited funding amounts and strict deadlines</li>
                    </ul>
                  </div>
                </div>
                <div className="bg-purple-50 p-4 rounded-lg">
                  <p className="text-sm text-purple-800">
                    <strong>Best for:</strong> Non-profits, social enterprises, research projects, 
                    and businesses focused on community impact or specific demographics like youth entrepreneurs.
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Grant Search */}
            <Card className="backdrop-blur-sm bg-white/70 border-0 shadow-lg">
              <CardHeader>
                <CardTitle>Find Grant Opportunities</CardTitle>
                <CardDescription>
                  Discover grants that align with your business mission and demographics.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <Input
                    placeholder="Search grants by name, provider, or sector..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full"
                  />
                </div>
              </CardContent>
            </Card>

            {/* Grant Results */}
            <div className="grid gap-6">
              {filteredGrants.map((grant) => (
                <Card key={grant.id} className="backdrop-blur-sm bg-white/70 border-0 shadow-lg hover:shadow-xl transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div>
                        <h3 className="font-semibold text-lg mb-1">{grant.name}</h3>
                        <p className="text-gray-600 mb-2">{grant.provider}</p>
                        <Badge variant="outline" className="mr-2">
                          {grant.type}
                        </Badge>
                        <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                          {grant.matchScore}% Match
                        </Badge>
                      </div>
                      <div className="text-right">
                        <div className="text-2xl font-bold text-purple-600">
                          {formatCurrency(grant.amount)}
                        </div>
                        <div className="text-sm text-gray-500">Grant Amount</div>
                      </div>
                    </div>
                    
                    <p className="text-gray-600 mb-4">{grant.description}</p>
                    
                    <div className="grid md:grid-cols-2 gap-4 mb-4">
                      <div>
                        <div className="text-sm text-gray-500 mb-2">Deadline</div>
                        <div className="font-semibold flex items-center gap-2">
                          <Clock className="h-4 w-4 text-orange-500" />
                          {new Date(grant.deadline).toLocaleDateString()}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-gray-500 mb-2">Focus Sectors</div>
                        <div className="flex flex-wrap gap-1">
                          {grant.sectors.map((sector) => (
                            <Badge key={sector} variant="secondary" className="text-xs">
                              {sector}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>
                    
                    <div className="mb-4">
                      <div className="text-sm text-gray-500 mb-2">Eligibility Requirements</div>
                      <ul className="text-sm text-gray-600 space-y-1">
                        {grant.eligibility.map((req, index) => (
                          <li key={index} className="flex items-center gap-2">
                            <CheckCircle className="h-3 w-3 text-green-500 flex-shrink-0" />
                            {req}
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    <div className="flex justify-between items-center">
                      <Button variant="outline">
                        <FileText className="h-4 w-4 mr-2" />
                        View Guidelines
                      </Button>
                      <Button>
                        Apply Now
                        <ArrowRight className="h-4 w-4 ml-2" />
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

export default Funding;

=== FILE: client/src/pages/grantor-dashboard.tsx ===


import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Heart, 
  Award, 
  FileText, 
  BarChart3,
  CheckCircle,
  Clock,
  Users,
  Target,
  Leaf,
  Globe
} from "lucide-react";

const impactMetrics = [
  { label: "Active Grants", value: "45", icon: Award, color: "text-orange-600" },
  { label: "Total Disbursed", value: "$2.8M", icon: Heart, color: "text-red-600" },
  { label: "Success Rate", value: "84%", icon: CheckCircle, color: "text-green-600" },
  { label: "Impact Score", value: "9.2", icon: Target, color: "text-blue-600" }
];

const pendingApplications = [
  {
    organization: "Clean Ocean Initiative",
    program: "Environmental Impact Grant",
    amount: "$75,000",
    category: "Environmental",
    score: 92,
    days: 14
  },
  {
    organization: "Tech for Education",
    program: "Education Innovation Grant",
    amount: "$120,000",
    category: "Education",
    score: 87,
    days: 8
  }
];

export default function GrantorDashboard() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-white to-red-50">
      <div className="container mx-auto py-8 px-4">
        <div className="mb-8">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent mb-2">
            Grantor Dashboard ‚ù§Ô∏è
          </h1>
          <p className="text-gray-600">
            Manage grants and measure social impact across your programs
          </p>
        </div>

        {/* Impact Overview */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          {impactMetrics.map((metric, index) => {
            const IconComponent = metric.icon;
            return (
              <Card key={index}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">{metric.label}</p>
                      <p className="text-2xl font-bold">{metric.value}</p>
                    </div>
                    <IconComponent className={`h-8 w-8 ${metric.color}`} />
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        <Tabs defaultValue="applications" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="applications">Applications</TabsTrigger>
            <TabsTrigger value="programs">Programs</TabsTrigger>
            <TabsTrigger value="impact">Impact Tracking</TabsTrigger>
            <TabsTrigger value="reports">Reporting</TabsTrigger>
          </TabsList>

          <TabsContent value="applications">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Pending Applications
                </CardTitle>
                <CardDescription>Review grant applications and assess impact potential</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {pendingApplications.map((app, index) => (
                    <div key={index} className="p-4 border rounded-lg">
                      <div className="flex justify-between items-start mb-3">
                        <div>
                          <h3 className="font-semibold">{app.organization}</h3>
                          <p className="text-sm text-gray-600">{app.program}</p>
                        </div>
                        <div className="text-right">
                          <p className="font-semibold text-orange-600">{app.amount}</p>
                          <Badge variant="secondary">{app.category}</Badge>
                        </div>
                      </div>
                      <div className="grid grid-cols-2 gap-4 text-sm mb-4">
                        <div>
                          <span className="text-gray-600">Impact Score:</span>
                          <span className="font-medium ml-2">{app.score}/100</span>
                        </div>
                        <div>
                          <span className="text-gray-600">Days Pending:</span>
                          <span className="font-medium ml-2">{app.days} days</span>
                        </div>
                      </div>
                      <Progress value={app.score} className="h-2 mb-4" />
                      <div className="flex gap-2">
                        <Button size="sm">Review Application</Button>
                        <Button size="sm" variant="outline">View Impact Plan</Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="programs">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Award className="h-5 w-5" />
                  Grant Programs
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <Award className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Program management coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="impact">
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Leaf className="h-5 w-5" />
                    Environmental Impact
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center py-4">
                    <div className="text-3xl font-bold text-green-600 mb-2">156</div>
                    <p className="text-sm text-gray-600">Projects Funded</p>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="h-5 w-5" />
                    Social Impact
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center py-4">
                    <div className="text-3xl font-bold text-blue-600 mb-2">42K</div>
                    <p className="text-sm text-gray-600">Lives Impacted</p>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Globe className="h-5 w-5" />
                    Global Reach
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center py-4">
                    <div className="text-3xl font-bold text-purple-600 mb-2">23</div>
                    <p className="text-sm text-gray-600">Countries Reached</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="reports">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5" />
                  Impact Reporting
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <FileText className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Impact reporting tools coming soon</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}


=== FILE: client/src/pages/collaboration.tsx ===


import React, { useState, useEffect } from 'react';
import { useParams } from 'wouter';
import { useQuery, useMutation } from '@tanstack/react-query';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { 
  Users, 
  MessageCircle, 
  History, 
  Eye, 
  Edit3, 
  Save, 
  UserPlus,
  Bell,
  Clock,
  CheckCircle,
  AlertCircle
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Avatar } from '@/components/ui/avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';

interface Collaborator {
  id: string;
  name: string;
  email: string;
  avatar: string;
  role: 'owner' | 'editor' | 'viewer';
  isOnline: boolean;
  lastSeen: string;
}

interface Comment {
  id: string;
  userId: string;
  userName: string;
  content: string;
  sectionId: string;
  timestamp: string;
  resolved: boolean;
}

interface VersionHistory {
  id: string;
  userId: string;
  userName: string;
  changes: string;
  timestamp: string;
  version: string;
}

function Collaboration() {
  const { id } = useParams();
  const { toast } = useToast();
  const [isEditing, setIsEditing] = useState(false);
  const [activeSection, setActiveSection] = useState('executive-summary');
  const [content, setContent] = useState('');
  const [newComment, setNewComment] = useState('');
  const [inviteEmail, setInviteEmail] = useState('');

  // Mock data for demonstration
  const collaborators: Collaborator[] = [
    {
      id: '1',
      name: 'Sarah Johnson',
      email: 'sarah@startup.com',
      avatar: 'üë©‚Äçüíº',
      role: 'owner',
      isOnline: true,
      lastSeen: 'now'
    },
    {
      id: '2',
      name: 'Mike Chen',
      email: 'mike@advisor.com',
      avatar: 'üë®‚Äçüíº',
      role: 'editor',
      isOnline: true,
      lastSeen: '2 minutes ago'
    },
    {
      id: '3',
      name: 'Lisa Rodriguez',
      email: 'lisa@investor.com',
      avatar: 'üë©‚Äçüíª',
      role: 'viewer',
      isOnline: false,
      lastSeen: '1 hour ago'
    }
  ];

  const comments: Comment[] = [
    {
      id: '1',
      userId: '2',
      userName: 'Mike Chen',
      content: 'The market size estimation seems conservative. Consider expanding the TAM analysis.',
      sectionId: 'market-analysis',
      timestamp: '2024-01-15T10:30:00Z',
      resolved: false
    },
    {
      id: '2',
      userId: '3',
      userName: 'Lisa Rodriguez',
      content: 'Revenue projections look solid. What about customer acquisition costs?',
      sectionId: 'financial-projections',
      timestamp: '2024-01-15T09:15:00Z',
      resolved: true
    }
  ];

  const versionHistory: VersionHistory[] = [
    {
      id: '1',
      userId: '1',
      userName: 'Sarah Johnson',
      changes: 'Updated financial projections for Q1-Q2',
      timestamp: '2024-01-15T14:30:00Z',
      version: 'v2.3'
    },
    {
      id: '2',
      userId: '2',
      userName: 'Mike Chen',
      changes: 'Enhanced market analysis section with competitor data',
      timestamp: '2024-01-15T11:45:00Z',
      version: 'v2.2'
    }
  ];

  const handleSave = () => {
    toast({
      title: "Changes saved",
      description: "Your edits have been saved and synced with collaborators",
    });
    setIsEditing(false);
  };

  const handleAddComment = () => {
    if (newComment.trim()) {
      toast({
        title: "Comment added",
        description: "Your comment has been added and collaborators have been notified",
      });
      setNewComment('');
    }
  };

  const handleInviteCollaborator = () => {
    if (inviteEmail.trim()) {
      toast({
        title: "Invitation sent",
        description: `Collaboration invitation sent to ${inviteEmail}`,
      });
      setInviteEmail('');
    }
  };

  const getRoleColor = (role: string) => {
    switch (role) {
      case 'owner': return 'bg-purple-100 text-purple-800';
      case 'editor': return 'bg-blue-100 text-blue-800';
      case 'viewer': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Header with Collaborators */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-800">Business Plan Collaboration</h1>
            <p className="text-gray-600">Real-time editing with your team</p>
          </div>
          
          <div className="flex items-center space-x-4">
            {/* Online Collaborators */}
            <div className="flex -space-x-2">
              {collaborators.filter(c => c.isOnline).map(collaborator => (
                <div key={collaborator.id} className="relative">
                  <div className="w-10 h-10 rounded-full bg-gradient-to-br from-purple-400 to-pink-400 flex items-center justify-center text-white font-medium border-2 border-white">
                    {collaborator.avatar}
                  </div>
                  <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white"></div>
                </div>
              ))}
            </div>

            <Dialog>
              <DialogTrigger asChild>
                <Button variant="outline">
                  <UserPlus className="h-4 w-4 mr-2" />
                  Invite
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Invite Collaborator</DialogTitle>
                  <DialogDescription>
                    Invite team members to collaborate on this business plan
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  <Input
                    placeholder="Enter email address"
                    value={inviteEmail}
                    onChange={(e) => setInviteEmail(e.target.value)}
                  />
                  <select className="w-full px-3 py-2 border rounded-lg">
                    <option value="viewer">Viewer - Can view and comment</option>
                    <option value="editor">Editor - Can edit and comment</option>
                  </select>
                </div>
                <DialogFooter>
                  <Button onClick={handleInviteCollaborator}>Send Invitation</Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* Real-time Status */}
        <div className="flex items-center space-x-2 text-sm text-gray-600">
          <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
          <span>Live sync enabled ‚Ä¢ Auto-saved 2 seconds ago</span>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Main Editor */}
        <div className="lg:col-span-3">
          <Card>
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>Executive Summary</CardTitle>
                <div className="flex space-x-2">
                  {isEditing ? (
                    <>
                      <Button variant="outline" onClick={() => setIsEditing(false)}>
                        Cancel
                      </Button>
                      <Button onClick={handleSave}>
                        <Save className="h-4 w-4 mr-2" />
                        Save
                      </Button>
                    </>
                  ) : (
                    <Button onClick={() => setIsEditing(true)}>
                      <Edit3 className="h-4 w-4 mr-2" />
                      Edit
                    </Button>
                  )}
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {isEditing ? (
                <Textarea
                  value={content}
                  onChange={(e) => setContent(e.target.value)}
                  placeholder="Start writing your executive summary..."
                  className="min-h-64"
                />
              ) : (
                <div className="min-h-64 p-4 bg-gray-50 rounded-lg">
                  <p className="text-gray-600">
                    Our company revolutionizes the startup ecosystem by providing comprehensive 
                    business planning tools that leverage AI and collaborative features to help 
                    entrepreneurs succeed. We're targeting a $50B market with our innovative 
                    platform that connects startups with investors, accelerators, and mentors.
                  </p>
                </div>
              )}
              
              {/* Live editing indicators */}
              <div className="mt-4 flex items-center space-x-4 text-sm text-gray-500">
                <div className="flex items-center space-x-1">
                  <Eye className="h-4 w-4" />
                  <span>Mike Chen is viewing</span>
                </div>
                <div className="flex items-center space-x-1">
                  <Edit3 className="h-4 w-4" />
                  <span>Last edited by Sarah Johnson ‚Ä¢ 2 minutes ago</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="lg:col-span-1">
          <Tabs defaultValue="collaborators" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="collaborators" className="text-xs">
                <Users className="h-4 w-4" />
              </TabsTrigger>
              <TabsTrigger value="comments" className="text-xs">
                <MessageCircle className="h-4 w-4" />
              </TabsTrigger>
              <TabsTrigger value="history" className="text-xs">
                <History className="h-4 w-4" />
              </TabsTrigger>
            </TabsList>

            <TabsContent value="collaborators" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-sm">Team Members</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {collaborators.map(collaborator => (
                    <div key={collaborator.id} className="flex items-center space-x-3">
                      <div className="relative">
                        <div className="w-8 h-8 rounded-full bg-gradient-to-br from-purple-400 to-pink-400 flex items-center justify-center text-white text-sm">
                          {collaborator.avatar}
                        </div>
                        {collaborator.isOnline && (
                          <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white"></div>
                        )}
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium text-gray-900 truncate">
                          {collaborator.name}
                        </p>
                        <p className="text-xs text-gray-500">{collaborator.lastSeen}</p>
                      </div>
                      <Badge className={`text-xs ${getRoleColor(collaborator.role)}`}>
                        {collaborator.role}
                      </Badge>
                    </div>
                  ))}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="comments" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-sm">Comments</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Textarea
                      placeholder="Add a comment..."
                      value={newComment}
                      onChange={(e) => setNewComment(e.target.value)}
                      className="min-h-20"
                    />
                    <Button size="sm" onClick={handleAddComment}>
                      <MessageCircle className="h-4 w-4 mr-2" />
                      Comment
                    </Button>
                  </div>

                  {comments.map(comment => (
                    <div key={comment.id} className="p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium">{comment.userName}</span>
                        {comment.resolved ? (
                          <CheckCircle className="h-4 w-4 text-green-500" />
                        ) : (
                          <AlertCircle className="h-4 w-4 text-orange-500" />
                        )}
                      </div>
                      <p className="text-sm text-gray-600 mb-2">{comment.content}</p>
                      <p className="text-xs text-gray-500">
                        {new Date(comment.timestamp).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="history" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-sm">Version History</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {versionHistory.map(version => (
                    <div key={version.id} className="p-3 border rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <Badge variant="outline" className="text-xs">
                          {version.version}
                        </Badge>
                        <Clock className="h-4 w-4 text-gray-400" />
                      </div>
                      <p className="text-sm text-gray-900 mb-1">{version.changes}</p>
                      <p className="text-xs text-gray-500">
                        by {version.userName} ‚Ä¢ {new Date(version.timestamp).toLocaleDateString()}
                      </p>
                    </div>
                  ))}
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}

export default Collaboration;


=== FILE: client/src/pages/not-found.tsx ===

import React from 'react';
import { Link } from 'wouter';
import { Home, AlertTriangle } from 'lucide-react';

export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center h-[60vh] text-center">
      <div className="mb-8">
        <AlertTriangle className="h-20 w-20 text-yellow-500 mb-4 mx-auto" />
        <h1 className="text-4xl font-bold text-gray-800 mb-2">404 - Page Not Found</h1>
        <p className="text-gray-600 max-w-md mx-auto">
          The page you are looking for doesn't exist or has been moved.
        </p>
      </div>
      <Link href="/" className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
        <Home className="h-4 w-4 mr-2" />
        Return to Dashboard
      </Link>
    </div>
  );
}

=== FILE: client/src/pages/enhanced-credit-scoring.tsx ===

import React from 'react';
import { EnhancedCreditScoringMain, CreditScoringErrorBoundary } from '../components/ai';
import { Shield, Zap, Brain, Target, Star, TrendingUp } from 'lucide-react';

/**
 * Enhanced Credit Scoring Demo Page
 * Showcases the v4.0 enhanced AI credit scoring system
 */
const EnhancedCreditScoringPage: React.FC = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-100 to-slate-200">
      {/* Hero Section */}
      <div className="bg-gradient-to-r from-blue-600 to-blue-800 text-white py-16">
        <div className="max-w-7xl mx-auto px-6">
          <div className="text-center">
            <div className="flex justify-center items-center gap-3 mb-6">
              <Shield size={48} className="text-blue-200" />
              <h1 className="text-5xl font-bold">Enhanced AI Credit Scoring</h1>
              <span className="bg-green-500 text-white px-3 py-1 rounded-full text-lg font-bold">v4.0</span>
            </div>
            <p className="text-xl text-blue-100 max-w-3xl mx-auto mb-8">
              Advanced AI-powered business credit scoring system with real-time analytics, 
              comprehensive risk assessment, and industry-leading accuracy.
            </p>
            
            {/* Feature Highlights */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mt-12">
              <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-xl p-6">
                <Brain className="mx-auto mb-4 text-blue-200" size={40} />
                <h3 className="text-xl font-bold mb-2">Enhanced ML Algorithm</h3>
                <p className="text-blue-100">7-factor analysis with industry-specific risk adjustments</p>
              </div>
              <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-xl p-6">
                <Zap className="mx-auto mb-4 text-blue-200" size={40} />
                <h3 className="text-xl font-bold mb-2">Real-time Processing</h3>
                <p className="text-blue-100">Lightning-fast scoring with advanced caching and optimization</p>
              </div>
              <div className="bg-white bg-opacity-10 backdrop-blur-lg rounded-xl p-6">
                <Target className="mx-auto mb-4 text-blue-200" size={40} />
                <h3 className="text-xl font-bold mb-2">94.2% Accuracy</h3>
                <p className="text-blue-100">Industry-leading precision with comprehensive risk analysis</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Key Improvements Section */}
      <div className="py-16 bg-white">
        <div className="max-w-7xl mx-auto px-6">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-bold text-slate-800 mb-4">What's New in v4.0</h2>
            <p className="text-xl text-slate-600">Revolutionary improvements in accuracy, speed, and user experience</p>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
            <div>
              <h3 className="text-2xl font-bold text-slate-800 mb-6 flex items-center gap-2">
                <Star className="text-yellow-500" size={24} />
                Enhanced Features
              </h3>
              <div className="space-y-4">
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                  <div>
                    <h4 className="font-semibold text-slate-800">Advanced 7-Factor Scoring</h4>
                    <p className="text-slate-600">Credit, Financial Health, Banking Behavior, Business Stability, Alternative Data, Market Conditions, Industry Risk</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                  <div>
                    <h4 className="font-semibold text-slate-800">Real-time Monitoring & Alerts</h4>
                    <p className="text-slate-600">Proactive risk monitoring with configurable alerts and notifications</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-purple-500 rounded-full mt-2"></div>
                  <div>
                    <h4 className="font-semibold text-slate-800">Advanced Analytics Dashboard</h4>
                    <p className="text-slate-600">Portfolio analytics, stress testing, and performance monitoring</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-2 h-2 bg-orange-500 rounded-full mt-2"></div>
                  <div>
                    <h4 className="font-semibold text-slate-800">Industry-Specific Adjustments</h4>
                    <p className="text-slate-600">Tailored risk assessments for different business sectors</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div>
              <h3 className="text-2xl font-bold text-slate-800 mb-6 flex items-center gap-2">
                <TrendingUp className="text-green-500" size={24} />
                Performance Improvements
              </h3>
              <div className="space-y-4">
                <div className="bg-slate-50 rounded-lg p-4">
                  <div className="flex justify-between items-center">
                    <span className="font-semibold text-slate-800">Processing Speed</span>
                    <span className="text-green-600 font-bold">‚Üë 40% faster</span>
                  </div>
                  <div className="w-full bg-slate-200 rounded-full h-2 mt-2">
                    <div className="bg-green-500 h-2 rounded-full" style={{width: '85%'}}></div>
                  </div>
                </div>
                <div className="bg-slate-50 rounded-lg p-4">
                  <div className="flex justify-between items-center">
                    <span className="font-semibold text-slate-800">Model Accuracy</span>
                    <span className="text-blue-600 font-bold">94.2% AUC-ROC</span>
                  </div>
                  <div className="w-full bg-slate-200 rounded-full h-2 mt-2">
                    <div className="bg-blue-500 h-2 rounded-full" style={{width: '94%'}}></div>
                  </div>
                </div>
                <div className="bg-slate-50 rounded-lg p-4">
                  <div className="flex justify-between items-center">
                    <span className="font-semibold text-slate-800">Memory Usage</span>
                    <span className="text-purple-600 font-bold">‚Üì 25% reduction</span>
                  </div>
                  <div className="w-full bg-slate-200 rounded-full h-2 mt-2">
                    <div className="bg-purple-500 h-2 rounded-full" style={{width: '75%'}}></div>
                  </div>
                </div>
                <div className="bg-slate-50 rounded-lg p-4">
                  <div className="flex justify-between items-center">
                    <span className="font-semibold text-slate-800">Risk Differentiation</span>
                    <span className="text-orange-600 font-bold">‚Üë 30% better</span>
                  </div>
                  <div className="w-full bg-slate-200 rounded-full h-2 mt-2">
                    <div className="bg-orange-500 h-2 rounded-full" style={{width: '90%'}}></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Application */}
      <CreditScoringErrorBoundary>
        <EnhancedCreditScoringMain />
      </CreditScoringErrorBoundary>

      {/* Technical Specifications */}
      <div className="py-16 bg-slate-50">
        <div className="max-w-7xl mx-auto px-6">
          <div className="text-center mb-12">
            <h2 className="text-4xl font-bold text-slate-800 mb-4">Technical Specifications</h2>
            <p className="text-xl text-slate-600">Built with cutting-edge technology and best practices</p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            <div className="bg-white rounded-xl shadow-lg p-6 text-center">
              <h3 className="text-lg font-bold text-slate-800 mb-2">Model Version</h3>
              <p className="text-3xl font-bold text-blue-600 mb-2">v4.0.0</p>
              <p className="text-slate-600">Enhanced Production</p>
            </div>
            <div className="bg-white rounded-xl shadow-lg p-6 text-center">
              <h3 className="text-lg font-bold text-slate-800 mb-2">Processing Time</h3>
              <p className="text-3xl font-bold text-green-600 mb-2">~250ms</p>
              <p className="text-slate-600">Average Response</p>
            </div>
            <div className="bg-white rounded-xl shadow-lg p-6 text-center">
              <h3 className="text-lg font-bold text-slate-800 mb-2">Accuracy Rate</h3>
              <p className="text-3xl font-bold text-purple-600 mb-2">94.2%</p>
              <p className="text-slate-600">AUC-ROC Score</p>
            </div>
            <div className="bg-white rounded-xl shadow-lg p-6 text-center">
              <h3 className="text-lg font-bold text-slate-800 mb-2">Data Points</h3>
              <p className="text-3xl font-bold text-orange-600 mb-2">50+</p>
              <p className="text-slate-600">Risk Factors</p>
            </div>
          </div>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-slate-800 text-white py-8">
        <div className="max-w-7xl mx-auto px-6 text-center">
          <p className="text-slate-300">
            Enhanced AI Credit Scoring System v4.0 - Built with advanced machine learning and modern web technologies
          </p>
          <p className="text-slate-400 mt-2">
            ¬© 2025 Enterprise Credit Solutions. All rights reserved.
          </p>
        </div>
      </footer>
    </div>
  );
};

export default EnhancedCreditScoringPage;


=== FILE: client/src/pages/entrepreneur-dashboard.tsx ===

import { useState } from "react";
import { Link } from "wouter";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ChatInterface } from "@/components/ai/ChatInterface";
import { CoFounderHub } from '@/components/co-founder/CoFounderHub';
import { 
  Rocket, 
  ArrowRight, 
  Users, 
  TrendingUp, 
  DollarSign, 
  Target,
  Lightbulb,
  Building2,
  Briefcase,
  GraduationCap,
  Handshake,
  ChevronRight,
  Globe,
  BarChart3,
  PieChart,
  FileText,
  Calendar,
  Bell,
  Plus,
  MessageSquare,
  Zap,
  Award,
  Bot,
  Sparkles,
  Brain
} from "lucide-react";

const quickStats = [
  { label: "Business Plans", value: "3", icon: FileText, color: "text-purple-600", href: "/business-plans" },
  { label: "Funding Goal", value: "$500K", icon: DollarSign, color: "text-green-600", href: "/funding" },
  { label: "Team Size", value: "8", icon: Users, color: "text-blue-600", href: "/team" },
  { label: "Monthly Growth", value: "23%", icon: TrendingUp, color: "text-orange-600", href: "/analytics" }
];

const fundingOpportunities = [
  {
    name: "Tech Accelerator Program",
    type: "Accelerator",
    amount: "$100K + Mentorship",
    deadline: "2024-02-15",
    match: 94,
    tags: ["SaaS", "Early Stage", "B2B"]
  },
  {
    name: "Innovation Grant",
    type: "Grant",
    amount: "$50K",
    deadline: "2024-01-30",
    match: 89,
    tags: ["Technology", "Non-dilutive"]
  },
  {
    name: "Angel Investor Network",
    type: "Investment",
    amount: "$250K",
    deadline: "Ongoing",
    match: 87,
    tags: ["Seed", "Angel", "Mentorship"]
  }
];

const mentorRecommendations = [
  {
    name: "Sarah Chen",
    expertise: "Product Strategy",
    company: "Former VP at Stripe",
    rating: 4.9,
    sessions: 127,
    price: "$200/hr"
  },
  {
    name: "Marcus Rodriguez", 
    expertise: "Fundraising",
    company: "3x Founder",
    rating: 4.8,
    sessions: 203,
    price: "$300/hr"
  },
  {
    name: "Dr. Emily Foster",
    expertise: "Operations",
    company: "Former McKinsey Partner",
    rating: 4.9,
    sessions: 156,
    price: "$250/hr"
  }
];

const recentActivity = [
  {
    type: "milestone",
    title: "Completed Market Research Chapter",
    time: "2 hours ago",
    icon: Target,
    color: "text-green-600"
  },
  {
    type: "connection",
    title: "New investor match: Alex Chen",
    time: "5 hours ago",
    icon: Handshake,
    color: "text-blue-600"
  },
  {
    type: "learning",
    title: "Completed 'Fundraising 101' module",
    time: "1 day ago",
    icon: GraduationCap,
    color: "text-purple-600"
  }
];

export default function EntrepreneurDashboard() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-teal-50">
      <div className="container mx-auto py-8 px-4">
        {/* Welcome Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-teal-600 bg-clip-text text-transparent">
                Good morning, Entrepreneur! üöÄ
              </h1>
              <p className="text-gray-600 mt-2">
                Here's what's happening with your startup journey today
              </p>
            </div>
            <div className="flex gap-3">
              <Button variant="outline" size="sm">
                <Bell className="h-4 w-4 mr-2" />
                Notifications (3)
              </Button>
              <Button className="bg-gradient-to-r from-purple-600 to-teal-600">
                <Plus className="h-4 w-4 mr-2" />
                New Project
              </Button>
            </div>
          </div>

          {/* Quick Stats */}
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 md:gap-4 mb-6 md:mb-8">
            {quickStats.map((stat, index) => {
              const IconComponent = stat.icon;
              return (
                <Link key={index} href={stat.href}>
                  <Card className="hover:shadow-lg transition-all duration-200 cursor-pointer group">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm text-gray-600">{stat.label}</p>
                          <p className="text-2xl font-bold">{stat.value}</p>
                        </div>
                        <IconComponent className={`h-8 w-8 ${stat.color} group-hover:scale-110 transition-transform`} />
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              );
            })}
          </div>

          {/* AI Business Plan Generator - Featured Card */}
          <div className="mb-8">
            <Card className="bg-gradient-to-r from-blue-50 to-purple-50 border-2 border-blue-200">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                      <Sparkles className="h-8 w-8 text-white" />
                    </div>
                    <div>
                      <h3 className="text-xl font-bold text-gray-800 mb-1">AI Business Plan Generator</h3>
                      <p className="text-gray-600 mb-2">Create professional business plans in minutes with AI</p>
                      <div className="flex items-center gap-4 text-sm text-gray-500">
                        <div className="flex items-center gap-1">
                          <Brain className="h-4 w-4" />
                          <span>No typing required</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <BarChart3 className="h-4 w-4" />
                          <span>Automated financials</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <Award className="h-4 w-4" />
                          <span>Investor-ready</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  <Link href="/ai-business-plan">
                    <Button className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
                      <Sparkles className="h-4 w-4 mr-2" />
                      Start AI Generator
                      <ArrowRight className="h-4 w-4 ml-2" />
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        <Tabs defaultValue="overview" className="space-y-4 md:space-y-6">
          <TabsList className="grid w-full grid-cols-4 md:grid-cols-7 text-xs md:text-sm overflow-x-auto">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="business-plan">Business Plan</TabsTrigger>
            <TabsTrigger value="funding">Funding</TabsTrigger>
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
            <TabsTrigger value="resources">Resources</TabsTrigger>
            <TabsTrigger value="co-founder">ü§ù Co-Founder</TabsTrigger>
            <TabsTrigger value="ai-assistant">AI Assistant</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-6">
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {/* Business Plan Progress */}
              <Card className="lg:col-span-2">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5" />
                    Business Plan Progress
                  </CardTitle>
                  <CardDescription>Complete your business plan to improve funding readiness</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div className="flex justify-between text-sm">
                      <span>Executive Summary</span>
                      <span className="text-green-600 font-medium">Complete</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Market Analysis</span>
                      <span className="text-blue-600 font-medium">In Progress (75%)</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Financial Projections</span>
                      <span className="text-gray-500">Pending</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Marketing Strategy</span>
                      <span className="text-gray-500">Pending</span>
                    </div>
                  </div>
                  <div className="pt-4">
                    <div className="flex justify-between text-sm mb-2">
                      <span>Overall Progress</span>
                      <span>65%</span>
                    </div>
                    <Progress value={65} className="h-2" />
                  </div>
                  <Link href="/business-plans">
                    <Button className="w-full mt-4">
                      Continue Working
                      <ArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                  </Link>
                </CardContent>
              </Card>

              {/* Quick Actions */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Zap className="h-5 w-5" />
                    Quick Actions
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <Button variant="outline" className="w-full justify-start">
                    <Building2 className="mr-2 h-4 w-4" />
                    Update Company Profile
                  </Button>
                  <Button variant="outline" className="w-full justify-start">
                    <Users className="mr-2 h-4 w-4" />
                    Invite Team Members
                  </Button>
                  <Button variant="outline" className="w-full justify-start">
                    <BarChart3 className="mr-2 h-4 w-4" />
                    View Analytics
                  </Button>
                  <Button variant="outline" className="w-full justify-start">
                    <MessageSquare className="mr-2 h-4 w-4" />
                    Schedule Mentor Call
                  </Button>
                </CardContent>
              </Card>
            </div>

            {/* Recent Activity */}
            <Card>
              <CardHeader>
                <CardTitle>Recent Activity</CardTitle>
                <CardDescription>Stay updated on your latest progress and connections</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {recentActivity.map((activity, index) => {
                    const IconComponent = activity.icon;
                    return (
                      <div key={index} className="flex items-start space-x-4 p-3 rounded-lg hover:bg-gray-50">
                        <div className="p-2 rounded-lg bg-gray-100">
                          <IconComponent className={`h-4 w-4 ${activity.color}`} />
                        </div>
                        <div className="flex-1">
                          <p className="font-medium text-gray-900">{activity.title}</p>
                          <p className="text-sm text-gray-500">{activity.time}</p>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="funding" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <DollarSign className="h-5 w-5" />
                  Funding Opportunities
                </CardTitle>
                <CardDescription>Personalized funding matches based on your profile</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4">
                  {fundingOpportunities.map((opportunity, index) => (
                    <div key={index} className="p-4 border rounded-lg hover:shadow-md transition-shadow">
                      <div className="flex justify-between items-start mb-3">
                        <div>
                          <h3 className="font-semibold">{opportunity.name}</h3>
                          <p className="text-sm text-gray-600">{opportunity.type}</p>
                        </div>
                        <div className="text-right">
                          <Badge variant="outline" className="mb-2">
                            {opportunity.match}% Match
                          </Badge>
                          <p className="text-sm font-medium text-green-600">{opportunity.amount}</p>
                        </div>
                      </div>
                      <div className="flex flex-wrap gap-2 mb-3">
                        {opportunity.tags.map((tag, tagIndex) => (
                          <Badge key={tagIndex} variant="secondary" className="text-xs">
                            {tag}
                          </Badge>
                        ))}
                      </div>
                      <div className="flex justify-between items-center">
                        <p className="text-sm text-gray-500">
                          Deadline: {opportunity.deadline}
                        </p>
                        <Button size="sm">
                          Apply Now
                          <ArrowRight className="ml-1 h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="mentorship" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Users className="h-5 w-5" />
                  Recommended Mentors
                </CardTitle>
                <CardDescription>Connect with experienced entrepreneurs and industry experts</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {mentorRecommendations.map((mentor, index) => (
                    <div key={index} className="p-4 border rounded-lg hover:shadow-md transition-shadow">
                      <div className="flex items-center mb-3">
                        <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-teal-500 rounded-full flex items-center justify-center text-white font-semibold">
                          {mentor.name.split(' ').map(n => n[0]).join('')}
                        </div>
                        <div className="ml-3">
                          <h4 className="font-semibold">{mentor.name}</h4>
                          <p className="text-sm text-gray-600">{mentor.expertise}</p>
                        </div>
                      </div>
                      <p className="text-sm text-gray-600 mb-2">{mentor.company}</p>
                      <div className="flex justify-between items-center text-sm mb-3">
                        <span className="flex items-center">
                          <Award className="h-4 w-4 text-yellow-500 mr-1" />
                          {mentor.rating} ({mentor.sessions} sessions)
                        </span>
                        <span className="font-medium text-green-600">{mentor.price}</span>
                      </div>
                      <Button size="sm" className="w-full">
                        Book Session
                      </Button>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="learning" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <GraduationCap className="h-5 w-5" />
                  Recommended Learning
                </CardTitle>
                <CardDescription>Personalized educational content for entrepreneurs</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <GraduationCap className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Educational content coming soon</p>
                  <Link href="/education">
                    <Button className="mt-4">
                      Browse Learning Modules
                      <ArrowRight className="ml-2 h-4 w-4" />
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="network" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Globe className="h-5 w-5" />
                  Your Network
                </CardTitle>
                <CardDescription>Connect with investors, partners, and other entrepreneurs</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <Users className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500">Network features coming soon</p>
                  <Button className="mt-4">
                    Explore Network
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="co-founder" className="space-y-6">
          <CoFounderHub />
        </TabsContent>

        <TabsContent value="ai-assistant" className="space-y-6">
          <Card className="h-[600px]">
            <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Bot className="h-5 w-5 text-purple-600" />
                    Your AI Business Advisor
                  </CardTitle>
                  <CardDescription>
                    Get personalized advice, analyze your business plan, and make data-driven decisions
                  </CardDescription>
                </CardHeader>
            <CardContent className="p-0 h-full">
              <ChatInterface taskType="business_advisor" context={{
                      userType: "entrepreneur",
                      businessStage: "early-stage",
                      industry: "technology"
                    }}
                    className="h-full"/>
            </CardContent>
          </Card>
        </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

